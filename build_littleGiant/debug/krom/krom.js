// Generated by Haxe 4.0.5+f5259a9eb
(function ($hx_exports, $global) { "use strict";
$hx_exports["kha"] = $hx_exports["kha"] || {};
$hx_exports["kha"]["input"] = $hx_exports["kha"]["input"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var Main = function() { };
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
	iron_object_BoneAnimation.skinMaxBones = 8;
	iron_object_LightObject.cascadeCount = 4;
	iron_object_LightObject.cascadeSplitFactor = 0.800000011920929;
	armory_system_Starter.main("Scene",0,true,true,true,1920,1080,1,false,armory_renderpath_RenderPathCreator.get);
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		return null;
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.isObject = function(v) {
	if(v == null) {
		return false;
	}
	var t = typeof(v);
	if(!(t == "string" || t == "object" && v.__enum__ == null)) {
		if(t == "function") {
			return (v.__name__ || v.__ename__) != null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = "_UInt.UInt_Impl_";
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var iron_Trait = function() {
	this._render2D = null;
	this._render = null;
	this._lateUpdate = null;
	this._update = null;
	this._remove = null;
	this._init = null;
	this._add = null;
	this.name = "";
};
$hxClasses["iron.Trait"] = iron_Trait;
iron_Trait.__name__ = "iron.Trait";
iron_Trait.prototype = {
	name: null
	,object: null
	,_add: null
	,_init: null
	,_remove: null
	,_update: null
	,_lateUpdate: null
	,_render: null
	,_render2D: null
	,remove: function() {
		this.object.removeTrait(this);
	}
	,notifyOnAdd: function(f) {
		if(this._add == null) {
			this._add = [];
		}
		this._add.push(f);
	}
	,notifyOnInit: function(f) {
		if(this._init == null) {
			this._init = [];
		}
		this._init.push(f);
		iron_App.notifyOnInit(f);
	}
	,notifyOnRemove: function(f) {
		if(this._remove == null) {
			this._remove = [];
		}
		this._remove.push(f);
	}
	,notifyOnUpdate: function(f) {
		if(this._update == null) {
			this._update = [];
		}
		this._update.push(f);
		iron_App.notifyOnUpdate(f);
	}
	,removeUpdate: function(f) {
		HxOverrides.remove(this._update,f);
		iron_App.removeUpdate(f);
	}
	,notifyOnLateUpdate: function(f) {
		if(this._lateUpdate == null) {
			this._lateUpdate = [];
		}
		this._lateUpdate.push(f);
		iron_App.notifyOnLateUpdate(f);
	}
	,removeLateUpdate: function(f) {
		HxOverrides.remove(this._lateUpdate,f);
		iron_App.removeLateUpdate(f);
	}
	,notifyOnRender: function(f) {
		if(this._render == null) {
			this._render = [];
		}
		this._render.push(f);
		iron_App.notifyOnRender(f);
	}
	,removeRender: function(f) {
		HxOverrides.remove(this._render,f);
		iron_App.removeRender(f);
	}
	,notifyOnRender2D: function(f) {
		if(this._render2D == null) {
			this._render2D = [];
		}
		this._render2D.push(f);
		iron_App.notifyOnRender2D(f);
	}
	,removeRender2D: function(f) {
		HxOverrides.remove(this._render2D,f);
		iron_App.removeRender2D(f);
	}
	,__class__: iron_Trait
};
var arm_GenerateGame = function() {
	this.tickInterval = 0.0;
	this.currentTime = 0.0;
	this.currentTick = 0;
	this.totalTicks = 100;
	var _gthis = this;
	iron_Trait.call(this);
	this.notifyOnInit(function() {
		_gthis.tickInterval = _gthis.totalTime / _gthis.totalTicks * _gthis.speed;
		haxe_Log.trace("Generating Game. Tick interval: " + _gthis.tickInterval,{ fileName : "arm/GenerateGame.hx", lineNumber : 20, className : "arm.GenerateGame", methodName : "new"});
		var radius = 10;
		var data = arm_InitGame.inst.hexTilesData;
		var index = 0;
		var distance = 0;
		var temp = [];
		var _g = -radius;
		var _g1 = radius + 1;
		while(_g < _g1) {
			var q = _g++;
			var _g2 = -radius;
			var _g11 = radius + 1;
			while(_g2 < _g11) {
				var r = _g2++;
				var _g3 = -radius;
				var _g12 = radius + 1;
				while(_g3 < _g12) {
					var s = _g3++;
					if(q + r + s == 0) {
						if(q == 0 && r == 0 && s == 0) {
							arm_InitGame.inst.homeIndex = index;
							temp = [{ i : index, x : q, y : r, z : s, t : -1, v : 1000, p : 1000}];
							data.push(temp);
						} else {
							distance = (Math.abs(q) + Math.abs(r) + Math.abs(s)) / 2 | 0;
							temp = [{ i : index, x : q, y : r, z : s, t : Std.random(20), v : distance * 750 * (Math.random() + 0.5) | 0, p : 0}];
							data.push(temp);
						}
						++index;
					}
				}
			}
		}
		haxe_Log.trace(data[0][0].v,{ fileName : "arm/GenerateGame.hx", lineNumber : 50, className : "arm.GenerateGame", methodName : "new"});
	});
	this.notifyOnUpdate(function() {
		while(_gthis.currentTick <= _gthis.totalTicks && _gthis.currentTime > _gthis.currentTick * _gthis.tickInterval) _gthis.currentTick += 1;
		_gthis.currentTime += 0.016666666666666666 * iron_system_Time.scale;
		if(_gthis.currentTick > _gthis.totalTicks) {
			_gthis.object.remove();
		}
	});
	this.notifyOnRemove(function() {
		iron_Scene.active.spawnObject("contGame",null,function(o) {
		});
	});
};
$hxClasses["arm.GenerateGame"] = arm_GenerateGame;
arm_GenerateGame.__name__ = "arm.GenerateGame";
arm_GenerateGame.__super__ = iron_Trait;
arm_GenerateGame.prototype = $extend(iron_Trait.prototype,{
	speed: null
	,totalTicks: null
	,totalTime: null
	,currentTick: null
	,currentTime: null
	,tickInterval: null
	,__class__: arm_GenerateGame
});
var arm_InitGame = function() {
	this.hexTilesData = [];
	this.hexTilesObjects = new haxe_ds_List();
	var _gthis = this;
	iron_Trait.call(this);
	arm_InitGame.inst = this;
	this.notifyOnInit(function() {
		var world = iron_Scene.active.world;
		world.probe.irradiance[0] = 0.3;
		world.probe.irradiance[1] = 0.8;
		world.probe.irradiance[2] = 1.0;
		world.probe.raw.strength = 1.0;
	});
	this.notifyOnUpdate(function() {
		_gthis.object.remove();
	});
	this.notifyOnRemove(function() {
		iron_Scene.active.spawnObject("contMainMenu",null,function(o) {
		});
	});
};
$hxClasses["arm.InitGame"] = arm_InitGame;
arm_InitGame.__name__ = "arm.InitGame";
arm_InitGame.__super__ = iron_Trait;
arm_InitGame.prototype = $extend(iron_Trait.prototype,{
	hexTilesObjects: null
	,hexTilesData: null
	,homeIndex: null
	,difficulty: null
	,music1: null
	,music2: null
	,sfx1: null
	,sfx2: null
	,ambience: null
	,__class__: arm_InitGame
});
var arm_MainGame = function() {
	iron_Trait.call(this);
	this.notifyOnInit(function() {
		haxe_Log.trace("Welcome to the main game",{ fileName : "arm/MainGame.hx", lineNumber : 8, className : "arm.MainGame", methodName : "new"});
	});
};
$hxClasses["arm.MainGame"] = arm_MainGame;
arm_MainGame.__name__ = "arm.MainGame";
arm_MainGame.__super__ = iron_Trait;
arm_MainGame.prototype = $extend(iron_Trait.prototype,{
	__class__: arm_MainGame
});
var arm_MainMenu = function() {
	this.winH = 0;
	this.winW = 0;
	var _gthis = this;
	iron_Trait.call(this);
	this.notifyOnInit(function() {
		_gthis.canvas = iron_Scene.active.getTrait(armory_trait_internal_CanvasScript);
		_gthis.canvas.getElement("contMainMenu").visible = true;
		if(arm_InitGame.inst.music1 == null) {
			iron_data_Data.getSound("Music/BrightGalaxy.wav",function(sound) {
				sound.sampleRate = 40200;
				arm_InitGame.inst.music1 = iron_system_Audio.play(sound,true,true);
				arm_InitGame.inst.music1.set_volume(1.0);
			});
		}
		armory_system_Event.add("playgame",$bind(_gthis,_gthis.startGame));
		armory_system_Event.add("difficulty",$bind(_gthis,_gthis.difficulty));
		_gthis.difficulty();
	});
	this.notifyOnUpdate(function() {
		if(kha_System.windowWidth() != _gthis.winW || kha_System.windowHeight() != _gthis.winH) {
			haxe_Log.trace("Window dimensions changed to (" + kha_System.windowWidth() + "x" + kha_System.windowHeight() + ")",{ fileName : "arm/MainMenu.hx", lineNumber : 39, className : "arm.MainMenu", methodName : "new"});
			_gthis.winW = kha_System.windowWidth();
			_gthis.winH = kha_System.windowHeight();
			var MM = _gthis.canvas.getElement("contMainMenu");
			MM.x = _gthis.winW / 2;
			_gthis.canvas.getElement("mmTitle").y = _gthis.winH / 10;
			_gthis.canvas.getElement("butPlay").y = _gthis.winH / 2;
			var tmp = _gthis.winH / 2;
			_gthis.canvas.getElement("butPlayOutline").y = tmp - 7;
			var tmp1 = _gthis.winH / 2;
			_gthis.canvas.getElement("diffRadio").y = tmp1 + 81;
			var tmp2 = _gthis.winH / 2 + 80;
			_gthis.canvas.getElement("diffOutline").y = tmp2 - 6;
			var tmp3 = _gthis.winH / 2;
			_gthis.canvas.getElement("diffText1").y = tmp3 + 130;
			var tmp4 = _gthis.winH / 2;
			_gthis.canvas.getElement("diffText2").y = tmp4 + 160;
			var tmp5 = _gthis.winH / 2;
			_gthis.canvas.getElement("diffText3").y = tmp5 + 190;
			var tmp6 = _gthis.winH / 2;
			_gthis.canvas.getElement("diffText4").y = tmp6 + 220;
		}
	});
	this.notifyOnRemove(function() {
		_gthis.canvas.getElement("contMainMenu").visible = false;
		arm_InitGame.inst.difficulty = _gthis.canvas.getElement("diffRadio").text;
		iron_Scene.active.spawnObject("contGenerateGame",null,function(o) {
		});
	});
};
$hxClasses["arm.MainMenu"] = arm_MainMenu;
arm_MainMenu.__name__ = "arm.MainMenu";
arm_MainMenu.__super__ = iron_Trait;
arm_MainMenu.prototype = $extend(iron_Trait.prototype,{
	canvas: null
	,winW: null
	,winH: null
	,startGame: function() {
		haxe_Log.trace("Start the game!",{ fileName : "arm/MainMenu.hx", lineNumber : 64, className : "arm.MainMenu", methodName : "startGame"});
		this.canvas.getElement("contMainMenu").visible = false;
		this.object.remove();
	}
	,difficulty: function() {
		if(this.canvas.getElement("diffRadio").text == "STANDARD") {
			this.canvas.getElement("diffRadio").text = "HARD";
			this.canvas.getElement("diffText1").text = "Mass multiplier x0.75";
		} else if(this.canvas.getElement("diffRadio").text == "EASY") {
			this.canvas.getElement("diffRadio").text = "STANDARD";
			this.canvas.getElement("diffText1").text = "Mass multiplier x1.0";
		} else {
			this.canvas.getElement("diffRadio").text = "EASY";
			this.canvas.getElement("diffText1").text = "Mass multiplier x1.5";
		}
	}
	,__class__: arm_MainMenu
});
var armory_data_Config = function() { };
$hxClasses["armory.data.Config"] = armory_data_Config;
armory_data_Config.__name__ = "armory.data.Config";
armory_data_Config.load = function(done) {
	try {
		iron_data_Data.getBlob("config.arm",function(blob) {
			armory_data_Config.configLoaded = true;
			armory_data_Config.raw = JSON.parse(blob.toString());
			done();
		});
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		done();
	}
};
armory_data_Config.save = function() {
	var path = iron_data_Data.dataPath + "config.arm";
	var bytes = haxe_io_Bytes.ofString(JSON.stringify(armory_data_Config.raw));
	Krom.fileSaveBytes(path,bytes.b.bufferValue);
};
var armory_logicnode_LogicNode = function(tree) {
	this.name = "";
	this.outputs = [];
	this.inputs = [];
	this.tree = tree;
};
$hxClasses["armory.logicnode.LogicNode"] = armory_logicnode_LogicNode;
armory_logicnode_LogicNode.__name__ = "armory.logicnode.LogicNode";
armory_logicnode_LogicNode.prototype = {
	tree: null
	,inputs: null
	,outputs: null
	,name: null
	,watch: function(b) {
		var nodes = armory_trait_internal_DebugConsole.watchNodes;
		if(b) {
			nodes.push(this);
		} else {
			HxOverrides.remove(nodes,this);
		}
	}
	,addInput: function(node,from) {
		this.inputs.push(new armory_logicnode_LogicNodeInput(node,from));
	}
	,addOutputs: function(nodes) {
		this.outputs.push(nodes);
	}
	,run: function(from) {
	}
	,runOutput: function(i) {
		if(i >= this.outputs.length) {
			return;
		}
		var _g = 0;
		var _g1 = this.outputs[i];
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g11 = o.inputs.length;
			while(_g2 < _g11) {
				var j = _g2++;
				if(o.inputs[j].node == this) {
					o.run(j);
					break;
				}
			}
		}
	}
	,get: function(from) {
		return this;
	}
	,set: function(value) {
	}
	,__class__: armory_logicnode_LogicNode
};
var armory_logicnode_LogicNodeInput = function(node,from) {
	this.node = node;
	this.from = from;
};
$hxClasses["armory.logicnode.LogicNodeInput"] = armory_logicnode_LogicNodeInput;
armory_logicnode_LogicNodeInput.__name__ = "armory.logicnode.LogicNodeInput";
armory_logicnode_LogicNodeInput.prototype = {
	node: null
	,from: null
	,get: function() {
		return this.node.get(this.from);
	}
	,set: function(value) {
		this.node.set(value);
	}
	,__class__: armory_logicnode_LogicNodeInput
};
var armory_logicnode_LogicTree = function() {
	this.paused = false;
	this.loopBreak = false;
	iron_Trait.call(this);
};
$hxClasses["armory.logicnode.LogicTree"] = armory_logicnode_LogicTree;
armory_logicnode_LogicTree.__name__ = "armory.logicnode.LogicTree";
armory_logicnode_LogicTree.__super__ = iron_Trait;
armory_logicnode_LogicTree.prototype = $extend(iron_Trait.prototype,{
	loopBreak: null
	,add: function() {
	}
	,paused: null
	,pause: function() {
		if(this.paused) {
			return;
		}
		this.paused = true;
		if(this._update != null) {
			var _g = 0;
			var _g1 = this._update;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				iron_App.removeUpdate(f);
			}
		}
		if(this._lateUpdate != null) {
			var _g2 = 0;
			var _g11 = this._lateUpdate;
			while(_g2 < _g11.length) {
				var f1 = _g11[_g2];
				++_g2;
				iron_App.removeLateUpdate(f1);
			}
		}
	}
	,resume: function() {
		if(!this.paused) {
			return;
		}
		this.paused = false;
		if(this._update != null) {
			var _g = 0;
			var _g1 = this._update;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				iron_App.notifyOnUpdate(f);
			}
		}
		if(this._lateUpdate != null) {
			var _g2 = 0;
			var _g11 = this._lateUpdate;
			while(_g2 < _g11.length) {
				var f1 = _g11[_g2];
				++_g2;
				iron_App.notifyOnLateUpdate(f1);
			}
		}
	}
	,__class__: armory_logicnode_LogicTree
});
var armory_object_TransformExtension = function() { };
$hxClasses["armory.object.TransformExtension"] = armory_object_TransformExtension;
armory_object_TransformExtension.__name__ = "armory.object.TransformExtension";
armory_object_TransformExtension.overlap = function(t1,t2) {
	if(t1.world.self._30 + t1.dim.x / 2 > t2.world.self._30 - t2.dim.x / 2 && t1.world.self._30 - t1.dim.x / 2 < t2.world.self._30 + t2.dim.x / 2 && t1.world.self._31 + t1.dim.y / 2 > t2.world.self._31 - t2.dim.y / 2 && t1.world.self._31 - t1.dim.y / 2 < t2.world.self._31 + t2.dim.y / 2 && t1.world.self._32 + t1.dim.z / 2 > t2.world.self._32 - t2.dim.z / 2) {
		return t1.world.self._32 - t1.dim.z / 2 < t2.world.self._32 + t2.dim.z / 2;
	} else {
		return false;
	}
};
armory_object_TransformExtension.getWorldPosition = function(t) {
	return new iron_math_Vec4(t.world.self._30,t.world.self._31,t.world.self._32,1.0);
};
armory_object_TransformExtension.getWorldVecFromLocal = function(t,localVec) {
	var _this = new iron_math_Vec4(localVec.x,localVec.y,localVec.z,localVec.w);
	var m = t.worldUnpack;
	var x = _this.x;
	var y = _this.y;
	var z = _this.z;
	var w = _this.w;
	_this.x = m.self._00 * x + m.self._10 * y + m.self._20 * z + m.self._30 * w;
	_this.y = m.self._01 * x + m.self._11 * y + m.self._21 * z + m.self._31 * w;
	_this.z = m.self._02 * x + m.self._12 * y + m.self._22 * z + m.self._32 * w;
	_this.w = m.self._03 * x + m.self._13 * y + m.self._23 * z + m.self._33 * w;
	return _this;
};
armory_object_TransformExtension.getLocalVecFromWorld = function(t,worldVec) {
	var _this = new iron_math_Vec4(worldVec.x,worldVec.y,worldVec.z,worldVec.w);
	var _this1 = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	var m = t.worldUnpack;
	var a00 = m.self._00;
	var a01 = m.self._01;
	var a02 = m.self._02;
	var a03 = m.self._03;
	var a10 = m.self._10;
	var a11 = m.self._11;
	var a12 = m.self._12;
	var a13 = m.self._13;
	var a20 = m.self._20;
	var a21 = m.self._21;
	var a22 = m.self._22;
	var a23 = m.self._23;
	var a30 = m.self._30;
	var a31 = m.self._31;
	var a32 = m.self._32;
	var a33 = m.self._33;
	var b00 = a00 * a11 - a01 * a10;
	var b01 = a00 * a12 - a02 * a10;
	var b02 = a00 * a13 - a03 * a10;
	var b03 = a01 * a12 - a02 * a11;
	var b04 = a01 * a13 - a03 * a11;
	var b05 = a02 * a13 - a03 * a12;
	var b06 = a20 * a31 - a21 * a30;
	var b07 = a20 * a32 - a22 * a30;
	var b08 = a20 * a33 - a23 * a30;
	var b09 = a21 * a32 - a22 * a31;
	var b10 = a21 * a33 - a23 * a31;
	var b11 = a22 * a33 - a23 * a32;
	var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
	var m1;
	if(det == 0.0) {
		_this1.self._00 = 1.0;
		_this1.self._01 = 0.0;
		_this1.self._02 = 0.0;
		_this1.self._03 = 0.0;
		_this1.self._10 = 0.0;
		_this1.self._11 = 1.0;
		_this1.self._12 = 0.0;
		_this1.self._13 = 0.0;
		_this1.self._20 = 0.0;
		_this1.self._21 = 0.0;
		_this1.self._22 = 1.0;
		_this1.self._23 = 0.0;
		_this1.self._30 = 0.0;
		_this1.self._31 = 0.0;
		_this1.self._32 = 0.0;
		_this1.self._33 = 1.0;
		m1 = _this1;
	} else {
		det = 1.0 / det;
		_this1.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
		_this1.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
		_this1.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
		_this1.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
		_this1.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
		_this1.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
		_this1.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
		_this1.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
		_this1.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
		_this1.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
		_this1.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
		_this1.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
		_this1.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
		_this1.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
		_this1.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
		_this1.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
		m1 = _this1;
	}
	var x = _this.x;
	var y = _this.y;
	var z = _this.z;
	var w = _this.w;
	_this.x = m1.self._00 * x + m1.self._10 * y + m1.self._20 * z + m1.self._30 * w;
	_this.y = m1.self._01 * x + m1.self._11 * y + m1.self._21 * z + m1.self._31 * w;
	_this.z = m1.self._02 * x + m1.self._12 * y + m1.self._22 * z + m1.self._32 * w;
	_this.w = m1.self._03 * x + m1.self._13 * y + m1.self._23 * z + m1.self._33 * w;
	return _this;
};
var armory_object_Uniforms = function() { };
$hxClasses["armory.object.Uniforms"] = armory_object_Uniforms;
armory_object_Uniforms.__name__ = "armory.object.Uniforms";
armory_object_Uniforms.register = function() {
	iron_object_Uniforms.externalTextureLinks = [armory_object_Uniforms.textureLink];
	iron_object_Uniforms.externalVec3Links = [armory_object_Uniforms.vec3Link];
	iron_object_Uniforms.externalFloatLinks = [armory_object_Uniforms.floatLink];
};
armory_object_Uniforms.textureLink = function(object,mat,link) {
	return null;
};
armory_object_Uniforms.vec3Link = function(object,mat,link) {
	var v = null;
	return v;
};
armory_object_Uniforms.floatLink = function(object,mat,link) {
	if(link == "_debugFloat") {
		return armory_trait_internal_DebugConsole.debugFloat;
	}
	return null;
};
var armory_renderpath_Inc = function() { };
$hxClasses["armory.renderpath.Inc"] = armory_renderpath_Inc;
armory_renderpath_Inc.__name__ = "armory.renderpath.Inc";
armory_renderpath_Inc.init = function(_path) {
	armory_renderpath_Inc.path = _path;
	var config = armory_data_Config.raw;
	var _g = 0;
	var _g1 = iron_Scene.active.lights;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		l.data.raw.shadowmap_size = l.data.raw.type == "sun" ? config.rp_shadowmap_cascade : config.rp_shadowmap_cube;
	}
	armory_renderpath_Inc.superSample = config.rp_supersample;
};
armory_renderpath_Inc.bindShadowMap = function() {
	var _g = 0;
	var _g1 = iron_Scene.active.lights;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(!l.visible || !l.data.raw.cast_shadow || l.data.raw.type != "sun") {
			continue;
		}
		var n = "shadowMap";
		armory_renderpath_Inc.path.bindTarget(n,n);
		break;
	}
	var _g2 = 0;
	var _g3 = armory_renderpath_Inc.pointIndex;
	while(_g2 < _g3) {
		var i = _g2++;
		var n1 = "shadowMapPoint[" + i + "]";
		armory_renderpath_Inc.path.bindTarget(n1,n1);
	}
	var _g4 = 0;
	var _g5 = armory_renderpath_Inc.spotIndex;
	while(_g4 < _g5) {
		var i1 = _g4++;
		var n2 = "shadowMapSpot[" + i1 + "]";
		armory_renderpath_Inc.path.bindTarget(n2,n2);
	}
};
armory_renderpath_Inc.shadowMapName = function(l) {
	if(l.data.raw.type == "sun") {
		return "shadowMap";
	}
	if(l.data.raw.type == "point") {
		return "shadowMapPoint[" + armory_renderpath_Inc.pointIndex + "]";
	} else {
		return "shadowMapSpot[" + armory_renderpath_Inc.spotIndex + "]";
	}
};
armory_renderpath_Inc.getShadowMap = function(l) {
	var target = armory_renderpath_Inc.shadowMapName(l);
	var _this = armory_renderpath_Inc.path.renderTargets;
	var rt = __map_reserved[target] != null ? _this.getReserved(target) : _this.h[target];
	if(rt == null) {
		if(armory_renderpath_Inc.path.light.data.raw.shadowmap_cube) {
			var size = armory_renderpath_Inc.path.light.data.raw.shadowmap_size;
			var t = new iron_RenderTargetRaw();
			t.name = target;
			t.width = size;
			t.height = size;
			t.format = "DEPTH16";
			t.is_cubemap = true;
			rt = armory_renderpath_Inc.path.createRenderTarget(t);
		} else {
			var sizew = armory_renderpath_Inc.path.light.data.raw.shadowmap_size;
			var sizeh = sizew;
			if(l.data.raw.type == "sun") {
				sizew *= iron_object_LightObject.cascadeCount;
			}
			var t1 = new iron_RenderTargetRaw();
			t1.name = target;
			t1.width = sizew;
			t1.height = sizeh;
			t1.format = "DEPTH16";
			rt = armory_renderpath_Inc.path.createRenderTarget(t1);
		}
	}
	return target;
};
armory_renderpath_Inc.drawShadowMap = function() {
	armory_renderpath_Inc.pointIndex = 0;
	armory_renderpath_Inc.spotIndex = 0;
	var _g = 0;
	var _g1 = iron_Scene.active.lights;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(!l.visible || !l.data.raw.cast_shadow) {
			continue;
		}
		armory_renderpath_Inc.path.light = l;
		var shadowmap = armory_renderpath_Inc.getShadowMap(l);
		var faces = l.data.raw.shadowmap_cube ? 6 : 1;
		var _g2 = 0;
		var _g11 = faces;
		while(_g2 < _g11) {
			var i = _g2++;
			if(faces > 1) {
				armory_renderpath_Inc.path.currentFace = i;
			}
			armory_renderpath_Inc.path.setTarget(shadowmap);
			armory_renderpath_Inc.path.clearTarget(null,1.0);
			armory_renderpath_Inc.path.drawMeshes("shadowmap");
		}
		armory_renderpath_Inc.path.currentFace = -1;
		if(l.data.raw.type == "point") {
			armory_renderpath_Inc.pointIndex++;
		} else if(l.data.raw.type == "spot" || l.data.raw.type == "area") {
			armory_renderpath_Inc.spotIndex++;
		}
	}
};
armory_renderpath_Inc.applyConfig = function() {
	var config = armory_data_Config.raw;
	var l = armory_renderpath_Inc.path.light;
	if(l.data.raw.type == "sun" && l.data.raw.shadowmap_size != config.rp_shadowmap_cascade) {
		l.data.raw.shadowmap_size = config.rp_shadowmap_cascade;
		var _this = armory_renderpath_Inc.path.renderTargets;
		var rt = __map_reserved["shadowMap"] != null ? _this.getReserved("shadowMap") : _this.h["shadowMap"];
		if(rt != null) {
			rt.unload();
			armory_renderpath_Inc.path.renderTargets.remove("shadowMap");
		}
	} else if(l.data.raw.shadowmap_size != config.rp_shadowmap_cube) {
		l.data.raw.shadowmap_size = config.rp_shadowmap_cube;
		var _this1 = armory_renderpath_Inc.path.renderTargets;
		var rt1 = __map_reserved["shadowMapCube"] != null ? _this1.getReserved("shadowMapCube") : _this1.h["shadowMapCube"];
		if(rt1 != null) {
			rt1.unload();
			armory_renderpath_Inc.path.renderTargets.remove("shadowMapCube");
		}
	}
	if(armory_renderpath_Inc.superSample != config.rp_supersample) {
		armory_renderpath_Inc.superSample = config.rp_supersample;
		var _this2 = armory_renderpath_Inc.path.renderTargets;
		var rt2 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
		while(rt2.hasNext()) {
			var rt3 = rt2.next();
			if(rt3.raw.width == 0 && rt3.raw.scale != null) {
				rt3.raw.scale = armory_renderpath_Inc.superSample;
			}
		}
		armory_renderpath_Inc.path.resize();
	}
};
armory_renderpath_Inc.getCubeSize = function() {
	return 512;
};
armory_renderpath_Inc.getCascadeSize = function() {
	return 1024;
};
armory_renderpath_Inc.getVoxelRes = function() {
	return 0;
};
armory_renderpath_Inc.getVoxelResZ = function() {
	return 0.0;
};
armory_renderpath_Inc.getSuperSampling = function() {
	return armory_renderpath_Inc.superSample;
};
armory_renderpath_Inc.getHdrFormat = function() {
	return "RGBA64";
};
armory_renderpath_Inc.getDisplayp = function() {
	return null;
};
var armory_renderpath_RenderPathDeferred = function() { };
$hxClasses["armory.renderpath.RenderPathDeferred"] = armory_renderpath_RenderPathDeferred;
armory_renderpath_RenderPathDeferred.__name__ = "armory.renderpath.RenderPathDeferred";
armory_renderpath_RenderPathDeferred.setTargetMeshes = function() {
	armory_renderpath_RenderPathDeferred.path.setTarget("gbuffer0",["gbuffer1"]);
};
armory_renderpath_RenderPathDeferred.drawMeshes = function() {
	armory_renderpath_RenderPathDeferred.path.drawMeshes("mesh");
};
armory_renderpath_RenderPathDeferred.applyConfig = function() {
	armory_renderpath_Inc.applyConfig();
};
armory_renderpath_RenderPathDeferred.init = function(_path) {
	armory_renderpath_RenderPathDeferred.path = _path;
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/world_pass/world_pass");
	armory_renderpath_RenderPathDeferred.path.createDepthBuffer("main","DEPTH24");
	var t = new iron_RenderTargetRaw();
	t.name = "gbuffer0";
	t.width = 0;
	t.height = 0;
	t.displayp = null;
	t.format = "RGBA64";
	t.scale = armory_renderpath_Inc.superSample;
	t.depth_buffer = "main";
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t);
	var t1 = new iron_RenderTargetRaw();
	t1.name = "tex";
	t1.width = 0;
	t1.height = 0;
	t1.displayp = null;
	t1.format = "RGBA64";
	t1.scale = armory_renderpath_Inc.superSample;
	t1.depth_buffer = "main";
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t1);
	var t2 = new iron_RenderTargetRaw();
	t2.name = "buf";
	t2.width = 0;
	t2.height = 0;
	t2.displayp = null;
	t2.format = "RGBA64";
	t2.scale = armory_renderpath_Inc.superSample;
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t2);
	var t3 = new iron_RenderTargetRaw();
	t3.name = "gbuffer1";
	t3.width = 0;
	t3.height = 0;
	t3.displayp = null;
	t3.format = "RGBA64";
	t3.scale = armory_renderpath_Inc.superSample;
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t3);
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/deferred_light/deferred_light");
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/ssao_pass/ssao_pass");
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/blur_edge_pass/blur_edge_pass_x");
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/blur_edge_pass/blur_edge_pass_y");
	var t4 = new iron_RenderTargetRaw();
	t4.name = "singlea";
	t4.width = 0;
	t4.height = 0;
	t4.displayp = null;
	t4.format = "R8";
	t4.scale = armory_renderpath_Inc.superSample;
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t4);
	var t5 = new iron_RenderTargetRaw();
	t5.name = "singleb";
	t5.width = 0;
	t5.height = 0;
	t5.displayp = null;
	t5.format = "R8";
	t5.scale = armory_renderpath_Inc.superSample;
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t5);
	var t6 = new iron_RenderTargetRaw();
	t6.name = "bufa";
	t6.width = 0;
	t6.height = 0;
	t6.displayp = null;
	t6.format = "RGBA32";
	t6.scale = armory_renderpath_Inc.superSample;
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t6);
	var t7 = new iron_RenderTargetRaw();
	t7.name = "bufb";
	t7.width = 0;
	t7.height = 0;
	t7.displayp = null;
	t7.format = "RGBA32";
	t7.scale = armory_renderpath_Inc.superSample;
	armory_renderpath_RenderPathDeferred.path.createRenderTarget(t7);
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/compositor_pass/compositor_pass");
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/smaa_edge_detect/smaa_edge_detect");
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/smaa_blend_weight/smaa_blend_weight");
	armory_renderpath_RenderPathDeferred.path.loadShader("shader_datas/smaa_neighborhood_blend/smaa_neighborhood_blend");
	var t8 = new iron_RenderTargetRaw();
	t8.name = "empty_white";
	t8.width = 1;
	t8.height = 1;
	t8.format = "R8";
	var rt = new iron_RenderTarget(t8);
	var b = new haxe_io_Bytes(new ArrayBuffer(1));
	b.b[0] = 255;
	rt.image = kha_Image.fromBytes(b,t8.width,t8.height,1);
	var key = t8.name;
	var _this = armory_renderpath_RenderPathDeferred.path.renderTargets;
	if(__map_reserved[key] != null) {
		_this.setReserved(key,rt);
	} else {
		_this.h[key] = rt;
	}
};
armory_renderpath_RenderPathDeferred.commands = function() {
	armory_renderpath_RenderPathDeferred.path.setTarget("gbuffer0");
	armory_renderpath_RenderPathDeferred.path.clearTarget(null,1.0);
	armory_renderpath_RenderPathCreator.setTargetMeshes();
	armory_renderpath_RenderPathCreator.drawMeshes();
	if(armory_data_Config.raw.rp_ssgi != false) {
		armory_renderpath_RenderPathDeferred.path.setTarget("singlea");
		armory_renderpath_RenderPathDeferred.path.bindTarget("_main","gbufferD");
		armory_renderpath_RenderPathDeferred.path.bindTarget("gbuffer0","gbuffer0");
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/ssao_pass/ssao_pass");
		armory_renderpath_RenderPathDeferred.path.setTarget("singleb");
		armory_renderpath_RenderPathDeferred.path.bindTarget("singlea","tex");
		armory_renderpath_RenderPathDeferred.path.bindTarget("gbuffer0","gbuffer0");
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/blur_edge_pass/blur_edge_pass_x");
		armory_renderpath_RenderPathDeferred.path.setTarget("singlea");
		armory_renderpath_RenderPathDeferred.path.bindTarget("singleb","tex");
		armory_renderpath_RenderPathDeferred.path.bindTarget("gbuffer0","gbuffer0");
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/blur_edge_pass/blur_edge_pass_y");
	}
	armory_renderpath_Inc.drawShadowMap();
	armory_renderpath_RenderPathDeferred.path.setDepthFrom("tex","gbuffer1");
	armory_renderpath_RenderPathDeferred.path.setTarget("tex");
	armory_renderpath_RenderPathDeferred.path.bindTarget("_main","gbufferD");
	armory_renderpath_RenderPathDeferred.path.bindTarget("gbuffer0","gbuffer0");
	armory_renderpath_RenderPathDeferred.path.bindTarget("gbuffer1","gbuffer1");
	if(armory_data_Config.raw.rp_ssgi != false) {
		armory_renderpath_RenderPathDeferred.path.bindTarget("singlea","ssaotex");
	} else {
		armory_renderpath_RenderPathDeferred.path.bindTarget("empty_white","ssaotex");
	}
	var voxelao_pass = false;
	armory_renderpath_Inc.bindShadowMap();
	if(voxelao_pass) {
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/deferred_light/deferred_light_VoxelAOvar");
	} else {
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/deferred_light/deferred_light");
	}
	armory_renderpath_RenderPathDeferred.path.setDepthFrom("tex","gbuffer0");
	armory_renderpath_RenderPathDeferred.path.setTarget("tex");
	armory_renderpath_RenderPathDeferred.path.drawSkydome("shader_datas/world_pass/world_pass");
	var framebuffer = "";
	armory_renderpath_RenderPathCreator.finalTarget = armory_renderpath_RenderPathDeferred.path.currentTarget;
	var target = "";
	target = "buf";
	armory_renderpath_RenderPathDeferred.path.setTarget(target);
	armory_renderpath_RenderPathDeferred.path.bindTarget("tex","tex");
	var isProbe = false;
	if(!isProbe) {
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/compositor_pass/compositor_pass");
	} else {
		armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/copy_pass/copy_pass");
	}
	armory_renderpath_RenderPathDeferred.path.setTarget("bufa");
	armory_renderpath_RenderPathDeferred.path.clearTarget(0);
	armory_renderpath_RenderPathDeferred.path.bindTarget("buf","colorTex");
	armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/smaa_edge_detect/smaa_edge_detect");
	armory_renderpath_RenderPathDeferred.path.setTarget("bufb");
	armory_renderpath_RenderPathDeferred.path.clearTarget(0);
	armory_renderpath_RenderPathDeferred.path.bindTarget("bufa","edgesTex");
	armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/smaa_blend_weight/smaa_blend_weight");
	armory_renderpath_RenderPathDeferred.path.setTarget(framebuffer);
	armory_renderpath_RenderPathDeferred.path.bindTarget("buf","colorTex");
	armory_renderpath_RenderPathDeferred.path.bindTarget("bufb","blendTex");
	armory_renderpath_RenderPathDeferred.path.drawShader("shader_datas/smaa_neighborhood_blend/smaa_neighborhood_blend");
};
var armory_renderpath_RenderPathCreator = function() { };
$hxClasses["armory.renderpath.RenderPathCreator"] = armory_renderpath_RenderPathCreator;
armory_renderpath_RenderPathCreator.__name__ = "armory.renderpath.RenderPathCreator";
armory_renderpath_RenderPathCreator.get = function() {
	armory_renderpath_RenderPathCreator.path = new iron_RenderPath();
	armory_renderpath_Inc.init(armory_renderpath_RenderPathCreator.path);
	armory_renderpath_RenderPathDeferred.init(armory_renderpath_RenderPathCreator.path);
	armory_renderpath_RenderPathCreator.path.commands = armory_renderpath_RenderPathDeferred.commands;
	return armory_renderpath_RenderPathCreator.path;
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var armory_system_Event = function() { };
$hxClasses["armory.system.Event"] = armory_system_Event;
armory_system_Event.__name__ = "armory.system.Event";
armory_system_Event.send = function(name,mask) {
	if(mask == null) {
		mask = -1;
	}
	var entries = armory_system_Event.get(name);
	if(entries != null) {
		var _g = 0;
		while(_g < entries.length) {
			var e = entries[_g];
			++_g;
			if(mask == -1 || mask == e.mask) {
				e.onEvent();
			}
		}
	}
};
armory_system_Event.get = function(name) {
	var _this = armory_system_Event.events;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
armory_system_Event.add = function(name,onEvent,mask) {
	if(mask == null) {
		mask = -1;
	}
	var e = { name : name, onEvent : onEvent, mask : mask};
	var _this = armory_system_Event.events;
	var entries = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(entries != null) {
		entries.push(e);
	} else {
		var _this1 = armory_system_Event.events;
		var value = [e];
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,value);
		} else {
			_this1.h[name] = value;
		}
	}
	return e;
};
armory_system_Event.remove = function(name) {
	armory_system_Event.events.remove(name);
};
armory_system_Event.removeListener = function(event) {
	var key = event.name;
	var _this = armory_system_Event.events;
	var entries = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
	if(entries != null) {
		HxOverrides.remove(entries,event);
	}
};
var armory_system_Starter = function() { };
$hxClasses["armory.system.Starter"] = armory_system_Starter;
armory_system_Starter.__name__ = "armory.system.Starter";
armory_system_Starter.main = function(scene,mode,resize,min,max,w,h,msaa,vsync,getRenderPath) {
	var start = function() {
		if(armory_system_Starter.tasks > 0) {
			return;
		}
		if(armory_data_Config.raw == null) {
			armory_data_Config.raw = { };
		}
		var c = armory_data_Config.raw;
		if(c.window_mode == null) {
			c.window_mode = mode;
		}
		if(c.window_resizable == null) {
			c.window_resizable = resize;
		}
		if(c.window_minimizable == null) {
			c.window_minimizable = min;
		}
		if(c.window_maximizable == null) {
			c.window_maximizable = max;
		}
		if(c.window_w == null) {
			c.window_w = w;
		}
		if(c.window_h == null) {
			c.window_h = h;
		}
		if(c.window_scale == null) {
			c.window_scale = 1.0;
		}
		if(c.window_msaa == null) {
			c.window_msaa = msaa;
		}
		if(c.window_vsync == null) {
			c.window_vsync = vsync;
		}
		armory_object_Uniforms.register();
		var windowMode = c.window_mode == 0 ? 0 : 1;
		var windowFeatures = 0;
		if(c.window_resizable) {
			windowFeatures = windowFeatures | 1;
		}
		if(c.window_maximizable) {
			windowFeatures = windowFeatures | 4;
		}
		if(c.window_minimizable) {
			windowFeatures = windowFeatures | 2;
		}
		kha_System.start(new kha_SystemOptions("littleGiant",c.window_w,c.window_h,new kha_WindowOptions(null,null,null,null,null,null,null,windowFeatures,windowMode),new kha_FramebufferOptions(null,c.window_vsync,null,null,null,c.window_msaa)),function($window) {
			iron_App.init(function() {
				iron_Scene.setActive(scene,function(object) {
					iron_RenderPath.setActive(getRenderPath());
					iron_Scene.getRenderPath = getRenderPath;
				});
			});
		});
	};
	armory_system_Starter.tasks = 1;
	armory_system_Starter.tasks++;
	armory_data_Config.load(function() {
		armory_system_Starter.tasks--;
		start();
	});
	armory_system_Starter.tasks--;
	start();
};
var armory_trait_WalkNavigation = function() {
	this.ease = 1.0;
	this.yvec = new iron_math_Vec4();
	this.xvec = new iron_math_Vec4();
	this.dir = new iron_math_Vec4();
	this.speed = 5.0;
	iron_Trait.call(this);
	this.notifyOnInit($bind(this,this.init));
};
$hxClasses["armory.trait.WalkNavigation"] = armory_trait_WalkNavigation;
armory_trait_WalkNavigation.__name__ = "armory.trait.WalkNavigation";
armory_trait_WalkNavigation.__super__ = iron_Trait;
armory_trait_WalkNavigation.prototype = $extend(iron_Trait.prototype,{
	speed: null
	,dir: null
	,xvec: null
	,yvec: null
	,ease: null
	,camera: null
	,keyboard: null
	,gamepad: null
	,mouse: null
	,init: function() {
		this.keyboard = iron_system_Input.getKeyboard();
		this.gamepad = iron_system_Input.getGamepad();
		this.mouse = iron_system_Input.getMouse();
		try {
			this.camera = js_Boot.__cast(this.object , iron_object_CameraObject);
		} catch( msg ) {
			var msg1 = ((msg) instanceof js__$Boot_HaxeError) ? msg.val : msg;
			if(typeof(msg1) == "string") {
				haxe_Log.trace("Error occurred: " + msg1 + "\nWalkNavigation trait should be used with a camera object.",{ fileName : "Sources/armory/trait/WalkNavigation.hx", lineNumber : 38, className : "armory.trait.WalkNavigation", methodName : "init"});
			} else {
				throw msg;
			}
		}
		if(this.camera != null) {
			this.notifyOnUpdate($bind(this,this.update));
		}
	}
	,update: function() {
		if(!armory_trait_WalkNavigation.enabled || iron_system_Input.occupied) {
			return;
		}
		var moveForward = this.keyboard.down("w") || this.keyboard.down("up");
		var moveBackward = this.keyboard.down("s") || this.keyboard.down("down");
		var strafeLeft = this.keyboard.down("a") || this.keyboard.down("left");
		var strafeRight = this.keyboard.down("d") || this.keyboard.down("right");
		var strafeUp = this.keyboard.down("e");
		var strafeDown = this.keyboard.down("q");
		var fast = this.keyboard.down("shift") ? 2.0 : this.keyboard.down("alt") ? 0.5 : 1.0;
		if(this.gamepad != null) {
			var leftStickY = Math.abs(this.gamepad.leftStick.y) > 0.05;
			var leftStickX = Math.abs(this.gamepad.leftStick.x) > 0.05;
			var r1 = this.gamepad.down("r1") > 0.0;
			var l1 = this.gamepad.down("l1") > 0.0;
			var rightStickX = Math.abs(this.gamepad.rightStick.x) > 0.1;
			var rightStickY = Math.abs(this.gamepad.rightStick.y) > 0.1;
			if(leftStickY || leftStickX || r1 || l1 || rightStickX || rightStickY) {
				var _this = this.dir;
				_this.x = 0;
				_this.y = 0;
				_this.z = 0;
				_this.w = 1.0;
				if(leftStickY) {
					var _this1 = this.yvec;
					var _this2 = this.camera;
					var x = -_this2.transform.local.self._20;
					var y = -_this2.transform.local.self._21;
					var z = -_this2.transform.local.self._22;
					if(z == null) {
						z = 0.0;
					}
					if(y == null) {
						y = 0.0;
					}
					if(x == null) {
						x = 0.0;
					}
					var v_x = x;
					var v_y = y;
					var v_z = z;
					var v_w = 1.0;
					_this1.x = v_x;
					_this1.y = v_y;
					_this1.z = v_z;
					_this1.w = v_w;
					var _this3 = this.yvec;
					var f = this.gamepad.leftStick.y;
					_this3.x *= f;
					_this3.y *= f;
					_this3.z *= f;
					var _this4 = this.dir;
					var v = this.yvec;
					_this4.x += v.x;
					_this4.y += v.y;
					_this4.z += v.z;
				}
				if(leftStickX) {
					var _this5 = this.xvec;
					var _this6 = this.camera;
					var x1 = _this6.transform.local.self._00;
					var y1 = _this6.transform.local.self._01;
					var z1 = _this6.transform.local.self._02;
					if(z1 == null) {
						z1 = 0.0;
					}
					if(y1 == null) {
						y1 = 0.0;
					}
					if(x1 == null) {
						x1 = 0.0;
					}
					var v_x1 = x1;
					var v_y1 = y1;
					var v_z1 = z1;
					var v_w1 = 1.0;
					_this5.x = v_x1;
					_this5.y = v_y1;
					_this5.z = v_z1;
					_this5.w = v_w1;
					var _this7 = this.xvec;
					var f1 = this.gamepad.leftStick.x;
					_this7.x *= f1;
					_this7.y *= f1;
					_this7.z *= f1;
					var _this8 = this.dir;
					var v1 = this.xvec;
					_this8.x += v1.x;
					_this8.y += v1.y;
					_this8.z += v1.z;
				}
				if(r1) {
					var _this9 = this.dir;
					_this9.x += 0;
					_this9.y += 0;
					_this9.z += 1;
				}
				if(l1) {
					var _this10 = this.dir;
					_this10.x += 0;
					_this10.y += 0;
					_this10.z += -1;
				}
				var d = 0.016666666666666666 * iron_system_Time.scale * this.speed * fast;
				this.camera.transform.move(this.dir,d);
				if(rightStickX) {
					this.camera.transform.rotate(new iron_math_Vec4(0.0,0.0,1.0),-this.gamepad.rightStick.x / 15.0);
				}
				if(rightStickY) {
					var _this11 = this.camera;
					this.camera.transform.rotate(new iron_math_Vec4(_this11.transform.local.self._00,_this11.transform.local.self._01,_this11.transform.local.self._02),this.gamepad.rightStick.y / 15.0);
				}
			}
		}
		if(moveForward || moveBackward || strafeRight || strafeLeft || strafeUp || strafeDown) {
			this.ease += 0.016666666666666666 * iron_system_Time.scale * 15;
			if(this.ease > 1.0) {
				this.ease = 1.0;
			}
			var _this12 = this.dir;
			_this12.x = 0;
			_this12.y = 0;
			_this12.z = 0;
			_this12.w = 1.0;
			if(moveForward) {
				var _this13 = this.dir;
				var _this14 = this.camera;
				var x2 = -_this14.transform.local.self._20;
				var y2 = -_this14.transform.local.self._21;
				var z2 = -_this14.transform.local.self._22;
				if(z2 == null) {
					z2 = 0.0;
				}
				if(y2 == null) {
					y2 = 0.0;
				}
				if(x2 == null) {
					x2 = 0.0;
				}
				var inlVec4_x = x2;
				var inlVec4_y = y2;
				var inlVec4_z = z2;
				var inlVec4_w = 1.0;
				var _this15 = this.camera;
				var x3 = -_this15.transform.local.self._20;
				var y3 = -_this15.transform.local.self._21;
				var z3 = -_this15.transform.local.self._22;
				if(z3 == null) {
					z3 = 0.0;
				}
				if(y3 == null) {
					y3 = 0.0;
				}
				if(x3 == null) {
					x3 = 0.0;
				}
				var inlVec4_x1 = x3;
				var inlVec4_y1 = y3;
				var inlVec4_z1 = z3;
				var inlVec4_w1 = 1.0;
				var _this16 = this.camera;
				var x4 = -_this16.transform.local.self._20;
				var y4 = -_this16.transform.local.self._21;
				var z4 = -_this16.transform.local.self._22;
				if(z4 == null) {
					z4 = 0.0;
				}
				if(y4 == null) {
					y4 = 0.0;
				}
				if(x4 == null) {
					x4 = 0.0;
				}
				var inlVec4_x2 = x4;
				var inlVec4_y2 = y4;
				var inlVec4_z2 = z4;
				var inlVec4_w2 = 1.0;
				_this13.x += inlVec4_x;
				_this13.y += inlVec4_y1;
				_this13.z += inlVec4_z2;
			}
			if(moveBackward) {
				var _this17 = this.dir;
				var _this18 = this.camera;
				var x5 = -_this18.transform.local.self._20;
				var y5 = -_this18.transform.local.self._21;
				var z5 = -_this18.transform.local.self._22;
				if(z5 == null) {
					z5 = 0.0;
				}
				if(y5 == null) {
					y5 = 0.0;
				}
				if(x5 == null) {
					x5 = 0.0;
				}
				var inlVec4_x3 = x5;
				var inlVec4_y3 = y5;
				var inlVec4_z3 = z5;
				var inlVec4_w3 = 1.0;
				var _this19 = this.camera;
				var x6 = -_this19.transform.local.self._20;
				var y6 = -_this19.transform.local.self._21;
				var z6 = -_this19.transform.local.self._22;
				if(z6 == null) {
					z6 = 0.0;
				}
				if(y6 == null) {
					y6 = 0.0;
				}
				if(x6 == null) {
					x6 = 0.0;
				}
				var inlVec4_x4 = x6;
				var inlVec4_y4 = y6;
				var inlVec4_z4 = z6;
				var inlVec4_w4 = 1.0;
				var _this20 = this.camera;
				var x7 = -_this20.transform.local.self._20;
				var y7 = -_this20.transform.local.self._21;
				var z7 = -_this20.transform.local.self._22;
				if(z7 == null) {
					z7 = 0.0;
				}
				if(y7 == null) {
					y7 = 0.0;
				}
				if(x7 == null) {
					x7 = 0.0;
				}
				var inlVec4_x5 = x7;
				var inlVec4_y5 = y7;
				var inlVec4_z5 = z7;
				var inlVec4_w5 = 1.0;
				_this17.x += -inlVec4_x3;
				_this17.y += -inlVec4_y4;
				_this17.z += -inlVec4_z5;
			}
			if(strafeRight) {
				var _this21 = this.dir;
				var _this22 = this.camera;
				var x8 = _this22.transform.local.self._00;
				var y8 = _this22.transform.local.self._01;
				var z8 = _this22.transform.local.self._02;
				if(z8 == null) {
					z8 = 0.0;
				}
				if(y8 == null) {
					y8 = 0.0;
				}
				if(x8 == null) {
					x8 = 0.0;
				}
				var inlVec4_x6 = x8;
				var inlVec4_y6 = y8;
				var inlVec4_z6 = z8;
				var inlVec4_w6 = 1.0;
				var _this23 = this.camera;
				var x9 = _this23.transform.local.self._00;
				var y9 = _this23.transform.local.self._01;
				var z9 = _this23.transform.local.self._02;
				if(z9 == null) {
					z9 = 0.0;
				}
				if(y9 == null) {
					y9 = 0.0;
				}
				if(x9 == null) {
					x9 = 0.0;
				}
				var inlVec4_x7 = x9;
				var inlVec4_y7 = y9;
				var inlVec4_z7 = z9;
				var inlVec4_w7 = 1.0;
				var _this24 = this.camera;
				var x10 = _this24.transform.local.self._00;
				var y10 = _this24.transform.local.self._01;
				var z10 = _this24.transform.local.self._02;
				if(z10 == null) {
					z10 = 0.0;
				}
				if(y10 == null) {
					y10 = 0.0;
				}
				if(x10 == null) {
					x10 = 0.0;
				}
				var inlVec4_x8 = x10;
				var inlVec4_y8 = y10;
				var inlVec4_z8 = z10;
				var inlVec4_w8 = 1.0;
				_this21.x += inlVec4_x6;
				_this21.y += inlVec4_y7;
				_this21.z += inlVec4_z8;
			}
			if(strafeLeft) {
				var _this25 = this.dir;
				var _this26 = this.camera;
				var x11 = _this26.transform.local.self._00;
				var y11 = _this26.transform.local.self._01;
				var z11 = _this26.transform.local.self._02;
				if(z11 == null) {
					z11 = 0.0;
				}
				if(y11 == null) {
					y11 = 0.0;
				}
				if(x11 == null) {
					x11 = 0.0;
				}
				var inlVec4_x9 = x11;
				var inlVec4_y9 = y11;
				var inlVec4_z9 = z11;
				var inlVec4_w9 = 1.0;
				var _this27 = this.camera;
				var x12 = _this27.transform.local.self._00;
				var y12 = _this27.transform.local.self._01;
				var z12 = _this27.transform.local.self._02;
				if(z12 == null) {
					z12 = 0.0;
				}
				if(y12 == null) {
					y12 = 0.0;
				}
				if(x12 == null) {
					x12 = 0.0;
				}
				var inlVec4_x10 = x12;
				var inlVec4_y10 = y12;
				var inlVec4_z10 = z12;
				var inlVec4_w10 = 1.0;
				var _this28 = this.camera;
				var x13 = _this28.transform.local.self._00;
				var y13 = _this28.transform.local.self._01;
				var z13 = _this28.transform.local.self._02;
				if(z13 == null) {
					z13 = 0.0;
				}
				if(y13 == null) {
					y13 = 0.0;
				}
				if(x13 == null) {
					x13 = 0.0;
				}
				var inlVec4_x11 = x13;
				var inlVec4_y11 = y13;
				var inlVec4_z11 = z13;
				var inlVec4_w11 = 1.0;
				_this25.x += -inlVec4_x9;
				_this25.y += -inlVec4_y10;
				_this25.z += -inlVec4_z11;
			}
			if(strafeUp) {
				var _this29 = this.dir;
				_this29.x += 0;
				_this29.y += 0;
				_this29.z += 1;
			}
			if(strafeDown) {
				var _this30 = this.dir;
				_this30.x += 0;
				_this30.y += 0;
				_this30.z += -1;
			}
		} else {
			this.ease -= 0.016666666666666666 * iron_system_Time.scale * 20.0 * this.ease;
			if(this.ease < 0.0) {
				this.ease = 0.0;
			}
		}
		if(this.mouse.wheelDelta < 0) {
			this.speed *= 1.1;
		} else if(this.mouse.wheelDelta > 0) {
			this.speed *= 0.9;
			if(this.speed < 0.5) {
				this.speed = 0.5;
			}
		}
		var d1 = 0.016666666666666666 * iron_system_Time.scale * this.speed * fast * this.ease;
		if(d1 > 0.0) {
			this.camera.transform.move(this.dir,d1);
		}
		if(this.mouse.down()) {
			this.camera.transform.rotate(new iron_math_Vec4(0.0,0.0,1.0),-this.mouse.movementX / 200);
			var _this31 = this.camera;
			this.camera.transform.rotate(new iron_math_Vec4(_this31.transform.local.self._00,_this31.transform.local.self._01,_this31.transform.local.self._02),-this.mouse.movementY / 200);
		}
	}
	,__class__: armory_trait_WalkNavigation
});
var iron_App = function(_appReady) {
	_appReady();
	kha_System.notifyOnFrames(iron_App.render);
	kha_Scheduler.addTimeTask(iron_App.update,0,0.016666666666666666 * iron_system_Time.scale);
};
$hxClasses["iron.App"] = iron_App;
iron_App.__name__ = "iron.App";
iron_App.w = function() {
	return kha_System.windowWidth();
};
iron_App.h = function() {
	return kha_System.windowHeight();
};
iron_App.x = function() {
	return 0;
};
iron_App.y = function() {
	return 0;
};
iron_App.init = function(_appReady) {
	new iron_App(_appReady);
};
iron_App.reset = function() {
	iron_App.traitInits = [];
	iron_App.traitUpdates = [];
	iron_App.traitLateUpdates = [];
	iron_App.traitRenders = [];
	iron_App.traitRenders2D = [];
	if(iron_App.onResets != null) {
		var _g = 0;
		var _g1 = iron_App.onResets;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f();
		}
	}
};
iron_App.update = function() {
	if(iron_Scene.active == null || !iron_Scene.active.ready) {
		return;
	}
	if(iron_App.pauseUpdates) {
		return;
	}
	iron_App.startTime = kha_Scheduler.realTime();
	iron_Scene.active.updateFrame();
	var i = 0;
	var l = iron_App.traitUpdates.length;
	while(i < l) {
		if(iron_App.traitInits.length > 0) {
			var _g = 0;
			var _g1 = iron_App.traitInits;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if(iron_App.traitInits.length > 0) {
					f();
				} else {
					break;
				}
			}
			iron_App.traitInits.splice(0,iron_App.traitInits.length);
		}
		iron_App.traitUpdates[i]();
		if(l <= iron_App.traitUpdates.length) {
			++i;
		} else {
			l = iron_App.traitUpdates.length;
		}
	}
	i = 0;
	l = iron_App.traitLateUpdates.length;
	while(i < l) {
		iron_App.traitLateUpdates[i]();
		if(l <= iron_App.traitLateUpdates.length) {
			++i;
		} else {
			l = iron_App.traitLateUpdates.length;
		}
	}
	if(iron_App.onEndFrames != null) {
		var _g2 = 0;
		var _g11 = iron_App.onEndFrames;
		while(_g2 < _g11.length) {
			var f1 = _g11[_g2];
			++_g2;
			f1();
		}
	}
	iron_object_Animation.endFrame();
	iron_App.updateTime = kha_Scheduler.realTime() - iron_App.startTime;
	if(iron_App.lastw == -1) {
		iron_App.lastw = kha_System.windowWidth();
		iron_App.lasth = kha_System.windowHeight();
	}
	if(iron_App.lastw != kha_System.windowWidth() || iron_App.lasth != kha_System.windowHeight()) {
		if(iron_App.onResize != null) {
			iron_App.onResize();
		} else if(iron_Scene.active != null && iron_Scene.active.camera != null) {
			iron_Scene.active.camera.buildProjection();
		}
	}
	iron_App.lastw = kha_System.windowWidth();
	iron_App.lasth = kha_System.windowHeight();
};
iron_App.render = function(frames) {
	var frame = frames[0];
	iron_App.framebuffer = frame;
	iron_system_Time.update();
	if(iron_Scene.active == null || !iron_Scene.active.ready) {
		iron_App.render2D(frame);
		return;
	}
	iron_App.startTime = kha_Scheduler.realTime();
	if(iron_App.traitInits.length > 0) {
		var _g = 0;
		var _g1 = iron_App.traitInits;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(iron_App.traitInits.length > 0) {
				f();
			} else {
				break;
			}
		}
		iron_App.traitInits.splice(0,iron_App.traitInits.length);
	}
	iron_Scene.active.renderFrame(frame.get_g4());
	var _g2 = 0;
	var _g11 = iron_App.traitRenders;
	while(_g2 < _g11.length) {
		var f1 = _g11[_g2];
		++_g2;
		if(iron_App.traitRenders.length > 0) {
			f1(frame.get_g4());
		} else {
			break;
		}
	}
	iron_App.render2D(frame);
	iron_App.renderPathTime = kha_Scheduler.realTime() - iron_App.startTime;
};
iron_App.render2D = function(frame) {
	if(iron_App.traitRenders2D.length > 0) {
		frame.get_g2().begin(false);
		var _g = 0;
		var _g1 = iron_App.traitRenders2D;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(iron_App.traitRenders2D.length > 0) {
				f(frame.get_g2());
			} else {
				break;
			}
		}
		frame.get_g2().end();
	}
};
iron_App.notifyOnInit = function(f) {
	iron_App.traitInits.push(f);
};
iron_App.removeInit = function(f) {
	HxOverrides.remove(iron_App.traitInits,f);
};
iron_App.notifyOnUpdate = function(f) {
	iron_App.traitUpdates.push(f);
};
iron_App.removeUpdate = function(f) {
	HxOverrides.remove(iron_App.traitUpdates,f);
};
iron_App.notifyOnLateUpdate = function(f) {
	iron_App.traitLateUpdates.push(f);
};
iron_App.removeLateUpdate = function(f) {
	HxOverrides.remove(iron_App.traitLateUpdates,f);
};
iron_App.notifyOnRender = function(f) {
	iron_App.traitRenders.push(f);
};
iron_App.removeRender = function(f) {
	HxOverrides.remove(iron_App.traitRenders,f);
};
iron_App.notifyOnRender2D = function(f) {
	iron_App.traitRenders2D.push(f);
};
iron_App.removeRender2D = function(f) {
	HxOverrides.remove(iron_App.traitRenders2D,f);
};
iron_App.notifyOnReset = function(f) {
	if(iron_App.onResets == null) {
		iron_App.onResets = [];
	}
	iron_App.onResets.push(f);
};
iron_App.removeReset = function(f) {
	HxOverrides.remove(iron_App.onResets,f);
};
iron_App.notifyOnEndFrame = function(f) {
	if(iron_App.onEndFrames == null) {
		iron_App.onEndFrames = [];
	}
	iron_App.onEndFrames.push(f);
};
iron_App.removeEndFrame = function(f) {
	HxOverrides.remove(iron_App.onEndFrames,f);
};
iron_App.prototype = {
	__class__: iron_App
};
var iron_data_Data = function() {
};
$hxClasses["iron.data.Data"] = iron_data_Data;
iron_data_Data.__name__ = "iron.data.Data";
iron_data_Data.deleteAll = function() {
	var _this = iron_data_Data.cachedMeshes;
	var c = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(c.hasNext()) {
		var c1 = c.next();
		c1.delete();
	}
	iron_data_Data.cachedMeshes = new haxe_ds_StringMap();
	var _this1 = iron_data_Data.cachedShaders;
	var c2 = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
	while(c2.hasNext()) {
		var c3 = c2.next();
		c3.delete();
	}
	iron_data_Data.cachedShaders = new haxe_ds_StringMap();
	iron_data_Data.cachedSceneRaws = new haxe_ds_StringMap();
	iron_data_Data.cachedLights = new haxe_ds_StringMap();
	iron_data_Data.cachedCameras = new haxe_ds_StringMap();
	iron_data_Data.cachedMaterials = new haxe_ds_StringMap();
	iron_data_Data.cachedParticles = new haxe_ds_StringMap();
	iron_data_Data.cachedWorlds = new haxe_ds_StringMap();
	if(iron_RenderPath.active != null) {
		iron_RenderPath.active.unload();
	}
	var _this2 = iron_data_Data.cachedBlobs;
	var c4 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
	while(c4.hasNext()) {
		var c5 = c4.next();
		c5.unload();
	}
	iron_data_Data.cachedBlobs = new haxe_ds_StringMap();
	var _this3 = iron_data_Data.cachedImages;
	var c6 = new haxe_ds__$StringMap_StringMapIterator(_this3,_this3.arrayKeys());
	while(c6.hasNext()) {
		var c7 = c6.next();
		c7.unload();
	}
	iron_data_Data.cachedImages = new haxe_ds_StringMap();
	var _this4 = iron_data_Data.cachedSounds;
	var c8 = new haxe_ds__$StringMap_StringMapIterator(_this4,_this4.arrayKeys());
	while(c8.hasNext()) {
		var c9 = c8.next();
		c9.unload();
	}
	iron_data_Data.cachedSounds = new haxe_ds_StringMap();
	var _this5 = iron_data_Data.cachedVideos;
	var c10 = new haxe_ds__$StringMap_StringMapIterator(_this5,_this5.arrayKeys());
	while(c10.hasNext()) {
		var c11 = c10.next();
		c11.unload();
	}
	iron_data_Data.cachedVideos = new haxe_ds_StringMap();
	var _this6 = iron_data_Data.cachedFonts;
	var c12 = new haxe_ds__$StringMap_StringMapIterator(_this6,_this6.arrayKeys());
	while(c12.hasNext()) {
		var c13 = c12.next();
		c13.unload();
	}
	iron_data_Data.cachedFonts = new haxe_ds_StringMap();
};
iron_data_Data.getMesh = function(file,name,done) {
	var handle = file + name;
	var _this = iron_data_Data.cachedMeshes;
	var cached = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingMeshes;
	var loading = __map_reserved[handle] != null ? _this1.getReserved(handle) : _this1.h[handle];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingMeshes;
	var value = [done];
	if(__map_reserved[handle] != null) {
		_this2.setReserved(handle,value);
	} else {
		_this2.h[handle] = value;
	}
	iron_data_MeshData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedMeshes;
		if(__map_reserved[handle] != null) {
			_this3.setReserved(handle,b);
		} else {
			_this3.h[handle] = b;
		}
		b.handle = handle;
		var _g = 0;
		var _this4 = iron_data_Data.loadingMeshes;
		var _g1 = __map_reserved[handle] != null ? _this4.getReserved(handle) : _this4.h[handle];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingMeshes.remove(handle);
	});
};
iron_data_Data.deleteMesh = function(handle) {
	var _this = iron_data_Data.cachedMeshes;
	var mesh = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(mesh == null) {
		return;
	}
	mesh.delete();
	iron_data_Data.cachedMeshes.remove(handle);
};
iron_data_Data.getLight = function(file,name,done) {
	var handle = file + name;
	var _this = iron_data_Data.cachedLights;
	var cached = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingLights;
	var loading = __map_reserved[handle] != null ? _this1.getReserved(handle) : _this1.h[handle];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingLights;
	var value = [done];
	if(__map_reserved[handle] != null) {
		_this2.setReserved(handle,value);
	} else {
		_this2.h[handle] = value;
	}
	iron_data_LightData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedLights;
		if(__map_reserved[handle] != null) {
			_this3.setReserved(handle,b);
		} else {
			_this3.h[handle] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingLights;
		var _g1 = __map_reserved[handle] != null ? _this4.getReserved(handle) : _this4.h[handle];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingLights.remove(handle);
	});
};
iron_data_Data.getCamera = function(file,name,done) {
	var handle = file + name;
	var _this = iron_data_Data.cachedCameras;
	var cached = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingCameras;
	var loading = __map_reserved[handle] != null ? _this1.getReserved(handle) : _this1.h[handle];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingCameras;
	var value = [done];
	if(__map_reserved[handle] != null) {
		_this2.setReserved(handle,value);
	} else {
		_this2.h[handle] = value;
	}
	iron_data_CameraData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedCameras;
		if(__map_reserved[handle] != null) {
			_this3.setReserved(handle,b);
		} else {
			_this3.h[handle] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingCameras;
		var _g1 = __map_reserved[handle] != null ? _this4.getReserved(handle) : _this4.h[handle];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingCameras.remove(handle);
	});
};
iron_data_Data.getMaterial = function(file,name,done) {
	var handle = file + name;
	var _this = iron_data_Data.cachedMaterials;
	var cached = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingMaterials;
	var loading = __map_reserved[handle] != null ? _this1.getReserved(handle) : _this1.h[handle];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingMaterials;
	var value = [done];
	if(__map_reserved[handle] != null) {
		_this2.setReserved(handle,value);
	} else {
		_this2.h[handle] = value;
	}
	iron_data_MaterialData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedMaterials;
		if(__map_reserved[handle] != null) {
			_this3.setReserved(handle,b);
		} else {
			_this3.h[handle] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingMaterials;
		var _g1 = __map_reserved[handle] != null ? _this4.getReserved(handle) : _this4.h[handle];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingMaterials.remove(handle);
	});
};
iron_data_Data.getParticle = function(file,name,done) {
	var handle = file + name;
	var _this = iron_data_Data.cachedParticles;
	var cached = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingParticles;
	var loading = __map_reserved[handle] != null ? _this1.getReserved(handle) : _this1.h[handle];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingParticles;
	var value = [done];
	if(__map_reserved[handle] != null) {
		_this2.setReserved(handle,value);
	} else {
		_this2.h[handle] = value;
	}
	iron_data_ParticleData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedParticles;
		if(__map_reserved[handle] != null) {
			_this3.setReserved(handle,b);
		} else {
			_this3.h[handle] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingParticles;
		var _g1 = __map_reserved[handle] != null ? _this4.getReserved(handle) : _this4.h[handle];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingParticles.remove(handle);
	});
};
iron_data_Data.getWorld = function(file,name,done) {
	if(name == null) {
		done(null);
		return;
	}
	var handle = file + name;
	var _this = iron_data_Data.cachedWorlds;
	var cached = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingWorlds;
	var loading = __map_reserved[handle] != null ? _this1.getReserved(handle) : _this1.h[handle];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingWorlds;
	var value = [done];
	if(__map_reserved[handle] != null) {
		_this2.setReserved(handle,value);
	} else {
		_this2.h[handle] = value;
	}
	iron_data_WorldData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedWorlds;
		if(__map_reserved[handle] != null) {
			_this3.setReserved(handle,b);
		} else {
			_this3.h[handle] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingWorlds;
		var _g1 = __map_reserved[handle] != null ? _this4.getReserved(handle) : _this4.h[handle];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingWorlds.remove(handle);
	});
};
iron_data_Data.getShader = function(file,name,done,overrideContext) {
	var cacheName = name;
	if(overrideContext != null) {
		cacheName += "2";
	}
	var _this = iron_data_Data.cachedShaders;
	var cached = __map_reserved[cacheName] != null ? _this.getReserved(cacheName) : _this.h[cacheName];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingShaders;
	var loading = __map_reserved[cacheName] != null ? _this1.getReserved(cacheName) : _this1.h[cacheName];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingShaders;
	var value = [done];
	if(__map_reserved[cacheName] != null) {
		_this2.setReserved(cacheName,value);
	} else {
		_this2.h[cacheName] = value;
	}
	iron_data_ShaderData.parse(file,name,function(b) {
		var _this3 = iron_data_Data.cachedShaders;
		if(__map_reserved[cacheName] != null) {
			_this3.setReserved(cacheName,b);
		} else {
			_this3.h[cacheName] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingShaders;
		var _g1 = __map_reserved[cacheName] != null ? _this4.getReserved(cacheName) : _this4.h[cacheName];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingShaders.remove(cacheName);
	},overrideContext);
};
iron_data_Data.getSceneRaw = function(file,done) {
	var _this = iron_data_Data.cachedSceneRaws;
	var cached = __map_reserved[file] != null ? _this.getReserved(file) : _this.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingSceneRaws;
	var loading = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingSceneRaws;
	var value = [done];
	if(__map_reserved[file] != null) {
		_this2.setReserved(file,value);
	} else {
		_this2.h[file] = value;
	}
	var compressed = StringTools.endsWith(file,".lz4");
	var isJson = StringTools.endsWith(file,".json");
	var ext = compressed || isJson || StringTools.endsWith(file,".arm") ? "" : ".arm";
	iron_data_Data.getBlob(file + ext,function(b) {
		var compressed1 = compressed;
		var parsed = null;
		if(isJson) {
			var s = b.toString();
			if(s.charAt(0) == "{") {
				parsed = JSON.parse(s);
			} else {
				var i = new haxe_io_BytesInput(b.toBytes());
				i.set_bigEndian(false);
				parsed = iron_system_ArmPack.read(i);
			}
		} else {
			var i1 = new haxe_io_BytesInput(b.toBytes());
			i1.set_bigEndian(false);
			parsed = iron_system_ArmPack.read(i1);
		}
		iron_data_Data.returnSceneRaw(file,parsed);
	});
};
iron_data_Data.returnSceneRaw = function(file,parsed) {
	var _this = iron_data_Data.cachedSceneRaws;
	if(__map_reserved[file] != null) {
		_this.setReserved(file,parsed);
	} else {
		_this.h[file] = parsed;
	}
	var _g = 0;
	var _this1 = iron_data_Data.loadingSceneRaws;
	var _g1 = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		f(parsed);
	}
	iron_data_Data.loadingSceneRaws.remove(file);
};
iron_data_Data.getMeshRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getLightRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getCameraRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getMaterialRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getParticleRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getWorldRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getShaderRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getSpeakerRawByName = function(datas,name) {
	if(name == "") {
		return datas[0];
	}
	var _g = 0;
	while(_g < datas.length) {
		var dat = datas[_g];
		++_g;
		if(dat.name == name) {
			return dat;
		}
	}
	return null;
};
iron_data_Data.getBlob = function(file,done) {
	var _this = iron_data_Data.cachedBlobs;
	var cached = __map_reserved[file] != null ? _this.getReserved(file) : _this.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingBlobs;
	var loading = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingBlobs;
	var value = [done];
	if(__map_reserved[file] != null) {
		_this2.setReserved(file,value);
	} else {
		_this2.h[file] = value;
	}
	var tmp;
	if(iron_data_Data.isAbsolute(file) || file.charAt(0) == "." && file.charAt(1) == ".") {
		tmp = file;
	} else {
		var slash = file.lastIndexOf("/");
		tmp = slash >= 0 ? HxOverrides.substr(file,slash + 1,null) : file;
	}
	kha_Assets.loadBlobFromPath(tmp,function(b) {
		var _this3 = iron_data_Data.cachedBlobs;
		if(__map_reserved[file] != null) {
			_this3.setReserved(file,b);
		} else {
			_this3.h[file] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingBlobs;
		var _g1 = __map_reserved[file] != null ? _this4.getReserved(file) : _this4.h[file];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingBlobs.remove(file);
		iron_data_Data.assetsLoaded++;
	},null,{ fileName : "Sources/iron/data/Data.hx", lineNumber : 350, className : "iron.data.Data", methodName : "getBlob"});
};
iron_data_Data.deleteBlob = function(handle) {
	var _this = iron_data_Data.cachedBlobs;
	var blob = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(blob == null) {
		return;
	}
	blob.unload();
	iron_data_Data.cachedBlobs.remove(handle);
};
iron_data_Data.getImage = function(file,done,readable,format) {
	if(format == null) {
		format = "RGBA32";
	}
	if(readable == null) {
		readable = false;
	}
	var _this = iron_data_Data.cachedImages;
	var cached = __map_reserved[file] != null ? _this.getReserved(file) : _this.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingImages;
	var loading = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingImages;
	var value = [done];
	if(__map_reserved[file] != null) {
		_this2.setReserved(file,value);
	} else {
		_this2.h[file] = value;
	}
	var tmp;
	if(iron_data_Data.isAbsolute(file) || file.charAt(0) == "." && file.charAt(1) == ".") {
		tmp = file;
	} else {
		var slash = file.lastIndexOf("/");
		tmp = slash >= 0 ? HxOverrides.substr(file,slash + 1,null) : file;
	}
	kha_Assets.loadImageFromPath(tmp,readable,function(b) {
		var _this3 = iron_data_Data.cachedImages;
		if(__map_reserved[file] != null) {
			_this3.setReserved(file,b);
		} else {
			_this3.h[file] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingImages;
		var _g1 = __map_reserved[file] != null ? _this4.getReserved(file) : _this4.h[file];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingImages.remove(file);
		iron_data_Data.assetsLoaded++;
	},null,{ fileName : "Sources/iron/data/Data.hx", lineNumber : 378, className : "iron.data.Data", methodName : "getImage"});
};
iron_data_Data.deleteImage = function(handle) {
	var _this = iron_data_Data.cachedImages;
	var image = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(image == null) {
		return;
	}
	image.unload();
	iron_data_Data.cachedImages.remove(handle);
};
iron_data_Data.getSound = function(file,done) {
	if(StringTools.endsWith(file,".wav")) {
		file = file.substring(0,file.length - 4) + ".ogg";
	}
	var _this = iron_data_Data.cachedSounds;
	var cached = __map_reserved[file] != null ? _this.getReserved(file) : _this.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingSounds;
	var loading = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingSounds;
	var value = [done];
	if(__map_reserved[file] != null) {
		_this2.setReserved(file,value);
	} else {
		_this2.h[file] = value;
	}
	var tmp;
	if(iron_data_Data.isAbsolute(file) || file.charAt(0) == "." && file.charAt(1) == ".") {
		tmp = file;
	} else {
		var slash = file.lastIndexOf("/");
		tmp = slash >= 0 ? HxOverrides.substr(file,slash + 1,null) : file;
	}
	kha_Assets.loadSoundFromPath(tmp,function(b) {
		b.uncompress(function() {
			var _this3 = iron_data_Data.cachedSounds;
			if(__map_reserved[file] != null) {
				_this3.setReserved(file,b);
			} else {
				_this3.h[file] = b;
			}
			var _g = 0;
			var _this4 = iron_data_Data.loadingSounds;
			var _g1 = __map_reserved[file] != null ? _this4.getReserved(file) : _this4.h[file];
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				f(b);
			}
			iron_data_Data.loadingSounds.remove(file);
			iron_data_Data.assetsLoaded++;
		});
	},null,{ fileName : "Sources/iron/data/Data.hx", lineNumber : 412, className : "iron.data.Data", methodName : "getSound"});
};
iron_data_Data.deleteSound = function(handle) {
	var _this = iron_data_Data.cachedSounds;
	var sound = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(sound == null) {
		return;
	}
	sound.unload();
	iron_data_Data.cachedSounds.remove(handle);
};
iron_data_Data.getVideo = function(file,done) {
	var _this = iron_data_Data.cachedVideos;
	var cached = __map_reserved[file] != null ? _this.getReserved(file) : _this.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingVideos;
	var loading = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingVideos;
	var value = [done];
	if(__map_reserved[file] != null) {
		_this2.setReserved(file,value);
	} else {
		_this2.h[file] = value;
	}
	var tmp;
	if(iron_data_Data.isAbsolute(file) || file.charAt(0) == "." && file.charAt(1) == ".") {
		tmp = file;
	} else {
		var slash = file.lastIndexOf("/");
		tmp = slash >= 0 ? HxOverrides.substr(file,slash + 1,null) : file;
	}
	kha_Assets.loadVideoFromPath(tmp,function(b) {
		var _this3 = iron_data_Data.cachedVideos;
		if(__map_reserved[file] != null) {
			_this3.setReserved(file,b);
		} else {
			_this3.h[file] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingVideos;
		var _g1 = __map_reserved[file] != null ? _this4.getReserved(file) : _this4.h[file];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingVideos.remove(file);
		iron_data_Data.assetsLoaded++;
	},null,{ fileName : "Sources/iron/data/Data.hx", lineNumber : 448, className : "iron.data.Data", methodName : "getVideo"});
};
iron_data_Data.deleteVideo = function(handle) {
	var _this = iron_data_Data.cachedVideos;
	var video = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(video == null) {
		return;
	}
	video.unload();
	iron_data_Data.cachedVideos.remove(handle);
};
iron_data_Data.getFont = function(file,done) {
	var _this = iron_data_Data.cachedFonts;
	var cached = __map_reserved[file] != null ? _this.getReserved(file) : _this.h[file];
	if(cached != null) {
		done(cached);
		return;
	}
	var _this1 = iron_data_Data.loadingFonts;
	var loading = __map_reserved[file] != null ? _this1.getReserved(file) : _this1.h[file];
	if(loading != null) {
		loading.push(done);
		return;
	}
	var _this2 = iron_data_Data.loadingFonts;
	var value = [done];
	if(__map_reserved[file] != null) {
		_this2.setReserved(file,value);
	} else {
		_this2.h[file] = value;
	}
	var tmp;
	if(iron_data_Data.isAbsolute(file) || file.charAt(0) == "." && file.charAt(1) == ".") {
		tmp = file;
	} else {
		var slash = file.lastIndexOf("/");
		tmp = slash >= 0 ? HxOverrides.substr(file,slash + 1,null) : file;
	}
	kha_Assets.loadFontFromPath(tmp,function(b) {
		var _this3 = iron_data_Data.cachedFonts;
		if(__map_reserved[file] != null) {
			_this3.setReserved(file,b);
		} else {
			_this3.h[file] = b;
		}
		var _g = 0;
		var _this4 = iron_data_Data.loadingFonts;
		var _g1 = __map_reserved[file] != null ? _this4.getReserved(file) : _this4.h[file];
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f(b);
		}
		iron_data_Data.loadingFonts.remove(file);
		iron_data_Data.assetsLoaded++;
	},null,{ fileName : "Sources/iron/data/Data.hx", lineNumber : 472, className : "iron.data.Data", methodName : "getFont"});
};
iron_data_Data.deleteFont = function(handle) {
	var _this = iron_data_Data.cachedFonts;
	var font = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
	if(font == null) {
		return;
	}
	font.unload();
	iron_data_Data.cachedFonts.remove(handle);
};
iron_data_Data.isAbsolute = function(file) {
	if(!(file.charAt(0) == "/" || file.charAt(1) == ":")) {
		if(file.charAt(0) == "\\") {
			return file.charAt(1) == "\\";
		} else {
			return false;
		}
	} else {
		return true;
	}
};
iron_data_Data.isUp = function(file) {
	if(file.charAt(0) == ".") {
		return file.charAt(1) == ".";
	} else {
		return false;
	}
};
iron_data_Data.baseName = function(path) {
	var slash = path.lastIndexOf("/");
	if(slash >= 0) {
		return HxOverrides.substr(path,slash + 1,null);
	} else {
		return path;
	}
};
iron_data_Data.resolvePath = function(file) {
	if(iron_data_Data.isAbsolute(file) || file.charAt(0) == "." && file.charAt(1) == ".") {
		return file;
	}
	var slash = file.lastIndexOf("/");
	if(slash >= 0) {
		return HxOverrides.substr(file,slash + 1,null);
	} else {
		return file;
	}
};
iron_data_Data.prototype = {
	__class__: iron_data_Data
};
var iron_system_Input = function() { };
$hxClasses["iron.system.Input"] = iron_system_Input;
iron_system_Input.__name__ = "iron.system.Input";
iron_system_Input.reset = function() {
	iron_system_Input.occupied = false;
	if(iron_system_Input.mouse != null) {
		iron_system_Input.mouse.reset();
	}
	if(iron_system_Input.pen != null) {
		iron_system_Input.pen.reset();
	}
	if(iron_system_Input.keyboard != null) {
		iron_system_Input.keyboard.reset();
	}
	var _g = 0;
	var _g1 = iron_system_Input.gamepads;
	while(_g < _g1.length) {
		var gamepad = _g1[_g];
		++_g;
		gamepad.reset();
	}
};
iron_system_Input.endFrame = function() {
	if(iron_system_Input.mouse != null) {
		iron_system_Input.mouse.endFrame();
	}
	if(iron_system_Input.pen != null) {
		iron_system_Input.pen.endFrame();
	}
	if(iron_system_Input.keyboard != null) {
		iron_system_Input.keyboard.endFrame();
	}
	var _g = 0;
	var _g1 = iron_system_Input.gamepads;
	while(_g < _g1.length) {
		var gamepad = _g1[_g];
		++_g;
		gamepad.endFrame();
	}
	if(iron_system_Input.virtualButtons != null) {
		var _this = iron_system_Input.virtualButtons;
		var vb = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(vb.hasNext()) {
			var vb1 = vb.next();
			vb1.started = vb1.released = false;
		}
	}
};
iron_system_Input.getMouse = function() {
	if(!iron_system_Input.registered) {
		iron_system_Input.registered = true;
		iron_App.notifyOnEndFrame(iron_system_Input.endFrame);
		iron_App.notifyOnReset(iron_system_Input.reset);
		kha_System.notifyOnApplicationState(function() {
			iron_system_Input.getMouse().reset();
		},null,null,null,null);
	}
	if(iron_system_Input.mouse == null) {
		iron_system_Input.mouse = new iron_system_Mouse();
	}
	return iron_system_Input.mouse;
};
iron_system_Input.getPen = function() {
	if(!iron_system_Input.registered) {
		iron_system_Input.registered = true;
		iron_App.notifyOnEndFrame(iron_system_Input.endFrame);
		iron_App.notifyOnReset(iron_system_Input.reset);
		kha_System.notifyOnApplicationState(function() {
			iron_system_Input.getMouse().reset();
		},null,null,null,null);
	}
	if(iron_system_Input.pen == null) {
		iron_system_Input.pen = new iron_system_Pen();
	}
	return iron_system_Input.pen;
};
iron_system_Input.getSurface = function() {
	if(!iron_system_Input.registered) {
		iron_system_Input.registered = true;
		iron_App.notifyOnEndFrame(iron_system_Input.endFrame);
		iron_App.notifyOnReset(iron_system_Input.reset);
		kha_System.notifyOnApplicationState(function() {
			iron_system_Input.getMouse().reset();
		},null,null,null,null);
	}
	return iron_system_Input.getMouse();
};
iron_system_Input.getKeyboard = function() {
	if(!iron_system_Input.registered) {
		iron_system_Input.registered = true;
		iron_App.notifyOnEndFrame(iron_system_Input.endFrame);
		iron_App.notifyOnReset(iron_system_Input.reset);
		kha_System.notifyOnApplicationState(function() {
			iron_system_Input.getMouse().reset();
		},null,null,null,null);
	}
	if(iron_system_Input.keyboard == null) {
		iron_system_Input.keyboard = new iron_system_Keyboard();
	}
	return iron_system_Input.keyboard;
};
iron_system_Input.getGamepad = function(i) {
	if(i == null) {
		i = 0;
	}
	if(i >= 4) {
		return null;
	}
	if(!iron_system_Input.registered) {
		iron_system_Input.registered = true;
		iron_App.notifyOnEndFrame(iron_system_Input.endFrame);
		iron_App.notifyOnReset(iron_system_Input.reset);
		kha_System.notifyOnApplicationState(function() {
			iron_system_Input.getMouse().reset();
		},null,null,null,null);
	}
	while(iron_system_Input.gamepads.length <= i) iron_system_Input.gamepads.push(new iron_system_Gamepad(iron_system_Input.gamepads.length));
	if(iron_system_Input.gamepads[i].connected) {
		return iron_system_Input.gamepads[i];
	} else {
		return null;
	}
};
iron_system_Input.getSensor = function() {
	if(!iron_system_Input.registered) {
		iron_system_Input.registered = true;
		iron_App.notifyOnEndFrame(iron_system_Input.endFrame);
		iron_App.notifyOnReset(iron_system_Input.reset);
		kha_System.notifyOnApplicationState(function() {
			iron_system_Input.getMouse().reset();
		},null,null,null,null);
	}
	if(iron_system_Input.sensor == null) {
		iron_system_Input.sensor = new iron_system_Sensor();
	}
	return iron_system_Input.sensor;
};
iron_system_Input.getVirtualButton = function(virtual) {
	if(!iron_system_Input.registered) {
		iron_system_Input.registered = true;
		iron_App.notifyOnEndFrame(iron_system_Input.endFrame);
		iron_App.notifyOnReset(iron_system_Input.reset);
		kha_System.notifyOnApplicationState(function() {
			iron_system_Input.getMouse().reset();
		},null,null,null,null);
	}
	if(iron_system_Input.virtualButtons == null) {
		return null;
	}
	var _this = iron_system_Input.virtualButtons;
	if(__map_reserved[virtual] != null) {
		return _this.getReserved(virtual);
	} else {
		return _this.h[virtual];
	}
};
iron_system_Input.register = function() {
	iron_system_Input.registered = true;
	iron_App.notifyOnEndFrame(iron_system_Input.endFrame);
	iron_App.notifyOnReset(iron_system_Input.reset);
	kha_System.notifyOnApplicationState(function() {
		iron_system_Input.getMouse().reset();
	},null,null,null,null);
};
var iron_object_Object = function() {
	this.isEmpty = false;
	this.properties = null;
	this.culledShadow = false;
	this.culledMesh = false;
	this.culled = false;
	this.visibleShadow = true;
	this.visibleMesh = true;
	this.visible = true;
	this.animation = null;
	this.lods = null;
	this.children = [];
	this.parent = null;
	this.traits = [];
	this.constraints = null;
	this.name = "";
	this.raw = null;
	this.uid = iron_object_Object.uidCounter++;
	this.urandom = iron_object_Object.seededRandom();
	this.transform = new iron_object_Transform(this);
	this.isEmpty = js_Boot.getClass(this) == iron_object_Object;
	if(this.isEmpty && iron_Scene.active != null) {
		iron_Scene.active.empties.push(this);
	}
};
$hxClasses["iron.object.Object"] = iron_object_Object;
iron_object_Object.__name__ = "iron.object.Object";
iron_object_Object.seededRandom = function() {
	iron_object_Object.seed = (iron_object_Object.seed * 9301 + 49297) % 233280;
	return iron_object_Object.seed / 233280.0;
};
iron_object_Object.prototype = {
	uid: null
	,urandom: null
	,raw: null
	,name: null
	,transform: null
	,constraints: null
	,traits: null
	,parent: null
	,children: null
	,lods: null
	,animation: null
	,visible: null
	,visibleMesh: null
	,visibleShadow: null
	,culled: null
	,culledMesh: null
	,culledShadow: null
	,properties: null
	,isEmpty: null
	,addChild: function(o,parentInverse) {
		if(parentInverse == null) {
			parentInverse = false;
		}
		if(o.parent == this) {
			return;
		}
		this.children.push(o);
		o.parent = this;
		if(parentInverse) {
			o.transform.applyParentInverse();
		}
	}
	,removeChild: function(o,keepTransform) {
		if(keepTransform == null) {
			keepTransform = false;
		}
		if(keepTransform) {
			o.transform.applyParent();
		}
		o.parent = null;
		o.transform.buildMatrix();
		HxOverrides.remove(this.children,o);
	}
	,remove: function() {
		if(this.isEmpty && iron_Scene.active != null) {
			HxOverrides.remove(iron_Scene.active.empties,this);
		}
		if(this.animation != null) {
			this.animation.remove();
		}
		while(this.children.length > 0) this.children[0].remove();
		while(this.traits.length > 0) this.traits[0].remove();
		if(this.parent != null) {
			HxOverrides.remove(this.parent.children,this);
			this.parent = null;
		}
	}
	,getChild: function(name) {
		if(this.name == name) {
			return this;
		} else {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var r = c.getChild(name);
				if(r != null) {
					return r;
				}
			}
		}
		return null;
	}
	,getChildren: function(recursive) {
		if(recursive == null) {
			recursive = false;
		}
		if(!recursive) {
			return this.children;
		}
		var retChildren = this.children.slice();
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			retChildren = retChildren.concat(child.getChildren(recursive));
		}
		return retChildren;
	}
	,getChildOfType: function(type) {
		if(js_Boot.__instanceof(this,type)) {
			return this;
		} else {
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var r = c.getChildOfType(type);
				if(r != null) {
					return r;
				}
			}
		}
		return null;
	}
	,addTrait: function(t) {
		this.traits.push(t);
		t.object = this;
		if(t._add != null) {
			var _g = 0;
			var _g1 = t._add;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				f();
			}
			t._add = null;
		}
	}
	,removeTrait: function(t) {
		if(t._init != null) {
			var _g = 0;
			var _g1 = t._init;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				iron_App.removeInit(f);
			}
			t._init = null;
		}
		if(t._update != null) {
			var _g2 = 0;
			var _g11 = t._update;
			while(_g2 < _g11.length) {
				var f1 = _g11[_g2];
				++_g2;
				iron_App.removeUpdate(f1);
			}
			t._update = null;
		}
		if(t._lateUpdate != null) {
			var _g3 = 0;
			var _g12 = t._lateUpdate;
			while(_g3 < _g12.length) {
				var f2 = _g12[_g3];
				++_g3;
				iron_App.removeLateUpdate(f2);
			}
			t._lateUpdate = null;
		}
		if(t._render != null) {
			var _g4 = 0;
			var _g13 = t._render;
			while(_g4 < _g13.length) {
				var f3 = _g13[_g4];
				++_g4;
				iron_App.removeRender(f3);
			}
			t._render = null;
		}
		if(t._render2D != null) {
			var _g5 = 0;
			var _g14 = t._render2D;
			while(_g5 < _g14.length) {
				var f4 = _g14[_g5];
				++_g5;
				iron_App.removeRender2D(f4);
			}
			t._render2D = null;
		}
		if(t._remove != null) {
			var _g6 = 0;
			var _g15 = t._remove;
			while(_g6 < _g15.length) {
				var f5 = _g15[_g6];
				++_g6;
				f5();
			}
			t._remove = null;
		}
		HxOverrides.remove(this.traits,t);
	}
	,getTrait: function(c) {
		var _g = 0;
		var _g1 = this.traits;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(js_Boot.getClass(t) == c) {
				return t;
			}
		}
		return null;
	}
	,getParentArmature: function(name) {
		var _g = 0;
		var _g1 = iron_Scene.active.animations;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.armature != null && a.armature.name == name) {
				return a;
			}
		}
		return null;
	}
	,setupAnimation: function(oactions) {
		var _gthis = this;
		if(this.raw.parent_bone != null) {
			iron_Scene.active.notifyOnInit(function() {
				var banim = _gthis.getParentArmature(_gthis.parent.name);
				if(banim != null) {
					banim.addBoneChild(_gthis.raw.parent_bone,_gthis);
				}
			});
		}
		if(oactions == null) {
			return;
		}
		this.animation = new iron_object_ObjectAnimation(this,oactions);
	}
	,__class__: iron_object_Object
};
var iron_Scene = function() {
	this.objectsTraversed = 0;
	this.traitRemoves = [];
	this.traitInits = [];
	this.groups = null;
	this.sceneStream = null;
	this.uid = iron_Scene.uidCounter++;
	this.sceneStream = new iron_data_SceneStream();
	this.meshes = [];
	this.lights = [];
	this.cameras = [];
	this.speakers = [];
	this.empties = [];
	this.animations = [];
	this.armatures = [];
	this.embedded = new haxe_ds_StringMap();
	this.root = new iron_object_Object();
	this.root.name = "Root";
	this.traitInits = [];
	this.traitRemoves = [];
	this.initializing = true;
	if(iron_Scene.global == null) {
		iron_Scene.global = new iron_object_Object();
	}
};
$hxClasses["iron.Scene"] = iron_Scene;
iron_Scene.__name__ = "iron.Scene";
iron_Scene.create = function(format,done) {
	iron_Scene.active = new iron_Scene();
	iron_Scene.active.ready = false;
	iron_Scene.active.raw = format;
	iron_data_Data.getWorld(format.name,format.world_ref,function(world) {
		iron_Scene.active.world = world;
		iron_Scene.active.addScene(format.name,null,function(sceneObject) {
			var _g = 0;
			var _g1 = sceneObject.getChildren(true);
			while(_g < _g1.length) {
				var object = _g1[_g];
				++_g;
				iron_Scene.createTraits(iron_Scene.getRawObjectByName(format,object.name).traits,object);
			}
			if(iron_Scene.active.cameras.length == 0) {
				haxe_Log.trace("No camera found for scene \"" + format.name + "\"",{ fileName : "Sources/iron/Scene.hx", lineNumber : 131, className : "iron.Scene", methodName : "create"});
			}
			iron_Scene.active.camera = iron_Scene.active.getCamera(format.camera_ref);
			iron_Scene.active.ready = true;
			var _g2 = 0;
			var _g3 = iron_Scene.active.traitInits;
			while(_g2 < _g3.length) {
				var f = _g3[_g2];
				++_g2;
				f();
			}
			iron_Scene.active.traitInits = [];
			iron_Scene.active.sceneParent = sceneObject;
			iron_Scene.active.initializing = false;
			done(sceneObject);
		});
	});
};
iron_Scene.patch = function() {
	iron_data_Data.deleteAll();
	var cameraTransform = iron_Scene.active.camera.transform;
	iron_Scene.setActive(iron_Scene.active.raw.name,function(o) {
		iron_RenderPath.setActive(iron_Scene.getRenderPath());
		iron_Scene.active.camera.transform = cameraTransform;
	});
};
iron_Scene.setActive = function(sceneName,done) {
	if(!iron_Scene.framePassed) {
		return;
	}
	iron_Scene.framePassed = false;
	if(iron_Scene.active != null) {
		iron_Scene.active.remove();
	}
	iron_data_Data.getSceneRaw(sceneName,function(format) {
		iron_Scene.create(format,function(o) {
			if(done != null) {
				done(o);
			}
		});
	});
};
iron_Scene.getRawObjectByName = function(format,name) {
	return iron_Scene.traverseObjs(format.objects,name);
};
iron_Scene.traverseObjs = function(children,name) {
	var _g = 0;
	while(_g < children.length) {
		var o = children[_g];
		++_g;
		if(o.name == name) {
			return o;
		}
		if(o.children != null) {
			var res = iron_Scene.traverseObjs(o.children,name);
			if(res != null) {
				return res;
			}
		}
	}
	return null;
};
iron_Scene.generateTransform = function(object,transform) {
	var tmp;
	if(object.transform != null) {
		var a = object.transform.values;
		tmp = new iron_math_Mat4(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]);
	} else {
		tmp = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	}
	transform.world = tmp;
	var _this = transform.world;
	var loc = transform.loc;
	var quat = transform.rot;
	var scale = transform.scale;
	loc.x = _this.self._30;
	loc.y = _this.self._31;
	loc.z = _this.self._32;
	var _this1 = iron_math_Mat4.helpVec;
	_this1.x = _this.self._00;
	_this1.y = _this.self._01;
	_this1.z = _this.self._02;
	_this1.w = 1.0;
	var _this11 = _this1;
	scale.x = Math.sqrt(_this11.x * _this11.x + _this11.y * _this11.y + _this11.z * _this11.z);
	var _this2 = iron_math_Mat4.helpVec;
	_this2.x = _this.self._10;
	_this2.y = _this.self._11;
	_this2.z = _this.self._12;
	_this2.w = 1.0;
	var _this3 = _this2;
	scale.y = Math.sqrt(_this3.x * _this3.x + _this3.y * _this3.y + _this3.z * _this3.z);
	var _this4 = iron_math_Mat4.helpVec;
	_this4.x = _this.self._20;
	_this4.y = _this.self._21;
	_this4.z = _this.self._22;
	_this4.w = 1.0;
	var _this5 = _this4;
	scale.z = Math.sqrt(_this5.x * _this5.x + _this5.y * _this5.y + _this5.z * _this5.z);
	var _this6 = _this.self;
	var m3 = _this6._12;
	var m4 = _this6._22;
	var m5 = _this6._32;
	var m6 = _this6._13;
	var m7 = _this6._23;
	var m8 = _this6._33;
	var c00 = _this6._11 * (m4 * m8 - m5 * m7) - _this6._21 * (m3 * m8 - m5 * m6) + _this6._31 * (m3 * m7 - m4 * m6);
	var m31 = _this6._12;
	var m41 = _this6._22;
	var m51 = _this6._32;
	var m61 = _this6._13;
	var m71 = _this6._23;
	var m81 = _this6._33;
	var c01 = _this6._10 * (m41 * m81 - m51 * m71) - _this6._20 * (m31 * m81 - m51 * m61) + _this6._30 * (m31 * m71 - m41 * m61);
	var m32 = _this6._11;
	var m42 = _this6._21;
	var m52 = _this6._31;
	var m62 = _this6._13;
	var m72 = _this6._23;
	var m82 = _this6._33;
	var c02 = _this6._10 * (m42 * m82 - m52 * m72) - _this6._20 * (m32 * m82 - m52 * m62) + _this6._30 * (m32 * m72 - m42 * m62);
	var m33 = _this6._11;
	var m43 = _this6._21;
	var m53 = _this6._31;
	var m63 = _this6._12;
	var m73 = _this6._22;
	var m83 = _this6._32;
	var c03 = _this6._10 * (m43 * m83 - m53 * m73) - _this6._20 * (m33 * m83 - m53 * m63) + _this6._30 * (m33 * m73 - m43 * m63);
	if(_this6._00 * c00 - _this6._01 * c01 + _this6._02 * c02 - _this6._03 * c03 < 0.0) {
		scale.x = -scale.x;
	}
	var invs = 1.0 / scale.x;
	iron_math_Mat4.helpMat.self._00 = _this.self._00 * invs;
	iron_math_Mat4.helpMat.self._01 = _this.self._01 * invs;
	iron_math_Mat4.helpMat.self._02 = _this.self._02 * invs;
	invs = 1.0 / scale.y;
	iron_math_Mat4.helpMat.self._10 = _this.self._10 * invs;
	iron_math_Mat4.helpMat.self._11 = _this.self._11 * invs;
	iron_math_Mat4.helpMat.self._12 = _this.self._12 * invs;
	invs = 1.0 / scale.z;
	iron_math_Mat4.helpMat.self._20 = _this.self._20 * invs;
	iron_math_Mat4.helpMat.self._21 = _this.self._21 * invs;
	iron_math_Mat4.helpMat.self._22 = _this.self._22 * invs;
	var m = iron_math_Mat4.helpMat;
	var m11 = m.self._00;
	var m12 = m.self._10;
	var m13 = m.self._20;
	var m21 = m.self._01;
	var m22 = m.self._11;
	var m23 = m.self._21;
	var m311 = m.self._02;
	var m321 = m.self._12;
	var m331 = m.self._22;
	var tr = m11 + m22 + m331;
	var s = 0.0;
	if(tr > 0) {
		s = 0.5 / Math.sqrt(tr + 1.0);
		quat.w = 0.25 / s;
		quat.x = (m321 - m23) * s;
		quat.y = (m13 - m311) * s;
		quat.z = (m21 - m12) * s;
	} else if(m11 > m22 && m11 > m331) {
		s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m331);
		quat.w = (m321 - m23) / s;
		quat.x = 0.25 * s;
		quat.y = (m12 + m21) / s;
		quat.z = (m13 + m311) / s;
	} else if(m22 > m331) {
		s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m331);
		quat.w = (m13 - m311) / s;
		quat.x = (m12 + m21) / s;
		quat.y = 0.25 * s;
		quat.z = (m23 + m321) / s;
	} else {
		s = 2.0 * Math.sqrt(1.0 + m331 - m11 - m22);
		quat.w = (m21 - m12) / s;
		quat.x = (m13 + m311) / s;
		quat.y = (m23 + m321) / s;
		quat.z = 0.25 * s;
	}
	if(object.local_only != null) {
		transform.localOnly = object.local_only;
	}
	if(transform.object.parent != null) {
		transform.update();
	}
};
iron_Scene.createTraits = function(traits,object) {
	if(traits == null) {
		return;
	}
	var _g = 0;
	while(_g < traits.length) {
		var t = traits[_g];
		++_g;
		if(t.type == "Script") {
			var args = [];
			if(t.parameters != null) {
				var _g1 = 0;
				var _g11 = t.parameters;
				while(_g1 < _g11.length) {
					var param = _g11[_g1];
					++_g1;
					args.push(iron_Scene.parseArg(param));
				}
			}
			var traitInst = iron_Scene.createTraitClassInstance(t.class_name,args);
			if(traitInst == null) {
				haxe_Log.trace("Error: Trait '" + t.class_name + "' referenced in object '" + object.name + "' not found",{ fileName : "Sources/iron/Scene.hx", lineNumber : 799, className : "iron.Scene", methodName : "createTraits"});
				continue;
			}
			if(t.props != null) {
				var _g2 = 0;
				var _g12 = t.props.length / 3 | 0;
				while(_g2 < _g12) {
					var i = _g2++;
					var pname = t.props[i * 3];
					var ptype = t.props[i * 3 + 1];
					var pval = t.props[i * 3 + 2];
					if(StringTools.endsWith(ptype,"Object") && pval != "") {
						Reflect.setProperty(traitInst,pname,iron_Scene.active.getChild(pval));
					} else {
						switch(ptype) {
						case "Vec2":
							Reflect.setProperty(traitInst,pname,new iron_math_Vec2(pval[0],pval[1]));
							break;
						case "Vec3":
							Reflect.setProperty(traitInst,pname,new iron_math_Vec3(pval[0],pval[1],pval[2]));
							break;
						case "Vec4":
							Reflect.setProperty(traitInst,pname,new iron_math_Vec4(pval[0],pval[1],pval[2],pval[3]));
							break;
						default:
							Reflect.setProperty(traitInst,pname,pval);
						}
					}
				}
			}
			object.addTrait(traitInst);
		}
	}
};
iron_Scene.parseArg = function(str) {
	if(str == "true") {
		return true;
	} else if(str == "false") {
		return false;
	} else if(str == "null") {
		return null;
	} else if(str.charAt(0) == "'") {
		return StringTools.replace(str,"'","");
	} else if(str.charAt(0) == "\"") {
		return StringTools.replace(str,"\"","");
	} else if(str.charAt(0) == "[") {
		str = StringTools.replace(str,"[","");
		str = StringTools.replace(str,"]","");
		str = StringTools.replace(str," ","");
		var ar = [];
		var vals = str.split(",");
		var _g = 0;
		while(_g < vals.length) {
			var v = vals[_g];
			++_g;
			ar.push(iron_Scene.parseArg(v));
		}
		return ar;
	} else {
		var f = parseFloat(str);
		var i = Std.parseInt(str);
		if(f == i) {
			return i;
		} else {
			return f;
		}
	}
};
iron_Scene.createConstraints = function(constraints,object) {
	if(constraints == null) {
		return;
	}
	object.constraints = [];
	var _g = 0;
	while(_g < constraints.length) {
		var c = constraints[_g];
		++_g;
		var constr = new iron_object_Constraint(c);
		object.constraints.push(constr);
	}
};
iron_Scene.createTraitClassInstance = function(traitName,args) {
	var cname = $hxClasses[traitName];
	if(cname == null) {
		return null;
	}
	return Type.createInstance(cname,args);
};
iron_Scene.prototype = {
	uid: null
	,raw: null
	,root: null
	,sceneParent: null
	,camera: null
	,world: null
	,sceneStream: null
	,meshes: null
	,lights: null
	,cameras: null
	,speakers: null
	,empties: null
	,animations: null
	,armatures: null
	,groups: null
	,embedded: null
	,ready: null
	,traitInits: null
	,traitRemoves: null
	,initializing: null
	,remove: function() {
		var _g = 0;
		var _g1 = this.traitRemoves;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f();
		}
		if(this.sceneStream != null) {
			this.sceneStream.remove();
		}
		var _g2 = 0;
		var _g3 = this.meshes;
		while(_g2 < _g3.length) {
			var o = _g3[_g2];
			++_g2;
			o.remove();
		}
		var _g4 = 0;
		var _g5 = this.lights;
		while(_g4 < _g5.length) {
			var o1 = _g5[_g4];
			++_g4;
			o1.remove();
		}
		var _g6 = 0;
		var _g7 = this.cameras;
		while(_g6 < _g7.length) {
			var o2 = _g7[_g6];
			++_g6;
			o2.remove();
		}
		var _g8 = 0;
		var _g9 = this.speakers;
		while(_g8 < _g9.length) {
			var o3 = _g9[_g8];
			++_g8;
			o3.remove();
		}
		var _g10 = 0;
		var _g11 = this.empties;
		while(_g10 < _g11.length) {
			var o4 = _g11[_g10];
			++_g10;
			o4.remove();
		}
		this.groups = null;
		this.root.remove();
	}
	,updateFrame: function() {
		if(!this.ready) {
			return;
		}
		this.sceneStream.update(iron_Scene.active.camera);
		var _g = 0;
		var _g1 = this.animations;
		while(_g < _g1.length) {
			var anim = _g1[_g];
			++_g;
			anim.update(0.016666666666666666 * iron_system_Time.scale);
		}
		var _g2 = 0;
		var _g3 = this.empties;
		while(_g2 < _g3.length) {
			var e = _g3[_g2];
			++_g2;
			if(e != null && e.parent != null) {
				e.transform.update();
			}
		}
	}
	,renderFrame: function(g) {
		if(!this.ready || iron_RenderPath.active == null) {
			return;
		}
		iron_Scene.framePassed = true;
		if(this.camera != null) {
			this.camera.renderFrame(g);
		} else {
			iron_RenderPath.active.renderFrame(g);
		}
	}
	,addObject: function(parent) {
		var object = new iron_object_Object();
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,getChildren: function(recursive) {
		if(recursive == null) {
			recursive = false;
		}
		return this.root.getChildren(recursive);
	}
	,getChild: function(name) {
		return this.root.getChild(name);
	}
	,getTrait: function(c) {
		if(this.root.children.length > 0) {
			return this.root.children[0].getTrait(c);
		} else {
			return null;
		}
	}
	,getMesh: function(name) {
		var _g = 0;
		var _g1 = this.meshes;
		while(_g < _g1.length) {
			var m = _g1[_g];
			++_g;
			if(m.name == name) {
				return m;
			}
		}
		return null;
	}
	,getLight: function(name) {
		var _g = 0;
		var _g1 = this.lights;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l.name == name) {
				return l;
			}
		}
		return null;
	}
	,getCamera: function(name) {
		var _g = 0;
		var _g1 = this.cameras;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.name == name) {
				return c;
			}
		}
		return null;
	}
	,getSpeaker: function(name) {
		var _g = 0;
		var _g1 = this.speakers;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.name == name) {
				return s;
			}
		}
		return null;
	}
	,getEmpty: function(name) {
		var _g = 0;
		var _g1 = this.empties;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.name == name) {
				return e;
			}
		}
		return null;
	}
	,getGroup: function(name) {
		if(this.groups == null) {
			this.groups = new haxe_ds_StringMap();
		}
		var _this = this.groups;
		var g = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(g == null) {
			g = [];
			var _this1 = this.groups;
			if(__map_reserved[name] != null) {
				_this1.setReserved(name,g);
			} else {
				_this1.h[name] = g;
			}
			var refs = this.getGroupObjectRefs(name);
			if(refs == null) {
				return g;
			}
			var _g = 0;
			while(_g < refs.length) {
				var ref = refs[_g];
				++_g;
				var c = this.getChild(ref);
				if(c != null) {
					g.push(c);
				}
			}
		}
		return g;
	}
	,addMeshObject: function(data,materials,parent) {
		var object = new iron_object_MeshObject(data,materials);
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,addLightObject: function(data,parent) {
		var object = new iron_object_LightObject(data);
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,addCameraObject: function(data,parent) {
		var object = new iron_object_CameraObject(data);
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,addSpeakerObject: function(data,parent) {
		var object = new iron_object_SpeakerObject(data);
		if(parent != null) {
			parent.addChild(object);
		} else {
			this.root.addChild(object);
		}
		return object;
	}
	,objectsTraversed: null
	,addScene: function(sceneName,parent,done) {
		var _gthis = this;
		if(parent == null) {
			parent = this.addObject();
			parent.name = sceneName;
		}
		iron_data_Data.getSceneRaw(sceneName,function(format) {
			iron_Scene.createTraits(format.traits,parent);
			_gthis.loadEmbeddedData(format.embedded_datas,function() {
				_gthis.objectsTraversed = 0;
				var objectsCount = _gthis.getObjectsCount(format.objects);
				var traverseObjects = null;
				traverseObjects = function(parent1,objects,parentObject,done1) {
					if(objects == null) {
						return;
					}
					var _g = 0;
					var _g1 = objects.length;
					while(_g < _g1) {
						var i = _g++;
						var o = [objects[i]];
						if(o[0].spawn != null && o[0].spawn == false) {
							if(++_gthis.objectsTraversed == objectsCount) {
								done1();
							}
							continue;
						}
						var o1 = o[0];
						var traverseObjects1 = (function(o2) {
							return function(object) {
								if(object != null) {
									traverseObjects(object,o2[0].children,o2[0],done1);
								}
								if(++_gthis.objectsTraversed == objectsCount) {
									done1();
								}
							};
						})(o);
						_gthis.createObject(o1,format,parent1,parentObject,traverseObjects1);
					}
				};
				if(format.objects == null || format.objects.length == 0) {
					done(parent);
				} else {
					traverseObjects(parent,format.objects,null,function() {
						done(parent);
					});
				}
			});
		});
	}
	,getObjectsCount: function(objects,discardNoSpawn) {
		if(discardNoSpawn == null) {
			discardNoSpawn = true;
		}
		if(objects == null) {
			return 0;
		}
		var result = objects.length;
		var _g = 0;
		while(_g < objects.length) {
			var o = objects[_g];
			++_g;
			if(discardNoSpawn && o.spawn != null && o.spawn == false) {
				continue;
			}
			if(o.children != null) {
				result += this.getObjectsCount(o.children);
			}
		}
		return result;
	}
	,spawnObject: function(name,parent,done,spawnChildren) {
		if(spawnChildren == null) {
			spawnChildren = true;
		}
		var _gthis = this;
		var objectsTraversed = 0;
		var obj = iron_Scene.getRawObjectByName(this.raw,name);
		var objectsCount = spawnChildren ? this.getObjectsCount([obj],false) : 1;
		var spawnObjectTree = null;
		spawnObjectTree = function(obj1,parent1,parentObject,done1) {
			_gthis.createObject(obj1,_gthis.raw,parent1,parentObject,function(object) {
				if(spawnChildren && obj1.children != null) {
					var _g = 0;
					var _g1 = obj1.children;
					while(_g < _g1.length) {
						var child = _g1[_g];
						++_g;
						spawnObjectTree(child,object,obj1,done1);
					}
				}
				if((objectsTraversed += 1) == objectsCount && done1 != null) {
					while(object.name != name) object = object.parent;
					done1(object);
				}
			});
		};
		spawnObjectTree(obj,parent,null,done);
	}
	,parseObject: function(sceneName,objectName,parent,done) {
		var _gthis = this;
		iron_data_Data.getSceneRaw(sceneName,function(format) {
			var o = iron_Scene.getRawObjectByName(format,objectName);
			if(o == null) {
				done(null);
			}
			_gthis.createObject(o,format,parent,null,done);
		});
	}
	,createObject: function(o,format,parent,parentObject,done) {
		var _gthis = this;
		var sceneName = format.name;
		if(o.type == "camera_object") {
			iron_data_Data.getCamera(sceneName,o.data_ref,function(b) {
				var object = _gthis.addCameraObject(b,parent);
				_gthis.returnObject(object,o,done);
			});
		} else if(o.type == "light_object") {
			iron_data_Data.getLight(sceneName,o.data_ref,function(b1) {
				var object1 = _gthis.addLightObject(b1,parent);
				_gthis.returnObject(object1,o,done);
			});
		} else if(o.type == "mesh_object") {
			if(o.material_refs == null || o.material_refs.length == 0) {
				this.createMeshObject(o,format,parent,parentObject,null,done);
			} else {
				var this1 = new Array(o.material_refs.length);
				var materials = this1;
				var materialsLoaded = 0;
				var _g = 0;
				var _g1 = o.material_refs.length;
				while(_g < _g1) {
					var i = [_g++];
					var ref = o.material_refs[i[0]];
					iron_data_Data.getMaterial(sceneName,ref,(function(i1) {
						return function(mat) {
							materials[i1[0]] = mat;
							materialsLoaded += 1;
							if(materialsLoaded == o.material_refs.length) {
								_gthis.createMeshObject(o,format,parent,parentObject,materials,done);
							}
						};
					})(i));
				}
			}
		} else if(o.type == "speaker_object") {
			var object2 = this.addSpeakerObject(iron_data_Data.getSpeakerRawByName(format.speaker_datas,o.data_ref),parent);
			this.returnObject(object2,o,done);
		} else if(o.type == "object") {
			var object3 = this.addObject(parent);
			this.returnObject(object3,o,function(ro) {
				if(o.group_ref != null) {
					var spawned = 0;
					var object_refs = _gthis.getGroupObjectRefs(o.group_ref);
					if(object_refs.length == 0) {
						done(ro);
					} else {
						var _g2 = 0;
						while(_g2 < object_refs.length) {
							var s = object_refs[_g2];
							++_g2;
							_gthis.spawnObject(s,ro,function(spawnedObject) {
								if(!_gthis.isObjectInGroup(o.group_ref,spawnedObject.parent)) {
									var _g3 = 0;
									var _g11 = format.groups;
									while(_g3 < _g11.length) {
										var group = _g11[_g3];
										++_g3;
										if(group.name == o.group_ref) {
											spawnedObject.transform.translate(-group.instance_offset[0],-group.instance_offset[1],-group.instance_offset[2]);
											break;
										}
									}
								}
								if((spawned += 1) == object_refs.length) {
									done(ro);
								}
							});
						}
					}
				} else {
					done(ro);
				}
			});
		} else {
			done(null);
		}
	}
	,getGroupObjectRefs: function(group_ref) {
		var _g = 0;
		var _g1 = iron_Scene.active.raw.groups;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.name == group_ref) {
				return g.object_refs;
			}
		}
		return null;
	}
	,getGroupObjectsRaw: function(groupRef) {
		var objectRefs = this.getGroupObjectRefs(groupRef);
		var objects = [];
		if(objectRefs == null) {
			return objects;
		}
		var _g = 0;
		while(_g < objectRefs.length) {
			var objRef = objectRefs[_g];
			++_g;
			var rawObj = iron_Scene.getRawObjectByName(this.raw,objRef);
			objects.push(rawObj);
			var childRefs = this.getChildObjectsRaw(rawObj);
			objects = objects.concat(childRefs);
		}
		return objects;
	}
	,getChildObjectsRaw: function(rawObj,recursive) {
		if(recursive == null) {
			recursive = true;
		}
		var children = rawObj.children;
		if(children == null) {
			return [];
		}
		children = children.slice();
		if(recursive) {
			var _g = 0;
			var _g1 = rawObj.children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				var childRefs = this.getChildObjectsRaw(child);
				children = children.concat(childRefs);
			}
		}
		return children;
	}
	,isObjectInGroup: function(groupRef,object) {
		var _g = 0;
		var _g1 = this.getGroupObjectsRaw(groupRef);
		while(_g < _g1.length) {
			var obj = _g1[_g];
			++_g;
			if(obj.name == object.name) {
				return true;
			}
		}
		return false;
	}
	,childCount: function(o) {
		var i = o.children.length;
		if(o.children != null) {
			var _g = 0;
			var _g1 = o.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				i += this.childCount(c);
			}
		}
		return i;
	}
	,streamMeshObject: function(object_file,data_ref,sceneName,armature,materials,parent,o,done) {
		this.sceneStream.add(object_file,data_ref,sceneName,armature,materials,parent,o);
		if(o.children != null) {
			this.objectsTraversed += o.children.length;
		}
		this.returnObject(null,null,done);
	}
	,isLod: function(raw) {
		if(raw != null && raw.lods != null) {
			return raw.lods.length > 0;
		} else {
			return false;
		}
	}
	,createMeshObject: function(o,format,parent,parentObject,materials,done) {
		var _gthis = this;
		var ref = o.data_ref.split("/");
		var object_file = "";
		var data_ref = "";
		var sceneName = format.name;
		if(ref.length == 2) {
			object_file = ref[0];
			data_ref = ref[1];
		} else {
			object_file = sceneName;
			data_ref = o.data_ref;
		}
		if(parentObject != null && parentObject.bone_actions != null) {
			var bactions = [];
			var _g = 0;
			var _g1 = parentObject.bone_actions;
			while(_g < _g1.length) {
				var ref1 = _g1[_g];
				++_g;
				iron_data_Data.getSceneRaw(ref1,function(action) {
					bactions.push(action);
					if(bactions.length == parentObject.bone_actions.length) {
						var armature = null;
						var _g2 = 0;
						var _g11 = _gthis.armatures;
						while(_g2 < _g11.length) {
							var a = _g11[_g2];
							++_g2;
							if(a.uid == parent.uid) {
								armature = a;
								break;
							}
						}
						if(armature == null) {
							var _g21 = 0;
							var _g3 = _gthis.armatures;
							while(_g21 < _g3.length) {
								var a1 = _g3[_g21];
								++_g21;
								if(a1.name == parent.name) {
									parent.name += "." + parent.uid;
									break;
								}
							}
							armature = new iron_data_Armature(parent.uid,parent.name,bactions);
							_gthis.armatures.push(armature);
						}
						_gthis.streamMeshObject(object_file,data_ref,sceneName,armature,materials,parent,o,done);
					}
				});
			}
		} else {
			this.streamMeshObject(object_file,data_ref,sceneName,null,materials,parent,o,done);
		}
	}
	,returnMeshObject: function(object_file,data_ref,sceneName,armature,materials,parent,o,done) {
		var _gthis = this;
		iron_data_Data.getMesh(object_file,data_ref,function(mesh) {
			if(mesh.isSkinned) {
				var g = mesh.geom;
				if(armature != null) {
					g.addArmature(armature);
				} else {
					g.addAction(mesh.format.objects,"none");
				}
			}
			var object = _gthis.addMeshObject(mesh,materials,parent);
			if(o.particle_refs != null) {
				var _g = 0;
				var _g1 = o.particle_refs;
				while(_g < _g1.length) {
					var ref = _g1[_g];
					++_g;
					(js_Boot.__cast(object , iron_object_MeshObject)).setupParticleSystem(sceneName,ref);
				}
			}
			if(o.tilesheet_ref != null) {
				(js_Boot.__cast(object , iron_object_MeshObject)).setupTilesheet(sceneName,o.tilesheet_ref,o.tilesheet_action_ref);
			}
			_gthis.returnObject(object,o,done);
		});
	}
	,returnObject: function(object,o,done) {
		var _gthis = this;
		if(object != null && o.object_actions != null) {
			var oactions = [];
			while(oactions.length < o.object_actions.length) oactions.push(null);
			var actionsLoaded = 0;
			var _g = 0;
			var _g1 = o.object_actions.length;
			while(_g < _g1) {
				var i = [_g++];
				var ref = o.object_actions[i[0]];
				if(ref == "null") {
					actionsLoaded += 1;
					continue;
				}
				iron_data_Data.getSceneRaw(ref,(function(i1) {
					return function(action) {
						oactions[i1[0]] = action;
						actionsLoaded += 1;
						if(actionsLoaded == o.object_actions.length) {
							_gthis.returnObjectLoaded(object,o,oactions,done);
						}
					};
				})(i));
			}
		} else {
			this.returnObjectLoaded(object,o,null,done);
		}
	}
	,returnObjectLoaded: function(object,o,oactions,done) {
		if(object != null) {
			object.raw = o;
			object.name = o.name;
			if(o.visible != null) {
				object.visible = o.visible;
			}
			if(o.visible_mesh != null) {
				object.visibleMesh = o.visible_mesh;
			}
			if(o.visible_shadow != null) {
				object.visibleShadow = o.visible_shadow;
			}
			iron_Scene.createConstraints(o.constraints,object);
			iron_Scene.generateTransform(o,object.transform);
			object.setupAnimation(oactions);
			if(o.properties != null) {
				object.properties = new haxe_ds_StringMap();
				var _g = 0;
				var _g1 = o.properties;
				while(_g < _g1.length) {
					var p = _g1[_g];
					++_g;
					var key = p.name;
					var _this = object.properties;
					var value = p.value;
					if(__map_reserved[key] != null) {
						_this.setReserved(key,value);
					} else {
						_this.h[key] = value;
					}
				}
			}
			if(!iron_Scene.active.initializing) {
				iron_Scene.createTraits(o.traits,object);
			}
		}
		done(object);
	}
	,loadEmbeddedData: function(datas,done) {
		if(datas == null) {
			done();
			return;
		}
		var loaded = 0;
		var _g = 0;
		while(_g < datas.length) {
			var file = datas[_g];
			++_g;
			this.embedData(file,function() {
				loaded += 1;
				if(loaded == datas.length) {
					done();
				}
			});
		}
	}
	,embedData: function(file,done) {
		var _gthis = this;
		if(StringTools.endsWith(file,".raw")) {
			iron_data_Data.getBlob(file,function(blob) {
				var b = blob.toBytes();
				var w = (Math.pow(b.length,0.33333333333333331) | 0) + 1;
				var image = kha_Image.fromBytes3D(b,w,w,w,1);
				var _this = _gthis.embedded;
				if(__map_reserved[file] != null) {
					_this.setReserved(file,image);
				} else {
					_this.h[file] = image;
				}
				done();
			});
		} else {
			iron_data_Data.getImage(file,function(image1) {
				var _this1 = _gthis.embedded;
				if(__map_reserved[file] != null) {
					_this1.setReserved(file,image1);
				} else {
					_this1.h[file] = image1;
				}
				done();
			});
		}
	}
	,notifyOnInit: function(f) {
		if(this.ready) {
			f();
		} else {
			this.traitInits.push(f);
		}
	}
	,removeInit: function(f) {
		HxOverrides.remove(this.traitInits,f);
	}
	,notifyOnRemove: function(f) {
		this.traitRemoves.push(f);
	}
	,__class__: iron_Scene
};
var iron_system_Time = function() { };
$hxClasses["iron.system.Time"] = iron_system_Time;
iron_system_Time.__name__ = "iron.system.Time";
iron_system_Time.__properties__ = {get_delta:"get_delta",get_step:"get_step"};
iron_system_Time.get_step = function() {
	return 0.016666666666666666;
};
iron_system_Time.get_delta = function() {
	return 0.016666666666666666 * iron_system_Time.scale;
};
iron_system_Time.time = function() {
	return kha_Scheduler.time();
};
iron_system_Time.realTime = function() {
	return kha_Scheduler.realTime();
};
iron_system_Time.update = function() {
	iron_system_Time.realDelta = kha_Scheduler.realTime() - iron_system_Time.last;
	iron_system_Time.last = kha_Scheduler.realTime();
};
var armory_trait_internal_Bridge = $hx_exports["iron"] = function() { };
$hxClasses["armory.trait.internal.Bridge"] = armory_trait_internal_Bridge;
armory_trait_internal_Bridge.__name__ = "armory.trait.internal.Bridge";
armory_trait_internal_Bridge.log = function(s) {
	haxe_Log.trace(s,{ fileName : "Sources/armory/trait/internal/Bridge.hx", lineNumber : 14, className : "armory.trait.internal.Bridge", methodName : "log"});
};
var armory_trait_internal_CanvasScript = function(canvasName,font) {
	if(font == null) {
		font = "font_default.ttf";
	}
	this.onReady = null;
	this.canvas = null;
	var _gthis = this;
	iron_Trait.call(this);
	iron_data_Data.getBlob(canvasName + ".json",function(blob) {
		iron_data_Data.getBlob("_themes.json",function(tBlob) {
			if(tBlob.get_length() != 0) {
				zui_Canvas.themes = JSON.parse(tBlob.toString());
			} else {
				haxe_Log.trace("\"_themes.json\" is empty! Using default theme instead.",{ fileName : "Sources/armory/trait/internal/CanvasScript.hx", lineNumber : 34, className : "armory.trait.internal.CanvasScript", methodName : "new"});
			}
			if(zui_Canvas.themes.length == 0) {
				zui_Canvas.themes.push(zui_Themes.light);
			}
			iron_data_Data.getFont(font,function(f) {
				var c = JSON.parse(blob.toString());
				if(c.theme == null) {
					c.theme = zui_Canvas.themes[0].NAME;
				}
				var tmp = zui_Canvas.getTheme(c.theme);
				_gthis.cui = new zui_Zui({ font : f, theme : tmp});
				if(c.assets == null || c.assets.length == 0) {
					_gthis.canvas = c;
				} else {
					var loaded = 0;
					var _g = 0;
					var _g1 = c.assets;
					while(_g < _g1.length) {
						var asset = [_g1[_g]];
						++_g;
						var file = asset[0].name;
						iron_data_Data.getImage(file,(function(asset1) {
							return function(image) {
								zui_Canvas.assetMap.h[asset1[0].id] = image;
								if((loaded += 1) >= c.assets.length) {
									_gthis.canvas = c;
								}
							};
						})(asset));
					}
				}
			});
		});
	});
	this.notifyOnRender2D(function(g) {
		if(_gthis.canvas == null) {
			return;
		}
		var tmp1 = kha_System.windowWidth();
		var tmp2 = kha_System.windowHeight();
		_gthis.setCanvasDimensions(tmp1,tmp2);
		var events = zui_Canvas.draw(_gthis.cui,_gthis.canvas,g);
		var _g2 = 0;
		while(_g2 < events.length) {
			var e = events[_g2];
			++_g2;
			var all = armory_system_Event.get(e);
			if(all != null) {
				var _g3 = 0;
				while(_g3 < all.length) {
					var entry = all[_g3];
					++_g3;
					entry.onEvent();
				}
			}
		}
		if(_gthis.onReady != null) {
			_gthis.onReady();
			_gthis.onReady = null;
		}
	});
};
$hxClasses["armory.trait.internal.CanvasScript"] = armory_trait_internal_CanvasScript;
armory_trait_internal_CanvasScript.__name__ = "armory.trait.internal.CanvasScript";
armory_trait_internal_CanvasScript.__super__ = iron_Trait;
armory_trait_internal_CanvasScript.prototype = $extend(iron_Trait.prototype,{
	cui: null
	,canvas: null
	,ready: null
	,get_ready: function() {
		return this.canvas != null;
	}
	,onReady: null
	,notifyOnReady: function(f) {
		this.onReady = f;
	}
	,getElement: function(name) {
		var _g = 0;
		var _g1 = this.canvas.elements;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(e.name == name) {
				return e;
			}
		}
		return null;
	}
	,getElements: function() {
		return this.canvas.elements;
	}
	,getCanvas: function() {
		return this.canvas;
	}
	,setUiScale: function(factor) {
		this.cui.setScale(factor);
	}
	,setCanvasVisibility: function(visible) {
		var _g = 0;
		var _g1 = this.canvas.elements;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			e.visible = visible;
		}
	}
	,setCanvasDimensions: function(x,y) {
		this.canvas.width = x;
		this.canvas.height = y;
	}
	,setCanvasFontSize: function(fontSize) {
		this.cui.t.FONT_SIZE = fontSize;
	}
	,getHandle: function(name) {
		var this1 = zui_Canvas.h.children;
		var key = this.getElement(name).id;
		return this1.h[key];
	}
	,__class__: armory_trait_internal_CanvasScript
	,__properties__: {get_ready:"get_ready"}
});
var armory_trait_internal_DebugConsole = function(scaleFactor) {
	if(scaleFactor == null) {
		scaleFactor = 1.0;
	}
	this.debugDrawSet = false;
	this.selectedTraits = [];
	this.selectedType = "";
	this.benchTime = 0.0;
	this.benchFrames = 0;
	this.benchmark = false;
	this.graphB = null;
	this.graphA = null;
	this.graph = null;
	this.physTimeAvg = 0.0;
	this.physTime = 0.0;
	this.animTimeAvg = 0.0;
	this.animTime = 0.0;
	this.updateTimeAvg = 0.0;
	this.updateTime = 0.0;
	this.renderPathTimeAvg = 0.0;
	this.renderPathTime = 0.0;
	this.frameTimeAvgMax = 0.0;
	this.frameTimeAvgMin = 0.0;
	this.frameTimeAvg = 0.0;
	this.frames = 0;
	this.totalTime = 0.0;
	this.frameTime = 0.0;
	this.lastTime = 0.0;
	this.scaleFactor = 1.0;
	this.visible = true;
	var _gthis = this;
	iron_Trait.call(this);
	this.scaleFactor = scaleFactor;
	iron_data_Data.getFont("font_default.ttf",function(font) {
		_gthis.ui = new zui_Zui({ scaleFactor : scaleFactor, font : font});
		_gthis.notifyOnRender2D($bind(_gthis,_gthis.render2D));
		_gthis.notifyOnUpdate($bind(_gthis,_gthis.update));
		if(armory_trait_internal_DebugConsole.haxeTrace == null) {
			armory_trait_internal_DebugConsole.haxeTrace = haxe_Log.trace;
			haxe_Log.trace = armory_trait_internal_DebugConsole.consoleTrace;
		}
		kha_input_Keyboard.get().notify(null,null,function(char) {
			if(char == "~") {
				_gthis.visible = !_gthis.visible;
			} else if(char == "[") {
				armory_trait_internal_DebugConsole.debugFloat -= 0.1;
				haxe_Log.trace(armory_trait_internal_DebugConsole.debugFloat,{ fileName : "Sources/armory/trait/internal/DebugConsole.hx", lineNumber : 75, className : "armory.trait.internal.DebugConsole", methodName : "new"});
			} else if(char == "]") {
				armory_trait_internal_DebugConsole.debugFloat += 0.1;
				haxe_Log.trace(armory_trait_internal_DebugConsole.debugFloat,{ fileName : "Sources/armory/trait/internal/DebugConsole.hx", lineNumber : 76, className : "armory.trait.internal.DebugConsole", methodName : "new"});
			}
		});
	});
};
$hxClasses["armory.trait.internal.DebugConsole"] = armory_trait_internal_DebugConsole;
armory_trait_internal_DebugConsole.__name__ = "armory.trait.internal.DebugConsole";
armory_trait_internal_DebugConsole.consoleTrace = function(v,inf) {
	armory_trait_internal_DebugConsole.lastTraces.unshift(Std.string(v));
	if(armory_trait_internal_DebugConsole.lastTraces.length > 10) {
		armory_trait_internal_DebugConsole.lastTraces.pop();
	}
	armory_trait_internal_DebugConsole.haxeTrace(v,inf);
};
armory_trait_internal_DebugConsole.roundfp = function(f,precision) {
	if(precision == null) {
		precision = 2;
	}
	f *= Math.pow(10,precision);
	return Math.round(f) / Math.pow(10,precision);
};
armory_trait_internal_DebugConsole.__super__ = iron_Trait;
armory_trait_internal_DebugConsole.prototype = $extend(iron_Trait.prototype,{
	visible: null
	,ui: null
	,scaleFactor: null
	,lastTime: null
	,frameTime: null
	,totalTime: null
	,frames: null
	,frameTimeAvg: null
	,frameTimeAvgMin: null
	,frameTimeAvgMax: null
	,renderPathTime: null
	,renderPathTimeAvg: null
	,updateTime: null
	,updateTimeAvg: null
	,animTime: null
	,animTimeAvg: null
	,physTime: null
	,physTimeAvg: null
	,graph: null
	,graphA: null
	,graphB: null
	,benchmark: null
	,benchFrames: null
	,benchTime: null
	,selectedObject: null
	,selectedType: null
	,selectedTraits: null
	,debugDrawSet: null
	,selectObject: function(o) {
		var _gthis = this;
		this.selectedObject = o;
		if(!this.debugDrawSet) {
			this.debugDrawSet = true;
			armory_trait_internal_DebugDraw.notifyOnRender(function(draw) {
				if(_gthis.selectedObject != null) {
					draw.bounds(_gthis.selectedObject.transform);
				}
			});
		}
	}
	,updateGraph: function() {
		if(this.graph == null) {
			this.graphA = kha_Image.createRenderTarget(280,33);
			this.graphB = kha_Image.createRenderTarget(280,33);
			this.graph = this.graphA;
		} else {
			this.graph = this.graph == this.graphA ? this.graphB : this.graphA;
		}
		var graphPrev = this.graph == this.graphA ? this.graphB : this.graphA;
		this.graph.get_g2().begin(true,0);
		this.graph.get_g2().set_color(-1);
		this.graph.get_g2().drawImage(graphPrev,-3,0);
		var avg = Math.round(this.frameTimeAvg * 1000);
		var miss = avg > 16.7 ? (avg - 16.7) / 16.7 : 0.0;
		this.graph.get_g2().set_color(kha__$Color_Color_$Impl_$.fromFloats(miss,1 - miss,0,1.0));
		this.graph.get_g2().fillRect(277,33 - avg,3,avg);
		this.graph.get_g2().set_color(-16777216);
		this.graph.get_g2().fillRect(277,16,3,1);
		this.graph.get_g2().end();
	}
	,render2D: function(g) {
		var _gthis = this;
		if(!this.visible) {
			return;
		}
		var hwin = zui_Handle.global.nest(0,null);
		var htab = zui_Handle.global.nest(1,{ position : 0});
		var ww = 280 * this.scaleFactor | 0;
		var wx = kha_System.windowWidth() - ww;
		var wy = 0;
		var wh = kha_System.windowHeight();
		var bindG = true;
		if(bindG) {
			g.end();
		}
		this.ui.begin(g);
		if(this.ui.window(hwin,wx,wy,ww,wh,true)) {
			var tmp = this.ui.tab(htab,"");
			if(this.ui.tab(htab,"Scene")) {
				if(this.ui.panel(zui_Handle.global.nest(2,{ selected : true}),"Outliner")) {
					this.ui.indent();
					var lineCounter = 0;
					var drawList = null;
					drawList = function(listHandle,currentObject) {
						if(currentObject.name.charAt(0) == ".") {
							return;
						}
						var b = false;
						if(lineCounter % 2 == 0) {
							_gthis.ui.g.set_color(_gthis.ui.t.SEPARATOR_COL);
							var _this = _gthis.ui;
							_gthis.ui.g.fillRect(0,_gthis.ui._y,_gthis.ui._windowW,_this.t.ELEMENT_H * _this.ops.scaleFactor);
							_gthis.ui.g.set_color(-1);
						}
						if(currentObject == _gthis.selectedObject) {
							_gthis.ui.g.set_color(-14656100);
							var _this1 = _gthis.ui;
							_gthis.ui.g.fillRect(0,_gthis.ui._y,_gthis.ui._windowW,_this1.t.ELEMENT_H * _this1.ops.scaleFactor);
							_gthis.ui.g.set_color(-1);
						}
						if(currentObject.children.length > 0) {
							_gthis.ui.row([0.076923076923076927,0.92307692307692313]);
							b = _gthis.ui.panel(listHandle.nest(lineCounter,{ selected : true}),"",true,false,false);
							_gthis.ui.text(currentObject.name);
						} else {
							_gthis.ui._x += 18;
							_gthis.ui.g.set_color(_gthis.ui.t.ACCENT_COL);
							var _this2 = _gthis.ui;
							var _this3 = _gthis.ui;
							_gthis.ui.g.drawLine(_gthis.ui._x - 10,_gthis.ui._y + _this2.t.ELEMENT_H * _this2.ops.scaleFactor / 2,_gthis.ui._x,_gthis.ui._y + _this3.t.ELEMENT_H * _this3.ops.scaleFactor / 2);
							_gthis.ui.g.set_color(-1);
							_gthis.ui.text(currentObject.name);
							_gthis.ui._x -= 18;
						}
						lineCounter += 1;
						var _this4 = _gthis.ui;
						_gthis.ui._y -= _this4.t.ELEMENT_OFFSET * _this4.ops.scaleFactor;
						if(_gthis.ui.isReleased) {
							_gthis.selectObject(currentObject);
						}
						if(b) {
							var currentY = _gthis.ui._y;
							var _g = 0;
							var _g1 = currentObject.children;
							while(_g < _g1.length) {
								var child = _g1[_g];
								++_g;
								_gthis.ui.indent();
								drawList(listHandle,child);
								_gthis.ui.unindent();
							}
							_gthis.ui.g.set_color(_gthis.ui.t.ACCENT_COL);
							var _this5 = _gthis.ui;
							_gthis.ui.g.drawLine(_gthis.ui._x + 14,currentY,_gthis.ui._x + 14,_gthis.ui._y - _this5.t.ELEMENT_H * _this5.ops.scaleFactor / 2);
							_gthis.ui.g.set_color(-1);
						}
					};
					var _g2 = 0;
					var _g11 = iron_Scene.active.root.children;
					while(_g2 < _g11.length) {
						var c = _g11[_g2];
						++_g2;
						var tmp1 = zui_Handle.global.nest(3,null);
						drawList(tmp1,c);
					}
					this.ui.unindent();
				}
				if(this.selectedObject == null) {
					this.selectedType = "";
				}
				if(this.ui.panel(zui_Handle.global.nest(4,{ selected : true}),"Properties " + this.selectedType)) {
					this.ui.indent();
					if(this.selectedObject != null) {
						var h = zui_Handle.global.nest(5,null);
						h.selected = this.selectedObject.visible;
						this.selectedObject.visible = this.ui.check(h,"Visible");
						var localPos = this.selectedObject.transform.loc;
						var t = this.selectedObject.transform;
						var x = t.world.self._30;
						var y = t.world.self._31;
						var z = t.world.self._32;
						var w = 1.0;
						if(w == null) {
							w = 1.0;
						}
						if(z == null) {
							z = 0.0;
						}
						if(y == null) {
							y = 0.0;
						}
						if(x == null) {
							x = 0.0;
						}
						var worldPos_x = x;
						var worldPos_y = y;
						var worldPos_z = z;
						var worldPos_w = w;
						var scale = this.selectedObject.transform.scale;
						var _this6 = this.selectedObject.transform.rot;
						var a = -2 * (_this6.x * _this6.z - _this6.w * _this6.y);
						var b1 = _this6.w * _this6.w + _this6.x * _this6.x - _this6.y * _this6.y - _this6.z * _this6.z;
						var c1 = 2 * (_this6.x * _this6.y + _this6.w * _this6.z);
						var d = -2 * (_this6.y * _this6.z - _this6.w * _this6.x);
						var e = _this6.w * _this6.w - _this6.x * _this6.x + _this6.y * _this6.y - _this6.z * _this6.z;
						var x1 = Math.atan2(d,e);
						var y1 = Math.atan2(a,b1);
						var z1 = Math.asin(c1);
						if(z1 == null) {
							z1 = 0.0;
						}
						if(y1 == null) {
							y1 = 0.0;
						}
						if(x1 == null) {
							x1 = 0.0;
						}
						var rot_x = x1;
						var rot_y = y1;
						var rot_z = z1;
						var rot_w = 1.0;
						var dim = this.selectedObject.transform.dim;
						rot_x *= 57.29579143313326;
						rot_y *= 57.29579143313326;
						rot_z *= 57.29579143313326;
						var f = 0.0;
						this.ui.text("Transforms");
						this.ui.indent();
						this.ui.row(armory_trait_internal_DebugConsole.row4);
						this.ui.text("World Loc");
						this.ui.enabled = false;
						h = zui_Handle.global.nest(6,null);
						h.text = armory_trait_internal_DebugConsole.roundfp(worldPos_x) + "";
						f = parseFloat(this.ui.textInput(h,"X"));
						h = zui_Handle.global.nest(7,null);
						h.text = armory_trait_internal_DebugConsole.roundfp(worldPos_y) + "";
						f = parseFloat(this.ui.textInput(h,"Y"));
						h = zui_Handle.global.nest(8,null);
						h.text = armory_trait_internal_DebugConsole.roundfp(worldPos_z) + "";
						f = parseFloat(this.ui.textInput(h,"Z"));
						this.ui.enabled = true;
						this.ui.row(armory_trait_internal_DebugConsole.row4);
						this.ui.text("Local Loc");
						h = zui_Handle.global.nest(9,null);
						h.text = armory_trait_internal_DebugConsole.roundfp(localPos.x) + "";
						f = parseFloat(this.ui.textInput(h,"X"));
						if(this.ui.changed) {
							localPos.x = f;
						}
						h = zui_Handle.global.nest(10,null);
						h.text = armory_trait_internal_DebugConsole.roundfp(localPos.y) + "";
						f = parseFloat(this.ui.textInput(h,"Y"));
						if(this.ui.changed) {
							localPos.y = f;
						}
						h = zui_Handle.global.nest(11,null);
						h.text = armory_trait_internal_DebugConsole.roundfp(localPos.z) + "";
						f = parseFloat(this.ui.textInput(h,"Z"));
						if(this.ui.changed) {
							localPos.z = f;
						}
						this.ui.row(armory_trait_internal_DebugConsole.row4);
						this.ui.text("Rotation");
						h = zui_Handle.global.nest(12,null);
						h.text = armory_trait_internal_DebugConsole.roundfp(rot_x) + "";
						f = parseFloat(this.ui.textInput(h,"X"));
						var changed = false;
						if(this.ui.changed) {
							changed = true;
							rot_x = f;
						}
						h = zui_Handle.global.nest(13,null);
						h.text = armory_trait_internal_DebugConsole.roundfp(rot_y) + "";
						f = parseFloat(this.ui.textInput(h,"Y"));
						if(this.ui.changed) {
							changed = true;
							rot_y = f;
						}
						h = zui_Handle.global.nest(14,null);
						h.text = armory_trait_internal_DebugConsole.roundfp(rot_z) + "";
						f = parseFloat(this.ui.textInput(h,"Z"));
						if(this.ui.changed) {
							changed = true;
							rot_z = f;
						}
						if(changed && this.selectedObject.name != "Scene") {
							rot_x *= 0.01745328888888889;
							rot_y *= 0.01745328888888889;
							rot_z *= 0.01745328888888889;
							var _this7 = this.selectedObject.transform.rot;
							var f1 = rot_x / 2;
							var c11 = Math.cos(f1);
							var s1 = Math.sin(f1);
							f1 = rot_y / 2;
							var c2 = Math.cos(f1);
							var s2 = Math.sin(f1);
							f1 = rot_z / 2;
							var c3 = Math.cos(f1);
							var s3 = Math.sin(f1);
							_this7.x = s1 * c2 * c3 + c11 * s2 * s3;
							_this7.y = c11 * s2 * c3 + s1 * c2 * s3;
							_this7.z = c11 * c2 * s3 - s1 * s2 * c3;
							_this7.w = c11 * c2 * c3 - s1 * s2 * s3;
							this.selectedObject.transform.buildMatrix();
						}
						this.ui.row(armory_trait_internal_DebugConsole.row4);
						this.ui.text("Scale");
						h = zui_Handle.global.nest(15,null);
						h.text = armory_trait_internal_DebugConsole.roundfp(scale.x) + "";
						f = parseFloat(this.ui.textInput(h,"X"));
						if(this.ui.changed) {
							scale.x = f;
						}
						h = zui_Handle.global.nest(16,null);
						h.text = armory_trait_internal_DebugConsole.roundfp(scale.y) + "";
						f = parseFloat(this.ui.textInput(h,"Y"));
						if(this.ui.changed) {
							scale.y = f;
						}
						h = zui_Handle.global.nest(17,null);
						h.text = armory_trait_internal_DebugConsole.roundfp(scale.z) + "";
						f = parseFloat(this.ui.textInput(h,"Z"));
						if(this.ui.changed) {
							scale.z = f;
						}
						this.ui.row(armory_trait_internal_DebugConsole.row4);
						this.ui.text("Dimensions");
						h = zui_Handle.global.nest(18,null);
						h.text = armory_trait_internal_DebugConsole.roundfp(dim.x) + "";
						f = parseFloat(this.ui.textInput(h,"X"));
						if(this.ui.changed) {
							dim.x = f;
						}
						h = zui_Handle.global.nest(19,null);
						h.text = armory_trait_internal_DebugConsole.roundfp(dim.y) + "";
						f = parseFloat(this.ui.textInput(h,"Y"));
						if(this.ui.changed) {
							dim.y = f;
						}
						h = zui_Handle.global.nest(20,null);
						h.text = armory_trait_internal_DebugConsole.roundfp(dim.z) + "";
						f = parseFloat(this.ui.textInput(h,"Z"));
						if(this.ui.changed) {
							dim.z = f;
						}
						this.selectedObject.transform.dirty = true;
						this.ui.unindent();
						if(this.selectedObject.traits.length > 0) {
							this.ui.text("Traits:");
							this.ui.indent();
							var _g3 = 0;
							var _g12 = this.selectedObject.traits;
							while(_g3 < _g12.length) {
								var t1 = _g12[_g3];
								++_g3;
								this.ui.row([0.75,0.25]);
								var c4 = js_Boot.getClass(t1);
								this.ui.text(c4.__name__);
								if(this.ui.button("Details")) {
									if(this.selectedTraits.indexOf(t1) == -1) {
										this.selectedTraits.push(t1);
									}
								}
							}
							this.ui.unindent();
						}
						if(this.selectedObject.name == "Scene") {
							this.selectedType = "(Scene)";
							if(iron_Scene.active.world != null) {
								var p = iron_Scene.active.world.probe;
								var tmp2 = this.ui;
								var tmp3 = zui_Handle.global.nest(21,{ value : p.raw.strength});
								p.raw.strength = tmp2.slider(tmp3,"Env Strength",0.0,5.0,true);
							} else {
								this.ui.text("This scene has no world data to edit.");
							}
						} else if(((this.selectedObject) instanceof iron_object_LightObject)) {
							this.selectedType = "(Light)";
							var light = js_Boot.__cast(this.selectedObject , iron_object_LightObject);
							var lightHandle = zui_Handle.global.nest(22,null);
							lightHandle.value = light.data.raw.strength / 10;
							var tmp4 = this.ui.slider(lightHandle,"Strength",0.0,5.0,true);
							light.data.raw.strength = tmp4 * 10;
						} else if(((this.selectedObject) instanceof iron_object_CameraObject)) {
							this.selectedType = "(Camera)";
							var cam = js_Boot.__cast(this.selectedObject , iron_object_CameraObject);
							var fovHandle = zui_Handle.global.nest(23,null);
							fovHandle.value = (cam.data.raw.fov * 100 | 0) / 100;
							cam.data.raw.fov = this.ui.slider(fovHandle,"Field of View",0.3,2.0,true);
							if(this.ui.changed) {
								cam.buildProjection();
							}
						} else {
							this.selectedType = "(Object)";
						}
					}
					this.ui.unindent();
				}
			}
			var avg = Math.round(this.frameTimeAvg * 10000) / 10;
			var fpsAvg = avg > 0 ? Math.round(1000 / avg) : 0;
			if(this.ui.tab(htab,"" + avg + " ms")) {
				if(this.ui.panel(zui_Handle.global.nest(24,{ selected : true}),"Performance")) {
					if(this.graph != null) {
						this.ui.image(this.graph);
					}
					this.ui.indent();
					this.ui.row(armory_trait_internal_DebugConsole.lrow);
					this.ui.text("Frame");
					this.ui.text("" + avg + " ms / " + fpsAvg + " fps",2);
					this.ui.row(armory_trait_internal_DebugConsole.lrow);
					this.ui.text("Render-path");
					this.ui.text(Math.round(this.renderPathTimeAvg * 10000) / 10 + " ms",2);
					this.ui.row(armory_trait_internal_DebugConsole.lrow);
					this.ui.text("Script");
					this.ui.text(Math.round((this.updateTimeAvg - this.physTimeAvg - this.animTimeAvg) * 10000) / 10 + " ms",2);
					this.ui.row(armory_trait_internal_DebugConsole.lrow);
					this.ui.text("Animation");
					this.ui.text(Math.round(this.animTimeAvg * 10000) / 10 + " ms",2);
					this.ui.row(armory_trait_internal_DebugConsole.lrow);
					this.ui.text("Physics");
					this.ui.text(Math.round(this.physTimeAvg * 10000) / 10 + " ms",2);
					this.ui.unindent();
				}
				if(this.ui.panel(zui_Handle.global.nest(25,{ selected : false}),"Draw")) {
					this.ui.indent();
					this.ui.row(armory_trait_internal_DebugConsole.lrow);
					var numMeshes = iron_Scene.active.meshes.length;
					this.ui.text("Meshes");
					this.ui.text(numMeshes + "",2);
					this.ui.row(armory_trait_internal_DebugConsole.lrow);
					this.ui.text("Draw calls");
					this.ui.text(iron_RenderPath.drawCalls + "",2);
					this.ui.row(armory_trait_internal_DebugConsole.lrow);
					this.ui.text("Tris mesh");
					this.ui.text(iron_RenderPath.numTrisMesh + "",2);
					this.ui.row(armory_trait_internal_DebugConsole.lrow);
					this.ui.text("Tris shadow");
					this.ui.text(iron_RenderPath.numTrisShadow + "",2);
					this.ui.row(armory_trait_internal_DebugConsole.lrow);
					this.ui.text("Culled");
					this.ui.text(iron_RenderPath.culled + " / " + numMeshes * 2,2);
					this.ui.row(armory_trait_internal_DebugConsole.lrow);
					var total = iron_Scene.active.sceneStream.sceneTotal();
					this.ui.text("Streamed");
					this.ui.text("" + numMeshes + " / " + total,2);
					this.ui.unindent();
				}
				if(this.ui.panel(zui_Handle.global.nest(26,{ selected : false}),"Render Targets")) {
					this.ui.indent();
					var _this8 = iron_RenderPath.active.renderTargets;
					var rt = new haxe_ds__$StringMap_StringMapIterator(_this8,_this8.arrayKeys());
					while(rt.hasNext()) {
						var rt1 = rt.next();
						this.ui.text(rt1.raw.name);
						if(rt1.image != null && !rt1.is3D) {
							this.ui.image(rt1.image);
						}
					}
					this.ui.unindent();
				}
				if(this.ui.panel(zui_Handle.global.nest(27,{ selected : false}),"Cached Materials")) {
					this.ui.indent();
					var _this9 = iron_data_Data.cachedMaterials;
					var c5 = new haxe_ds__$StringMap_StringMapIterator(_this9,_this9.arrayKeys());
					while(c5.hasNext()) {
						var c6 = c5.next();
						this.ui.text(c6.name);
					}
					this.ui.unindent();
				}
				if(this.ui.panel(zui_Handle.global.nest(28,{ selected : false}),"Cached Shaders")) {
					this.ui.indent();
					var _this10 = iron_data_Data.cachedShaders;
					var c7 = new haxe_ds__$StringMap_StringMapIterator(_this10,_this10.arrayKeys());
					while(c7.hasNext()) {
						var c8 = c7.next();
						this.ui.text(c8.name);
					}
					this.ui.unindent();
				}
			}
			if(this.ui.tab(htab,armory_trait_internal_DebugConsole.lastTraces[0] == "" ? "Console" : HxOverrides.substr(armory_trait_internal_DebugConsole.lastTraces[0],0,20))) {
				if(this.ui.panel(zui_Handle.global.nest(29,{ selected : false}),"Script")) {
					this.ui.indent();
					var t2 = this.ui.textInput(zui_Handle.global.nest(30,null));
					if(this.ui.button("Run")) {
						try {
							haxe_Log.trace("> " + t2,{ fileName : "Sources/armory/trait/internal/DebugConsole.hx", lineNumber : 512, className : "armory.trait.internal.DebugConsole", methodName : "render2D"});
							eval(t2);
						} catch( e1 ) {
							haxe_Log.trace(((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1,{ fileName : "Sources/armory/trait/internal/DebugConsole.hx", lineNumber : 513, className : "armory.trait.internal.DebugConsole", methodName : "render2D"});
						}
					}
					this.ui.unindent();
				}
				if(this.ui.panel(zui_Handle.global.nest(31,{ selected : true}),"Log")) {
					this.ui.indent();
					if(this.ui.button("Clear")) {
						armory_trait_internal_DebugConsole.lastTraces[0] = "";
						armory_trait_internal_DebugConsole.lastTraces.splice(1,armory_trait_internal_DebugConsole.lastTraces.length - 1);
					}
					var _g4 = 0;
					var _g13 = armory_trait_internal_DebugConsole.lastTraces;
					while(_g4 < _g13.length) {
						var t3 = _g13[_g4];
						++_g4;
						this.ui.text(t3);
					}
					this.ui.unindent();
				}
			}
			if(armory_trait_internal_DebugConsole.watchNodes.length > 0 && this.ui.tab(htab,"Watch")) {
				var _g5 = 0;
				var _g14 = armory_trait_internal_DebugConsole.watchNodes;
				while(_g5 < _g14.length) {
					var n = _g14[_g5];
					++_g5;
					this.ui.text(n.tree.object.name + "." + n.tree.name + "." + n.name + " = " + Std.string(n.get(0)));
				}
			}
			this.ui.separator();
		}
		var handleWinTrait = zui_Handle.global.nest(32,null);
		var _g6 = 0;
		var _g15 = this.selectedTraits;
		while(_g6 < _g15.length) {
			var trait = _g15[_g6];
			++_g6;
			var objectID = trait.object.uid;
			var traitIndex = trait.object.traits.indexOf(trait);
			var handleWindow = handleWinTrait.nest(objectID).nest(traitIndex);
			wx -= ww + 8;
			wy = 0;
			handleWindow.redraws = 1;
			this.ui.window(handleWindow,wx,wy,ww,wh,true);
			if(this.ui.button("Close Trait View")) {
				HxOverrides.remove(this.selectedTraits,trait);
				handleWinTrait.nest(objectID).unnest(traitIndex);
				continue;
			}
			this.ui.row([0.5,0.5]);
			this.ui.text("Trait:");
			var c9 = js_Boot.getClass(trait);
			this.ui.text(c9.__name__,2);
			this.ui.row([0.5,0.5]);
			this.ui.text("Extends:");
			var tmp5 = this.ui;
			var c10 = js_Boot.getClass(trait);
			var c12 = c10.__super__;
			tmp5.text(c12.__name__,2);
			this.ui.row([0.5,0.5]);
			this.ui.text("Object:");
			this.ui.text(trait.object.name,2);
			this.ui.separator();
			if(this.ui.panel(zui_Handle.global.nest(33,null).nest(objectID).nest(traitIndex),"Attributes")) {
				this.ui.indent();
				var _g7 = 0;
				var _g16 = Reflect.fields(trait);
				while(_g7 < _g16.length) {
					var fieldName = _g16[_g7];
					++_g7;
					this.ui.row([0.5,0.5]);
					this.ui.text(fieldName + "");
					var fieldValue = Reflect.field(trait,fieldName);
					var fieldClass = js_Boot.getClass(fieldValue);
					if(Reflect.isObject(fieldValue) && fieldClass != String) {
						if(fieldClass != null) {
							this.ui.text("<" + fieldClass.__name__ + ">",2);
						} else {
							this.ui.text("<???>",2);
						}
					} else {
						this.ui.text(fieldValue == null ? "null" : "" + fieldValue,2);
					}
				}
				this.ui.unindent();
			}
		}
		this.ui.end(bindG);
		if(bindG) {
			g.begin(false);
		}
		this.totalTime += this.frameTime;
		this.renderPathTime += iron_App.renderPathTime;
		this.frames++;
		if(this.totalTime > 1.0) {
			hwin.redraws = 1;
			var t4 = this.totalTime / this.frames;
			if(this.frameTimeAvg > 0) {
				if(t4 < this.frameTimeAvgMin || this.frameTimeAvgMin == 0) {
					this.frameTimeAvgMin = t4;
				}
				if(t4 > this.frameTimeAvgMax || this.frameTimeAvgMax == 0) {
					this.frameTimeAvgMax = t4;
				}
			}
			this.frameTimeAvg = t4;
			if(this.benchmark) {
				this.benchFrames++;
				if(this.benchFrames > 10) {
					this.benchTime += t4;
				}
				if(this.benchFrames == 20) {
					haxe_Log.trace((this.benchTime / 10 * 1000000 | 0) / 1000,{ fileName : "Sources/armory/trait/internal/DebugConsole.hx", lineNumber : 619, className : "armory.trait.internal.DebugConsole", methodName : "render2D"});
				}
			}
			this.renderPathTimeAvg = this.renderPathTime / this.frames;
			this.updateTimeAvg = this.updateTime / this.frames;
			this.animTimeAvg = this.animTime / this.frames;
			this.physTimeAvg = this.physTime / this.frames;
			this.totalTime = 0;
			this.renderPathTime = 0;
			this.updateTime = 0;
			this.animTime = 0;
			this.physTime = 0;
			this.frames = 0;
			if(htab.position == 2) {
				g.end();
				this.updateGraph();
				g.begin(false);
			}
		}
		this.frameTime = kha_Scheduler.realTime() - this.lastTime;
		this.lastTime = kha_Scheduler.realTime();
	}
	,update: function() {
		armory_trait_WalkNavigation.enabled = !(this.ui.isScrolling || this.ui.dragHandle != null);
		this.updateTime += iron_App.updateTime;
		this.animTime += iron_object_Animation.animationTime;
	}
	,__class__: armory_trait_internal_DebugConsole
});
var iron_math_Vec4 = function(x,y,z,w) {
	if(w == null) {
		w = 1.0;
	}
	if(z == null) {
		z = 0.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["iron.math.Vec4"] = iron_math_Vec4;
iron_math_Vec4.__name__ = "iron.math.Vec4";
iron_math_Vec4.distance = function(v1,v2) {
	var vx = v1.x - v2.x;
	var vy = v1.y - v2.y;
	var vz = v1.z - v2.z;
	return Math.sqrt(vx * vx + vy * vy + vz * vz);
};
iron_math_Vec4.distancef = function(v1x,v1y,v1z,v2x,v2y,v2z) {
	var vx = v1x - v2x;
	var vy = v1y - v2y;
	var vz = v1z - v2z;
	return Math.sqrt(vx * vx + vy * vy + vz * vz);
};
iron_math_Vec4.xAxis = function() {
	return new iron_math_Vec4(1.0,0.0,0.0);
};
iron_math_Vec4.yAxis = function() {
	return new iron_math_Vec4(0.0,1.0,0.0);
};
iron_math_Vec4.zAxis = function() {
	return new iron_math_Vec4(0.0,0.0,1.0);
};
iron_math_Vec4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,cross: function(v) {
		var ax = this.x;
		var ay = this.y;
		var az = this.z;
		var vx = v.x;
		var vy = v.y;
		var vz = v.z;
		this.x = ay * vz - az * vy;
		this.y = az * vx - ax * vz;
		this.z = ax * vy - ay * vx;
		return this;
	}
	,crossvecs: function(a,b) {
		var ax = a.x;
		var ay = a.y;
		var az = a.z;
		var bx = b.x;
		var by = b.y;
		var bz = b.z;
		this.x = ay * bz - az * by;
		this.y = az * bx - ax * bz;
		this.z = ax * by - ay * bx;
		return this;
	}
	,set: function(x,y,z,w) {
		if(w == null) {
			w = 1.0;
		}
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		return this;
	}
	,add: function(v) {
		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
		return this;
	}
	,addf: function(x,y,z) {
		this.x += x;
		this.y += y;
		this.z += z;
		return this;
	}
	,addvecs: function(a,b) {
		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;
		return this;
	}
	,subvecs: function(a,b) {
		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;
		return this;
	}
	,normalize: function() {
		var n = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(n > 0.0) {
			var invN = 1.0 / n;
			this.x *= invN;
			this.y *= invN;
			this.z *= invN;
		}
		return this;
	}
	,mult: function(f) {
		this.x *= f;
		this.y *= f;
		this.z *= f;
		return this;
	}
	,dot: function(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z;
	}
	,setFrom: function(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = v.w;
		return this;
	}
	,clone: function() {
		return new iron_math_Vec4(this.x,this.y,this.z,this.w);
	}
	,lerp: function(from,to,s) {
		this.x = from.x + (to.x - from.x) * s;
		this.y = from.y + (to.y - from.y) * s;
		this.z = from.z + (to.z - from.z) * s;
		return this;
	}
	,applyproj: function(m) {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		var d = 1.0 / (m.self._03 * x + m.self._13 * y + m.self._23 * z + m.self._33);
		this.x = (m.self._00 * x + m.self._10 * y + m.self._20 * z + m.self._30) * d;
		this.y = (m.self._01 * x + m.self._11 * y + m.self._21 * z + m.self._31) * d;
		this.z = (m.self._02 * x + m.self._12 * y + m.self._22 * z + m.self._32) * d;
		return this;
	}
	,applymat: function(m) {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		this.x = m.self._00 * x + m.self._10 * y + m.self._20 * z + m.self._30;
		this.y = m.self._01 * x + m.self._11 * y + m.self._21 * z + m.self._31;
		this.z = m.self._02 * x + m.self._12 * y + m.self._22 * z + m.self._32;
		return this;
	}
	,applymat4: function(m) {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		var w = this.w;
		this.x = m.self._00 * x + m.self._10 * y + m.self._20 * z + m.self._30 * w;
		this.y = m.self._01 * x + m.self._11 * y + m.self._21 * z + m.self._31 * w;
		this.z = m.self._02 * x + m.self._12 * y + m.self._22 * z + m.self._32 * w;
		this.w = m.self._03 * x + m.self._13 * y + m.self._23 * z + m.self._33 * w;
		return this;
	}
	,applyAxisAngle: function(axis,angle) {
		var quat_x = 0.0;
		var quat_y = 0.0;
		var quat_z = 0.0;
		var quat_w = 1.0;
		var s = Math.sin(angle * 0.5);
		quat_x = axis.x * s;
		quat_y = axis.y * s;
		quat_z = axis.z * s;
		quat_w = Math.cos(angle * 0.5);
		var l = Math.sqrt(quat_x * quat_x + quat_y * quat_y + quat_z * quat_z + quat_w * quat_w);
		if(l == 0.0) {
			quat_x = 0;
			quat_y = 0;
			quat_z = 0;
			quat_w = 0;
		} else {
			l = 1.0 / l;
			quat_x *= l;
			quat_y *= l;
			quat_z *= l;
			quat_w *= l;
		}
		var ix = quat_w * this.x + quat_y * this.z - quat_z * this.y;
		var iy = quat_w * this.y + quat_z * this.x - quat_x * this.z;
		var iz = quat_w * this.z + quat_x * this.y - quat_y * this.x;
		var iw = -quat_x * this.x - quat_y * this.y - quat_z * this.z;
		this.x = ix * quat_w + iw * -quat_x + iy * -quat_z - iz * -quat_y;
		this.y = iy * quat_w + iw * -quat_y + iz * -quat_x - ix * -quat_z;
		this.z = iz * quat_w + iw * -quat_z + ix * -quat_y - iy * -quat_x;
		return this;
	}
	,applyQuat: function(q) {
		var ix = q.w * this.x + q.y * this.z - q.z * this.y;
		var iy = q.w * this.y + q.z * this.x - q.x * this.z;
		var iz = q.w * this.z + q.x * this.y - q.y * this.x;
		var iw = -q.x * this.x - q.y * this.y - q.z * this.z;
		this.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;
		this.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;
		this.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;
		return this;
	}
	,equals: function(v) {
		if(this.x == v.x && this.y == v.y) {
			return this.z == v.z;
		} else {
			return false;
		}
	}
	,almostEquals: function(v,prec) {
		if(Math.abs(this.x - v.x) < prec && Math.abs(this.y - v.y) < prec) {
			return Math.abs(this.z - v.z) < prec;
		} else {
			return false;
		}
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,sub: function(v) {
		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
		return this;
	}
	,distanceTo: function(p) {
		return Math.sqrt((p.x - this.x) * (p.x - this.x) + (p.y - this.y) * (p.y - this.y) + (p.z - this.z) * (p.z - this.z));
	}
	,reflect: function(n) {
		var d = 2 * (this.x * n.x + this.y * n.y + this.z * n.z);
		this.x -= d * n.x;
		this.y -= d * n.y;
		this.z -= d * n.z;
		return this;
	}
	,clamp: function(min,max) {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l < min) {
			var n = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
			if(n > 0.0) {
				var invN = 1.0 / n;
				this.x *= invN;
				this.y *= invN;
				this.z *= invN;
			}
			var _this = this;
			_this.x *= min;
			_this.y *= min;
			_this.z *= min;
		} else if(l > max) {
			var n1 = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
			if(n1 > 0.0) {
				var invN1 = 1.0 / n1;
				this.x *= invN1;
				this.y *= invN1;
				this.z *= invN1;
			}
			var _this1 = this;
			_this1.x *= max;
			_this1.y *= max;
			_this1.z *= max;
		}
		return this;
	}
	,toString: function() {
		return "(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";
	}
	,__class__: iron_math_Vec4
};
var armory_trait_internal_DebugDraw = function() {
	this.lines = 0;
	this.strength = 0.02;
	this.color = -65536;
	armory_trait_internal_DebugDraw.inst = this;
	var structure = new kha_graphics4_VertexStructure();
	structure.add("pos",2);
	structure.add("col",2);
	this.pipeline = new kha_graphics4_PipelineState();
	this.pipeline.inputLayout = [structure];
	this.pipeline.fragmentShader = kha_Shaders.line_deferred_frag;
	this.pipeline.vertexShader = kha_Shaders.line_vert;
	this.pipeline.depthWrite = true;
	this.pipeline.depthMode = 4;
	this.pipeline.cullMode = 2;
	this.pipeline.compile();
	this.vpID = this.pipeline.getConstantLocation("ViewProjection");
	this.vp = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	this.vertexBuffer = new kha_graphics4_VertexBuffer(1200,structure,1);
	this.indexBuffer = new kha_graphics4_IndexBuffer(1800,1);
};
$hxClasses["armory.trait.internal.DebugDraw"] = armory_trait_internal_DebugDraw;
armory_trait_internal_DebugDraw.__name__ = "armory.trait.internal.DebugDraw";
armory_trait_internal_DebugDraw.notifyOnRender = function(f) {
	if(armory_trait_internal_DebugDraw.inst == null) {
		armory_trait_internal_DebugDraw.inst = new armory_trait_internal_DebugDraw();
	}
	iron_RenderPath.notifyOnContext("mesh",function(g4,i,len) {
		armory_trait_internal_DebugDraw.g = g4;
		if(i == 0) {
			armory_trait_internal_DebugDraw.inst.begin();
		}
		f(armory_trait_internal_DebugDraw.inst);
		if(i == len - 1) {
			armory_trait_internal_DebugDraw.inst.end();
		}
	});
};
armory_trait_internal_DebugDraw.prototype = {
	color: null
	,strength: null
	,vertexBuffer: null
	,indexBuffer: null
	,pipeline: null
	,vp: null
	,vpID: null
	,vbData: null
	,ibData: null
	,lines: null
	,bounds: function(transform) {
		armory_trait_internal_DebugDraw.objPosition = new iron_math_Vec4(transform.world.self._30,transform.world.self._31,transform.world.self._32,1.0);
		var dx = transform.dim.x / 2;
		var dy = transform.dim.y / 2;
		var dz = transform.dim.z / 2;
		var _this = transform.world;
		var x = _this.self._20;
		var y = _this.self._21;
		var z = _this.self._22;
		if(z == null) {
			z = 0.0;
		}
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		var up_x = x;
		var up_y = y;
		var up_z = z;
		var up_w = 1.0;
		var _this1 = transform.world;
		var x1 = _this1.self._10;
		var y1 = _this1.self._11;
		var z1 = _this1.self._12;
		if(z1 == null) {
			z1 = 0.0;
		}
		if(y1 == null) {
			y1 = 0.0;
		}
		if(x1 == null) {
			x1 = 0.0;
		}
		var look_x = x1;
		var look_y = y1;
		var look_z = z1;
		var look_w = 1.0;
		var _this2 = transform.world;
		var x2 = _this2.self._00;
		var y2 = _this2.self._01;
		var z2 = _this2.self._02;
		if(z2 == null) {
			z2 = 0.0;
		}
		if(y2 == null) {
			y2 = 0.0;
		}
		if(x2 == null) {
			x2 = 0.0;
		}
		var right_x = x2;
		var right_y = y2;
		var right_z = z2;
		var right_w = 1.0;
		var n = Math.sqrt(up_x * up_x + up_y * up_y + up_z * up_z);
		if(n > 0.0) {
			var invN = 1.0 / n;
			up_x *= invN;
			up_y *= invN;
			up_z *= invN;
		}
		var n1 = Math.sqrt(look_x * look_x + look_y * look_y + look_z * look_z);
		if(n1 > 0.0) {
			var invN1 = 1.0 / n1;
			look_x *= invN1;
			look_y *= invN1;
			look_z *= invN1;
		}
		var n2 = Math.sqrt(right_x * right_x + right_y * right_y + right_z * right_z);
		if(n2 > 0.0) {
			var invN2 = 1.0 / n2;
			right_x *= invN2;
			right_y *= invN2;
			right_z *= invN2;
		}
		var _this3 = armory_trait_internal_DebugDraw.vx;
		_this3.x = right_x;
		_this3.y = right_y;
		_this3.z = right_z;
		_this3.w = right_w;
		var _this4 = armory_trait_internal_DebugDraw.vx;
		_this4.x *= dx;
		_this4.y *= dx;
		_this4.z *= dx;
		var _this5 = armory_trait_internal_DebugDraw.vy;
		_this5.x = look_x;
		_this5.y = look_y;
		_this5.z = look_z;
		_this5.w = look_w;
		var _this6 = armory_trait_internal_DebugDraw.vy;
		_this6.x *= dy;
		_this6.y *= dy;
		_this6.z *= dy;
		var _this7 = armory_trait_internal_DebugDraw.vz;
		_this7.x = up_x;
		_this7.y = up_y;
		_this7.z = up_z;
		_this7.w = up_w;
		var _this8 = armory_trait_internal_DebugDraw.vz;
		_this8.x *= dz;
		_this8.y *= dz;
		_this8.z *= dz;
		this.lineb(-1,-1,-1,1,-1,-1);
		this.lineb(-1,1,-1,1,1,-1);
		this.lineb(-1,-1,1,1,-1,1);
		this.lineb(-1,1,1,1,1,1);
		this.lineb(-1,-1,-1,-1,1,-1);
		this.lineb(-1,-1,1,-1,1,1);
		this.lineb(1,-1,-1,1,1,-1);
		this.lineb(1,-1,1,1,1,1);
		this.lineb(-1,-1,-1,-1,-1,1);
		this.lineb(-1,1,-1,-1,1,1);
		this.lineb(1,-1,-1,1,-1,1);
		this.lineb(1,1,-1,1,1,1);
	}
	,lineb: function(a,b,c,d,e,f) {
		var _this = armory_trait_internal_DebugDraw.v1;
		var v = armory_trait_internal_DebugDraw.objPosition;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
		var _this1 = armory_trait_internal_DebugDraw.t;
		var v1 = armory_trait_internal_DebugDraw.vx;
		_this1.x = v1.x;
		_this1.y = v1.y;
		_this1.z = v1.z;
		_this1.w = v1.w;
		var _this2 = armory_trait_internal_DebugDraw.t;
		_this2.x *= a;
		_this2.y *= a;
		_this2.z *= a;
		var _this3 = armory_trait_internal_DebugDraw.v1;
		var v2 = armory_trait_internal_DebugDraw.t;
		_this3.x += v2.x;
		_this3.y += v2.y;
		_this3.z += v2.z;
		var _this4 = armory_trait_internal_DebugDraw.t;
		var v3 = armory_trait_internal_DebugDraw.vy;
		_this4.x = v3.x;
		_this4.y = v3.y;
		_this4.z = v3.z;
		_this4.w = v3.w;
		var _this5 = armory_trait_internal_DebugDraw.t;
		_this5.x *= b;
		_this5.y *= b;
		_this5.z *= b;
		var _this6 = armory_trait_internal_DebugDraw.v1;
		var v4 = armory_trait_internal_DebugDraw.t;
		_this6.x += v4.x;
		_this6.y += v4.y;
		_this6.z += v4.z;
		var _this7 = armory_trait_internal_DebugDraw.t;
		var v5 = armory_trait_internal_DebugDraw.vz;
		_this7.x = v5.x;
		_this7.y = v5.y;
		_this7.z = v5.z;
		_this7.w = v5.w;
		var _this8 = armory_trait_internal_DebugDraw.t;
		_this8.x *= c;
		_this8.y *= c;
		_this8.z *= c;
		var _this9 = armory_trait_internal_DebugDraw.v1;
		var v6 = armory_trait_internal_DebugDraw.t;
		_this9.x += v6.x;
		_this9.y += v6.y;
		_this9.z += v6.z;
		var _this10 = armory_trait_internal_DebugDraw.v2;
		var v7 = armory_trait_internal_DebugDraw.objPosition;
		_this10.x = v7.x;
		_this10.y = v7.y;
		_this10.z = v7.z;
		_this10.w = v7.w;
		var _this11 = armory_trait_internal_DebugDraw.t;
		var v8 = armory_trait_internal_DebugDraw.vx;
		_this11.x = v8.x;
		_this11.y = v8.y;
		_this11.z = v8.z;
		_this11.w = v8.w;
		var _this12 = armory_trait_internal_DebugDraw.t;
		_this12.x *= d;
		_this12.y *= d;
		_this12.z *= d;
		var _this13 = armory_trait_internal_DebugDraw.v2;
		var v9 = armory_trait_internal_DebugDraw.t;
		_this13.x += v9.x;
		_this13.y += v9.y;
		_this13.z += v9.z;
		var _this14 = armory_trait_internal_DebugDraw.t;
		var v10 = armory_trait_internal_DebugDraw.vy;
		_this14.x = v10.x;
		_this14.y = v10.y;
		_this14.z = v10.z;
		_this14.w = v10.w;
		var _this15 = armory_trait_internal_DebugDraw.t;
		_this15.x *= e;
		_this15.y *= e;
		_this15.z *= e;
		var _this16 = armory_trait_internal_DebugDraw.v2;
		var v11 = armory_trait_internal_DebugDraw.t;
		_this16.x += v11.x;
		_this16.y += v11.y;
		_this16.z += v11.z;
		var _this17 = armory_trait_internal_DebugDraw.t;
		var v12 = armory_trait_internal_DebugDraw.vz;
		_this17.x = v12.x;
		_this17.y = v12.y;
		_this17.z = v12.z;
		_this17.w = v12.w;
		var _this18 = armory_trait_internal_DebugDraw.t;
		_this18.x *= f;
		_this18.y *= f;
		_this18.z *= f;
		var _this19 = armory_trait_internal_DebugDraw.v2;
		var v13 = armory_trait_internal_DebugDraw.t;
		_this19.x += v13.x;
		_this19.y += v13.y;
		_this19.z += v13.z;
		var v14 = armory_trait_internal_DebugDraw.v1;
		var v21 = armory_trait_internal_DebugDraw.v2;
		this.line(v14.x,v14.y,v14.z,v21.x,v21.y,v21.z);
	}
	,linev: function(v1,v2) {
		this.line(v1.x,v1.y,v1.z,v2.x,v2.y,v2.z);
	}
	,line: function(x1,y1,z1,x2,y2,z2) {
		if(this.lines >= 300) {
			this.end();
			this.begin();
		}
		var _this = armory_trait_internal_DebugDraw.midPoint;
		_this.x = x1 + x2;
		_this.y = y1 + y2;
		_this.z = z1 + z2;
		_this.w = 1.0;
		var _this1 = armory_trait_internal_DebugDraw.midPoint;
		_this1.x *= 0.5;
		_this1.y *= 0.5;
		_this1.z *= 0.5;
		var _this2 = armory_trait_internal_DebugDraw.midLine;
		_this2.x = x1;
		_this2.y = y1;
		_this2.z = z1;
		_this2.w = 1.0;
		var _this3 = armory_trait_internal_DebugDraw.midLine;
		var v = armory_trait_internal_DebugDraw.midPoint;
		_this3.x -= v.x;
		_this3.y -= v.y;
		_this3.z -= v.z;
		var camera = iron_Scene.active.camera;
		var t = camera.transform;
		armory_trait_internal_DebugDraw.cameraLook = new iron_math_Vec4(t.world.self._30,t.world.self._31,t.world.self._32,1.0);
		var _this4 = armory_trait_internal_DebugDraw.cameraLook;
		var v1 = armory_trait_internal_DebugDraw.midPoint;
		_this4.x -= v1.x;
		_this4.y -= v1.y;
		_this4.z -= v1.z;
		var _this5 = armory_trait_internal_DebugDraw.cameraLook;
		var v2 = armory_trait_internal_DebugDraw.midLine;
		var ax = _this5.x;
		var ay = _this5.y;
		var az = _this5.z;
		var vx = v2.x;
		var vy = v2.y;
		var vz = v2.z;
		_this5.x = ay * vz - az * vy;
		_this5.y = az * vx - ax * vz;
		_this5.z = ax * vy - ay * vx;
		var lineWidth = _this5;
		var n = Math.sqrt(lineWidth.x * lineWidth.x + lineWidth.y * lineWidth.y + lineWidth.z * lineWidth.z);
		if(n > 0.0) {
			var invN = 1.0 / n;
			lineWidth.x *= invN;
			lineWidth.y *= invN;
			lineWidth.z *= invN;
		}
		var f = this.strength;
		lineWidth.x *= f;
		lineWidth.y *= f;
		lineWidth.z *= f;
		var _this6 = armory_trait_internal_DebugDraw.corner1;
		_this6.x = x1;
		_this6.y = y1;
		_this6.z = z1;
		_this6.w = 1.0;
		var _this7 = _this6;
		_this7.x += lineWidth.x;
		_this7.y += lineWidth.y;
		_this7.z += lineWidth.z;
		var _this8 = armory_trait_internal_DebugDraw.corner2;
		_this8.x = x1;
		_this8.y = y1;
		_this8.z = z1;
		_this8.w = 1.0;
		var _this9 = _this8;
		_this9.x -= lineWidth.x;
		_this9.y -= lineWidth.y;
		_this9.z -= lineWidth.z;
		var _this10 = armory_trait_internal_DebugDraw.corner3;
		_this10.x = x2;
		_this10.y = y2;
		_this10.z = z2;
		_this10.w = 1.0;
		var _this11 = _this10;
		_this11.x -= lineWidth.x;
		_this11.y -= lineWidth.y;
		_this11.z -= lineWidth.z;
		var _this12 = armory_trait_internal_DebugDraw.corner4;
		_this12.x = x2;
		_this12.y = y2;
		_this12.z = z2;
		_this12.w = 1.0;
		var _this13 = _this12;
		_this13.x += lineWidth.x;
		_this13.y += lineWidth.y;
		_this13.z += lineWidth.z;
		var i = this.lines * 24;
		var data_0 = armory_trait_internal_DebugDraw.corner1.x;
		var data_1 = armory_trait_internal_DebugDraw.corner1.y;
		var data_2 = armory_trait_internal_DebugDraw.corner1.z;
		var data_3 = ((this.color & 16711680) >>> 16) * 0.00392156862745098;
		var data_4 = ((this.color & 65280) >>> 8) * 0.00392156862745098;
		var data_5 = (this.color & 255) * 0.00392156862745098;
		this.vbData[i] = data_0;
		this.vbData[i + 1] = data_1;
		this.vbData[i + 2] = data_2;
		this.vbData[i + 3] = data_3;
		this.vbData[i + 4] = data_4;
		this.vbData[i + 5] = data_5;
		i += 6;
		var data_01 = armory_trait_internal_DebugDraw.corner2.x;
		var data_11 = armory_trait_internal_DebugDraw.corner2.y;
		var data_21 = armory_trait_internal_DebugDraw.corner2.z;
		var data_31 = ((this.color & 16711680) >>> 16) * 0.00392156862745098;
		var data_41 = ((this.color & 65280) >>> 8) * 0.00392156862745098;
		var data_51 = (this.color & 255) * 0.00392156862745098;
		this.vbData[i] = data_01;
		this.vbData[i + 1] = data_11;
		this.vbData[i + 2] = data_21;
		this.vbData[i + 3] = data_31;
		this.vbData[i + 4] = data_41;
		this.vbData[i + 5] = data_51;
		i += 6;
		var data_02 = armory_trait_internal_DebugDraw.corner3.x;
		var data_12 = armory_trait_internal_DebugDraw.corner3.y;
		var data_22 = armory_trait_internal_DebugDraw.corner3.z;
		var data_32 = ((this.color & 16711680) >>> 16) * 0.00392156862745098;
		var data_42 = ((this.color & 65280) >>> 8) * 0.00392156862745098;
		var data_52 = (this.color & 255) * 0.00392156862745098;
		this.vbData[i] = data_02;
		this.vbData[i + 1] = data_12;
		this.vbData[i + 2] = data_22;
		this.vbData[i + 3] = data_32;
		this.vbData[i + 4] = data_42;
		this.vbData[i + 5] = data_52;
		i += 6;
		var data_03 = armory_trait_internal_DebugDraw.corner4.x;
		var data_13 = armory_trait_internal_DebugDraw.corner4.y;
		var data_23 = armory_trait_internal_DebugDraw.corner4.z;
		var data_33 = ((this.color & 16711680) >>> 16) * 0.00392156862745098;
		var data_43 = ((this.color & 65280) >>> 8) * 0.00392156862745098;
		var data_53 = (this.color & 255) * 0.00392156862745098;
		this.vbData[i] = data_03;
		this.vbData[i + 1] = data_13;
		this.vbData[i + 2] = data_23;
		this.vbData[i + 3] = data_33;
		this.vbData[i + 4] = data_43;
		this.vbData[i + 5] = data_53;
		i = this.lines * 6;
		this.ibData[i] = this.lines * 4;
		this.ibData[i + 1] = this.lines * 4 + 1;
		this.ibData[i + 2] = this.lines * 4 + 2;
		this.ibData[i + 3] = this.lines * 4 + 2;
		this.ibData[i + 4] = this.lines * 4 + 3;
		this.ibData[i + 5] = this.lines * 4;
		this.lines++;
	}
	,begin: function() {
		this.lines = 0;
		this.vbData = this.vertexBuffer.lock();
		this.ibData = this.indexBuffer.lock();
	}
	,end: function() {
		this.vertexBuffer.unlock();
		this.indexBuffer.unlock();
		armory_trait_internal_DebugDraw.g.setVertexBuffer(this.vertexBuffer);
		armory_trait_internal_DebugDraw.g.setIndexBuffer(this.indexBuffer);
		armory_trait_internal_DebugDraw.g.setPipeline(this.pipeline);
		var camera = iron_Scene.active.camera;
		var _this = this.vp;
		var m = camera.V;
		_this.self._00 = m.self._00;
		_this.self._01 = m.self._01;
		_this.self._02 = m.self._02;
		_this.self._03 = m.self._03;
		_this.self._10 = m.self._10;
		_this.self._11 = m.self._11;
		_this.self._12 = m.self._12;
		_this.self._13 = m.self._13;
		_this.self._20 = m.self._20;
		_this.self._21 = m.self._21;
		_this.self._22 = m.self._22;
		_this.self._23 = m.self._23;
		_this.self._30 = m.self._30;
		_this.self._31 = m.self._31;
		_this.self._32 = m.self._32;
		_this.self._33 = m.self._33;
		var _this1 = this.vp;
		var m1 = camera.P;
		var a00 = _this1.self._00;
		var a01 = _this1.self._01;
		var a02 = _this1.self._02;
		var a03 = _this1.self._03;
		var a10 = _this1.self._10;
		var a11 = _this1.self._11;
		var a12 = _this1.self._12;
		var a13 = _this1.self._13;
		var a20 = _this1.self._20;
		var a21 = _this1.self._21;
		var a22 = _this1.self._22;
		var a23 = _this1.self._23;
		var a30 = _this1.self._30;
		var a31 = _this1.self._31;
		var a32 = _this1.self._32;
		var a33 = _this1.self._33;
		var b0 = m1.self._00;
		var b1 = m1.self._10;
		var b2 = m1.self._20;
		var b3 = m1.self._30;
		_this1.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this1.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this1.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this1.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = m1.self._01;
		b1 = m1.self._11;
		b2 = m1.self._21;
		b3 = m1.self._31;
		_this1.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this1.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this1.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this1.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = m1.self._02;
		b1 = m1.self._12;
		b2 = m1.self._22;
		b3 = m1.self._32;
		_this1.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this1.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this1.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this1.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = m1.self._03;
		b1 = m1.self._13;
		b2 = m1.self._23;
		b3 = m1.self._33;
		_this1.self._03 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this1.self._13 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this1.self._23 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this1.self._33 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		armory_trait_internal_DebugDraw.g.setMatrix(this.vpID,this.vp.self);
		armory_trait_internal_DebugDraw.g.drawIndexedVertices(0,this.lines * 6);
	}
	,addVbData: function(i,data) {
		this.vbData[i] = data[0];
		this.vbData[i + 1] = data[1];
		this.vbData[i + 2] = data[2];
		this.vbData[i + 3] = data[3];
		this.vbData[i + 4] = data[4];
		this.vbData[i + 5] = data[5];
	}
	,__class__: armory_trait_internal_DebugDraw
};
var armory_trait_internal_LivePatch = function() {
	iron_Trait.call(this);
	this.notifyOnUpdate($bind(this,this.update));
};
$hxClasses["armory.trait.internal.LivePatch"] = armory_trait_internal_LivePatch;
armory_trait_internal_LivePatch.__name__ = "armory.trait.internal.LivePatch";
armory_trait_internal_LivePatch.__super__ = iron_Trait;
armory_trait_internal_LivePatch.prototype = $extend(iron_Trait.prototype,{
	update: function() {
		kha_Assets.loadBlobFromPath("krom.patch",function(b) {
			if(b.get_length() == 0) {
				return;
			}
			var lines = b.toString().split("\n");
			var id = Std.parseInt(lines[0]);
			if(id > armory_trait_internal_LivePatch.patchId) {
				armory_trait_internal_LivePatch.patchId = id;
				eval(lines[1]);
			}
		},null,{ fileName : "Sources/armory/trait/internal/LivePatch.hx", lineNumber : 15, className : "armory.trait.internal.LivePatch", methodName : "update"});
	}
	,__class__: armory_trait_internal_LivePatch
});
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			str += ", " + Std.string(v1);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s1 = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s1] != null) {
					h1.setReserved(s1,value);
				} else {
					h1.h[s1] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c11 << 2 | c2 >> 4;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = c12 << 2 | c21 >> 4;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = c21 << 4 | c31 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s2 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s2 = decodeURIComponent(s2.split("+").join(" "));
			this.scache.push(s2);
			return s2;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) (this.h.hasOwnProperty(key) ? a.push(key | 0) : null);
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = "haxe.ds._StringMap.StringMapIterator";
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			var eof1 = ((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof;
			if(((eof1) instanceof haxe_io_Eof)) {
				var eof2 = eof1;
			} else {
				throw eof;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt32());
	}
	,readInt8: function() {
		var n = this.readByte();
		if(n >= 128) {
			return n - 256;
		}
		return n;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
	,__properties__: $extend(haxe_io_Input.prototype.__properties__,{set_position:"set_position"})
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	bigEndian: null
	,writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.writeBytes(s,pos,len);
			pos += k;
			len -= k;
		}
	}
	,writeFloat: function(x) {
		this.writeInt32(haxe_io_FPHelper.floatToI32(x));
	}
	,writeInt16: function(x) {
		if(x < -32768 || x >= 32768) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		this.writeUInt16(x & 65535);
	}
	,writeUInt16: function(x) {
		if(x < 0 || x >= 65536) {
			throw new js__$Boot_HaxeError(haxe_io_Error.Overflow);
		}
		if(this.bigEndian) {
			this.writeByte(x >> 8);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8);
		}
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,writeString: function(s,encoding) {
		var b = haxe_io_Bytes.ofString(s,encoding);
		this.writeFullBytes(b,0,b.length);
	}
	,__class__: haxe_io_Output
	,__properties__: {set_bigEndian:"set_bigEndian"}
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	b: null
	,writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i32ToFloat = function(i) {
	haxe_io_FPHelper.helper.setInt32(0,i,true);
	return haxe_io_FPHelper.helper.getFloat32(0,true);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
var iron_RenderPath = function() {
	this.depthBuffers = [];
	this.cachedShaderContexts = new haxe_ds_StringMap();
	this.loading = 0;
	this.lastFrameTime = 0.0;
	this.viewportScaled = false;
	this.scissorSet = false;
	this.lastH = 0;
	this.lastW = 0;
	this.clearShader = null;
	this.depthToRenderTarget = new haxe_ds_StringMap();
	this.renderTargets = new haxe_ds_StringMap();
	this.commands = null;
	this.paused = false;
	this.drawOrder = 0;
	this.currentG = null;
	this.isProbe = false;
	this.isProbeCube = false;
	this.isProbePlanar = false;
	this.point = null;
	this.sun = null;
	this.light = null;
	this.currentTarget = null;
	this.frame = 0;
	this.frameTime = 0.0;
	this.frameScissorH = 0;
	this.frameScissorW = 0;
	this.frameScissorY = 0;
	this.frameScissorX = 0;
	this.frameScissor = false;
};
$hxClasses["iron.RenderPath"] = iron_RenderPath;
iron_RenderPath.__name__ = "iron.RenderPath";
iron_RenderPath.setActive = function(renderPath) {
	iron_RenderPath.active = renderPath;
};
iron_RenderPath.sortMeshesDistance = function(meshes) {
	meshes.sort(function(a,b) {
		if(a.cameraDistance >= b.cameraDistance) {
			return 1;
		} else {
			return -1;
		}
	});
};
iron_RenderPath.sortMeshesShader = function(meshes) {
	meshes.sort(function(a,b) {
		if(a.materials[0].name >= b.materials[0].name) {
			return 1;
		} else {
			return -1;
		}
	});
};
iron_RenderPath.notifyOnContext = function(name,onContext) {
	if(iron_RenderPath.contextEvents == null) {
		iron_RenderPath.contextEvents = new haxe_ds_StringMap();
	}
	var _this = iron_RenderPath.contextEvents;
	var ar = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(ar == null) {
		ar = [];
		var _this1 = iron_RenderPath.contextEvents;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,ar);
		} else {
			_this1.h[name] = ar;
		}
	}
	ar.push(onContext);
};
iron_RenderPath.prototype = {
	frameScissor: null
	,frameScissorX: null
	,frameScissorY: null
	,frameScissorW: null
	,frameScissorH: null
	,frameTime: null
	,frame: null
	,currentTarget: null
	,currentFace: null
	,light: null
	,sun: null
	,point: null
	,isProbePlanar: null
	,isProbeCube: null
	,isProbe: null
	,currentG: null
	,frameG: null
	,drawOrder: null
	,paused: null
	,ready: null
	,get_ready: function() {
		return this.loading == 0;
	}
	,commands: null
	,renderTargets: null
	,depthToRenderTarget: null
	,currentW: null
	,currentH: null
	,currentD: null
	,clearShader: null
	,lastW: null
	,lastH: null
	,bindParams: null
	,meshesSorted: null
	,scissorSet: null
	,viewportScaled: null
	,lastFrameTime: null
	,loading: null
	,cachedShaderContexts: null
	,depthBuffers: null
	,additionalTargets: null
	,renderFrame: function(g) {
		if(!this.get_ready() || this.paused || kha_System.windowWidth() == 0 || kha_System.windowHeight() == 0) {
			return;
		}
		if(this.lastW > 0 && (this.lastW != kha_System.windowWidth() || this.lastH != kha_System.windowHeight())) {
			this.resize();
		}
		this.lastW = kha_System.windowWidth();
		this.lastH = kha_System.windowHeight();
		this.frameTime = kha_Scheduler.time() - this.lastFrameTime;
		this.lastFrameTime = kha_Scheduler.time();
		iron_RenderPath.drawCalls = 0;
		iron_RenderPath.batchBuckets = 0;
		iron_RenderPath.batchCalls = 0;
		iron_RenderPath.culled = 0;
		iron_RenderPath.numTrisMesh = 0;
		iron_RenderPath.numTrisShadow = 0;
		var cam = iron_Scene.active.camera;
		this.isProbePlanar = cam != null && cam.renderTarget != null;
		this.isProbeCube = cam != null && cam.renderTargetCube != null;
		this.isProbe = this.isProbePlanar || this.isProbeCube;
		if(this.isProbePlanar) {
			this.frameG = cam.renderTarget.get_g4();
		} else if(this.isProbeCube) {
			this.frameG = cam.renderTargetCube.get_g4();
		} else {
			this.frameG = g;
		}
		this.currentW = kha_System.windowWidth();
		this.currentH = kha_System.windowHeight();
		this.currentD = 1;
		this.currentFace = -1;
		this.meshesSorted = false;
		var _g = 0;
		var _g1 = iron_Scene.active.lights;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(l.visible) {
				l.buildMatrix(iron_Scene.active.camera);
			}
			if(l.data.raw.type == "sun") {
				this.sun = l;
			} else {
				this.point = l;
			}
		}
		this.light = iron_Scene.active.lights[0];
		this.commands();
		if(!this.isProbe) {
			this.frame++;
		}
	}
	,setTarget: function(target,additional,viewportScale) {
		if(viewportScale == null) {
			viewportScale = 1.0;
		}
		if(target == "") {
			this.currentD = 1;
			this.currentTarget = null;
			this.currentFace = -1;
			if(this.isProbeCube) {
				this.currentW = iron_Scene.active.camera.renderTargetCube.get_width();
				this.currentH = iron_Scene.active.camera.renderTargetCube.get_height();
				var g = this.frameG;
				var additionalRenderTargets = null;
				var face = iron_Scene.active.camera.currentFace;
				if(face == null) {
					face = -1;
				}
				if(this.currentG != null) {
					if(this.scissorSet) {
						this.currentG.disableScissor();
						this.scissorSet = false;
					}
					this.currentG.end();
					this.currentG = null;
					this.bindParams = null;
				}
				this.currentG = g;
				this.additionalTargets = additionalRenderTargets;
				if(face >= 0) {
					g.beginFace(face);
				} else {
					g.begin(additionalRenderTargets);
				}
			} else {
				this.currentW = kha_System.windowWidth();
				this.currentH = kha_System.windowHeight();
				if(this.frameScissor) {
					this.setFrameScissor();
				}
				var g1 = this.frameG;
				var additionalRenderTargets1 = null;
				if(this.currentG != null) {
					if(this.scissorSet) {
						this.currentG.disableScissor();
						this.scissorSet = false;
					}
					this.currentG.end();
					this.currentG = null;
					this.bindParams = null;
				}
				this.currentG = g1;
				this.additionalTargets = additionalRenderTargets1;
				g1.begin(additionalRenderTargets1);
			}
		} else {
			var _this = this.renderTargets;
			var rt = __map_reserved[target] != null ? _this.getReserved(target) : _this.h[target];
			this.currentTarget = rt;
			var additionalImages = null;
			if(additional != null) {
				additionalImages = [];
				var _g = 0;
				while(_g < additional.length) {
					var s = additional[_g];
					++_g;
					var _this1 = this.renderTargets;
					var t = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
					additionalImages.push(t.image);
				}
			}
			var targetG = rt.isCubeMap ? rt.cubeMap.get_g4() : rt.image.get_g4();
			this.currentW = rt.isCubeMap ? rt.cubeMap.get_width() : rt.image.get_width();
			this.currentH = rt.isCubeMap ? rt.cubeMap.get_height() : rt.image.get_height();
			if(rt.is3D) {
				this.currentD = rt.image.get_depth();
			}
			var face1 = this.currentFace;
			if(face1 == null) {
				face1 = -1;
			}
			if(this.currentG != null) {
				if(this.scissorSet) {
					this.currentG.disableScissor();
					this.scissorSet = false;
				}
				this.currentG.end();
				this.currentG = null;
				this.bindParams = null;
			}
			this.currentG = targetG;
			this.additionalTargets = additionalImages;
			if(face1 >= 0) {
				targetG.beginFace(face1);
			} else {
				targetG.begin(additionalImages);
			}
		}
		if(viewportScale != 1.0) {
			this.viewportScaled = true;
			var viewW = this.currentW * viewportScale | 0;
			var viewH = this.currentH * viewportScale | 0;
			this.currentG.viewport(0,viewH,viewW,viewH);
			this.currentG.scissor(0,viewH,viewW,viewH);
		} else if(this.viewportScaled) {
			this.viewportScaled = false;
			this.setCurrentViewport(this.currentW,this.currentH);
			this.setCurrentScissor(this.currentW,this.currentH);
		}
		this.bindParams = null;
	}
	,setDepthFrom: function(target,from) {
		var _this = this.renderTargets;
		var rt = __map_reserved[target] != null ? _this.getReserved(target) : _this.h[target];
		var _this1 = this.renderTargets;
		rt.image.setDepthStencilFrom((__map_reserved[from] != null ? _this1.getReserved(from) : _this1.h[from]).image);
	}
	,begin: function(g,additionalRenderTargets,face) {
		if(face == null) {
			face = -1;
		}
		if(this.currentG != null) {
			if(this.scissorSet) {
				this.currentG.disableScissor();
				this.scissorSet = false;
			}
			this.currentG.end();
			this.currentG = null;
			this.bindParams = null;
		}
		this.currentG = g;
		this.additionalTargets = additionalRenderTargets;
		if(face >= 0) {
			g.beginFace(face);
		} else {
			g.begin(additionalRenderTargets);
		}
	}
	,end: function() {
		if(this.scissorSet) {
			this.currentG.disableScissor();
			this.scissorSet = false;
		}
		this.currentG.end();
		this.currentG = null;
		this.bindParams = null;
	}
	,setCurrentViewport: function(viewW,viewH) {
		this.currentG.viewport(0,this.currentH - viewH,viewW,viewH);
	}
	,setCurrentScissor: function(viewW,viewH) {
		this.currentG.scissor(0,this.currentH - viewH,viewW,viewH);
		this.scissorSet = true;
	}
	,setFrameScissor: function() {
		this.frameG.scissor(this.frameScissorX,this.currentH - (this.frameScissorH - this.frameScissorY),this.frameScissorW,this.frameScissorH);
	}
	,setViewport: function(viewW,viewH) {
		this.setCurrentViewport(viewW,viewH);
		this.setCurrentScissor(viewW,viewH);
	}
	,clearTarget: function(colorFlag,depthFlag) {
		if(colorFlag == -1) {
			if(iron_Scene.active.world != null) {
				colorFlag = iron_Scene.active.world.raw.background_color;
			} else if(iron_Scene.active.camera != null) {
				var cc = iron_Scene.active.camera.data.raw.clear_color;
				if(cc != null) {
					colorFlag = kha__$Color_Color_$Impl_$.fromFloats(cc[0],cc[1],cc[2]);
				}
			}
		}
		if(this.clearShader != null) {
			var key = this.clearShader;
			var _this = this.cachedShaderContexts;
			var cc1 = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			if(iron_data_ConstData.screenAlignedVB == null) {
				iron_data_ConstData.createScreenAlignedData();
			}
			this.currentG.setPipeline(cc1.context.pipeState);
			this.currentG.setVertexBuffer(iron_data_ConstData.screenAlignedVB);
			this.currentG.setIndexBuffer(iron_data_ConstData.screenAlignedIB);
			this.currentG.drawIndexedVertices();
		} else {
			this.currentG.clear(colorFlag,depthFlag,null);
		}
	}
	,clearImage: function(target,color) {
		var _this = this.renderTargets;
		var rt = __map_reserved[target] != null ? _this.getReserved(target) : _this.h[target];
		rt.image.clear(0,0,0,rt.image.get_width(),rt.image.get_height(),rt.image.get_depth(),color);
	}
	,generateMipmaps: function(target) {
		var _this = this.renderTargets;
		var rt = __map_reserved[target] != null ? _this.getReserved(target) : _this.h[target];
		rt.image.generateMipmaps(1000);
	}
	,drawMeshes: function(context) {
		var isShadows = context == "shadowmap";
		if(isShadows) {
			if(this.light == null || !this.light.data.raw.cast_shadow || !this.light.visible || this.light.data.raw.strength == 0) {
				return;
			}
		}
		if(this.currentFace >= 0 && this.light != null) {
			this.light.setCubeFace(this.currentFace,iron_Scene.active.camera);
		}
		var drawn = false;
		if(isShadows && this.light.data.raw.type == "sun") {
			var step = this.currentH;
			var _g = 0;
			var _g1 = iron_object_LightObject.cascadeCount;
			while(_g < _g1) {
				var i = _g++;
				this.light.setCascade(iron_Scene.active.camera,i);
				this.currentG.viewport(i * step,0,step,step);
				this.submitDraw(context);
			}
			drawn = true;
		}
		if(!drawn) {
			this.submitDraw(context);
		}
		if(iron_RenderPath.contextEvents != null) {
			var _this = iron_RenderPath.contextEvents;
			var ar = __map_reserved[context] != null ? _this.getReserved(context) : _this.h[context];
			if(ar != null) {
				var _g2 = 0;
				var _g11 = ar.length;
				while(_g2 < _g11) {
					var i1 = _g2++;
					ar[i1](this.currentG,i1,ar.length);
				}
			}
		}
		if(this.scissorSet) {
			this.currentG.disableScissor();
			this.scissorSet = false;
		}
		this.currentG.end();
		this.currentG = null;
		this.bindParams = null;
	}
	,submitDraw: function(context) {
		var camera = iron_Scene.active.camera;
		var meshes = iron_Scene.active.meshes;
		iron_object_MeshObject.lastPipeline = null;
		if(!this.meshesSorted && camera != null) {
			var camX = camera.transform.world.self._30;
			var camY = camera.transform.world.self._31;
			var camZ = camera.transform.world.self._32;
			var _g = 0;
			while(_g < meshes.length) {
				var mesh = meshes[_g];
				++_g;
				var vx = camX - mesh.transform.world.self._30;
				var vy = camY - mesh.transform.world.self._31;
				var vz = camZ - mesh.transform.world.self._32;
				mesh.cameraDistance = Math.sqrt(vx * vx + vy * vy + vz * vz);
			}
			if(this.drawOrder == 1) {
				iron_RenderPath.sortMeshesShader(meshes);
			} else {
				iron_RenderPath.sortMeshesDistance(meshes);
			}
			this.meshesSorted = true;
		}
		var _g1 = 0;
		while(_g1 < meshes.length) {
			var m = meshes[_g1];
			++_g1;
			m.render(this.currentG,context,this.bindParams);
		}
	}
	,drawSkydome: function(handle) {
		if(iron_data_ConstData.skydomeVB == null) {
			iron_data_ConstData.createSkydomeData();
		}
		var _this = this.cachedShaderContexts;
		var cc = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
		if(cc.context == null) {
			return;
		}
		this.currentG.setPipeline(cc.context.pipeState);
		iron_object_Uniforms.setContextConstants(this.currentG,cc.context,this.bindParams);
		iron_object_Uniforms.setObjectConstants(this.currentG,cc.context,null);
		this.currentG.setVertexBuffer(iron_data_ConstData.skydomeVB);
		this.currentG.setIndexBuffer(iron_data_ConstData.skydomeIB);
		this.currentG.drawIndexedVertices();
		if(this.scissorSet) {
			this.currentG.disableScissor();
			this.scissorSet = false;
		}
		this.currentG.end();
		this.currentG = null;
		this.bindParams = null;
	}
	,bindTarget: function(target,uniform) {
		if(this.bindParams != null) {
			this.bindParams.push(target);
			this.bindParams.push(uniform);
		} else {
			this.bindParams = [target,uniform];
		}
	}
	,drawShader: function(handle) {
		var _this = this.cachedShaderContexts;
		var cc = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
		if(iron_data_ConstData.screenAlignedVB == null) {
			iron_data_ConstData.createScreenAlignedData();
		}
		this.currentG.setPipeline(cc.context.pipeState);
		iron_object_Uniforms.setContextConstants(this.currentG,cc.context,this.bindParams);
		iron_object_Uniforms.setObjectConstants(this.currentG,cc.context,null);
		this.currentG.setVertexBuffer(iron_data_ConstData.screenAlignedVB);
		this.currentG.setIndexBuffer(iron_data_ConstData.screenAlignedIB);
		this.currentG.drawIndexedVertices();
		if(this.scissorSet) {
			this.currentG.disableScissor();
			this.scissorSet = false;
		}
		this.currentG.end();
		this.currentG = null;
		this.bindParams = null;
	}
	,getComputeShader: function(handle) {
		return Reflect.field(kha_Shaders,handle + "_comp");
	}
	,loadShader: function(handle) {
		var _gthis = this;
		this.loading++;
		var _this = this.cachedShaderContexts;
		var cc = __map_reserved[handle] != null ? _this.getReserved(handle) : _this.h[handle];
		if(cc != null) {
			this.loading--;
			return;
		}
		cc = new iron_CachedShaderContext();
		var _this1 = this.cachedShaderContexts;
		if(__map_reserved[handle] != null) {
			_this1.setReserved(handle,cc);
		} else {
			_this1.h[handle] = cc;
		}
		var shaderPath = handle.split("/");
		iron_data_Data.getShader(shaderPath[0],shaderPath[1],function(res) {
			cc.context = res.getContext(shaderPath[2]);
			_gthis.loading--;
		});
	}
	,unload: function() {
		var _this = this.renderTargets;
		var rt = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(rt.hasNext()) {
			var rt1 = rt.next();
			rt1.unload();
		}
	}
	,resize: function() {
		if(kha_System.windowWidth() == 0 || kha_System.windowHeight() == 0) {
			return;
		}
		var _this = this.renderTargets;
		var rt = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(rt.hasNext()) {
			var rt1 = rt.next();
			var tmp;
			if(!(rt1.raw.width > 0 || rt1.depthStencilFrom == "")) {
				var key = rt1.depthStencilFrom;
				var _this1 = this.depthToRenderTarget;
				tmp = rt1 == (__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]);
			} else {
				tmp = true;
			}
			if(tmp) {
				continue;
			}
			var nodepth = null;
			var _this2 = this.renderTargets;
			var rt2 = new haxe_ds__$StringMap_StringMapIterator(_this2,_this2.arrayKeys());
			while(rt2.hasNext()) {
				var rt21 = rt2.next();
				var tmp1;
				if(!(rt21.raw.width > 0 || rt21.depthStencilFrom != "")) {
					var key1 = rt21.raw.depth_buffer;
					var _this3 = this.depthToRenderTarget;
					tmp1 = (__map_reserved[key1] != null ? _this3.getReserved(key1) : _this3.h[key1]) != null;
				} else {
					tmp1 = true;
				}
				if(tmp1) {
					continue;
				}
				nodepth = rt21;
				break;
			}
			if(nodepth != null) {
				rt1.image.setDepthStencilFrom(nodepth.image);
			}
		}
		var _this4 = this.renderTargets;
		var rt3 = new haxe_ds__$StringMap_StringMapIterator(_this4,_this4.arrayKeys());
		while(rt3.hasNext()) {
			var rt4 = rt3.next();
			if(rt4.raw.width == 0) {
				rt4.image.unload();
				rt4.image = this.createImage(rt4.raw,rt4.depthStencil);
			}
		}
		var _this5 = this.renderTargets;
		var rt5 = new haxe_ds__$StringMap_StringMapIterator(_this5,_this5.arrayKeys());
		while(rt5.hasNext()) {
			var rt6 = rt5.next();
			if(rt6.depthStencilFrom != "") {
				var key2 = rt6.depthStencilFrom;
				var _this6 = this.depthToRenderTarget;
				rt6.image.setDepthStencilFrom((__map_reserved[key2] != null ? _this6.getReserved(key2) : _this6.h[key2]).image);
			}
		}
	}
	,createRenderTarget: function(t) {
		var rt = this.createTarget(t);
		var key = t.name;
		var _this = this.renderTargets;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,rt);
		} else {
			_this.h[key] = rt;
		}
		return rt;
	}
	,createDepthBuffer: function(name,format) {
		this.depthBuffers.push({ name : name, format : format});
	}
	,createTarget: function(t) {
		var rt = new iron_RenderTarget(t);
		if(t.depth_buffer != null) {
			rt.hasDepth = true;
			var key = t.depth_buffer;
			var _this = this.depthToRenderTarget;
			var depthTarget = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			if(depthTarget == null) {
				var _g = 0;
				var _g1 = this.depthBuffers;
				while(_g < _g1.length) {
					var db = _g1[_g];
					++_g;
					if(db.name == t.depth_buffer) {
						var key1 = db.name;
						var _this1 = this.depthToRenderTarget;
						if(__map_reserved[key1] != null) {
							_this1.setReserved(key1,rt);
						} else {
							_this1.h[key1] = rt;
						}
						var s = db.format;
						var tmp;
						if(s == null || s == "") {
							tmp = 1;
						} else {
							switch(s) {
							case "DEPTH16":
								tmp = 5;
								break;
							case "DEPTH24":
								tmp = 1;
								break;
							default:
								tmp = 1;
							}
						}
						rt.depthStencil = tmp;
						rt.image = this.createImage(t,rt.depthStencil);
						break;
					}
				}
			} else {
				rt.depthStencil = 0;
				rt.depthStencilFrom = t.depth_buffer;
				rt.image = this.createImage(t,rt.depthStencil);
				rt.image.setDepthStencilFrom(depthTarget.image);
			}
		} else {
			rt.hasDepth = false;
			if(t.depth != null && t.depth > 1) {
				rt.is3D = true;
			}
			if(t.is_cubemap) {
				rt.isCubeMap = true;
				rt.depthStencil = 0;
				rt.cubeMap = this.createCubeMap(t,rt.depthStencil);
			} else {
				rt.depthStencil = 0;
				rt.image = this.createImage(t,rt.depthStencil);
			}
		}
		return rt;
	}
	,createImage: function(t,depthStencil) {
		var width = t.width == 0 ? kha_System.windowWidth() : t.width;
		var height = t.height == 0 ? kha_System.windowHeight() : t.height;
		var depth = t.depth != null ? t.depth : 0;
		if(t.displayp != null) {
			if(width > height) {
				width = width * (t.displayp / height) | 0;
				height = t.displayp;
			} else {
				height = height * (t.displayp / width) | 0;
				width = t.displayp;
			}
		}
		if(t.scale != null) {
			width = width * t.scale | 0;
			height = height * t.scale | 0;
			depth = depth * t.scale | 0;
		}
		if(width < 1) {
			width = 1;
		}
		if(height < 1) {
			height = 1;
		}
		if(t.depth != null && t.depth > 1) {
			var img;
			if(t.format != null) {
				switch(t.format) {
				case "DEPTH16":
					img = 3;
					break;
				case "R16":
					img = 6;
					break;
				case "R32":
					img = 5;
					break;
				case "R8":
					img = 1;
					break;
				case "RGBA128":
					img = 2;
					break;
				case "RGBA32":
					img = 0;
					break;
				case "RGBA64":
					img = 4;
					break;
				default:
					img = 0;
				}
			} else {
				img = 0;
			}
			var img1 = kha_Image.create3D(width,height,depth,img);
			if(t.mipmaps) {
				img1.generateMipmaps(1000);
			}
			return img1;
		} else if(t.is_image != null && t.is_image) {
			var tmp;
			if(t.format != null) {
				switch(t.format) {
				case "DEPTH16":
					tmp = 3;
					break;
				case "R16":
					tmp = 6;
					break;
				case "R32":
					tmp = 5;
					break;
				case "R8":
					tmp = 1;
					break;
				case "RGBA128":
					tmp = 2;
					break;
				case "RGBA32":
					tmp = 0;
					break;
				case "RGBA64":
					tmp = 4;
					break;
				default:
					tmp = 0;
				}
			} else {
				tmp = 0;
			}
			return kha_Image.create(width,height,tmp);
		} else {
			var tmp1;
			if(t.format != null) {
				switch(t.format) {
				case "DEPTH16":
					tmp1 = 3;
					break;
				case "R16":
					tmp1 = 6;
					break;
				case "R32":
					tmp1 = 5;
					break;
				case "R8":
					tmp1 = 1;
					break;
				case "RGBA128":
					tmp1 = 2;
					break;
				case "RGBA32":
					tmp1 = 0;
					break;
				case "RGBA64":
					tmp1 = 4;
					break;
				default:
					tmp1 = 0;
				}
			} else {
				tmp1 = 0;
			}
			return kha_Image.createRenderTarget(width,height,tmp1,depthStencil);
		}
	}
	,createCubeMap: function(t,depthStencil) {
		var tmp;
		if(t.format != null) {
			switch(t.format) {
			case "DEPTH16":
				tmp = 3;
				break;
			case "R16":
				tmp = 6;
				break;
			case "R32":
				tmp = 5;
				break;
			case "R8":
				tmp = 1;
				break;
			case "RGBA128":
				tmp = 2;
				break;
			case "RGBA32":
				tmp = 0;
				break;
			case "RGBA64":
				tmp = 4;
				break;
			default:
				tmp = 0;
			}
		} else {
			tmp = 0;
		}
		return kha_graphics4_CubeMap.createRenderTarget(t.width,tmp,depthStencil);
	}
	,getTextureFormat: function(s) {
		switch(s) {
		case "DEPTH16":
			return 3;
		case "R16":
			return 6;
		case "R32":
			return 5;
		case "R8":
			return 1;
		case "RGBA128":
			return 2;
		case "RGBA32":
			return 0;
		case "RGBA64":
			return 4;
		default:
			return 0;
		}
	}
	,getDepthStencilFormat: function(s) {
		if(s == null || s == "") {
			return 1;
		}
		switch(s) {
		case "DEPTH16":
			return 5;
		case "DEPTH24":
			return 1;
		default:
			return 1;
		}
	}
	,__class__: iron_RenderPath
	,__properties__: {get_ready:"get_ready"}
};
var iron_RenderTargetRaw = function() {
	this.is_cubemap = null;
	this.is_image = null;
	this.depth = null;
	this.mipmaps = null;
	this.depth_buffer = null;
	this.displayp = null;
	this.scale = null;
	this.format = null;
};
$hxClasses["iron.RenderTargetRaw"] = iron_RenderTargetRaw;
iron_RenderTargetRaw.__name__ = "iron.RenderTargetRaw";
iron_RenderTargetRaw.prototype = {
	name: null
	,width: null
	,height: null
	,format: null
	,scale: null
	,displayp: null
	,depth_buffer: null
	,mipmaps: null
	,depth: null
	,is_image: null
	,is_cubemap: null
	,__class__: iron_RenderTargetRaw
};
var iron_RenderTarget = function(raw) {
	this.isCubeMap = false;
	this.is3D = false;
	this.hasDepth = false;
	this.cubeMap = null;
	this.image = null;
	this.depthStencilFrom = "";
	this.raw = raw;
};
$hxClasses["iron.RenderTarget"] = iron_RenderTarget;
iron_RenderTarget.__name__ = "iron.RenderTarget";
iron_RenderTarget.prototype = {
	raw: null
	,depthStencil: null
	,depthStencilFrom: null
	,image: null
	,cubeMap: null
	,hasDepth: null
	,is3D: null
	,isCubeMap: null
	,unload: function() {
		if(this.image != null) {
			this.image.unload();
		}
		if(this.cubeMap != null) {
			this.cubeMap.unload();
		}
	}
	,__class__: iron_RenderTarget
};
var iron_CachedShaderContext = function() {
};
$hxClasses["iron.CachedShaderContext"] = iron_CachedShaderContext;
iron_CachedShaderContext.__name__ = "iron.CachedShaderContext";
iron_CachedShaderContext.prototype = {
	context: null
	,__class__: iron_CachedShaderContext
};
var iron_data_Armature = function(uid,name,actions) {
	this.matsReady = false;
	this.actions = [];
	this.uid = uid;
	this.name = name;
	var _g = 0;
	while(_g < actions.length) {
		var a = actions[_g];
		++_g;
		var _g1 = 0;
		var _g11 = a.objects;
		while(_g1 < _g11.length) {
			var o = _g11[_g1];
			++_g1;
			iron_data_Armature.setParents(o);
		}
		var bones = [[]];
		iron_data_Armature.traverseBones(a.objects,(function(bones1) {
			return function(object) {
				bones1[0].push(object);
			};
		})(bones));
		this.actions.push({ name : a.name, bones : bones[0], mats : null});
	}
};
$hxClasses["iron.data.Armature"] = iron_data_Armature;
iron_data_Armature.__name__ = "iron.data.Armature";
iron_data_Armature.setParents = function(object) {
	if(object.children == null) {
		return;
	}
	var _g = 0;
	var _g1 = object.children;
	while(_g < _g1.length) {
		var o = _g1[_g];
		++_g;
		o.parent = object;
		iron_data_Armature.setParents(o);
	}
};
iron_data_Armature.traverseBones = function(objects,callback) {
	var _g = 0;
	var _g1 = objects.length;
	while(_g < _g1) {
		var i = _g++;
		iron_data_Armature.traverseBonesStep(objects[i],callback);
	}
};
iron_data_Armature.traverseBonesStep = function(object,callback) {
	if(object.type == "bone_object") {
		callback(object);
	}
	if(object.children == null) {
		return;
	}
	var _g = 0;
	var _g1 = object.children.length;
	while(_g < _g1) {
		var i = _g++;
		iron_data_Armature.traverseBonesStep(object.children[i],callback);
	}
};
iron_data_Armature.prototype = {
	uid: null
	,name: null
	,actions: null
	,matsReady: null
	,initMats: function() {
		if(this.matsReady) {
			return;
		}
		this.matsReady = true;
		var _g = 0;
		var _g1 = this.actions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.mats != null) {
				continue;
			}
			a.mats = [];
			var _g2 = 0;
			var _g11 = a.bones;
			while(_g2 < _g11.length) {
				var b = _g11[_g2];
				++_g2;
				var a1 = b.transform.values;
				a.mats.push(new iron_math_Mat4(a1[0],a1[1],a1[2],a1[3],a1[4],a1[5],a1[6],a1[7],a1[8],a1[9],a1[10],a1[11],a1[12],a1[13],a1[14],a1[15]));
			}
		}
	}
	,getAction: function(name) {
		var _g = 0;
		var _g1 = this.actions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.name == name) {
				return a;
			}
		}
		return null;
	}
	,__class__: iron_data_Armature
};
var iron_data_CameraData = function(raw,done) {
	this.raw = raw;
	this.name = raw.name;
	done(this);
};
$hxClasses["iron.data.CameraData"] = iron_data_CameraData;
iron_data_CameraData.__name__ = "iron.data.CameraData";
iron_data_CameraData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getCameraRawByName(format.camera_datas,id);
		if(raw == null) {
			haxe_Log.trace("Camera data \"" + id + "\" not found!",{ fileName : "Sources/iron/data/CameraData.hx", lineNumber : 20, className : "iron.data.CameraData", methodName : "parse"});
			done(null);
		}
		new iron_data_CameraData(raw,done);
	});
};
iron_data_CameraData.prototype = {
	name: null
	,raw: null
	,__class__: iron_data_CameraData
};
var iron_data_ConstData = function() { };
$hxClasses["iron.data.ConstData"] = iron_data_ConstData;
iron_data_ConstData.__name__ = "iron.data.ConstData";
iron_data_ConstData.createScreenAlignedData = function() {
	var data = [-1.0,-1.0,3.0,-1.0,-1.0,3.0];
	var indices = [0,1,2];
	var structure = new kha_graphics4_VertexStructure();
	structure.add("pos",1);
	iron_data_ConstData.screenAlignedVB = new kha_graphics4_VertexBuffer(data.length / (structure.byteSize() / 4 | 0) | 0,structure,0);
	var vertices = iron_data_ConstData.screenAlignedVB.lock();
	var _g = 0;
	var _g1 = vertices.length;
	while(_g < _g1) {
		var i = _g++;
		vertices[i] = data[i];
	}
	iron_data_ConstData.screenAlignedVB.unlock();
	iron_data_ConstData.screenAlignedIB = new kha_graphics4_IndexBuffer(indices.length,0);
	var id = iron_data_ConstData.screenAlignedIB.lock();
	var _g2 = 0;
	var _g3 = id.length;
	while(_g2 < _g3) {
		var i1 = _g2++;
		id[i1] = indices[i1];
	}
	iron_data_ConstData.screenAlignedIB.unlock();
};
iron_data_ConstData.createSkydomeData = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("pos",2);
	structure.add("nor",2);
	var structLength = structure.byteSize() / 4 | 0;
	var pos = iron_data_ConstData.skydomePos;
	var nor = iron_data_ConstData.skydomeNor;
	iron_data_ConstData.skydomeVB = new kha_graphics4_VertexBuffer(pos.length / 3 | 0,structure,0);
	var vertices = iron_data_ConstData.skydomeVB.lock();
	var _g = 0;
	var _g1 = vertices.length / structLength | 0;
	while(_g < _g1) {
		var i = _g++;
		vertices[i * structLength] = pos[i * 3];
		vertices[i * structLength + 1] = pos[i * 3 + 1];
		vertices[i * structLength + 2] = pos[i * 3 + 2];
		vertices[i * structLength + 3] = -nor[i * 3];
		vertices[i * structLength + 4] = -nor[i * 3 + 1];
		vertices[i * structLength + 5] = -nor[i * 3 + 2];
	}
	iron_data_ConstData.skydomeVB.unlock();
	var indices = iron_data_ConstData.skydomeIndices;
	iron_data_ConstData.skydomeIB = new kha_graphics4_IndexBuffer(indices.length,0);
	var id = iron_data_ConstData.skydomeIB.lock();
	var _g2 = 0;
	var _g3 = id.length;
	while(_g2 < _g3) {
		var i1 = _g2++;
		id[i1] = indices[i1];
	}
	iron_data_ConstData.skydomeIB.unlock();
};
var iron_data_Geometry = function(data,indices,materialIndices,usage) {
	this.mats = null;
	this.actions = null;
	this.skeletonBoneLens = null;
	this.skeletonBoneRefs = null;
	this.skeletonTransformsI = null;
	this.skinBoneWeights = null;
	this.skinBoneIndices = null;
	this.skinBoneCounts = null;
	this.aabbMax = null;
	this.aabbMin = null;
	this.aabb = null;
	this.instanceCount = 0;
	this.instanced = false;
	this.instancedVB = null;
	this.numTris = 0;
	this.ready = false;
	this.name = "";
	this.count = -1;
	this.start = 0;
	this.vertexBufferMap = new haxe_ds_StringMap();
	if(usage == null) {
		usage = 0;
	}
	this.indices = indices;
	this.materialIndices = materialIndices;
	this.usage = usage;
	this.vertexArrays = data.raw.vertex_arrays;
	this.positions = this.getVArray("pos");
	this.normals = this.getVArray("nor");
	this.uvs = this.getVArray("tex");
	this.cols = this.getVArray("col");
	this.data = data;
	this.struct = iron_data_Geometry.getVertexStructure(this.vertexArrays);
	this.structLength = this.struct.byteSize() / 2 | 0;
	this.structStr = "";
	var _g = 0;
	var _g1 = this.struct.elements;
	while(_g < _g1.length) {
		var e = _g1[_g];
		++_g;
		this.structStr += e.name;
	}
};
$hxClasses["iron.data.Geometry"] = iron_data_Geometry;
iron_data_Geometry.__name__ = "iron.data.Geometry";
iron_data_Geometry.getVertexStructure = function(vertexArrays) {
	var structure = new kha_graphics4_VertexStructure();
	var _g = 0;
	var _g1 = vertexArrays.length;
	while(_g < _g1) {
		var i = _g++;
		structure.add(vertexArrays[i].attrib,iron_data_Geometry.getVertexData(vertexArrays[i].data));
	}
	return structure;
};
iron_data_Geometry.getVertexData = function(data) {
	switch(data) {
	case "short2norm":
		return 5;
	case "short4norm":
		return 6;
	default:
		return 6;
	}
};
iron_data_Geometry.buildVertices = function(vertices,vertexArrays,offset,fakeUVs,uvsIndex) {
	if(uvsIndex == null) {
		uvsIndex = -1;
	}
	if(fakeUVs == null) {
		fakeUVs = false;
	}
	if(offset == null) {
		offset = 0;
	}
	var arr = vertexArrays[0];
	var numVertices = arr.values.length / arr.size | 0;
	var di = -1 + offset;
	var _g = 0;
	var _g1 = numVertices;
	while(_g < _g1) {
		var i = _g++;
		var _g2 = 0;
		var _g11 = vertexArrays.length;
		while(_g2 < _g11) {
			var va = _g2++;
			var l = vertexArrays[va].size;
			if(fakeUVs && va == uvsIndex) {
				var _g3 = 0;
				var _g12 = l;
				while(_g3 < _g12) {
					var j = _g3++;
					vertices[++di] = 0;
				}
				continue;
			}
			var _g4 = 0;
			var _g13 = l;
			while(_g4 < _g13) {
				var o = _g4++;
				vertices[++di] = vertexArrays[va].values[i * l + o];
			}
			if(vertexArrays[va].padding != null) {
				if(vertexArrays[va].padding == 1) {
					vertices[++di] = 0;
				}
			}
		}
	}
};
iron_data_Geometry.verticesCount = function(arr) {
	return arr.values.length / arr.size | 0;
};
iron_data_Geometry.prototype = {
	vertexBuffer: null
	,vertexBufferMap: null
	,indexBuffers: null
	,start: null
	,count: null
	,name: null
	,ready: null
	,vertices: null
	,indices: null
	,numTris: null
	,materialIndices: null
	,struct: null
	,structLength: null
	,structStr: null
	,usage: null
	,instancedVB: null
	,instanced: null
	,instanceCount: null
	,positions: null
	,normals: null
	,uvs: null
	,cols: null
	,vertexArrays: null
	,data: null
	,aabb: null
	,aabbMin: null
	,aabbMax: null
	,skinBoneCounts: null
	,skinBoneIndices: null
	,skinBoneWeights: null
	,skeletonTransformsI: null
	,skeletonBoneRefs: null
	,skeletonBoneLens: null
	,actions: null
	,mats: null
	,'delete': function() {
		var _this = this.vertexBufferMap;
		var buf = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(buf.hasNext()) {
			var buf1 = buf.next();
			if(buf1 != null) {
				buf1.delete();
			}
		}
		var _g = 0;
		var _g1 = this.indexBuffers;
		while(_g < _g1.length) {
			var buf2 = _g1[_g];
			++_g;
			buf2.delete();
		}
	}
	,applyScale: function(sx,sy,sz) {
		this.data.scalePos *= sx;
	}
	,getVArray: function(name) {
		var _g = 0;
		var _g1 = this.vertexArrays.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.vertexArrays[i].attrib == name) {
				return this.vertexArrays[i];
			}
		}
		return null;
	}
	,setupInstanced: function(data,instancedType,usage) {
		var structure = new kha_graphics4_VertexStructure();
		structure.instanced = true;
		this.instanced = true;
		structure.add("ipos",2);
		if(instancedType == 2 || instancedType == 4) {
			structure.add("irot",2);
		}
		if(instancedType == 3 || instancedType == 4) {
			structure.add("iscl",2);
		}
		this.instanceCount = data.length / (structure.byteSize() / 4 | 0) | 0;
		this.instancedVB = new kha_graphics4_VertexBuffer(this.instanceCount,structure,usage,1);
		var vertices = this.instancedVB.lock();
		var _g = 0;
		var _g1 = vertices.length;
		while(_g < _g1) {
			var i = _g++;
			vertices[i] = data[i];
		}
		this.instancedVB.unlock();
	}
	,copyVertices: function(vertices,offset,fakeUVs) {
		if(fakeUVs == null) {
			fakeUVs = false;
		}
		if(offset == null) {
			offset = 0;
		}
		iron_data_Geometry.buildVertices(vertices,this.vertexArrays,offset,fakeUVs);
	}
	,getVerticesLength: function() {
		var res = 0;
		var _g = 0;
		var _g1 = this.vertexArrays.length;
		while(_g < _g1) {
			var i = _g++;
			res += this.vertexArrays[i].values.length;
		}
		return res;
	}
	,get: function(vs) {
		var key = "";
		var _g = 0;
		while(_g < vs.length) {
			var e = vs[_g];
			++_g;
			key += e.name;
		}
		var _this = this.vertexBufferMap;
		var vb = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(vb == null) {
			var nVertexArrays = [];
			var atex = false;
			var texOffset = -1;
			var acol = false;
			var _g1 = 0;
			var _g2 = vs.length;
			while(_g1 < _g2) {
				var e1 = _g1++;
				if(vs[e1].name == "tex") {
					atex = true;
					texOffset = e1;
				}
				if(vs[e1].name == "col") {
					acol = true;
				}
				var _g11 = 0;
				var _g21 = this.vertexArrays.length;
				while(_g11 < _g21) {
					var va = _g11++;
					if(vs[e1].name == this.vertexArrays[va].attrib) {
						nVertexArrays.push(this.vertexArrays[va]);
					}
				}
			}
			var struct = iron_data_Geometry.getVertexStructure(nVertexArrays);
			vb = new kha_graphics4_VertexBuffer(this.positions.values.length / this.positions.size | 0,struct,this.usage);
			this.vertices = vb.lockInt16();
			iron_data_Geometry.buildVertices(this.vertices,nVertexArrays,0,atex && this.uvs == null,texOffset);
			vb.unlock();
			var _this1 = this.vertexBufferMap;
			if(__map_reserved[key] != null) {
				_this1.setReserved(key,vb);
			} else {
				_this1.h[key] = vb;
			}
			if(atex && this.uvs == null) {
				haxe_Log.trace("Armory Warning: Geometry " + this.name + " is missing UV map",{ fileName : "Sources/iron/data/Geometry.hx", lineNumber : 224, className : "iron.data.Geometry", methodName : "get"});
			}
			if(acol && this.cols == null) {
				haxe_Log.trace("Armory Warning: Geometry " + this.name + " is missing vertex colors",{ fileName : "Sources/iron/data/Geometry.hx", lineNumber : 225, className : "iron.data.Geometry", methodName : "get"});
			}
		}
		return vb;
	}
	,build: function() {
		if(this.ready) {
			return;
		}
		this.vertexBuffer = new kha_graphics4_VertexBuffer(this.positions.values.length / this.positions.size | 0,this.struct,this.usage);
		this.vertices = this.vertexBuffer.lockInt16();
		iron_data_Geometry.buildVertices(this.vertices,this.vertexArrays);
		this.vertexBuffer.unlock();
		var key = this.structStr;
		var value = this.vertexBuffer;
		var _this = this.vertexBufferMap;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,value);
		} else {
			_this.h[key] = value;
		}
		this.indexBuffers = [];
		var _g = 0;
		var _g1 = this.indices;
		while(_g < _g1.length) {
			var id = _g1[_g];
			++_g;
			if(id.length == 0) {
				continue;
			}
			var indexBuffer = new kha_graphics4_IndexBuffer(id.length,this.usage);
			this.numTris += id.length / 3 | 0;
			var indicesA = indexBuffer.lock();
			var _g2 = 0;
			var _g11 = indicesA.length;
			while(_g2 < _g11) {
				var i = _g2++;
				indicesA[i] = id[i];
			}
			indexBuffer.unlock();
			this.indexBuffers.push(indexBuffer);
		}
		if(this.data.raw.instanced_data != null) {
			this.setupInstanced(this.data.raw.instanced_data,this.data.raw.instanced_type,this.usage);
		}
		this.ready = true;
	}
	,getVerticesCount: function() {
		return this.positions.values.length / this.positions.size | 0;
	}
	,addArmature: function(armature) {
		var _g = 0;
		var _g1 = armature.actions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			this.addAction(a.bones,a.name);
		}
	}
	,addAction: function(bones,name) {
		if(bones == null) {
			return;
		}
		if(this.actions == null) {
			this.actions = new haxe_ds_StringMap();
			this.mats = new haxe_ds_StringMap();
		}
		var _this = this.actions;
		if((__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) != null) {
			return;
		}
		var actionBones = [];
		var _g = 0;
		var _g1 = this.skeletonBoneRefs;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _g2 = 0;
			while(_g2 < bones.length) {
				var b = bones[_g2];
				++_g2;
				if(b.name == s) {
					actionBones.push(b);
				}
			}
		}
		var _this1 = this.actions;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,actionBones);
		} else {
			_this1.h[name] = actionBones;
		}
		var actionMats = [];
		var _g21 = 0;
		while(_g21 < actionBones.length) {
			var b1 = actionBones[_g21];
			++_g21;
			var a = b1.transform.values;
			actionMats.push(new iron_math_Mat4(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]));
		}
		var _this2 = this.mats;
		if(__map_reserved[name] != null) {
			_this2.setReserved(name,actionMats);
		} else {
			_this2.h[name] = actionMats;
		}
	}
	,initSkeletonTransforms: function(transformsI) {
		this.skeletonTransformsI = [];
		var _g = 0;
		while(_g < transformsI.length) {
			var t = transformsI[_g];
			++_g;
			var mi = new iron_math_Mat4(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15]);
			this.skeletonTransformsI.push(mi);
		}
	}
	,calculateAABB: function() {
		this.aabbMin = new iron_math_Vec4(-0.01,-0.01,-0.01);
		this.aabbMax = new iron_math_Vec4(0.01,0.01,0.01);
		this.aabb = new iron_math_Vec4();
		var i = 0;
		while(i < this.positions.values.length) {
			if(this.positions.values[i] > this.aabbMax.x) {
				this.aabbMax.x = this.positions.values[i];
			}
			if(this.positions.values[i + 1] > this.aabbMax.y) {
				this.aabbMax.y = this.positions.values[i + 1];
			}
			if(this.positions.values[i + 2] > this.aabbMax.z) {
				this.aabbMax.z = this.positions.values[i + 2];
			}
			if(this.positions.values[i] < this.aabbMin.x) {
				this.aabbMin.x = this.positions.values[i];
			}
			if(this.positions.values[i + 1] < this.aabbMin.y) {
				this.aabbMin.y = this.positions.values[i + 1];
			}
			if(this.positions.values[i + 2] < this.aabbMin.z) {
				this.aabbMin.z = this.positions.values[i + 2];
			}
			i += 4;
		}
		this.aabb.x = (Math.abs(this.aabbMin.x) + Math.abs(this.aabbMax.x)) / 32767 * this.data.scalePos;
		this.aabb.y = (Math.abs(this.aabbMin.y) + Math.abs(this.aabbMax.y)) / 32767 * this.data.scalePos;
		this.aabb.z = (Math.abs(this.aabbMin.z) + Math.abs(this.aabbMax.z)) / 32767 * this.data.scalePos;
	}
	,calculateTangents: function() {
	}
	,__class__: iron_data_Geometry
};
var iron_data_LightData = function(raw,done) {
	this.raw = raw;
	this.name = raw.name;
	done(this);
};
$hxClasses["iron.data.LightData"] = iron_data_LightData;
iron_data_LightData.__name__ = "iron.data.LightData";
iron_data_LightData.typeToInt = function(s) {
	switch(s) {
	case "area":
		return 3;
	case "point":
		return 1;
	case "spot":
		return 2;
	case "sun":
		return 0;
	default:
		return 0;
	}
};
iron_data_LightData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getLightRawByName(format.light_datas,id);
		if(raw == null) {
			haxe_Log.trace("Light data \"" + id + "\" not found!",{ fileName : "Sources/iron/data/LightData.hx", lineNumber : 30, className : "iron.data.LightData", methodName : "parse"});
			done(null);
		}
		new iron_data_LightData(raw,done);
	});
};
iron_data_LightData.prototype = {
	name: null
	,raw: null
	,__class__: iron_data_LightData
};
var iron_data_MaterialData = function(raw,done,file) {
	if(file == null) {
		file = "";
	}
	this.contexts = null;
	var _gthis = this;
	this.uid = ++iron_data_MaterialData.uidCounter;
	this.raw = raw;
	this.name = raw.name;
	var ref = raw.shader.split("/");
	var object_file = "";
	var data_ref = "";
	if(ref.length == 2) {
		object_file = ref[0];
		data_ref = ref[1];
	} else {
		object_file = file;
		data_ref = raw.shader;
	}
	iron_data_Data.getShader(object_file,data_ref,function(b) {
		_gthis.shader = b;
		_gthis.contexts = [];
		while(_gthis.contexts.length < raw.contexts.length) _gthis.contexts.push(null);
		var contextsLoaded = 0;
		var _g = 0;
		var _g1 = raw.contexts.length;
		while(_g < _g1) {
			var i = [_g++];
			var c = raw.contexts[i[0]];
			new iron_data_MaterialContext(c,(function(i1) {
				return function(self) {
					_gthis.contexts[i1[0]] = self;
					contextsLoaded += 1;
					if(contextsLoaded == raw.contexts.length) {
						done(_gthis);
					}
				};
			})(i));
		}
	},raw.override_context);
};
$hxClasses["iron.data.MaterialData"] = iron_data_MaterialData;
iron_data_MaterialData.__name__ = "iron.data.MaterialData";
iron_data_MaterialData.parse = function(file,name,done) {
	iron_data_Data.getSceneRaw(file,function(format) {
		var raw = iron_data_Data.getMaterialRawByName(format.material_datas,name);
		if(raw == null) {
			haxe_Log.trace("Material data \"" + name + "\" not found!",{ fileName : "Sources/iron/data/MaterialData.hx", lineNumber : 58, className : "iron.data.MaterialData", methodName : "parse"});
			done(null);
		}
		new iron_data_MaterialData(raw,done,file);
	});
};
iron_data_MaterialData.prototype = {
	uid: null
	,name: null
	,raw: null
	,shader: null
	,contexts: null
	,getContext: function(name) {
		var _g = 0;
		var _g1 = this.contexts;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(HxOverrides.substr(c.raw.name,0,name.length) == name) {
				return c;
			}
		}
		return null;
	}
	,__class__: iron_data_MaterialData
};
var iron_data_MaterialContext = function(raw,done) {
	this.id = 0;
	this.textures = null;
	var _gthis = this;
	this.raw = raw;
	this.id = iron_data_MaterialContext.num++;
	if(raw.bind_textures != null && raw.bind_textures.length > 0) {
		var this1 = new Array(raw.bind_textures.length);
		this.textures = this1;
		var texturesLoaded = 0;
		var _g = 0;
		var _g1 = raw.bind_textures.length;
		while(_g < _g1) {
			var i = [_g++];
			var tex = [raw.bind_textures[i[0]]];
			if(tex[0].file == "" || tex[0].source == "movie") {
				texturesLoaded += 1;
				if(texturesLoaded == raw.bind_textures.length) {
					done(this);
				}
				continue;
			}
			iron_data_Data.getImage(tex[0].file,(function(tex1,i1) {
				return function(image) {
					_gthis.textures[i1[0]] = image;
					texturesLoaded += 1;
					if(tex1[0].mipmaps != null) {
						var mipmaps = [];
						while(mipmaps.length < tex1[0].mipmaps.length) mipmaps.push(null);
						var mipmapsLoaded = 0;
						var _g2 = 0;
						var _g11 = tex1[0].mipmaps.length;
						while(_g2 < _g11) {
							var j = [_g2++];
							var name = tex1[0].mipmaps[j[0]];
							iron_data_Data.getImage(name,(function(j1,tex2) {
								return function(mipimg) {
									mipmaps[j1[0]] = mipimg;
									mipmapsLoaded += 1;
									if(mipmapsLoaded == tex2[0].mipmaps.length) {
										image.setMipmaps(mipmaps);
										tex2[0].mipmaps = null;
										tex2[0].generate_mipmaps = false;
										if(texturesLoaded == raw.bind_textures.length) {
											done(_gthis);
										}
									}
								};
							})(j,tex1));
						}
					} else if(tex1[0].generate_mipmaps == true && image != null) {
						image.generateMipmaps(1000);
						tex1[0].mipmaps = null;
						tex1[0].generate_mipmaps = false;
						if(texturesLoaded == raw.bind_textures.length) {
							done(_gthis);
						}
					} else if(texturesLoaded == raw.bind_textures.length) {
						done(_gthis);
					}
				};
			})(tex,i),false,tex[0].format != null ? tex[0].format : "RGBA32");
		}
	} else {
		done(this);
	}
};
$hxClasses["iron.data.MaterialContext"] = iron_data_MaterialContext;
iron_data_MaterialContext.__name__ = "iron.data.MaterialContext";
iron_data_MaterialContext.prototype = {
	raw: null
	,textures: null
	,id: null
	,setTextureParameters: function(g,textureIndex,context,unitIndex) {
		context.setTextureParameters(g,unitIndex,this.raw.bind_textures[textureIndex]);
	}
	,__class__: iron_data_MaterialContext
};
var iron_data_MeshData = function(raw,done) {
	this.scaleTex = 1.0;
	this.scalePos = 1.0;
	this.refcount = 0;
	this.count = -1;
	this.start = 0;
	this.raw = raw;
	this.name = raw.name;
	if(raw.scale_pos != null) {
		this.scalePos = raw.scale_pos;
	}
	if(raw.scale_tex != null) {
		this.scaleTex = raw.scale_tex;
	}
	var indices = [];
	var materialIndices = [];
	var _g = 0;
	var _g1 = raw.index_arrays;
	while(_g < _g1.length) {
		var ind = _g1[_g];
		++_g;
		indices.push(ind.values);
		materialIndices.push(ind.material);
	}
	this.isSkinned = raw.skin != null;
	var vertexArrays = raw.vertex_arrays;
	if(this.isSkinned) {
		vertexArrays.push({ attrib : "bone", values : null, data : "short4norm"});
		vertexArrays.push({ attrib : "weight", values : null, data : "short4norm"});
	}
	var _g2 = 0;
	var _g3 = vertexArrays.length;
	while(_g2 < _g3) {
		var i = _g2++;
		var padding = vertexArrays[i].padding;
		vertexArrays[i].size = this.getVertexSize(vertexArrays[i].data,padding != null ? padding : 0);
	}
	var parsedUsage = 0;
	if(raw.dynamic_usage != null && raw.dynamic_usage == true) {
		parsedUsage = 1;
	}
	var usage = parsedUsage;
	if(this.isSkinned) {
		var bonea = null;
		var weighta = null;
		var vertex_length = vertexArrays[0].values.length / vertexArrays[0].size | 0;
		var l = vertex_length * 4;
		var this1 = new Int16Array(l);
		bonea = this1;
		var this11 = new Int16Array(l);
		weighta = this11;
		var index = 0;
		var ai = 0;
		var _g4 = 0;
		var _g5 = vertex_length;
		while(_g4 < _g5) {
			var i1 = _g4++;
			var boneCount = raw.skin.bone_count_array[i1];
			var _g41 = index;
			var _g51 = index + boneCount;
			while(_g41 < _g51) {
				var j = _g41++;
				bonea[ai] = raw.skin.bone_index_array[j];
				weighta[ai] = raw.skin.bone_weight_array[j];
				++ai;
			}
			var _g6 = boneCount;
			var _g7 = 4;
			while(_g6 < _g7) {
				var j1 = _g6++;
				bonea[ai] = 0;
				weighta[ai] = 0;
				++ai;
			}
			index += boneCount;
		}
		vertexArrays[vertexArrays.length - 2].values = bonea;
		vertexArrays[vertexArrays.length - 1].values = weighta;
	}
	this.geom = new iron_data_Geometry(this,indices,materialIndices,usage);
	this.geom.name = this.name;
	done(this);
};
$hxClasses["iron.data.MeshData"] = iron_data_MeshData;
iron_data_MeshData.__name__ = "iron.data.MeshData";
iron_data_MeshData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getMeshRawByName(format.mesh_datas,id);
		if(raw == null) {
			haxe_Log.trace("Mesh data \"" + id + "\" not found!",{ fileName : "Sources/iron/data/MeshData.hx", lineNumber : 101, className : "iron.data.MeshData", methodName : "parse"});
			done(null);
		}
		new iron_data_MeshData(raw,function(dat) {
			dat.format = format;
			if(raw.skin != null) {
				dat.geom.skinBoneCounts = raw.skin.bone_count_array;
				dat.geom.skinBoneIndices = raw.skin.bone_index_array;
				dat.geom.skinBoneWeights = raw.skin.bone_weight_array;
				dat.geom.skeletonBoneRefs = raw.skin.bone_ref_array;
				dat.geom.skeletonBoneLens = raw.skin.bone_len_array;
				dat.geom.initSkeletonTransforms(raw.skin.transformsI);
			}
			done(dat);
		});
	});
};
iron_data_MeshData.prototype = {
	name: null
	,raw: null
	,format: null
	,geom: null
	,start: null
	,count: null
	,refcount: null
	,handle: null
	,scalePos: null
	,scaleTex: null
	,isSkinned: null
	,'delete': function() {
		this.geom.delete();
	}
	,getVertexSize: function(vertex_data,padding) {
		if(padding == null) {
			padding = 0;
		}
		switch(vertex_data) {
		case "short2norm":
			return 2 - padding;
		case "short4norm":
			return 4 - padding;
		default:
			return 0;
		}
	}
	,getPadding: function(padding) {
		if(padding != null) {
			return padding;
		} else {
			return 0;
		}
	}
	,__class__: iron_data_MeshData
};
var iron_data_ParticleData = function(raw,done) {
	this.raw = raw;
	this.name = raw.name;
	done(this);
};
$hxClasses["iron.data.ParticleData"] = iron_data_ParticleData;
iron_data_ParticleData.__name__ = "iron.data.ParticleData";
iron_data_ParticleData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getParticleRawByName(format.particle_datas,id);
		if(raw == null) {
			haxe_Log.trace("Particle data \"" + id + "\" not found!",{ fileName : "Sources/iron/data/ParticleData.hx", lineNumber : 21, className : "iron.data.ParticleData", methodName : "parse"});
			done(null);
		}
		new iron_data_ParticleData(raw,done);
	});
};
iron_data_ParticleData.prototype = {
	name: null
	,raw: null
	,__class__: iron_data_ParticleData
};
var iron_data_ProbeData = function() { };
$hxClasses["iron.data.ProbeData"] = iron_data_ProbeData;
iron_data_ProbeData.__name__ = "iron.data.ProbeData";
var iron_data_SceneStream = function() {
	this.unloadDistance = -1;
	this.loadDistance = -1;
	this.loading = 0;
	this.loadMax = 8;
	this.checkPos = 0;
	this.checkMax = 64;
	this.sectors = [new iron_data_StreamSector()];
};
$hxClasses["iron.data.SceneStream"] = iron_data_SceneStream;
iron_data_SceneStream.__name__ = "iron.data.SceneStream";
iron_data_SceneStream.prototype = {
	checkMax: null
	,checkPos: null
	,loadMax: null
	,loading: null
	,loadDistance: null
	,unloadDistance: null
	,sectors: null
	,sceneTotal: function() {
		return this.sectors[0].handles.length;
	}
	,remove: function() {
	}
	,add: function(object_file,data_ref,sceneName,armature,materials,parent,obj) {
		this.sectors[0].handles.push({ object_file : object_file, data_ref : data_ref, sceneName : sceneName, armature : armature, materials : materials, parent : parent, obj : obj, object : null, loading : false});
	}
	,setup: function(camera) {
		this.loadDistance = camera.data.raw.far_plane * 1.1 | 0;
		this.unloadDistance = camera.data.raw.far_plane * 1.5 | 0;
	}
	,update: function(camera) {
		var _gthis = this;
		if(this.loadDistance == -1) {
			this.setup(camera);
		}
		if(this.loading >= this.loadMax) {
			return;
		}
		var sec = this.sectors[0];
		var to = Math.min(this.checkMax,sec.handles.length) | 0;
		var _g = 0;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var h = [sec.handles[this.checkPos]];
			this.checkPos++;
			if(this.checkPos >= sec.handles.length) {
				this.checkPos = 0;
			}
			var camX = camera.transform.world.self._30;
			var camY = camera.transform.world.self._31;
			var camZ = camera.transform.world.self._32;
			var hx = h[0].obj.transform.values[3];
			var hy = h[0].obj.transform.values[7];
			var hz = h[0].obj.transform.values[11];
			var vx = camX - hx;
			var vy = camY - hy;
			var vz = camZ - hz;
			var cameraDistance = Math.sqrt(vx * vx + vy * vy + vz * vz);
			var dim = h[0].obj.dimensions;
			if(dim != null) {
				var r = dim[0];
				if(dim[1] > r) {
					r = dim[1];
				}
				if(dim[2] > r) {
					r = dim[2];
				}
				cameraDistance -= r;
			}
			if(cameraDistance < this.loadDistance && h[0].object == null && !h[0].loading) {
				h[0].loading = true;
				this.loading++;
				iron_Scene.active.returnMeshObject(h[0].object_file,h[0].data_ref,h[0].sceneName,h[0].armature,h[0].materials,h[0].parent,h[0].obj,(function(h1) {
					return function(object) {
						h1[0].object = js_Boot.__cast(object , iron_object_MeshObject);
						h1[0].loading = false;
						_gthis.loading--;
					};
				})(h));
				if(this.loading >= this.loadMax) {
					return;
				}
			} else if(cameraDistance > this.unloadDistance && h[0].object != null) {
				h[0].object.remove();
				if(h[0].object.data.refcount <= 0) {
					iron_data_Data.deleteMesh(h[0].object_file + h[0].data_ref);
				}
				h[0].object = null;
			}
		}
	}
	,__class__: iron_data_SceneStream
};
var iron_data_StreamSector = function() {
	this.handles = [];
};
$hxClasses["iron.data.StreamSector"] = iron_data_StreamSector;
iron_data_StreamSector.__name__ = "iron.data.StreamSector";
iron_data_StreamSector.prototype = {
	handles: null
	,__class__: iron_data_StreamSector
};
var iron_data_ShaderData = function(raw,done,overrideContext) {
	this.contexts = [];
	var _gthis = this;
	this.raw = raw;
	this.name = raw.name;
	var _g = 0;
	var _g1 = raw.contexts;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		this.contexts.push(null);
	}
	var contextsLoaded = 0;
	var _g2 = 0;
	var _g3 = raw.contexts.length;
	while(_g2 < _g3) {
		var i = [_g2++];
		var c1 = raw.contexts[i[0]];
		new iron_data_ShaderContext(c1,(function(i1) {
			return function(con) {
				_gthis.contexts[i1[0]] = con;
				contextsLoaded += 1;
				if(contextsLoaded == raw.contexts.length) {
					done(_gthis);
				}
			};
		})(i),overrideContext);
	}
};
$hxClasses["iron.data.ShaderData"] = iron_data_ShaderData;
iron_data_ShaderData.__name__ = "iron.data.ShaderData";
iron_data_ShaderData.parse = function(file,name,done,overrideContext) {
	iron_data_Data.getSceneRaw(file,function(format) {
		var raw = iron_data_Data.getShaderRawByName(format.shader_datas,name);
		if(raw == null) {
			haxe_Log.trace("Shader data \"" + name + "\" not found!",{ fileName : "Sources/iron/data/ShaderData.hx", lineNumber : 48, className : "iron.data.ShaderData", methodName : "parse"});
			done(null);
		}
		new iron_data_ShaderData(raw,done,overrideContext);
	});
};
iron_data_ShaderData.prototype = {
	name: null
	,raw: null
	,contexts: null
	,'delete': function() {
		var _g = 0;
		var _g1 = this.contexts;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.delete();
		}
	}
	,getContext: function(name) {
		var _g = 0;
		var _g1 = this.contexts;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.raw.name == name) {
				return c;
			}
		}
		return null;
	}
	,__class__: iron_data_ShaderData
};
var iron_data_ShaderContext = function(raw,done,overrideContext) {
	this.instancingType = 0;
	this.raw = raw;
	if(raw.name == "voxel") {
		done(this);
		return;
	}
	this.overrideContext = overrideContext;
	this.parseVertexStructure();
	this.compile(done);
};
$hxClasses["iron.data.ShaderContext"] = iron_data_ShaderContext;
iron_data_ShaderContext.__name__ = "iron.data.ShaderContext";
iron_data_ShaderContext.parseData = function(data) {
	if(data == "float1") {
		return 0;
	} else if(data == "float2") {
		return 1;
	} else if(data == "float3") {
		return 2;
	} else if(data == "float4") {
		return 3;
	} else if(data == "short2norm") {
		return 5;
	} else if(data == "short4norm") {
		return 6;
	}
	return 0;
};
iron_data_ShaderContext.prototype = {
	raw: null
	,pipeState: null
	,constants: null
	,textureUnits: null
	,overrideContext: null
	,structure: null
	,instancingType: null
	,compile: function(done) {
		var _gthis = this;
		if(this.pipeState != null) {
			this.pipeState.delete();
		}
		this.pipeState = new kha_graphics4_PipelineState();
		this.constants = [];
		this.textureUnits = [];
		if(this.instancingType > 0) {
			var instStruct = new kha_graphics4_VertexStructure();
			instStruct.add("ipos",2);
			if(this.instancingType == 2 || this.instancingType == 4) {
				instStruct.add("irot",2);
			}
			if(this.instancingType == 3 || this.instancingType == 4) {
				instStruct.add("iscl",2);
			}
			instStruct.instanced = true;
			this.pipeState.inputLayout = [this.structure,instStruct];
		} else {
			this.pipeState.inputLayout = [this.structure];
		}
		this.pipeState.depthWrite = this.raw.depth_write;
		this.pipeState.depthMode = this.getCompareMode(this.raw.compare_mode);
		this.pipeState.cullMode = this.getCullMode(this.raw.cull_mode);
		if(this.raw.blend_source != null) {
			this.pipeState.blendSource = this.getBlendingFactor(this.raw.blend_source);
		}
		if(this.raw.blend_destination != null) {
			this.pipeState.blendDestination = this.getBlendingFactor(this.raw.blend_destination);
		}
		if(this.raw.blend_operation != null) {
			this.pipeState.blendOperation = this.getBlendingOperation(this.raw.blend_operation);
		}
		if(this.raw.alpha_blend_source != null) {
			this.pipeState.alphaBlendSource = this.getBlendingFactor(this.raw.alpha_blend_source);
		}
		if(this.raw.alpha_blend_destination != null) {
			this.pipeState.alphaBlendDestination = this.getBlendingFactor(this.raw.alpha_blend_destination);
		}
		if(this.raw.alpha_blend_operation != null) {
			this.pipeState.alphaBlendOperation = this.getBlendingOperation(this.raw.alpha_blend_operation);
		}
		if(this.raw.color_writes_red != null) {
			var _g = 0;
			var _g1 = this.raw.color_writes_red.length;
			while(_g < _g1) {
				var i = _g++;
				this.pipeState.colorWriteMasksRed[i] = this.raw.color_writes_red[i];
			}
		}
		if(this.raw.color_writes_green != null) {
			var _g2 = 0;
			var _g11 = this.raw.color_writes_green.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				this.pipeState.colorWriteMasksGreen[i1] = this.raw.color_writes_green[i1];
			}
		}
		if(this.raw.color_writes_blue != null) {
			var _g3 = 0;
			var _g12 = this.raw.color_writes_blue.length;
			while(_g3 < _g12) {
				var i2 = _g3++;
				this.pipeState.colorWriteMasksBlue[i2] = this.raw.color_writes_blue[i2];
			}
		}
		if(this.raw.color_writes_alpha != null) {
			var _g4 = 0;
			var _g13 = this.raw.color_writes_alpha.length;
			while(_g4 < _g13) {
				var i3 = _g4++;
				this.pipeState.colorWriteMasksAlpha[i3] = this.raw.color_writes_alpha[i3];
			}
		}
		if(this.raw.conservative_raster != null) {
			this.pipeState.conservativeRasterization = this.raw.conservative_raster;
		}
		if(this.raw.shader_from_source) {
			this.pipeState.vertexShader = kha_graphics4_VertexShader.fromSource(this.raw.vertex_shader);
			this.pipeState.fragmentShader = kha_graphics4_FragmentShader.fromSource(this.raw.fragment_shader);
			if(this.pipeState.vertexShader.shader == null || this.pipeState.fragmentShader.shader == null) {
				done(null);
				return;
			}
			this.finishCompile(done);
		} else {
			var shadersLoaded = 0;
			var numShaders = 2;
			if(this.raw.geometry_shader != null) {
				numShaders += 1;
			}
			if(this.raw.tesscontrol_shader != null) {
				numShaders += 1;
			}
			if(this.raw.tesseval_shader != null) {
				numShaders += 1;
			}
			var loadShader = function(file,type) {
				var path = "../krom-resources/" + file + ".d3d11";
				iron_data_Data.getBlob(path,function(b) {
					if(type == 0) {
						_gthis.pipeState.vertexShader = new kha_graphics4_VertexShader([b],[file]);
					} else if(type == 1) {
						_gthis.pipeState.fragmentShader = new kha_graphics4_FragmentShader([b],[file]);
					} else if(type == 2) {
						_gthis.pipeState.geometryShader = new kha_graphics4_GeometryShader([b],[file]);
					} else if(type == 3) {
						_gthis.pipeState.tessellationControlShader = new kha_graphics4_TessellationControlShader([b],[file]);
					} else if(type == 4) {
						_gthis.pipeState.tessellationEvaluationShader = new kha_graphics4_TessellationEvaluationShader([b],[file]);
					}
					shadersLoaded += 1;
					if(shadersLoaded >= numShaders) {
						_gthis.finishCompile(done);
					}
				});
			};
			loadShader(this.raw.vertex_shader,0);
			loadShader(this.raw.fragment_shader,1);
			if(this.raw.geometry_shader != null) {
				loadShader(this.raw.geometry_shader,2);
			}
			if(this.raw.tesscontrol_shader != null) {
				loadShader(this.raw.tesscontrol_shader,3);
			}
			if(this.raw.tesseval_shader != null) {
				loadShader(this.raw.tesseval_shader,4);
			}
		}
	}
	,finishCompile: function(done) {
		if(this.overrideContext != null) {
			if(this.overrideContext.cull_mode != null) {
				this.pipeState.cullMode = this.getCullMode(this.overrideContext.cull_mode);
			}
		}
		this.pipeState.compile();
		if(this.raw.constants != null) {
			var _g = 0;
			var _g1 = this.raw.constants;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				this.addConstant(c);
			}
		}
		if(this.raw.texture_units != null) {
			var _g2 = 0;
			var _g11 = this.raw.texture_units;
			while(_g2 < _g11.length) {
				var tu = _g11[_g2];
				++_g2;
				this.addTexture(tu);
			}
		}
		done(this);
	}
	,parseVertexStructure: function() {
		this.structure = new kha_graphics4_VertexStructure();
		var ipos = false;
		var irot = false;
		var iscl = false;
		var _g = 0;
		var _g1 = this.raw.vertex_elements;
		while(_g < _g1.length) {
			var elem = _g1[_g];
			++_g;
			if(elem.name == "ipos") {
				ipos = true;
				continue;
			}
			if(elem.name == "irot") {
				irot = true;
				continue;
			}
			if(elem.name == "iscl") {
				iscl = true;
				continue;
			}
			this.structure.add(elem.name,iron_data_ShaderContext.parseData(elem.data));
		}
		if(ipos && !irot && !iscl) {
			this.instancingType = 1;
		} else if(ipos && irot && !iscl) {
			this.instancingType = 2;
		} else if(ipos && !irot && iscl) {
			this.instancingType = 3;
		} else if(ipos && irot && iscl) {
			this.instancingType = 4;
		}
	}
	,'delete': function() {
		if(this.pipeState.fragmentShader != null) {
			this.pipeState.fragmentShader.delete();
		}
		if(this.pipeState.vertexShader != null) {
			this.pipeState.vertexShader.delete();
		}
		if(this.pipeState.geometryShader != null) {
			this.pipeState.geometryShader.delete();
		}
		if(this.pipeState.tessellationControlShader != null) {
			this.pipeState.tessellationControlShader.delete();
		}
		if(this.pipeState.tessellationEvaluationShader != null) {
			this.pipeState.tessellationEvaluationShader.delete();
		}
		this.pipeState.delete();
	}
	,getCompareMode: function(s) {
		switch(s) {
		case "always":
			return 0;
		case "equal":
			return 2;
		case "greater":
			return 6;
		case "greater_equal":
			return 7;
		case "less":
			return 4;
		case "less_equal":
			return 5;
		case "never":
			return 1;
		case "not_equal":
			return 3;
		default:
			return 4;
		}
	}
	,getCullMode: function(s) {
		switch(s) {
		case "clockwise":
			return 0;
		case "none":
			return 2;
		default:
			return 1;
		}
	}
	,getBlendingOperation: function(s) {
		switch(s) {
		case "add":
			return 0;
		case "max":
			return 4;
		case "min":
			return 3;
		case "reverse_subtract":
			return 2;
		case "subtract":
			return 1;
		default:
			return 0;
		}
	}
	,getBlendingFactor: function(s) {
		switch(s) {
		case "blend_one":
			return 1;
		case "blend_zero":
			return 2;
		case "destination_alpha":
			return 4;
		case "destination_color":
			return 8;
		case "inverse_destination_alpha":
			return 6;
		case "inverse_destination_color":
			return 10;
		case "inverse_source_alpha":
			return 5;
		case "inverse_source_color":
			return 9;
		case "source_alpha":
			return 3;
		case "source_color":
			return 7;
		default:
			return 0;
		}
	}
	,getTextureAddresing: function(s) {
		switch(s) {
		case "mirror":
			return 1;
		case "repeat":
			return 0;
		default:
			return 2;
		}
	}
	,getTextureFilter: function(s) {
		switch(s) {
		case "linear":
			return 1;
		case "point":
			return 0;
		default:
			return 2;
		}
	}
	,getMipmapFilter: function(s) {
		switch(s) {
		case "no":
			return 0;
		case "point":
			return 1;
		default:
			return 2;
		}
	}
	,addConstant: function(c) {
		this.constants.push(this.pipeState.getConstantLocation(c.name));
	}
	,addTexture: function(tu) {
		var unit = this.pipeState.getTextureUnit(tu.name);
		this.textureUnits.push(unit);
	}
	,setTextureParameters: function(g,unitIndex,tex) {
		var unit = this.textureUnits[unitIndex];
		g.setTextureParameters(unit,tex.u_addressing == null ? 0 : this.getTextureAddresing(tex.u_addressing),tex.v_addressing == null ? 0 : this.getTextureAddresing(tex.v_addressing),tex.min_filter == null ? 1 : this.getTextureFilter(tex.min_filter),tex.mag_filter == null ? 1 : this.getTextureFilter(tex.mag_filter),tex.mipmap_filter == null ? 0 : this.getMipmapFilter(tex.mipmap_filter));
	}
	,__class__: iron_data_ShaderContext
};
var iron_data_WorldData = function(raw,done) {
	var _gthis = this;
	this.raw = raw;
	this.name = raw.name;
	if(raw.probe != null) {
		new iron_data_Probe(raw.probe,function(self) {
			_gthis.probe = self;
			_gthis.loadEnvmap(done);
		});
	} else {
		this.loadEnvmap(done);
	}
};
$hxClasses["iron.data.WorldData"] = iron_data_WorldData;
iron_data_WorldData.__name__ = "iron.data.WorldData";
iron_data_WorldData.parse = function(name,id,done) {
	iron_data_Data.getSceneRaw(name,function(format) {
		var raw = iron_data_Data.getWorldRawByName(format.world_datas,id);
		if(raw == null) {
			haxe_Log.trace("World data \"" + id + "\" not found!",{ fileName : "Sources/iron/data/WorldData.hx", lineNumber : 57, className : "iron.data.WorldData", methodName : "parse"});
			done(null);
		}
		new iron_data_WorldData(raw,done);
	});
};
iron_data_WorldData.getEmptyIrradiance = function() {
	if(iron_data_WorldData.emptyIrr == null) {
		var this1 = new Float32Array(28);
		iron_data_WorldData.emptyIrr = this1;
		var _g = 0;
		var _g1 = iron_data_WorldData.emptyIrr.length;
		while(_g < _g1) {
			var i = _g++;
			iron_data_WorldData.emptyIrr[i] = 0.0;
		}
	}
	return iron_data_WorldData.emptyIrr;
};
iron_data_WorldData.prototype = {
	name: null
	,raw: null
	,envmap: null
	,probe: null
	,loadEnvmap: function(done) {
		var _gthis = this;
		if(this.raw.envmap != null) {
			iron_data_Data.getImage(this.raw.envmap,function(image) {
				_gthis.envmap = image;
				done(_gthis);
			});
		} else {
			done(this);
		}
	}
	,__class__: iron_data_WorldData
};
var iron_data_Probe = function(raw,done) {
	this.radianceMipmaps = [];
	var _gthis = this;
	this.raw = raw;
	this.setIrradiance(function(irr) {
		_gthis.irradiance = irr;
		if(raw.radiance != null) {
			iron_data_Data.getImage(raw.radiance,function(rad) {
				_gthis.radiance = rad;
				while(_gthis.radianceMipmaps.length < raw.radiance_mipmaps) _gthis.radianceMipmaps.push(null);
				var dot = raw.radiance.lastIndexOf(".");
				var ext = raw.radiance.substring(dot);
				var base = raw.radiance.substring(0,dot);
				var mipsLoaded = 0;
				var _g = 0;
				var _g1 = raw.radiance_mipmaps;
				while(_g < _g1) {
					var i = [_g++];
					iron_data_Data.getImage(base + "_" + i[0] + ext,(function(i1) {
						return function(mipimg) {
							_gthis.radianceMipmaps[i1[0]] = mipimg;
							mipsLoaded += 1;
							if(mipsLoaded == raw.radiance_mipmaps) {
								_gthis.radiance.setMipmaps(_gthis.radianceMipmaps);
								done(_gthis);
							}
						};
					})(i),true);
				}
			});
		} else {
			done(_gthis);
		}
	});
};
$hxClasses["iron.data.Probe"] = iron_data_Probe;
iron_data_Probe.__name__ = "iron.data.Probe";
iron_data_Probe.prototype = {
	raw: null
	,radiance: null
	,radianceMipmaps: null
	,irradiance: null
	,setIrradiance: function(done) {
		if(this.raw.irradiance == null) {
			var tmp = iron_data_WorldData.getEmptyIrradiance();
			done(tmp);
		} else {
			var ext = StringTools.endsWith(this.raw.irradiance,".json") ? "" : ".arm";
			iron_data_Data.getBlob(this.raw.irradiance + ext,function(b) {
				var irradianceParsed;
				if(ext == "") {
					irradianceParsed = JSON.parse(b.toString());
				} else {
					var i = new haxe_io_BytesInput(b.toBytes());
					i.set_bigEndian(false);
					irradianceParsed = iron_system_ArmPack.read(i);
				}
				var this1 = new Float32Array(28);
				var irr = this1;
				irr[0] = irradianceParsed.irradiance[0];
				irr[1] = irradianceParsed.irradiance[1];
				irr[2] = irradianceParsed.irradiance[2];
				irr[3] = irradianceParsed.irradiance[3];
				irr[4] = irradianceParsed.irradiance[4];
				irr[5] = irradianceParsed.irradiance[5];
				irr[6] = irradianceParsed.irradiance[6];
				irr[7] = irradianceParsed.irradiance[7];
				irr[8] = irradianceParsed.irradiance[8];
				irr[9] = irradianceParsed.irradiance[9];
				irr[10] = irradianceParsed.irradiance[10];
				irr[11] = irradianceParsed.irradiance[11];
				irr[12] = irradianceParsed.irradiance[12];
				irr[13] = irradianceParsed.irradiance[13];
				irr[14] = irradianceParsed.irradiance[14];
				irr[15] = irradianceParsed.irradiance[15];
				irr[16] = irradianceParsed.irradiance[16];
				irr[17] = irradianceParsed.irradiance[17];
				irr[18] = irradianceParsed.irradiance[18];
				irr[19] = irradianceParsed.irradiance[19];
				irr[20] = irradianceParsed.irradiance[20];
				irr[21] = irradianceParsed.irradiance[21];
				irr[22] = irradianceParsed.irradiance[22];
				irr[23] = irradianceParsed.irradiance[23];
				irr[24] = irradianceParsed.irradiance[24];
				irr[25] = irradianceParsed.irradiance[25];
				irr[26] = irradianceParsed.irradiance[26];
				done(irr);
			});
		}
	}
	,__class__: iron_data_Probe
};
var iron_math_Mat3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this.self = new kha_math_FastMatrix3(_00,_10,_20,_01,_11,_21,_02,_12,_22);
};
$hxClasses["iron.math.Mat3"] = iron_math_Mat3;
iron_math_Mat3.__name__ = "iron.math.Mat3";
iron_math_Mat3.identity = function() {
	return new iron_math_Mat3(1,0,0,0,1,0,0,0,1);
};
iron_math_Mat3.prototype = {
	self: null
	,setFrom4: function(m) {
		this.self._00 = m.self._00;
		this.self._01 = m.self._01;
		this.self._02 = m.self._02;
		this.self._10 = m.self._10;
		this.self._11 = m.self._11;
		this.self._12 = m.self._12;
		this.self._20 = m.self._20;
		this.self._21 = m.self._21;
		this.self._22 = m.self._22;
	}
	,get__00: function() {
		return this.self._00;
	}
	,set__00: function(f) {
		return this.self._00 = f;
	}
	,get__01: function() {
		return this.self._01;
	}
	,set__01: function(f) {
		return this.self._01 = f;
	}
	,get__02: function() {
		return this.self._02;
	}
	,set__02: function(f) {
		return this.self._02 = f;
	}
	,get__10: function() {
		return this.self._10;
	}
	,set__10: function(f) {
		return this.self._10 = f;
	}
	,get__11: function() {
		return this.self._11;
	}
	,set__11: function(f) {
		return this.self._11 = f;
	}
	,get__12: function() {
		return this.self._12;
	}
	,set__12: function(f) {
		return this.self._12 = f;
	}
	,get__20: function() {
		return this.self._20;
	}
	,set__20: function(f) {
		return this.self._20 = f;
	}
	,get__21: function() {
		return this.self._21;
	}
	,set__21: function(f) {
		return this.self._21 = f;
	}
	,get__22: function() {
		return this.self._22;
	}
	,set__22: function(f) {
		return this.self._22 = f;
	}
	,__class__: iron_math_Mat3
	,__properties__: {set__22:"set__22",get__22:"get__22",set__21:"set__21",get__21:"get__21",set__20:"set__20",get__20:"get__20",set__12:"set__12",get__12:"get__12",set__11:"set__11",get__11:"get__11",set__10:"set__10",get__10:"get__10",set__02:"set__02",get__02:"get__02",set__01:"set__01",get__01:"get__01",set__00:"set__00",get__00:"get__00"}
};
var kha_math_FastMatrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
$hxClasses["kha.math.FastMatrix4"] = kha_math_FastMatrix4;
kha_math_FastMatrix4.__name__ = "kha.math.FastMatrix4";
kha_math_FastMatrix4.fromMatrix4 = function(m) {
	return new kha_math_FastMatrix4(m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32,m._03,m._13,m._23,m._33);
};
kha_math_FastMatrix4.orthogonalProjection = function(left,right,bottom,top,zn,zf) {
	var tx = -(right + left) / (right - left);
	var ty = -(top + bottom) / (top - bottom);
	var tz = -(zf + zn) / (zf - zn);
	return new kha_math_FastMatrix4(2 / (right - left),0,0,tx,0,2.0 / (top - bottom),0,ty,0,0,-2 / (zf - zn),tz,0,0,0,1);
};
kha_math_FastMatrix4.perspectiveProjection = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	var uw = uh / aspect;
	return new kha_math_FastMatrix4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
kha_math_FastMatrix4.lookAt = function(eye,at,up) {
	var x = at.x - eye.x;
	var y = at.y - eye.y;
	var z = at.z - eye.z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var _this_x = x;
	var _this_y = y;
	var _this_z = z;
	var x1 = _this_x;
	var y1 = _this_y;
	var z1 = _this_z;
	if(z1 == null) {
		z1 = 0;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	var zaxis_x = x1;
	var zaxis_y = y1;
	var zaxis_z = z1;
	var currentLength = Math.sqrt(zaxis_x * zaxis_x + zaxis_y * zaxis_y + zaxis_z * zaxis_z);
	if(currentLength != 0) {
		var mul = 1 / currentLength;
		zaxis_x *= mul;
		zaxis_y *= mul;
		zaxis_z *= mul;
	}
	var _x = zaxis_y * up.z - zaxis_z * up.y;
	var _y = zaxis_z * up.x - zaxis_x * up.z;
	var _z = zaxis_x * up.y - zaxis_y * up.x;
	var x2 = _x;
	var y2 = _y;
	var z2 = _z;
	if(z2 == null) {
		z2 = 0;
	}
	if(y2 == null) {
		y2 = 0;
	}
	if(x2 == null) {
		x2 = 0;
	}
	var _this_x1 = x2;
	var _this_y1 = y2;
	var _this_z1 = z2;
	var x3 = _this_x1;
	var y3 = _this_y1;
	var z3 = _this_z1;
	if(z3 == null) {
		z3 = 0;
	}
	if(y3 == null) {
		y3 = 0;
	}
	if(x3 == null) {
		x3 = 0;
	}
	var xaxis_x = x3;
	var xaxis_y = y3;
	var xaxis_z = z3;
	var currentLength1 = Math.sqrt(xaxis_x * xaxis_x + xaxis_y * xaxis_y + xaxis_z * xaxis_z);
	if(currentLength1 != 0) {
		var mul1 = 1 / currentLength1;
		xaxis_x *= mul1;
		xaxis_y *= mul1;
		xaxis_z *= mul1;
	}
	var _x1 = xaxis_y * zaxis_z - xaxis_z * zaxis_y;
	var _y1 = xaxis_z * zaxis_x - xaxis_x * zaxis_z;
	var _z1 = xaxis_x * zaxis_y - xaxis_y * zaxis_x;
	var x4 = _x1;
	var y4 = _y1;
	var z4 = _z1;
	if(z4 == null) {
		z4 = 0;
	}
	if(y4 == null) {
		y4 = 0;
	}
	if(x4 == null) {
		x4 = 0;
	}
	var yaxis_x = x4;
	var yaxis_y = y4;
	var yaxis_z = z4;
	return new kha_math_FastMatrix4(xaxis_x,xaxis_y,xaxis_z,-(xaxis_x * eye.x + xaxis_y * eye.y + xaxis_z * eye.z),yaxis_x,yaxis_y,yaxis_z,-(yaxis_x * eye.x + yaxis_y * eye.y + yaxis_z * eye.z),-zaxis_x,-zaxis_y,-zaxis_z,zaxis_x * eye.x + zaxis_y * eye.y + zaxis_z * eye.z,0,0,0,1);
};
kha_math_FastMatrix4.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_30: null
	,_01: null
	,_11: null
	,_21: null
	,_31: null
	,_02: null
	,_12: null
	,_22: null
	,_32: null
	,_03: null
	,_13: null
	,_23: null
	,_33: null
	,__class__: kha_math_FastMatrix4
};
var iron_math_Mat4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this.self = new kha_math_FastMatrix4(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33);
};
$hxClasses["iron.math.Mat4"] = iron_math_Mat4;
iron_math_Mat4.__name__ = "iron.math.Mat4";
iron_math_Mat4.fromFloat32Array = function(a,offset) {
	if(offset == null) {
		offset = 0;
	}
	return new iron_math_Mat4(a[offset],a[1 + offset],a[2 + offset],a[3 + offset],a[4 + offset],a[5 + offset],a[6 + offset],a[7 + offset],a[8 + offset],a[9 + offset],a[10 + offset],a[11 + offset],a[12 + offset],a[13 + offset],a[14 + offset],a[15 + offset]);
};
iron_math_Mat4.identity = function() {
	return new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
};
iron_math_Mat4.persp = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	var uw = uh / aspect;
	return new iron_math_Mat4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
iron_math_Mat4.ortho = function(left,right,bottom,top,near,far) {
	var rl = right - left;
	var tb = top - bottom;
	var fn = far - near;
	var tx = -(right + left) / rl;
	var ty = -(top + bottom) / tb;
	var tz = -(far + near) / fn;
	return new iron_math_Mat4(2 / rl,0,0,tx,0,2 / tb,0,ty,0,0,-2 / fn,tz,0,0,0,1);
};
iron_math_Mat4.prototype = {
	self: null
	,compose: function(loc,quat,sc) {
		var x = quat.x;
		var y = quat.y;
		var z = quat.z;
		var w = quat.w;
		var x2 = x + x;
		var y2 = y + y;
		var z2 = z + z;
		var xx = x * x2;
		var xy = x * y2;
		var xz = x * z2;
		var yy = y * y2;
		var yz = y * z2;
		var zz = z * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		this.self._00 = 1.0 - (yy + zz);
		this.self._10 = xy - wz;
		this.self._20 = xz + wy;
		this.self._01 = xy + wz;
		this.self._11 = 1.0 - (xx + zz);
		this.self._21 = yz - wx;
		this.self._02 = xz - wy;
		this.self._12 = yz + wx;
		this.self._22 = 1.0 - (xx + yy);
		this.self._03 = 0.0;
		this.self._13 = 0.0;
		this.self._23 = 0.0;
		this.self._30 = 0.0;
		this.self._31 = 0.0;
		this.self._32 = 0.0;
		this.self._33 = 1.0;
		var x1 = sc.x;
		var y1 = sc.y;
		var z1 = sc.z;
		this.self._00 *= x1;
		this.self._01 *= x1;
		this.self._02 *= x1;
		this.self._03 *= x1;
		this.self._10 *= y1;
		this.self._11 *= y1;
		this.self._12 *= y1;
		this.self._13 *= y1;
		this.self._20 *= z1;
		this.self._21 *= z1;
		this.self._22 *= z1;
		this.self._23 *= z1;
		this.self._30 = loc.x;
		this.self._31 = loc.y;
		this.self._32 = loc.z;
		return this;
	}
	,decompose: function(loc,quat,scale) {
		loc.x = this.self._30;
		loc.y = this.self._31;
		loc.z = this.self._32;
		var _this = iron_math_Mat4.helpVec;
		_this.x = this.self._00;
		_this.y = this.self._01;
		_this.z = this.self._02;
		_this.w = 1.0;
		var _this1 = _this;
		scale.x = Math.sqrt(_this1.x * _this1.x + _this1.y * _this1.y + _this1.z * _this1.z);
		var _this2 = iron_math_Mat4.helpVec;
		_this2.x = this.self._10;
		_this2.y = this.self._11;
		_this2.z = this.self._12;
		_this2.w = 1.0;
		var _this3 = _this2;
		scale.y = Math.sqrt(_this3.x * _this3.x + _this3.y * _this3.y + _this3.z * _this3.z);
		var _this4 = iron_math_Mat4.helpVec;
		_this4.x = this.self._20;
		_this4.y = this.self._21;
		_this4.z = this.self._22;
		_this4.w = 1.0;
		var _this5 = _this4;
		scale.z = Math.sqrt(_this5.x * _this5.x + _this5.y * _this5.y + _this5.z * _this5.z);
		var _this6 = this.self;
		var m3 = _this6._12;
		var m4 = _this6._22;
		var m5 = _this6._32;
		var m6 = _this6._13;
		var m7 = _this6._23;
		var m8 = _this6._33;
		var c00 = _this6._11 * (m4 * m8 - m5 * m7) - _this6._21 * (m3 * m8 - m5 * m6) + _this6._31 * (m3 * m7 - m4 * m6);
		var m31 = _this6._12;
		var m41 = _this6._22;
		var m51 = _this6._32;
		var m61 = _this6._13;
		var m71 = _this6._23;
		var m81 = _this6._33;
		var c01 = _this6._10 * (m41 * m81 - m51 * m71) - _this6._20 * (m31 * m81 - m51 * m61) + _this6._30 * (m31 * m71 - m41 * m61);
		var m32 = _this6._11;
		var m42 = _this6._21;
		var m52 = _this6._31;
		var m62 = _this6._13;
		var m72 = _this6._23;
		var m82 = _this6._33;
		var c02 = _this6._10 * (m42 * m82 - m52 * m72) - _this6._20 * (m32 * m82 - m52 * m62) + _this6._30 * (m32 * m72 - m42 * m62);
		var m33 = _this6._11;
		var m43 = _this6._21;
		var m53 = _this6._31;
		var m63 = _this6._12;
		var m73 = _this6._22;
		var m83 = _this6._32;
		var c03 = _this6._10 * (m43 * m83 - m53 * m73) - _this6._20 * (m33 * m83 - m53 * m63) + _this6._30 * (m33 * m73 - m43 * m63);
		if(_this6._00 * c00 - _this6._01 * c01 + _this6._02 * c02 - _this6._03 * c03 < 0.0) {
			scale.x = -scale.x;
		}
		var invs = 1.0 / scale.x;
		iron_math_Mat4.helpMat.self._00 = this.self._00 * invs;
		iron_math_Mat4.helpMat.self._01 = this.self._01 * invs;
		iron_math_Mat4.helpMat.self._02 = this.self._02 * invs;
		invs = 1.0 / scale.y;
		iron_math_Mat4.helpMat.self._10 = this.self._10 * invs;
		iron_math_Mat4.helpMat.self._11 = this.self._11 * invs;
		iron_math_Mat4.helpMat.self._12 = this.self._12 * invs;
		invs = 1.0 / scale.z;
		iron_math_Mat4.helpMat.self._20 = this.self._20 * invs;
		iron_math_Mat4.helpMat.self._21 = this.self._21 * invs;
		iron_math_Mat4.helpMat.self._22 = this.self._22 * invs;
		var m = iron_math_Mat4.helpMat;
		var m11 = m.self._00;
		var m12 = m.self._10;
		var m13 = m.self._20;
		var m21 = m.self._01;
		var m22 = m.self._11;
		var m23 = m.self._21;
		var m311 = m.self._02;
		var m321 = m.self._12;
		var m331 = m.self._22;
		var tr = m11 + m22 + m331;
		var s = 0.0;
		if(tr > 0) {
			s = 0.5 / Math.sqrt(tr + 1.0);
			quat.w = 0.25 / s;
			quat.x = (m321 - m23) * s;
			quat.y = (m13 - m311) * s;
			quat.z = (m21 - m12) * s;
		} else if(m11 > m22 && m11 > m331) {
			s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m331);
			quat.w = (m321 - m23) / s;
			quat.x = 0.25 * s;
			quat.y = (m12 + m21) / s;
			quat.z = (m13 + m311) / s;
		} else if(m22 > m331) {
			s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m331);
			quat.w = (m13 - m311) / s;
			quat.x = (m12 + m21) / s;
			quat.y = 0.25 * s;
			quat.z = (m23 + m321) / s;
		} else {
			s = 2.0 * Math.sqrt(1.0 + m331 - m11 - m22);
			quat.w = (m21 - m12) / s;
			quat.x = (m13 + m311) / s;
			quat.y = (m23 + m321) / s;
			quat.z = 0.25 * s;
		}
		return this;
	}
	,setLoc: function(v) {
		this.self._30 = v.x;
		this.self._31 = v.y;
		this.self._32 = v.z;
		return this;
	}
	,fromQuat: function(q) {
		var x = q.x;
		var y = q.y;
		var z = q.z;
		var w = q.w;
		var x2 = x + x;
		var y2 = y + y;
		var z2 = z + z;
		var xx = x * x2;
		var xy = x * y2;
		var xz = x * z2;
		var yy = y * y2;
		var yz = y * z2;
		var zz = z * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		this.self._00 = 1.0 - (yy + zz);
		this.self._10 = xy - wz;
		this.self._20 = xz + wy;
		this.self._01 = xy + wz;
		this.self._11 = 1.0 - (xx + zz);
		this.self._21 = yz - wx;
		this.self._02 = xz - wy;
		this.self._12 = yz + wx;
		this.self._22 = 1.0 - (xx + yy);
		this.self._03 = 0.0;
		this.self._13 = 0.0;
		this.self._23 = 0.0;
		this.self._30 = 0.0;
		this.self._31 = 0.0;
		this.self._32 = 0.0;
		this.self._33 = 1.0;
		return this;
	}
	,setIdentity: function() {
		this.self._00 = 1.0;
		this.self._01 = 0.0;
		this.self._02 = 0.0;
		this.self._03 = 0.0;
		this.self._10 = 0.0;
		this.self._11 = 1.0;
		this.self._12 = 0.0;
		this.self._13 = 0.0;
		this.self._20 = 0.0;
		this.self._21 = 0.0;
		this.self._22 = 1.0;
		this.self._23 = 0.0;
		this.self._30 = 0.0;
		this.self._31 = 0.0;
		this.self._32 = 0.0;
		this.self._33 = 1.0;
		return this;
	}
	,initTranslate: function(x,y,z) {
		if(z == null) {
			z = 0.0;
		}
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		this.self._00 = 1.0;
		this.self._01 = 0.0;
		this.self._02 = 0.0;
		this.self._03 = 0.0;
		this.self._10 = 0.0;
		this.self._11 = 1.0;
		this.self._12 = 0.0;
		this.self._13 = 0.0;
		this.self._20 = 0.0;
		this.self._21 = 0.0;
		this.self._22 = 1.0;
		this.self._23 = 0.0;
		this.self._30 = x;
		this.self._31 = y;
		this.self._32 = z;
		this.self._33 = 1.0;
		return this;
	}
	,translate: function(x,y,z) {
		this.self._00 += x * this.self._03;
		this.self._01 += y * this.self._03;
		this.self._02 += z * this.self._03;
		this.self._10 += x * this.self._13;
		this.self._11 += y * this.self._13;
		this.self._12 += z * this.self._13;
		this.self._20 += x * this.self._23;
		this.self._21 += y * this.self._23;
		this.self._22 += z * this.self._23;
		this.self._30 += x * this.self._33;
		this.self._31 += y * this.self._33;
		this.self._32 += z * this.self._33;
		return this;
	}
	,scale: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		this.self._00 *= x;
		this.self._01 *= x;
		this.self._02 *= x;
		this.self._03 *= x;
		this.self._10 *= y;
		this.self._11 *= y;
		this.self._12 *= y;
		this.self._13 *= y;
		this.self._20 *= z;
		this.self._21 *= z;
		this.self._22 *= z;
		this.self._23 *= z;
		return this;
	}
	,multmats3x4: function(a,b) {
		var a00 = a.self._00;
		var a01 = a.self._01;
		var a02 = a.self._02;
		var a03 = a.self._03;
		var a10 = a.self._10;
		var a11 = a.self._11;
		var a12 = a.self._12;
		var a13 = a.self._13;
		var a20 = a.self._20;
		var a21 = a.self._21;
		var a22 = a.self._22;
		var a23 = a.self._23;
		var a30 = a.self._30;
		var a31 = a.self._31;
		var a32 = a.self._32;
		var a33 = a.self._33;
		var b0 = b.self._00;
		var b1 = b.self._10;
		var b2 = b.self._20;
		var b3 = b.self._30;
		this.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		this.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		this.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		this.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = b.self._01;
		b1 = b.self._11;
		b2 = b.self._21;
		b3 = b.self._31;
		this.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		this.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		this.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		this.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = b.self._02;
		b1 = b.self._12;
		b2 = b.self._22;
		b3 = b.self._32;
		this.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		this.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		this.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		this.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		this.self._03 = 0;
		this.self._13 = 0;
		this.self._23 = 0;
		this.self._33 = 1;
		return this;
	}
	,multmats: function(b,a) {
		var a00 = a.self._00;
		var a01 = a.self._01;
		var a02 = a.self._02;
		var a03 = a.self._03;
		var a10 = a.self._10;
		var a11 = a.self._11;
		var a12 = a.self._12;
		var a13 = a.self._13;
		var a20 = a.self._20;
		var a21 = a.self._21;
		var a22 = a.self._22;
		var a23 = a.self._23;
		var a30 = a.self._30;
		var a31 = a.self._31;
		var a32 = a.self._32;
		var a33 = a.self._33;
		var b0 = b.self._00;
		var b1 = b.self._10;
		var b2 = b.self._20;
		var b3 = b.self._30;
		this.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		this.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		this.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		this.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = b.self._01;
		b1 = b.self._11;
		b2 = b.self._21;
		b3 = b.self._31;
		this.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		this.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		this.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		this.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = b.self._02;
		b1 = b.self._12;
		b2 = b.self._22;
		b3 = b.self._32;
		this.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		this.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		this.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		this.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = b.self._03;
		b1 = b.self._13;
		b2 = b.self._23;
		b3 = b.self._33;
		this.self._03 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		this.self._13 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		this.self._23 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		this.self._33 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		return this;
	}
	,multmat: function(m) {
		var a00 = this.self._00;
		var a01 = this.self._01;
		var a02 = this.self._02;
		var a03 = this.self._03;
		var a10 = this.self._10;
		var a11 = this.self._11;
		var a12 = this.self._12;
		var a13 = this.self._13;
		var a20 = this.self._20;
		var a21 = this.self._21;
		var a22 = this.self._22;
		var a23 = this.self._23;
		var a30 = this.self._30;
		var a31 = this.self._31;
		var a32 = this.self._32;
		var a33 = this.self._33;
		var b0 = m.self._00;
		var b1 = m.self._10;
		var b2 = m.self._20;
		var b3 = m.self._30;
		this.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		this.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		this.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		this.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = m.self._01;
		b1 = m.self._11;
		b2 = m.self._21;
		b3 = m.self._31;
		this.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		this.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		this.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		this.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = m.self._02;
		b1 = m.self._12;
		b2 = m.self._22;
		b3 = m.self._32;
		this.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		this.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		this.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		this.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = m.self._03;
		b1 = m.self._13;
		b2 = m.self._23;
		b3 = m.self._33;
		this.self._03 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		this.self._13 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		this.self._23 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		this.self._33 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		return this;
	}
	,getInverse: function(m) {
		var a00 = m.self._00;
		var a01 = m.self._01;
		var a02 = m.self._02;
		var a03 = m.self._03;
		var a10 = m.self._10;
		var a11 = m.self._11;
		var a12 = m.self._12;
		var a13 = m.self._13;
		var a20 = m.self._20;
		var a21 = m.self._21;
		var a22 = m.self._22;
		var a23 = m.self._23;
		var a30 = m.self._30;
		var a31 = m.self._31;
		var a32 = m.self._32;
		var a33 = m.self._33;
		var b00 = a00 * a11 - a01 * a10;
		var b01 = a00 * a12 - a02 * a10;
		var b02 = a00 * a13 - a03 * a10;
		var b03 = a01 * a12 - a02 * a11;
		var b04 = a01 * a13 - a03 * a11;
		var b05 = a02 * a13 - a03 * a12;
		var b06 = a20 * a31 - a21 * a30;
		var b07 = a20 * a32 - a22 * a30;
		var b08 = a20 * a33 - a23 * a30;
		var b09 = a21 * a32 - a22 * a31;
		var b10 = a21 * a33 - a23 * a31;
		var b11 = a22 * a33 - a23 * a32;
		var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
		if(det == 0.0) {
			this.self._00 = 1.0;
			this.self._01 = 0.0;
			this.self._02 = 0.0;
			this.self._03 = 0.0;
			this.self._10 = 0.0;
			this.self._11 = 1.0;
			this.self._12 = 0.0;
			this.self._13 = 0.0;
			this.self._20 = 0.0;
			this.self._21 = 0.0;
			this.self._22 = 1.0;
			this.self._23 = 0.0;
			this.self._30 = 0.0;
			this.self._31 = 0.0;
			this.self._32 = 0.0;
			this.self._33 = 1.0;
			return this;
		}
		det = 1.0 / det;
		this.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
		this.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
		this.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
		this.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
		this.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
		this.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
		this.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
		this.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
		this.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
		this.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
		this.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
		this.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
		this.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
		this.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
		this.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
		this.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
		return this;
	}
	,transpose: function() {
		var f = this.self._01;
		this.self._01 = this.self._10;
		this.self._10 = f;
		f = this.self._02;
		this.self._02 = this.self._20;
		this.self._20 = f;
		f = this.self._03;
		this.self._03 = this.self._30;
		this.self._30 = f;
		f = this.self._12;
		this.self._12 = this.self._21;
		this.self._21 = f;
		f = this.self._13;
		this.self._13 = this.self._31;
		this.self._31 = f;
		f = this.self._23;
		this.self._23 = this.self._32;
		this.self._32 = f;
		return this;
	}
	,transpose3x3: function() {
		var f = this.self._01;
		this.self._01 = this.self._10;
		this.self._10 = f;
		f = this.self._02;
		this.self._02 = this.self._20;
		this.self._20 = f;
		f = this.self._12;
		this.self._12 = this.self._21;
		this.self._21 = f;
		return this;
	}
	,clone: function() {
		return new iron_math_Mat4(this.self._00,this.self._10,this.self._20,this.self._30,this.self._01,this.self._11,this.self._21,this.self._31,this.self._02,this.self._12,this.self._22,this.self._32,this.self._03,this.self._13,this.self._23,this.self._33);
	}
	,setF32: function(a,offset) {
		if(offset == null) {
			offset = 0;
		}
		this.self._00 = a[offset];
		this.self._10 = a[1 + offset];
		this.self._20 = a[2 + offset];
		this.self._30 = a[3 + offset];
		this.self._01 = a[4 + offset];
		this.self._11 = a[5 + offset];
		this.self._21 = a[6 + offset];
		this.self._31 = a[7 + offset];
		this.self._02 = a[8 + offset];
		this.self._12 = a[9 + offset];
		this.self._22 = a[10 + offset];
		this.self._32 = a[11 + offset];
		this.self._03 = a[12 + offset];
		this.self._13 = a[13 + offset];
		this.self._23 = a[14 + offset];
		this.self._33 = a[15 + offset];
		return this;
	}
	,setFrom: function(m) {
		this.self._00 = m.self._00;
		this.self._01 = m.self._01;
		this.self._02 = m.self._02;
		this.self._03 = m.self._03;
		this.self._10 = m.self._10;
		this.self._11 = m.self._11;
		this.self._12 = m.self._12;
		this.self._13 = m.self._13;
		this.self._20 = m.self._20;
		this.self._21 = m.self._21;
		this.self._22 = m.self._22;
		this.self._23 = m.self._23;
		this.self._30 = m.self._30;
		this.self._31 = m.self._31;
		this.self._32 = m.self._32;
		this.self._33 = m.self._33;
		return this;
	}
	,getLoc: function() {
		return new iron_math_Vec4(this.self._30,this.self._31,this.self._32,this.self._33);
	}
	,getScale: function() {
		return new iron_math_Vec4(Math.sqrt(this.self._00 * this.self._00 + this.self._10 * this.self._10 + this.self._20 * this.self._20),Math.sqrt(this.self._01 * this.self._01 + this.self._11 * this.self._11 + this.self._21 * this.self._21),Math.sqrt(this.self._02 * this.self._02 + this.self._12 * this.self._12 + this.self._22 * this.self._22));
	}
	,mult: function(s) {
		this.self._00 *= s;
		this.self._10 *= s;
		this.self._20 *= s;
		this.self._30 *= s;
		this.self._01 *= s;
		this.self._11 *= s;
		this.self._21 *= s;
		this.self._31 *= s;
		this.self._02 *= s;
		this.self._12 *= s;
		this.self._22 *= s;
		this.self._32 *= s;
		this.self._03 *= s;
		this.self._13 *= s;
		this.self._23 *= s;
		this.self._33 *= s;
		return this;
	}
	,toRotation: function() {
		var _this = iron_math_Mat4.helpVec;
		_this.x = this.self._00;
		_this.y = this.self._01;
		_this.z = this.self._02;
		_this.w = 1.0;
		var _this1 = _this;
		var scale = 1.0 / Math.sqrt(_this1.x * _this1.x + _this1.y * _this1.y + _this1.z * _this1.z);
		this.self._00 *= scale;
		this.self._01 *= scale;
		this.self._02 *= scale;
		var _this2 = iron_math_Mat4.helpVec;
		_this2.x = this.self._10;
		_this2.y = this.self._11;
		_this2.z = this.self._12;
		_this2.w = 1.0;
		var _this3 = _this2;
		scale = 1.0 / Math.sqrt(_this3.x * _this3.x + _this3.y * _this3.y + _this3.z * _this3.z);
		this.self._10 *= scale;
		this.self._11 *= scale;
		this.self._12 *= scale;
		var _this4 = iron_math_Mat4.helpVec;
		_this4.x = this.self._20;
		_this4.y = this.self._21;
		_this4.z = this.self._22;
		_this4.w = 1.0;
		var _this5 = _this4;
		scale = 1.0 / Math.sqrt(_this5.x * _this5.x + _this5.y * _this5.y + _this5.z * _this5.z);
		this.self._20 *= scale;
		this.self._21 *= scale;
		this.self._22 *= scale;
		this.self._03 = 0.0;
		this.self._13 = 0.0;
		this.self._23 = 0.0;
		this.self._30 = 0.0;
		this.self._31 = 0.0;
		this.self._32 = 0.0;
		this.self._33 = 1.0;
		return this;
	}
	,setLookAt: function(eye,center,up) {
		var f0 = center.x - eye.x;
		var f1 = center.y - eye.y;
		var f2 = center.z - eye.z;
		var n = 1.0 / Math.sqrt(f0 * f0 + f1 * f1 + f2 * f2);
		f0 *= n;
		f1 *= n;
		f2 *= n;
		var s0 = f1 * up.z - f2 * up.y;
		var s1 = f2 * up.x - f0 * up.z;
		var s2 = f0 * up.y - f1 * up.x;
		n = 1.0 / Math.sqrt(s0 * s0 + s1 * s1 + s2 * s2);
		s0 *= n;
		s1 *= n;
		s2 *= n;
		var u0 = s1 * f2 - s2 * f1;
		var u1 = s2 * f0 - s0 * f2;
		var u2 = s0 * f1 - s1 * f0;
		var d0 = -eye.x * s0 - eye.y * s1 - eye.z * s2;
		var d1 = -eye.x * u0 - eye.y * u1 - eye.z * u2;
		var d2 = eye.x * f0 + eye.y * f1 + eye.z * f2;
		this.self._00 = s0;
		this.self._10 = s1;
		this.self._20 = s2;
		this.self._30 = d0;
		this.self._01 = u0;
		this.self._11 = u1;
		this.self._21 = u2;
		this.self._31 = d1;
		this.self._02 = -f0;
		this.self._12 = -f1;
		this.self._22 = -f2;
		this.self._32 = d2;
		this.self._03 = 0.0;
		this.self._13 = 0.0;
		this.self._23 = 0.0;
		this.self._33 = 1.0;
		return this;
	}
	,applyQuat: function(q) {
		var _this = iron_math_Mat4.helpMat;
		var x = q.x;
		var y = q.y;
		var z = q.z;
		var w = q.w;
		var x2 = x + x;
		var y2 = y + y;
		var z2 = z + z;
		var xx = x * x2;
		var xy = x * y2;
		var xz = x * z2;
		var yy = y * y2;
		var yz = y * z2;
		var zz = z * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		_this.self._00 = 1.0 - (yy + zz);
		_this.self._10 = xy - wz;
		_this.self._20 = xz + wy;
		_this.self._01 = xy + wz;
		_this.self._11 = 1.0 - (xx + zz);
		_this.self._21 = yz - wx;
		_this.self._02 = xz - wy;
		_this.self._12 = yz + wx;
		_this.self._22 = 1.0 - (xx + yy);
		_this.self._03 = 0.0;
		_this.self._13 = 0.0;
		_this.self._23 = 0.0;
		_this.self._30 = 0.0;
		_this.self._31 = 0.0;
		_this.self._32 = 0.0;
		_this.self._33 = 1.0;
		var m = iron_math_Mat4.helpMat;
		var a00 = this.self._00;
		var a01 = this.self._01;
		var a02 = this.self._02;
		var a03 = this.self._03;
		var a10 = this.self._10;
		var a11 = this.self._11;
		var a12 = this.self._12;
		var a13 = this.self._13;
		var a20 = this.self._20;
		var a21 = this.self._21;
		var a22 = this.self._22;
		var a23 = this.self._23;
		var a30 = this.self._30;
		var a31 = this.self._31;
		var a32 = this.self._32;
		var a33 = this.self._33;
		var b0 = m.self._00;
		var b1 = m.self._10;
		var b2 = m.self._20;
		var b3 = m.self._30;
		this.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		this.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		this.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		this.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = m.self._01;
		b1 = m.self._11;
		b2 = m.self._21;
		b3 = m.self._31;
		this.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		this.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		this.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		this.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = m.self._02;
		b1 = m.self._12;
		b2 = m.self._22;
		b3 = m.self._32;
		this.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		this.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		this.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		this.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = m.self._03;
		b1 = m.self._13;
		b2 = m.self._23;
		b3 = m.self._33;
		this.self._03 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		this.self._13 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		this.self._23 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		this.self._33 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
	}
	,right: function() {
		return new iron_math_Vec4(this.self._00,this.self._01,this.self._02);
	}
	,look: function() {
		return new iron_math_Vec4(this.self._10,this.self._11,this.self._12);
	}
	,up: function() {
		return new iron_math_Vec4(this.self._20,this.self._21,this.self._22);
	}
	,get__00: function() {
		return this.self._00;
	}
	,set__00: function(f) {
		return this.self._00 = f;
	}
	,get__01: function() {
		return this.self._01;
	}
	,set__01: function(f) {
		return this.self._01 = f;
	}
	,get__02: function() {
		return this.self._02;
	}
	,set__02: function(f) {
		return this.self._02 = f;
	}
	,get__03: function() {
		return this.self._03;
	}
	,set__03: function(f) {
		return this.self._03 = f;
	}
	,get__10: function() {
		return this.self._10;
	}
	,set__10: function(f) {
		return this.self._10 = f;
	}
	,get__11: function() {
		return this.self._11;
	}
	,set__11: function(f) {
		return this.self._11 = f;
	}
	,get__12: function() {
		return this.self._12;
	}
	,set__12: function(f) {
		return this.self._12 = f;
	}
	,get__13: function() {
		return this.self._13;
	}
	,set__13: function(f) {
		return this.self._13 = f;
	}
	,get__20: function() {
		return this.self._20;
	}
	,set__20: function(f) {
		return this.self._20 = f;
	}
	,get__21: function() {
		return this.self._21;
	}
	,set__21: function(f) {
		return this.self._21 = f;
	}
	,get__22: function() {
		return this.self._22;
	}
	,set__22: function(f) {
		return this.self._22 = f;
	}
	,get__23: function() {
		return this.self._23;
	}
	,set__23: function(f) {
		return this.self._23 = f;
	}
	,get__30: function() {
		return this.self._30;
	}
	,set__30: function(f) {
		return this.self._30 = f;
	}
	,get__31: function() {
		return this.self._31;
	}
	,set__31: function(f) {
		return this.self._31 = f;
	}
	,get__32: function() {
		return this.self._32;
	}
	,set__32: function(f) {
		return this.self._32 = f;
	}
	,get__33: function() {
		return this.self._33;
	}
	,set__33: function(f) {
		return this.self._33 = f;
	}
	,toString: function() {
		return "[[" + this.self._00 + ", " + this.self._10 + ", " + this.self._20 + ", " + this.self._30 + "], [" + this.self._01 + ", " + this.self._11 + ", " + this.self._21 + ", " + this.self._31 + "], [" + this.self._02 + ", " + this.self._12 + ", " + this.self._22 + ", " + this.self._32 + "], [" + this.self._03 + ", " + this.self._13 + ", " + this.self._23 + ", " + this.self._33 + "]]";
	}
	,__class__: iron_math_Mat4
	,__properties__: {set__33:"set__33",get__33:"get__33",set__32:"set__32",get__32:"get__32",set__31:"set__31",get__31:"get__31",set__30:"set__30",get__30:"get__30",set__23:"set__23",get__23:"get__23",set__22:"set__22",get__22:"get__22",set__21:"set__21",get__21:"get__21",set__20:"set__20",get__20:"get__20",set__13:"set__13",get__13:"get__13",set__12:"set__12",get__12:"get__12",set__11:"set__11",get__11:"get__11",set__10:"set__10",get__10:"get__10",set__03:"set__03",get__03:"get__03",set__02:"set__02",get__02:"get__02",set__01:"set__01",get__01:"get__01",set__00:"set__00",get__00:"get__00"}
};
var iron_math_Quat = function(x,y,z,w) {
	if(w == null) {
		w = 1.0;
	}
	if(z == null) {
		z = 0.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["iron.math.Quat"] = iron_math_Quat;
iron_math_Quat.__name__ = "iron.math.Quat";
iron_math_Quat.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,set: function(x,y,z,w) {
		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;
		return this;
	}
	,fromAxisAngle: function(axis,angle) {
		var s = Math.sin(angle * 0.5);
		this.x = axis.x * s;
		this.y = axis.y * s;
		this.z = axis.z * s;
		this.w = Math.cos(angle * 0.5);
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(l == 0.0) {
			this.x = 0;
			this.y = 0;
			this.z = 0;
			this.w = 0;
		} else {
			l = 1.0 / l;
			this.x *= l;
			this.y *= l;
			this.z *= l;
			this.w *= l;
		}
		return this;
	}
	,toAxisAngle: function(axis) {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(l == 0.0) {
			this.x = 0;
			this.y = 0;
			this.z = 0;
			this.w = 0;
		} else {
			l = 1.0 / l;
			this.x *= l;
			this.y *= l;
			this.z *= l;
			this.w *= l;
		}
		var angle = 2 * Math.acos(this.w);
		var s = Math.sqrt(1 - this.w * this.w);
		if(s < 0.001) {
			axis.x = this.x;
			axis.y = this.y;
			axis.z = this.z;
		} else {
			axis.x = this.x / s;
			axis.y = this.y / s;
			axis.z = this.z / s;
		}
		return angle;
	}
	,fromMat: function(m) {
		var _this = iron_math_Quat.helpMat;
		_this.self._00 = m.self._00;
		_this.self._01 = m.self._01;
		_this.self._02 = m.self._02;
		_this.self._03 = m.self._03;
		_this.self._10 = m.self._10;
		_this.self._11 = m.self._11;
		_this.self._12 = m.self._12;
		_this.self._13 = m.self._13;
		_this.self._20 = m.self._20;
		_this.self._21 = m.self._21;
		_this.self._22 = m.self._22;
		_this.self._23 = m.self._23;
		_this.self._30 = m.self._30;
		_this.self._31 = m.self._31;
		_this.self._32 = m.self._32;
		_this.self._33 = m.self._33;
		var _this1 = iron_math_Quat.helpMat;
		var _this2 = iron_math_Mat4.helpVec;
		_this2.x = _this1.self._00;
		_this2.y = _this1.self._01;
		_this2.z = _this1.self._02;
		_this2.w = 1.0;
		var _this3 = _this2;
		var scale = 1.0 / Math.sqrt(_this3.x * _this3.x + _this3.y * _this3.y + _this3.z * _this3.z);
		_this1.self._00 *= scale;
		_this1.self._01 *= scale;
		_this1.self._02 *= scale;
		var _this4 = iron_math_Mat4.helpVec;
		_this4.x = _this1.self._10;
		_this4.y = _this1.self._11;
		_this4.z = _this1.self._12;
		_this4.w = 1.0;
		var _this5 = _this4;
		scale = 1.0 / Math.sqrt(_this5.x * _this5.x + _this5.y * _this5.y + _this5.z * _this5.z);
		_this1.self._10 *= scale;
		_this1.self._11 *= scale;
		_this1.self._12 *= scale;
		var _this6 = iron_math_Mat4.helpVec;
		_this6.x = _this1.self._20;
		_this6.y = _this1.self._21;
		_this6.z = _this1.self._22;
		_this6.w = 1.0;
		var _this7 = _this6;
		scale = 1.0 / Math.sqrt(_this7.x * _this7.x + _this7.y * _this7.y + _this7.z * _this7.z);
		_this1.self._20 *= scale;
		_this1.self._21 *= scale;
		_this1.self._22 *= scale;
		_this1.self._03 = 0.0;
		_this1.self._13 = 0.0;
		_this1.self._23 = 0.0;
		_this1.self._30 = 0.0;
		_this1.self._31 = 0.0;
		_this1.self._32 = 0.0;
		_this1.self._33 = 1.0;
		var m1 = iron_math_Quat.helpMat;
		var m11 = m1.self._00;
		var m12 = m1.self._10;
		var m13 = m1.self._20;
		var m21 = m1.self._01;
		var m22 = m1.self._11;
		var m23 = m1.self._21;
		var m31 = m1.self._02;
		var m32 = m1.self._12;
		var m33 = m1.self._22;
		var tr = m11 + m22 + m33;
		var s = 0.0;
		if(tr > 0) {
			s = 0.5 / Math.sqrt(tr + 1.0);
			this.w = 0.25 / s;
			this.x = (m32 - m23) * s;
			this.y = (m13 - m31) * s;
			this.z = (m21 - m12) * s;
		} else if(m11 > m22 && m11 > m33) {
			s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
			this.w = (m32 - m23) / s;
			this.x = 0.25 * s;
			this.y = (m12 + m21) / s;
			this.z = (m13 + m31) / s;
		} else if(m22 > m33) {
			s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
			this.w = (m13 - m31) / s;
			this.x = (m12 + m21) / s;
			this.y = 0.25 * s;
			this.z = (m23 + m32) / s;
		} else {
			s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
			this.w = (m21 - m12) / s;
			this.x = (m13 + m31) / s;
			this.y = (m23 + m32) / s;
			this.z = 0.25 * s;
		}
		return this;
	}
	,fromRotationMat: function(m) {
		var m11 = m.self._00;
		var m12 = m.self._10;
		var m13 = m.self._20;
		var m21 = m.self._01;
		var m22 = m.self._11;
		var m23 = m.self._21;
		var m31 = m.self._02;
		var m32 = m.self._12;
		var m33 = m.self._22;
		var tr = m11 + m22 + m33;
		var s = 0.0;
		if(tr > 0) {
			s = 0.5 / Math.sqrt(tr + 1.0);
			this.w = 0.25 / s;
			this.x = (m32 - m23) * s;
			this.y = (m13 - m31) * s;
			this.z = (m21 - m12) * s;
		} else if(m11 > m22 && m11 > m33) {
			s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);
			this.w = (m32 - m23) / s;
			this.x = 0.25 * s;
			this.y = (m12 + m21) / s;
			this.z = (m13 + m31) / s;
		} else if(m22 > m33) {
			s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);
			this.w = (m13 - m31) / s;
			this.x = (m12 + m21) / s;
			this.y = 0.25 * s;
			this.z = (m23 + m32) / s;
		} else {
			s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);
			this.w = (m21 - m12) / s;
			this.x = (m13 + m31) / s;
			this.y = (m23 + m32) / s;
			this.z = 0.25 * s;
		}
		return this;
	}
	,mult: function(q) {
		var q1x = this.x;
		var q1y = this.y;
		var q1z = this.z;
		var q1w = this.w;
		var q2x = q.x;
		var q2y = q.y;
		var q2z = q.z;
		var q2w = q.w;
		this.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;
		this.y = q1w * q2y - q1x * q2z + q1y * q2w + q1z * q2x;
		this.z = q1w * q2z + q1x * q2y - q1y * q2x + q1z * q2w;
		this.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;
		return this;
	}
	,multquats: function(q1,q2) {
		var q1x = q1.x;
		var q1y = q1.y;
		var q1z = q1.z;
		var q1w = q1.w;
		var q2x = q2.x;
		var q2y = q2.y;
		var q2z = q2.z;
		var q2w = q2.w;
		this.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;
		this.y = q1w * q2y - q1x * q2z + q1y * q2w + q1z * q2x;
		this.z = q1w * q2z + q1x * q2y - q1y * q2x + q1z * q2w;
		this.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;
		return this;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(l == 0.0) {
			this.x = 0;
			this.y = 0;
			this.z = 0;
			this.w = 0;
		} else {
			l = 1.0 / l;
			this.x *= l;
			this.y *= l;
			this.z *= l;
			this.w *= l;
		}
		return this;
	}
	,setFrom: function(q) {
		this.x = q.x;
		this.y = q.y;
		this.z = q.z;
		this.w = q.w;
		return this;
	}
	,getEuler: function() {
		var a = -2 * (this.x * this.z - this.w * this.y);
		var b = this.w * this.w + this.x * this.x - this.y * this.y - this.z * this.z;
		var c = 2 * (this.x * this.y + this.w * this.z);
		var d = -2 * (this.y * this.z - this.w * this.x);
		var e = this.w * this.w - this.x * this.x + this.y * this.y - this.z * this.z;
		return new iron_math_Vec4(Math.atan2(d,e),Math.atan2(a,b),Math.asin(c));
	}
	,fromEuler: function(x,y,z) {
		var f = x / 2;
		var c1 = Math.cos(f);
		var s1 = Math.sin(f);
		f = y / 2;
		var c2 = Math.cos(f);
		var s2 = Math.sin(f);
		f = z / 2;
		var c3 = Math.cos(f);
		var s3 = Math.sin(f);
		this.x = s1 * c2 * c3 + c1 * s2 * s3;
		this.y = c1 * s2 * c3 + s1 * c2 * s3;
		this.z = c1 * c2 * s3 - s1 * s2 * c3;
		this.w = c1 * c2 * c3 - s1 * s2 * s3;
		return this;
	}
	,lerp: function(from,to,s) {
		var fromx = from.x;
		var fromy = from.y;
		var fromz = from.z;
		var fromw = from.w;
		var dot = from.x * to.x + from.y * to.y + from.z * to.z + from.w * to.w;
		if(dot < 0.0) {
			fromx = -fromx;
			fromy = -fromy;
			fromz = -fromz;
			fromw = -fromw;
		}
		this.x = fromx + (to.x - fromx) * s;
		this.y = fromy + (to.y - fromy) * s;
		this.z = fromz + (to.z - fromz) * s;
		this.w = fromw + (to.w - fromw) * s;
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(l == 0.0) {
			this.x = 0;
			this.y = 0;
			this.z = 0;
			this.w = 0;
		} else {
			l = 1.0 / l;
			this.x *= l;
			this.y *= l;
			this.z *= l;
			this.w *= l;
		}
		return this;
	}
	,dot: function(q) {
		return this.x * q.x + this.y * q.y + this.z * q.z + this.w * q.w;
	}
	,fromTo: function(v1,v2) {
		var a = iron_math_Quat.helpVec0;
		var dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
		if(dot < -0.999999) {
			var a1 = iron_math_Quat.xAxis;
			var ax = a1.x;
			var ay = a1.y;
			var az = a1.z;
			var bx = v1.x;
			var by = v1.y;
			var bz = v1.z;
			a.x = ay * bz - az * by;
			a.y = az * bx - ax * bz;
			a.z = ax * by - ay * bx;
			if(Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z) < 0.000001) {
				var a2 = iron_math_Quat.yAxis;
				var ax1 = a2.x;
				var ay1 = a2.y;
				var az1 = a2.z;
				var bx1 = v1.x;
				var by1 = v1.y;
				var bz1 = v1.z;
				a.x = ay1 * bz1 - az1 * by1;
				a.y = az1 * bx1 - ax1 * bz1;
				a.z = ax1 * by1 - ay1 * bx1;
			}
			var n = Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z);
			if(n > 0.0) {
				var invN = 1.0 / n;
				a.x *= invN;
				a.y *= invN;
				a.z *= invN;
			}
			var angle = Math.PI;
			var s = Math.sin(angle * 0.5);
			this.x = a.x * s;
			this.y = a.y * s;
			this.z = a.z * s;
			this.w = Math.cos(angle * 0.5);
			var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
			if(l == 0.0) {
				this.x = 0;
				this.y = 0;
				this.z = 0;
				this.w = 0;
			} else {
				l = 1.0 / l;
				this.x *= l;
				this.y *= l;
				this.z *= l;
				this.w *= l;
			}
		} else if(dot > 0.999999) {
			this.x = 0;
			this.y = 0;
			this.z = 0;
			this.w = 1;
		} else {
			var ax2 = v1.x;
			var ay2 = v1.y;
			var az2 = v1.z;
			var bx2 = v2.x;
			var by2 = v2.y;
			var bz2 = v2.z;
			a.x = ay2 * bz2 - az2 * by2;
			a.y = az2 * bx2 - ax2 * bz2;
			a.z = ax2 * by2 - ay2 * bx2;
			this.x = a.x;
			this.y = a.y;
			this.z = a.z;
			this.w = 1 + dot;
			var l1 = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
			if(l1 == 0.0) {
				this.x = 0;
				this.y = 0;
				this.z = 0;
				this.w = 0;
			} else {
				l1 = 1.0 / l1;
				this.x *= l1;
				this.y *= l1;
				this.z *= l1;
				this.w *= l1;
			}
		}
		return this;
	}
	,toString: function() {
		return this.x + ", " + this.y + ", " + this.z + ", " + this.w;
	}
	,__class__: iron_math_Quat
};
var iron_math_Vec2 = function(x,y) {
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["iron.math.Vec2"] = iron_math_Vec2;
iron_math_Vec2.__name__ = "iron.math.Vec2";
iron_math_Vec2.distance = function(v1,v2) {
	var vx = v1.x - v2.x;
	var vy = v1.y - v2.y;
	return Math.sqrt(vx * vx + vy * vy);
};
iron_math_Vec2.distancef = function(v1x,v1y,v2x,v2y) {
	var vx = v1x - v2x;
	var vy = v1y - v2y;
	return Math.sqrt(vx * vx + vy * vy);
};
iron_math_Vec2.xAxis = function() {
	return new iron_math_Vec2(1.0,0.0);
};
iron_math_Vec2.yAxis = function() {
	return new iron_math_Vec2(0.0,1.0);
};
iron_math_Vec2.prototype = {
	x: null
	,y: null
	,cross: function(v) {
		return this.x * v.y - this.y * v.x;
	}
	,set: function(x,y) {
		this.x = x;
		this.y = y;
		return this;
	}
	,add: function(v) {
		this.x += v.x;
		this.y += v.y;
		return this;
	}
	,addf: function(x,y) {
		this.x += x;
		this.y += y;
		return this;
	}
	,addvecs: function(a,b) {
		this.x = a.x + b.x;
		this.y = a.y + b.y;
		return this;
	}
	,subvecs: function(a,b) {
		this.x = a.x - b.x;
		this.y = a.y - b.y;
		return this;
	}
	,normalize: function() {
		var a = this.x;
		var b = this.y;
		var l = a * a + b * b;
		if(l > 0.0) {
			l = 1.0 / Math.sqrt(l);
			this.x = a * l;
			this.y = b * l;
		}
		return this;
	}
	,mult: function(f) {
		this.x *= f;
		this.y *= f;
		return this;
	}
	,dot: function(v) {
		return this.x * v.x + this.y * v.y;
	}
	,setFrom: function(v) {
		this.x = v.x;
		this.y = v.y;
		return this;
	}
	,clone: function() {
		return new iron_math_Vec2(this.x,this.y);
	}
	,lerp: function(from,to,s) {
		this.x = from.x + (to.x - from.x) * s;
		this.y = from.y + (to.y - from.y) * s;
		return this;
	}
	,equals: function(v) {
		if(this.x == v.x) {
			return this.y == v.y;
		} else {
			return false;
		}
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,sub: function(v) {
		this.x -= v.x;
		this.y -= v.y;
		return this;
	}
	,distanceTo: function(p) {
		return Math.sqrt((p.x - this.x) * (p.x - this.x) + (p.y - this.y) * (p.y - this.y));
	}
	,clamp: function(min,max) {
		var l = Math.sqrt(this.x * this.x + this.y * this.y);
		if(l < min) {
			var a = this.x;
			var b = this.y;
			var l1 = a * a + b * b;
			if(l1 > 0.0) {
				l1 = 1.0 / Math.sqrt(l1);
				this.x = a * l1;
				this.y = b * l1;
			}
			var _this = this;
			_this.x *= min;
			_this.y *= min;
		} else if(l > max) {
			var a1 = this.x;
			var b1 = this.y;
			var l2 = a1 * a1 + b1 * b1;
			if(l2 > 0.0) {
				l2 = 1.0 / Math.sqrt(l2);
				this.x = a1 * l2;
				this.y = b1 * l2;
			}
			var _this1 = this;
			_this1.x *= max;
			_this1.y *= max;
		}
		return this;
	}
	,toString: function() {
		return "(" + this.x + ", " + this.y + ")";
	}
	,__class__: iron_math_Vec2
};
var iron_math_Vec3 = function(x,y,z) {
	if(z == null) {
		z = 0.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["iron.math.Vec3"] = iron_math_Vec3;
iron_math_Vec3.__name__ = "iron.math.Vec3";
iron_math_Vec3.distance = function(v1,v2) {
	var vx = v1.x - v2.x;
	var vy = v1.y - v2.y;
	var vz = v1.z - v2.z;
	return Math.sqrt(vx * vx + vy * vy + vz * vz);
};
iron_math_Vec3.distancef = function(v1x,v1y,v1z,v2x,v2y,v2z) {
	var vx = v1x - v2x;
	var vy = v1y - v2y;
	var vz = v1z - v2z;
	return Math.sqrt(vx * vx + vy * vy + vz * vz);
};
iron_math_Vec3.xAxis = function() {
	return new iron_math_Vec3(1.0,0.0,0.0);
};
iron_math_Vec3.yAxis = function() {
	return new iron_math_Vec3(0.0,1.0,0.0);
};
iron_math_Vec3.zAxis = function() {
	return new iron_math_Vec3(0.0,0.0,1.0);
};
iron_math_Vec3.prototype = {
	x: null
	,y: null
	,z: null
	,cross: function(v) {
		var ax = this.x;
		var ay = this.y;
		var az = this.z;
		var vx = v.x;
		var vy = v.y;
		var vz = v.z;
		this.x = ay * vz - az * vy;
		this.y = az * vx - ax * vz;
		this.z = ax * vy - ay * vx;
		return this;
	}
	,crossvecs: function(a,b) {
		var ax = a.x;
		var ay = a.y;
		var az = a.z;
		var bx = b.x;
		var by = b.y;
		var bz = b.z;
		this.x = ay * bz - az * by;
		this.y = az * bx - ax * bz;
		this.z = ax * by - ay * bx;
		return this;
	}
	,set: function(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
		return this;
	}
	,add: function(v) {
		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
		return this;
	}
	,addf: function(x,y,z) {
		this.x += x;
		this.y += y;
		this.z += z;
		return this;
	}
	,addvecs: function(a,b) {
		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;
		return this;
	}
	,subvecs: function(a,b) {
		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;
		return this;
	}
	,normalize: function() {
		var n = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(n > 0.0) {
			var invN = 1.0 / n;
			this.x *= invN;
			this.y *= invN;
			this.z *= invN;
		}
		return this;
	}
	,mult: function(f) {
		this.x *= f;
		this.y *= f;
		this.z *= f;
		return this;
	}
	,dot: function(v) {
		return this.x * v.x + this.y * v.y + this.z * v.z;
	}
	,setFrom: function(v) {
		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		return this;
	}
	,clone: function() {
		return new iron_math_Vec3(this.x,this.y,this.z);
	}
	,lerp: function(from,to,s) {
		this.x = from.x + (to.x - from.x) * s;
		this.y = from.y + (to.y - from.y) * s;
		this.z = from.z + (to.z - from.z) * s;
		return this;
	}
	,applyproj: function(m) {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		var d = 1.0 / (m.self._03 * x + m.self._13 * y + m.self._23 * z + m.self._33);
		this.x = (m.self._00 * x + m.self._10 * y + m.self._20 * z + m.self._30) * d;
		this.y = (m.self._01 * x + m.self._11 * y + m.self._21 * z + m.self._31) * d;
		this.z = (m.self._02 * x + m.self._12 * y + m.self._22 * z + m.self._32) * d;
		return this;
	}
	,applymat: function(m) {
		var x = this.x;
		var y = this.y;
		var z = this.z;
		this.x = m.self._00 * x + m.self._10 * y + m.self._20 * z + m.self._30;
		this.y = m.self._01 * x + m.self._11 * y + m.self._21 * z + m.self._31;
		this.z = m.self._02 * x + m.self._12 * y + m.self._22 * z + m.self._32;
		return this;
	}
	,equals: function(v) {
		if(this.x == v.x && this.y == v.y) {
			return this.z == v.z;
		} else {
			return false;
		}
	}
	,length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,sub: function(v) {
		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
		return this;
	}
	,distanceTo: function(p) {
		return Math.sqrt((p.x - this.x) * (p.x - this.x) + (p.y - this.y) * (p.y - this.y) + (p.z - this.z) * (p.z - this.z));
	}
	,clamp: function(min,max) {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l < min) {
			var n = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
			if(n > 0.0) {
				var invN = 1.0 / n;
				this.x *= invN;
				this.y *= invN;
				this.z *= invN;
			}
			var _this = this;
			_this.x *= min;
			_this.y *= min;
			_this.z *= min;
		} else if(l > max) {
			var n1 = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
			if(n1 > 0.0) {
				var invN1 = 1.0 / n1;
				this.x *= invN1;
				this.y *= invN1;
				this.z *= invN1;
			}
			var _this1 = this;
			_this1.x *= max;
			_this1.y *= max;
			_this1.z *= max;
		}
		return this;
	}
	,toString: function() {
		return "(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,__class__: iron_math_Vec3
};
var iron_object_Animation = function() {
	this.markerEvents = null;
	this.lastFrameIndex = -1;
	this.blendFactor = 0.0;
	this.blendAction = "";
	this.blendCurrent = 0.0;
	this.blendTime = 0.0;
	this.frameTime = 0.016666666666666666;
	this.paused = false;
	this.onComplete = null;
	this.frameIndex = 0;
	this.loop = true;
	this.speed = 1.0;
	this.time = 0.0;
	this.action = "";
	iron_Scene.active.animations.push(this);
	if(iron_Scene.active.raw.frame_time != null) {
		this.frameTime = iron_Scene.active.raw.frame_time;
	}
	this.play();
};
$hxClasses["iron.object.Animation"] = iron_object_Animation;
iron_object_Animation.__name__ = "iron.object.Animation";
iron_object_Animation.beginProfile = function() {
	iron_object_Animation.startTime = kha_Scheduler.realTime();
};
iron_object_Animation.endProfile = function() {
	iron_object_Animation.animationTime += kha_Scheduler.realTime() - iron_object_Animation.startTime;
};
iron_object_Animation.endFrame = function() {
	iron_object_Animation.animationTime = 0;
};
iron_object_Animation.prototype = {
	isSkinned: null
	,isSampled: null
	,action: null
	,armature: null
	,time: null
	,speed: null
	,loop: null
	,frameIndex: null
	,onComplete: null
	,paused: null
	,frameTime: null
	,blendTime: null
	,blendCurrent: null
	,blendAction: null
	,blendFactor: null
	,lastFrameIndex: null
	,markerEvents: null
	,play: function(action,onComplete,blendTime,speed,loop) {
		if(loop == null) {
			loop = true;
		}
		if(speed == null) {
			speed = 1.0;
		}
		if(blendTime == null) {
			blendTime = 0.0;
		}
		if(action == null) {
			action = "";
		}
		if(blendTime > 0) {
			this.blendTime = blendTime;
			this.blendCurrent = 0.0;
			this.blendAction = this.action;
			this.frameIndex = 0;
			this.time = 0.0;
		} else {
			this.frameIndex = -1;
		}
		this.action = action;
		this.onComplete = onComplete;
		this.speed = speed;
		this.loop = loop;
		this.paused = false;
	}
	,blend: function(action1,action2,factor) {
		this.blendTime = 1.0;
		this.blendFactor = factor;
	}
	,pause: function() {
		this.paused = true;
	}
	,resume: function() {
		this.paused = false;
	}
	,remove: function() {
		HxOverrides.remove(iron_Scene.active.animations,this);
	}
	,update: function(delta) {
		if(this.paused || this.speed == 0.0) {
			return;
		}
		this.time += delta * this.speed;
		if(this.blendTime > 0 && this.blendFactor == 0) {
			this.blendCurrent += delta;
			if(this.blendCurrent >= this.blendTime) {
				this.blendTime = 0.0;
			}
		}
	}
	,isTrackEnd: function(track) {
		if(this.speed > 0) {
			return this.frameIndex >= track.frames.length - 1;
		} else {
			return this.frameIndex <= 0;
		}
	}
	,checkFrameIndex: function(frameValues) {
		if(this.speed > 0) {
			if(this.frameIndex + 1 < frameValues.length) {
				return this.time > frameValues[this.frameIndex + 1] * this.frameTime;
			} else {
				return false;
			}
		} else if(this.frameIndex - 1 > -1) {
			return this.time < frameValues[this.frameIndex - 1] * this.frameTime;
		} else {
			return false;
		}
	}
	,rewind: function(track) {
		this.frameIndex = this.speed > 0 ? 0 : track.frames.length - 1;
		this.time = track.frames[this.frameIndex] * this.frameTime;
	}
	,updateTrack: function(anim) {
		if(anim == null) {
			return;
		}
		var track = anim.tracks[0];
		if(this.frameIndex == -1) {
			this.rewind(track);
		}
		var sign = this.speed > 0 ? 1 : -1;
		while(true) {
			var frameValues = track.frames;
			if(!(this.speed > 0 ? this.frameIndex + 1 < frameValues.length && this.time > frameValues[this.frameIndex + 1] * this.frameTime : this.frameIndex - 1 > -1 && this.time < frameValues[this.frameIndex - 1] * this.frameTime)) {
				break;
			}
			this.frameIndex += sign;
		}
		if(this.markerEvents != null && anim.marker_names != null && this.frameIndex != this.lastFrameIndex) {
			var _g = 0;
			var _g1 = anim.marker_frames.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.frameIndex == anim.marker_frames[i]) {
					var key = anim.marker_names[i];
					var _this = this.markerEvents;
					var ar = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
					var _g2 = 0;
					while(_g2 < ar.length) {
						var f = ar[_g2];
						++_g2;
						f();
					}
				}
			}
			this.lastFrameIndex = this.frameIndex;
		}
		if(this.isTrackEnd(track)) {
			if(this.loop || this.blendTime > 0) {
				this.rewind(track);
			} else {
				this.frameIndex -= sign;
				this.paused = true;
			}
			if(this.onComplete != null && this.blendTime == 0) {
				this.onComplete();
			}
		}
	}
	,updateAnimSampled: function(anim,m) {
		if(anim == null) {
			return;
		}
		var track = anim.tracks[0];
		var sign = this.speed > 0 ? 1 : -1;
		var t = this.time;
		var ti = this.frameIndex;
		var t1 = track.frames[ti] * this.frameTime;
		var t2 = track.frames[ti + sign] * this.frameTime;
		var s = (t - t1) / (t2 - t1);
		var _this = iron_object_Animation.m1;
		var a = track.values;
		var offset = ti * 16;
		if(offset == null) {
			offset = 0;
		}
		_this.self._00 = a[offset];
		_this.self._10 = a[1 + offset];
		_this.self._20 = a[2 + offset];
		_this.self._30 = a[3 + offset];
		_this.self._01 = a[4 + offset];
		_this.self._11 = a[5 + offset];
		_this.self._21 = a[6 + offset];
		_this.self._31 = a[7 + offset];
		_this.self._02 = a[8 + offset];
		_this.self._12 = a[9 + offset];
		_this.self._22 = a[10 + offset];
		_this.self._32 = a[11 + offset];
		_this.self._03 = a[12 + offset];
		_this.self._13 = a[13 + offset];
		_this.self._23 = a[14 + offset];
		_this.self._33 = a[15 + offset];
		var _this1 = iron_object_Animation.m2;
		var a1 = track.values;
		var offset1 = (ti + sign) * 16;
		if(offset1 == null) {
			offset1 = 0;
		}
		_this1.self._00 = a1[offset1];
		_this1.self._10 = a1[1 + offset1];
		_this1.self._20 = a1[2 + offset1];
		_this1.self._30 = a1[3 + offset1];
		_this1.self._01 = a1[4 + offset1];
		_this1.self._11 = a1[5 + offset1];
		_this1.self._21 = a1[6 + offset1];
		_this1.self._31 = a1[7 + offset1];
		_this1.self._02 = a1[8 + offset1];
		_this1.self._12 = a1[9 + offset1];
		_this1.self._22 = a1[10 + offset1];
		_this1.self._32 = a1[11 + offset1];
		_this1.self._03 = a1[12 + offset1];
		_this1.self._13 = a1[13 + offset1];
		_this1.self._23 = a1[14 + offset1];
		_this1.self._33 = a1[15 + offset1];
		var _this2 = iron_object_Animation.m1;
		var loc = iron_object_Animation.vpos;
		var quat = iron_object_Animation.q1;
		var scale = iron_object_Animation.vscl;
		loc.x = _this2.self._30;
		loc.y = _this2.self._31;
		loc.z = _this2.self._32;
		var _this3 = iron_math_Mat4.helpVec;
		_this3.x = _this2.self._00;
		_this3.y = _this2.self._01;
		_this3.z = _this2.self._02;
		_this3.w = 1.0;
		var _this11 = _this3;
		scale.x = Math.sqrt(_this11.x * _this11.x + _this11.y * _this11.y + _this11.z * _this11.z);
		var _this21 = iron_math_Mat4.helpVec;
		_this21.x = _this2.self._10;
		_this21.y = _this2.self._11;
		_this21.z = _this2.self._12;
		_this21.w = 1.0;
		var _this31 = _this21;
		scale.y = Math.sqrt(_this31.x * _this31.x + _this31.y * _this31.y + _this31.z * _this31.z);
		var _this4 = iron_math_Mat4.helpVec;
		_this4.x = _this2.self._20;
		_this4.y = _this2.self._21;
		_this4.z = _this2.self._22;
		_this4.w = 1.0;
		var _this5 = _this4;
		scale.z = Math.sqrt(_this5.x * _this5.x + _this5.y * _this5.y + _this5.z * _this5.z);
		var _this6 = _this2.self;
		var m3 = _this6._12;
		var m4 = _this6._22;
		var m5 = _this6._32;
		var m6 = _this6._13;
		var m7 = _this6._23;
		var m8 = _this6._33;
		var c00 = _this6._11 * (m4 * m8 - m5 * m7) - _this6._21 * (m3 * m8 - m5 * m6) + _this6._31 * (m3 * m7 - m4 * m6);
		var m31 = _this6._12;
		var m41 = _this6._22;
		var m51 = _this6._32;
		var m61 = _this6._13;
		var m71 = _this6._23;
		var m81 = _this6._33;
		var c01 = _this6._10 * (m41 * m81 - m51 * m71) - _this6._20 * (m31 * m81 - m51 * m61) + _this6._30 * (m31 * m71 - m41 * m61);
		var m32 = _this6._11;
		var m42 = _this6._21;
		var m52 = _this6._31;
		var m62 = _this6._13;
		var m72 = _this6._23;
		var m82 = _this6._33;
		var c02 = _this6._10 * (m42 * m82 - m52 * m72) - _this6._20 * (m32 * m82 - m52 * m62) + _this6._30 * (m32 * m72 - m42 * m62);
		var m33 = _this6._11;
		var m43 = _this6._21;
		var m53 = _this6._31;
		var m63 = _this6._12;
		var m73 = _this6._22;
		var m83 = _this6._32;
		var c03 = _this6._10 * (m43 * m83 - m53 * m73) - _this6._20 * (m33 * m83 - m53 * m63) + _this6._30 * (m33 * m73 - m43 * m63);
		if(_this6._00 * c00 - _this6._01 * c01 + _this6._02 * c02 - _this6._03 * c03 < 0.0) {
			scale.x = -scale.x;
		}
		var invs = 1.0 / scale.x;
		iron_math_Mat4.helpMat.self._00 = _this2.self._00 * invs;
		iron_math_Mat4.helpMat.self._01 = _this2.self._01 * invs;
		iron_math_Mat4.helpMat.self._02 = _this2.self._02 * invs;
		invs = 1.0 / scale.y;
		iron_math_Mat4.helpMat.self._10 = _this2.self._10 * invs;
		iron_math_Mat4.helpMat.self._11 = _this2.self._11 * invs;
		iron_math_Mat4.helpMat.self._12 = _this2.self._12 * invs;
		invs = 1.0 / scale.z;
		iron_math_Mat4.helpMat.self._20 = _this2.self._20 * invs;
		iron_math_Mat4.helpMat.self._21 = _this2.self._21 * invs;
		iron_math_Mat4.helpMat.self._22 = _this2.self._22 * invs;
		var m1 = iron_math_Mat4.helpMat;
		var m11 = m1.self._00;
		var m12 = m1.self._10;
		var m13 = m1.self._20;
		var m21 = m1.self._01;
		var m22 = m1.self._11;
		var m23 = m1.self._21;
		var m311 = m1.self._02;
		var m321 = m1.self._12;
		var m331 = m1.self._22;
		var tr = m11 + m22 + m331;
		var s1 = 0.0;
		if(tr > 0) {
			s1 = 0.5 / Math.sqrt(tr + 1.0);
			quat.w = 0.25 / s1;
			quat.x = (m321 - m23) * s1;
			quat.y = (m13 - m311) * s1;
			quat.z = (m21 - m12) * s1;
		} else if(m11 > m22 && m11 > m331) {
			s1 = 2.0 * Math.sqrt(1.0 + m11 - m22 - m331);
			quat.w = (m321 - m23) / s1;
			quat.x = 0.25 * s1;
			quat.y = (m12 + m21) / s1;
			quat.z = (m13 + m311) / s1;
		} else if(m22 > m331) {
			s1 = 2.0 * Math.sqrt(1.0 + m22 - m11 - m331);
			quat.w = (m13 - m311) / s1;
			quat.x = (m12 + m21) / s1;
			quat.y = 0.25 * s1;
			quat.z = (m23 + m321) / s1;
		} else {
			s1 = 2.0 * Math.sqrt(1.0 + m331 - m11 - m22);
			quat.w = (m21 - m12) / s1;
			quat.x = (m13 + m311) / s1;
			quat.y = (m23 + m321) / s1;
			quat.z = 0.25 * s1;
		}
		var _this7 = iron_object_Animation.m2;
		var loc1 = iron_object_Animation.vpos2;
		var quat1 = iron_object_Animation.q2;
		var scale1 = iron_object_Animation.vscl2;
		loc1.x = _this7.self._30;
		loc1.y = _this7.self._31;
		loc1.z = _this7.self._32;
		var _this8 = iron_math_Mat4.helpVec;
		_this8.x = _this7.self._00;
		_this8.y = _this7.self._01;
		_this8.z = _this7.self._02;
		_this8.w = 1.0;
		var _this12 = _this8;
		scale1.x = Math.sqrt(_this12.x * _this12.x + _this12.y * _this12.y + _this12.z * _this12.z);
		var _this22 = iron_math_Mat4.helpVec;
		_this22.x = _this7.self._10;
		_this22.y = _this7.self._11;
		_this22.z = _this7.self._12;
		_this22.w = 1.0;
		var _this32 = _this22;
		scale1.y = Math.sqrt(_this32.x * _this32.x + _this32.y * _this32.y + _this32.z * _this32.z);
		var _this41 = iron_math_Mat4.helpVec;
		_this41.x = _this7.self._20;
		_this41.y = _this7.self._21;
		_this41.z = _this7.self._22;
		_this41.w = 1.0;
		var _this51 = _this41;
		scale1.z = Math.sqrt(_this51.x * _this51.x + _this51.y * _this51.y + _this51.z * _this51.z);
		var _this61 = _this7.self;
		var m34 = _this61._12;
		var m44 = _this61._22;
		var m54 = _this61._32;
		var m64 = _this61._13;
		var m74 = _this61._23;
		var m84 = _this61._33;
		var c001 = _this61._11 * (m44 * m84 - m54 * m74) - _this61._21 * (m34 * m84 - m54 * m64) + _this61._31 * (m34 * m74 - m44 * m64);
		var m312 = _this61._12;
		var m411 = _this61._22;
		var m511 = _this61._32;
		var m611 = _this61._13;
		var m711 = _this61._23;
		var m811 = _this61._33;
		var c011 = _this61._10 * (m411 * m811 - m511 * m711) - _this61._20 * (m312 * m811 - m511 * m611) + _this61._30 * (m312 * m711 - m411 * m611);
		var m322 = _this61._11;
		var m421 = _this61._21;
		var m521 = _this61._31;
		var m621 = _this61._13;
		var m721 = _this61._23;
		var m821 = _this61._33;
		var c021 = _this61._10 * (m421 * m821 - m521 * m721) - _this61._20 * (m322 * m821 - m521 * m621) + _this61._30 * (m322 * m721 - m421 * m621);
		var m332 = _this61._11;
		var m431 = _this61._21;
		var m531 = _this61._31;
		var m631 = _this61._12;
		var m731 = _this61._22;
		var m831 = _this61._32;
		var c031 = _this61._10 * (m431 * m831 - m531 * m731) - _this61._20 * (m332 * m831 - m531 * m631) + _this61._30 * (m332 * m731 - m431 * m631);
		if(_this61._00 * c001 - _this61._01 * c011 + _this61._02 * c021 - _this61._03 * c031 < 0.0) {
			scale1.x = -scale1.x;
		}
		var invs1 = 1.0 / scale1.x;
		iron_math_Mat4.helpMat.self._00 = _this7.self._00 * invs1;
		iron_math_Mat4.helpMat.self._01 = _this7.self._01 * invs1;
		iron_math_Mat4.helpMat.self._02 = _this7.self._02 * invs1;
		invs1 = 1.0 / scale1.y;
		iron_math_Mat4.helpMat.self._10 = _this7.self._10 * invs1;
		iron_math_Mat4.helpMat.self._11 = _this7.self._11 * invs1;
		iron_math_Mat4.helpMat.self._12 = _this7.self._12 * invs1;
		invs1 = 1.0 / scale1.z;
		iron_math_Mat4.helpMat.self._20 = _this7.self._20 * invs1;
		iron_math_Mat4.helpMat.self._21 = _this7.self._21 * invs1;
		iron_math_Mat4.helpMat.self._22 = _this7.self._22 * invs1;
		var m2 = iron_math_Mat4.helpMat;
		var m111 = m2.self._00;
		var m121 = m2.self._10;
		var m131 = m2.self._20;
		var m211 = m2.self._01;
		var m221 = m2.self._11;
		var m231 = m2.self._21;
		var m3111 = m2.self._02;
		var m3211 = m2.self._12;
		var m3311 = m2.self._22;
		var tr1 = m111 + m221 + m3311;
		var s2 = 0.0;
		if(tr1 > 0) {
			s2 = 0.5 / Math.sqrt(tr1 + 1.0);
			quat1.w = 0.25 / s2;
			quat1.x = (m3211 - m231) * s2;
			quat1.y = (m131 - m3111) * s2;
			quat1.z = (m211 - m121) * s2;
		} else if(m111 > m221 && m111 > m3311) {
			s2 = 2.0 * Math.sqrt(1.0 + m111 - m221 - m3311);
			quat1.w = (m3211 - m231) / s2;
			quat1.x = 0.25 * s2;
			quat1.y = (m121 + m211) / s2;
			quat1.z = (m131 + m3111) / s2;
		} else if(m221 > m3311) {
			s2 = 2.0 * Math.sqrt(1.0 + m221 - m111 - m3311);
			quat1.w = (m131 - m3111) / s2;
			quat1.x = (m121 + m211) / s2;
			quat1.y = 0.25 * s2;
			quat1.z = (m231 + m3211) / s2;
		} else {
			s2 = 2.0 * Math.sqrt(1.0 + m3311 - m111 - m221);
			quat1.w = (m211 - m121) / s2;
			quat1.x = (m131 + m3111) / s2;
			quat1.y = (m231 + m3211) / s2;
			quat1.z = 0.25 * s2;
		}
		var _this9 = iron_object_Animation.vp;
		var from = iron_object_Animation.vpos;
		var to = iron_object_Animation.vpos2;
		_this9.x = from.x + (to.x - from.x) * s;
		_this9.y = from.y + (to.y - from.y) * s;
		_this9.z = from.z + (to.z - from.z) * s;
		var _this10 = iron_object_Animation.vs;
		var from1 = iron_object_Animation.vscl;
		var to1 = iron_object_Animation.vscl2;
		_this10.x = from1.x + (to1.x - from1.x) * s;
		_this10.y = from1.y + (to1.y - from1.y) * s;
		_this10.z = from1.z + (to1.z - from1.z) * s;
		var _this13 = iron_object_Animation.q3;
		var from2 = iron_object_Animation.q1;
		var to2 = iron_object_Animation.q2;
		var fromx = from2.x;
		var fromy = from2.y;
		var fromz = from2.z;
		var fromw = from2.w;
		var dot = from2.x * to2.x + from2.y * to2.y + from2.z * to2.z + from2.w * to2.w;
		if(dot < 0.0) {
			fromx = -fromx;
			fromy = -fromy;
			fromz = -fromz;
			fromw = -fromw;
		}
		_this13.x = fromx + (to2.x - fromx) * s;
		_this13.y = fromy + (to2.y - fromy) * s;
		_this13.z = fromz + (to2.z - fromz) * s;
		_this13.w = fromw + (to2.w - fromw) * s;
		var l = Math.sqrt(_this13.x * _this13.x + _this13.y * _this13.y + _this13.z * _this13.z + _this13.w * _this13.w);
		if(l == 0.0) {
			_this13.x = 0;
			_this13.y = 0;
			_this13.z = 0;
			_this13.w = 0;
		} else {
			l = 1.0 / l;
			_this13.x *= l;
			_this13.y *= l;
			_this13.z *= l;
			_this13.w *= l;
		}
		var q = iron_object_Animation.q3;
		var x = q.x;
		var y = q.y;
		var z = q.z;
		var w = q.w;
		var x2 = x + x;
		var y2 = y + y;
		var z2 = z + z;
		var xx = x * x2;
		var xy = x * y2;
		var xz = x * z2;
		var yy = y * y2;
		var yz = y * z2;
		var zz = z * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		m.self._00 = 1.0 - (yy + zz);
		m.self._10 = xy - wz;
		m.self._20 = xz + wy;
		m.self._01 = xy + wz;
		m.self._11 = 1.0 - (xx + zz);
		m.self._21 = yz - wx;
		m.self._02 = xz - wy;
		m.self._12 = yz + wx;
		m.self._22 = 1.0 - (xx + yy);
		m.self._03 = 0.0;
		m.self._13 = 0.0;
		m.self._23 = 0.0;
		m.self._30 = 0.0;
		m.self._31 = 0.0;
		m.self._32 = 0.0;
		m.self._33 = 1.0;
		var v = iron_object_Animation.vs;
		var x1 = v.x;
		var y1 = v.y;
		var z1 = v.z;
		m.self._00 *= x1;
		m.self._01 *= x1;
		m.self._02 *= x1;
		m.self._03 *= x1;
		m.self._10 *= y1;
		m.self._11 *= y1;
		m.self._12 *= y1;
		m.self._13 *= y1;
		m.self._20 *= z1;
		m.self._21 *= z1;
		m.self._22 *= z1;
		m.self._23 *= z1;
		m.self._30 = iron_object_Animation.vp.x;
		m.self._31 = iron_object_Animation.vp.y;
		m.self._32 = iron_object_Animation.vp.z;
	}
	,notifyOnMarker: function(name,onMarker) {
		if(this.markerEvents == null) {
			this.markerEvents = new haxe_ds_StringMap();
		}
		var _this = this.markerEvents;
		var ar = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(ar == null) {
			ar = [];
			var _this1 = this.markerEvents;
			if(__map_reserved[name] != null) {
				_this1.setReserved(name,ar);
			} else {
				_this1.h[name] = ar;
			}
		}
		ar.push(onMarker);
	}
	,removeMarker: function(name,onMarker) {
		var _this = this.markerEvents;
		HxOverrides.remove(__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name],onMarker);
	}
	,currentFrame: function() {
		return this.time / this.frameTime | 0;
	}
	,totalFrames: function() {
		return 0;
	}
	,__class__: iron_object_Animation
};
var iron_object_BoneAnimation = function(armatureName) {
	if(armatureName == null) {
		armatureName = "";
	}
	this.onUpdates = null;
	this.constraintMats = null;
	this.constraintTargetsI = null;
	this.constraintTargets = null;
	this.boneChildren = null;
	this.matsFastBlendSort = [];
	this.matsFastBlend = [];
	this.matsFastSort = [];
	this.matsFast = [];
	this.applyParent = null;
	this.absMats = null;
	this.skeletonMatsBlend = null;
	this.skeletonBonesBlend = null;
	this.skeletonMats = null;
	this.skeletonBones = null;
	iron_object_Animation.call(this);
	this.isSampled = false;
	var _g = 0;
	var _g1 = iron_Scene.active.armatures;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		if(a.name == armatureName) {
			this.armature = a;
			break;
		}
	}
};
$hxClasses["iron.object.BoneAnimation"] = iron_object_BoneAnimation;
iron_object_BoneAnimation.__name__ = "iron.object.BoneAnimation";
iron_object_BoneAnimation.__super__ = iron_object_Animation;
iron_object_BoneAnimation.prototype = $extend(iron_object_Animation.prototype,{
	object: null
	,data: null
	,skinBuffer: null
	,skeletonBones: null
	,skeletonMats: null
	,skeletonBonesBlend: null
	,skeletonMatsBlend: null
	,absMats: null
	,applyParent: null
	,matsFast: null
	,matsFastSort: null
	,matsFastBlend: null
	,matsFastBlendSort: null
	,boneChildren: null
	,constraintTargets: null
	,constraintTargetsI: null
	,constraintMats: null
	,setSkin: function(mo) {
		var _gthis = this;
		this.object = mo;
		this.data = mo != null ? mo.data : null;
		this.isSkinned = this.data != null && this.data.isSkinned;
		if(this.isSkinned) {
			var boneSize = 8;
			var this1 = new Float32Array(iron_object_BoneAnimation.skinMaxBones * boneSize);
			this.skinBuffer = this1;
			var _g = 0;
			var _g1 = this.skinBuffer.length;
			while(_g < _g1) {
				var i = _g++;
				this.skinBuffer[i] = 0;
			}
			var _this = this.object.transform.rot;
			_this.x = 0;
			_this.y = 0;
			_this.z = 0;
			_this.w = 1;
			this.object.transform.buildMatrix();
			var refs = mo.parent.raw.bone_actions;
			if(refs != null && refs.length > 0) {
				iron_data_Data.getSceneRaw(refs[0],function(action) {
					_gthis.play(action.name);
				});
			}
		}
	}
	,addBoneChild: function(bone,o) {
		if(this.boneChildren == null) {
			this.boneChildren = new haxe_ds_StringMap();
		}
		var _this = this.boneChildren;
		var ar = __map_reserved[bone] != null ? _this.getReserved(bone) : _this.h[bone];
		if(ar == null) {
			ar = [];
			var _this1 = this.boneChildren;
			if(__map_reserved[bone] != null) {
				_this1.setReserved(bone,ar);
			} else {
				_this1.h[bone] = ar;
			}
		}
		ar.push(o);
	}
	,updateBoneChildren: function(bone,bm) {
		var key = bone.name;
		var _this = this.boneChildren;
		var ar = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(ar == null) {
			return;
		}
		var _g = 0;
		while(_g < ar.length) {
			var o = ar[_g];
			++_g;
			var t = o.transform;
			if(t.boneParent == null) {
				t.boneParent = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
			}
			if(o.raw.parent_bone_tail != null) {
				if(o.raw.parent_bone_connected || this.isSkinned) {
					var v = o.raw.parent_bone_tail;
					var _this1 = t.boneParent;
					var x = v[0];
					var y = v[1];
					var z = v[2];
					if(z == null) {
						z = 0.0;
					}
					if(y == null) {
						y = 0.0;
					}
					if(x == null) {
						x = 0.0;
					}
					_this1.self._00 = 1.0;
					_this1.self._01 = 0.0;
					_this1.self._02 = 0.0;
					_this1.self._03 = 0.0;
					_this1.self._10 = 0.0;
					_this1.self._11 = 1.0;
					_this1.self._12 = 0.0;
					_this1.self._13 = 0.0;
					_this1.self._20 = 0.0;
					_this1.self._21 = 0.0;
					_this1.self._22 = 1.0;
					_this1.self._23 = 0.0;
					_this1.self._30 = x;
					_this1.self._31 = y;
					_this1.self._32 = z;
					_this1.self._33 = 1.0;
					var _this2 = t.boneParent;
					var a00 = _this2.self._00;
					var a01 = _this2.self._01;
					var a02 = _this2.self._02;
					var a03 = _this2.self._03;
					var a10 = _this2.self._10;
					var a11 = _this2.self._11;
					var a12 = _this2.self._12;
					var a13 = _this2.self._13;
					var a20 = _this2.self._20;
					var a21 = _this2.self._21;
					var a22 = _this2.self._22;
					var a23 = _this2.self._23;
					var a30 = _this2.self._30;
					var a31 = _this2.self._31;
					var a32 = _this2.self._32;
					var a33 = _this2.self._33;
					var b0 = bm.self._00;
					var b1 = bm.self._10;
					var b2 = bm.self._20;
					var b3 = bm.self._30;
					_this2.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
					_this2.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
					_this2.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
					_this2.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
					b0 = bm.self._01;
					b1 = bm.self._11;
					b2 = bm.self._21;
					b3 = bm.self._31;
					_this2.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
					_this2.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
					_this2.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
					_this2.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
					b0 = bm.self._02;
					b1 = bm.self._12;
					b2 = bm.self._22;
					b3 = bm.self._32;
					_this2.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
					_this2.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
					_this2.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
					_this2.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
					b0 = bm.self._03;
					b1 = bm.self._13;
					b2 = bm.self._23;
					b3 = bm.self._33;
					_this2.self._03 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
					_this2.self._13 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
					_this2.self._23 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
					_this2.self._33 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
				} else {
					var v1 = o.raw.parent_bone_tail_pose;
					var _this3 = t.boneParent;
					_this3.self._00 = bm.self._00;
					_this3.self._01 = bm.self._01;
					_this3.self._02 = bm.self._02;
					_this3.self._03 = bm.self._03;
					_this3.self._10 = bm.self._10;
					_this3.self._11 = bm.self._11;
					_this3.self._12 = bm.self._12;
					_this3.self._13 = bm.self._13;
					_this3.self._20 = bm.self._20;
					_this3.self._21 = bm.self._21;
					_this3.self._22 = bm.self._22;
					_this3.self._23 = bm.self._23;
					_this3.self._30 = bm.self._30;
					_this3.self._31 = bm.self._31;
					_this3.self._32 = bm.self._32;
					_this3.self._33 = bm.self._33;
					var _this4 = t.boneParent;
					var x1 = v1[0];
					var y1 = v1[1];
					var z1 = v1[2];
					_this4.self._00 += x1 * _this4.self._03;
					_this4.self._01 += y1 * _this4.self._03;
					_this4.self._02 += z1 * _this4.self._03;
					_this4.self._10 += x1 * _this4.self._13;
					_this4.self._11 += y1 * _this4.self._13;
					_this4.self._12 += z1 * _this4.self._13;
					_this4.self._20 += x1 * _this4.self._23;
					_this4.self._21 += y1 * _this4.self._23;
					_this4.self._22 += z1 * _this4.self._23;
					_this4.self._30 += x1 * _this4.self._33;
					_this4.self._31 += y1 * _this4.self._33;
					_this4.self._32 += z1 * _this4.self._33;
				}
			} else {
				var _this5 = t.boneParent;
				_this5.self._00 = bm.self._00;
				_this5.self._01 = bm.self._01;
				_this5.self._02 = bm.self._02;
				_this5.self._03 = bm.self._03;
				_this5.self._10 = bm.self._10;
				_this5.self._11 = bm.self._11;
				_this5.self._12 = bm.self._12;
				_this5.self._13 = bm.self._13;
				_this5.self._20 = bm.self._20;
				_this5.self._21 = bm.self._21;
				_this5.self._22 = bm.self._22;
				_this5.self._23 = bm.self._23;
				_this5.self._30 = bm.self._30;
				_this5.self._31 = bm.self._31;
				_this5.self._32 = bm.self._32;
				_this5.self._33 = bm.self._33;
			}
			t.buildMatrix();
		}
	}
	,numParents: function(b) {
		var i = 0;
		var p = b.parent;
		while(p != null) {
			++i;
			p = p.parent;
		}
		return i;
	}
	,setMats: function() {
		var _gthis = this;
		while(this.matsFast.length < this.skeletonBones.length) {
			this.matsFast.push(new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0));
			this.matsFastSort.push(this.matsFastSort.length);
		}
		this.matsFastSort.sort(function(a,b) {
			var i = _gthis.numParents(_gthis.skeletonBones[a]);
			var j = _gthis.numParents(_gthis.skeletonBones[b]);
			if(i < j) {
				return -1;
			} else if(i > j) {
				return 1;
			} else {
				return 0;
			}
		});
		if(this.skeletonBonesBlend != null) {
			while(this.matsFastBlend.length < this.skeletonBonesBlend.length) {
				this.matsFastBlend.push(new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0));
				this.matsFastBlendSort.push(this.matsFastBlendSort.length);
			}
			this.matsFastBlendSort.sort(function(a1,b1) {
				var i1 = _gthis.numParents(_gthis.skeletonBonesBlend[a1]);
				var j1 = _gthis.numParents(_gthis.skeletonBonesBlend[b1]);
				if(i1 < j1) {
					return -1;
				} else if(i1 > j1) {
					return 1;
				} else {
					return 0;
				}
			});
		}
	}
	,setAction: function(action) {
		if(this.isSkinned) {
			var _this = this.data.geom.actions;
			this.skeletonBones = __map_reserved[action] != null ? _this.getReserved(action) : _this.h[action];
			var _this1 = this.data.geom.mats;
			this.skeletonMats = __map_reserved[action] != null ? _this1.getReserved(action) : _this1.h[action];
			this.skeletonBonesBlend = null;
			this.skeletonMatsBlend = null;
		} else {
			this.armature.initMats();
			var a = this.armature.getAction(action);
			this.skeletonBones = a.bones;
			this.skeletonMats = a.mats;
		}
		this.setMats();
	}
	,setActionBlend: function(action) {
		if(this.isSkinned) {
			this.skeletonBonesBlend = this.skeletonBones;
			this.skeletonMatsBlend = this.skeletonMats;
			var _this = this.data.geom.actions;
			this.skeletonBones = __map_reserved[action] != null ? _this.getReserved(action) : _this.h[action];
			var _this1 = this.data.geom.mats;
			this.skeletonMats = __map_reserved[action] != null ? _this1.getReserved(action) : _this1.h[action];
		} else {
			this.armature.initMats();
			var a = this.armature.getAction(action);
			this.skeletonBones = a.bones;
			this.skeletonMats = a.mats;
		}
		this.setMats();
	}
	,play: function(action,onComplete,blendTime,speed,loop) {
		if(loop == null) {
			loop = true;
		}
		if(speed == null) {
			speed = 1.0;
		}
		if(blendTime == null) {
			blendTime = 0.2;
		}
		if(action == null) {
			action = "";
		}
		iron_object_Animation.prototype.play.call(this,action,onComplete,blendTime,speed,loop);
		if(action != "") {
			if(blendTime > 0) {
				this.setActionBlend(action);
			} else {
				this.setAction(action);
			}
		}
		this.blendFactor = 0.0;
	}
	,blend: function(action1,action2,factor) {
		if(factor == 0.0) {
			this.setAction(action1);
			return;
		}
		this.setAction(action2);
		this.setActionBlend(action1);
		iron_object_Animation.prototype.blend.call(this,action1,action2,factor);
	}
	,update: function(delta) {
		if(!this.isSkinned && this.skeletonBones == null) {
			this.setAction(this.armature.actions[0].name);
		}
		if(this.object != null && (!this.object.visible || this.object.culled)) {
			return;
		}
		if(this.skeletonBones == null || this.skeletonBones.length == 0) {
			return;
		}
		iron_object_Animation.beginProfile();
		iron_object_Animation.prototype.update.call(this,delta);
		if(this.paused || this.speed == 0.0) {
			return;
		}
		var lastBones = this.skeletonBones;
		var _g = 0;
		var _g1 = this.skeletonBones;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.anim != null) {
				this.updateTrack(b.anim);
				break;
			}
		}
		if(lastBones != this.skeletonBones) {
			return;
		}
		var _g2 = 0;
		var _g3 = this.skeletonBones.length;
		while(_g2 < _g3) {
			var i = _g2++;
			this.updateAnimSampled(this.skeletonBones[i].anim,this.skeletonMats[i]);
		}
		if(this.blendTime > 0 && this.skeletonBonesBlend != null) {
			var _g4 = 0;
			var _g5 = this.skeletonBonesBlend;
			while(_g4 < _g5.length) {
				var b1 = _g5[_g4];
				++_g4;
				if(b1.anim != null) {
					this.updateTrack(b1.anim);
					break;
				}
			}
			var _g6 = 0;
			var _g7 = this.skeletonBonesBlend.length;
			while(_g6 < _g7) {
				var i1 = _g6++;
				this.updateAnimSampled(this.skeletonBonesBlend[i1].anim,this.skeletonMatsBlend[i1]);
			}
		}
		this.updateConstraints();
		if(this.onUpdates != null) {
			var _g41 = 0;
			var _g51 = this.onUpdates;
			while(_g41 < _g51.length) {
				var f = _g51[_g41];
				++_g41;
				f();
			}
		}
		var _g42 = 0;
		var _g52 = this.skeletonBones.length;
		while(_g42 < _g52) {
			var i2 = _g42++;
			this.multParent(this.matsFastSort[i2],this.matsFast,this.skeletonBones,this.skeletonMats);
		}
		if(this.skeletonBonesBlend != null) {
			var _g61 = 0;
			var _g71 = this.skeletonBonesBlend.length;
			while(_g61 < _g71) {
				var i3 = _g61++;
				this.multParent(this.matsFastBlendSort[i3],this.matsFastBlend,this.skeletonBonesBlend,this.skeletonMatsBlend);
			}
		}
		if(this.isSkinned) {
			this.updateSkinGpu();
		} else {
			this.updateBonesOnly();
		}
		iron_object_Animation.endProfile();
	}
	,multParent: function(i,fasts,bones,mats) {
		var f = fasts[i];
		if(this.applyParent != null && !this.applyParent[i]) {
			var m = mats[i];
			f.self._00 = m.self._00;
			f.self._01 = m.self._01;
			f.self._02 = m.self._02;
			f.self._03 = m.self._03;
			f.self._10 = m.self._10;
			f.self._11 = m.self._11;
			f.self._12 = m.self._12;
			f.self._13 = m.self._13;
			f.self._20 = m.self._20;
			f.self._21 = m.self._21;
			f.self._22 = m.self._22;
			f.self._23 = m.self._23;
			f.self._30 = m.self._30;
			f.self._31 = m.self._31;
			f.self._32 = m.self._32;
			f.self._33 = m.self._33;
			return;
		}
		var p = bones[i].parent;
		var bi = this.getBoneIndex(p,bones);
		if(p == null || bi == -1) {
			var m1 = mats[i];
			f.self._00 = m1.self._00;
			f.self._01 = m1.self._01;
			f.self._02 = m1.self._02;
			f.self._03 = m1.self._03;
			f.self._10 = m1.self._10;
			f.self._11 = m1.self._11;
			f.self._12 = m1.self._12;
			f.self._13 = m1.self._13;
			f.self._20 = m1.self._20;
			f.self._21 = m1.self._21;
			f.self._22 = m1.self._22;
			f.self._23 = m1.self._23;
			f.self._30 = m1.self._30;
			f.self._31 = m1.self._31;
			f.self._32 = m1.self._32;
			f.self._33 = m1.self._33;
		} else {
			var b = fasts[bi];
			var a = mats[i];
			var a00 = a.self._00;
			var a01 = a.self._01;
			var a02 = a.self._02;
			var a03 = a.self._03;
			var a10 = a.self._10;
			var a11 = a.self._11;
			var a12 = a.self._12;
			var a13 = a.self._13;
			var a20 = a.self._20;
			var a21 = a.self._21;
			var a22 = a.self._22;
			var a23 = a.self._23;
			var a30 = a.self._30;
			var a31 = a.self._31;
			var a32 = a.self._32;
			var a33 = a.self._33;
			var b0 = b.self._00;
			var b1 = b.self._10;
			var b2 = b.self._20;
			var b3 = b.self._30;
			f.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			f.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			f.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			f.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			b0 = b.self._01;
			b1 = b.self._11;
			b2 = b.self._21;
			b3 = b.self._31;
			f.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			f.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			f.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			f.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			b0 = b.self._02;
			b1 = b.self._12;
			b2 = b.self._22;
			b3 = b.self._32;
			f.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			f.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			f.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			f.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			b0 = b.self._03;
			b1 = b.self._13;
			b2 = b.self._23;
			b3 = b.self._33;
			f.self._03 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			f.self._13 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			f.self._23 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			f.self._33 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		}
	}
	,multParents: function(m,i,bones,mats) {
		var bone = bones[i];
		var p = bone.parent;
		while(p != null) {
			var i1 = this.getBoneIndex(p,bones);
			if(i1 == -1) {
				continue;
			}
			var m1 = mats[i1];
			var a00 = m.self._00;
			var a01 = m.self._01;
			var a02 = m.self._02;
			var a03 = m.self._03;
			var a10 = m.self._10;
			var a11 = m.self._11;
			var a12 = m.self._12;
			var a13 = m.self._13;
			var a20 = m.self._20;
			var a21 = m.self._21;
			var a22 = m.self._22;
			var a23 = m.self._23;
			var a30 = m.self._30;
			var a31 = m.self._31;
			var a32 = m.self._32;
			var a33 = m.self._33;
			var b0 = m1.self._00;
			var b1 = m1.self._10;
			var b2 = m1.self._20;
			var b3 = m1.self._30;
			m.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			m.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			m.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			m.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			b0 = m1.self._01;
			b1 = m1.self._11;
			b2 = m1.self._21;
			b3 = m1.self._31;
			m.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			m.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			m.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			m.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			b0 = m1.self._02;
			b1 = m1.self._12;
			b2 = m1.self._22;
			b3 = m1.self._32;
			m.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			m.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			m.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			m.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			b0 = m1.self._03;
			b1 = m1.self._13;
			b2 = m1.self._23;
			b3 = m1.self._33;
			m.self._03 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			m.self._13 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			m.self._23 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			m.self._33 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			p = p.parent;
		}
	}
	,updateConstraints: function() {
		if(this.data == null) {
			return;
		}
		var cs = this.data.raw.skin.constraints;
		if(cs == null) {
			return;
		}
		if(this.constraintTargets == null) {
			this.constraintTargets = [];
			this.constraintTargetsI = [];
			var _g = 0;
			while(_g < cs.length) {
				var c = cs[_g];
				++_g;
				var o = iron_Scene.active.getChild(c.target);
				this.constraintTargets.push(o);
				var m = null;
				if(o != null) {
					var a = o.raw.transform.values;
					m = new iron_math_Mat4(a[0],a[1],a[2],a[3],a[4],a[5],a[6],a[7],a[8],a[9],a[10],a[11],a[12],a[13],a[14],a[15]);
					var a00 = m.self._00;
					var a01 = m.self._01;
					var a02 = m.self._02;
					var a03 = m.self._03;
					var a10 = m.self._10;
					var a11 = m.self._11;
					var a12 = m.self._12;
					var a13 = m.self._13;
					var a20 = m.self._20;
					var a21 = m.self._21;
					var a22 = m.self._22;
					var a23 = m.self._23;
					var a30 = m.self._30;
					var a31 = m.self._31;
					var a32 = m.self._32;
					var a33 = m.self._33;
					var b00 = a00 * a11 - a01 * a10;
					var b01 = a00 * a12 - a02 * a10;
					var b02 = a00 * a13 - a03 * a10;
					var b03 = a01 * a12 - a02 * a11;
					var b04 = a01 * a13 - a03 * a11;
					var b05 = a02 * a13 - a03 * a12;
					var b06 = a20 * a31 - a21 * a30;
					var b07 = a20 * a32 - a22 * a30;
					var b08 = a20 * a33 - a23 * a30;
					var b09 = a21 * a32 - a22 * a31;
					var b10 = a21 * a33 - a23 * a31;
					var b11 = a22 * a33 - a23 * a32;
					var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
					if(det == 0.0) {
						m.self._00 = 1.0;
						m.self._01 = 0.0;
						m.self._02 = 0.0;
						m.self._03 = 0.0;
						m.self._10 = 0.0;
						m.self._11 = 1.0;
						m.self._12 = 0.0;
						m.self._13 = 0.0;
						m.self._20 = 0.0;
						m.self._21 = 0.0;
						m.self._22 = 1.0;
						m.self._23 = 0.0;
						m.self._30 = 0.0;
						m.self._31 = 0.0;
						m.self._32 = 0.0;
						m.self._33 = 1.0;
					} else {
						det = 1.0 / det;
						m.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
						m.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
						m.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
						m.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
						m.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
						m.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
						m.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
						m.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
						m.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
						m.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
						m.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
						m.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
						m.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
						m.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
						m.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
						m.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
					}
				}
				this.constraintTargetsI.push(m);
			}
			this.constraintMats = new haxe_ds_ObjectMap();
		}
		var _g1 = 0;
		var _g11 = cs.length;
		while(_g1 < _g11) {
			var i = _g1++;
			var c1 = cs[i];
			var bone = this.getBone(c1.bone);
			if(bone == null) {
				continue;
			}
			var o1 = this.constraintTargets[i];
			if(o1 == null) {
				continue;
			}
			if(c1.type == "CHILD_OF") {
				var m1 = this.constraintMats.h[bone.__id__];
				if(m1 == null) {
					m1 = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
					this.constraintMats.set(bone,m1);
				}
				var m2 = this.object.parent.transform.world;
				m1.self._00 = m2.self._00;
				m1.self._01 = m2.self._01;
				m1.self._02 = m2.self._02;
				m1.self._03 = m2.self._03;
				m1.self._10 = m2.self._10;
				m1.self._11 = m2.self._11;
				m1.self._12 = m2.self._12;
				m1.self._13 = m2.self._13;
				m1.self._20 = m2.self._20;
				m1.self._21 = m2.self._21;
				m1.self._22 = m2.self._22;
				m1.self._23 = m2.self._23;
				m1.self._30 = m2.self._30;
				m1.self._31 = m2.self._31;
				m1.self._32 = m2.self._32;
				m1.self._33 = m2.self._33;
				var m3 = this.constraintTargetsI[i];
				var a001 = m1.self._00;
				var a011 = m1.self._01;
				var a021 = m1.self._02;
				var a031 = m1.self._03;
				var a101 = m1.self._10;
				var a111 = m1.self._11;
				var a121 = m1.self._12;
				var a131 = m1.self._13;
				var a201 = m1.self._20;
				var a211 = m1.self._21;
				var a221 = m1.self._22;
				var a231 = m1.self._23;
				var a301 = m1.self._30;
				var a311 = m1.self._31;
				var a321 = m1.self._32;
				var a331 = m1.self._33;
				var b0 = m3.self._00;
				var b1 = m3.self._10;
				var b2 = m3.self._20;
				var b3 = m3.self._30;
				m1.self._00 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
				m1.self._10 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
				m1.self._20 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
				m1.self._30 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
				b0 = m3.self._01;
				b1 = m3.self._11;
				b2 = m3.self._21;
				b3 = m3.self._31;
				m1.self._01 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
				m1.self._11 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
				m1.self._21 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
				m1.self._31 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
				b0 = m3.self._02;
				b1 = m3.self._12;
				b2 = m3.self._22;
				b3 = m3.self._32;
				m1.self._02 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
				m1.self._12 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
				m1.self._22 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
				m1.self._32 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
				b0 = m3.self._03;
				b1 = m3.self._13;
				b2 = m3.self._23;
				b3 = m3.self._33;
				m1.self._03 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
				m1.self._13 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
				m1.self._23 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
				m1.self._33 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
				var m4 = o1.transform.world;
				var a002 = m1.self._00;
				var a012 = m1.self._01;
				var a022 = m1.self._02;
				var a032 = m1.self._03;
				var a102 = m1.self._10;
				var a112 = m1.self._11;
				var a122 = m1.self._12;
				var a132 = m1.self._13;
				var a202 = m1.self._20;
				var a212 = m1.self._21;
				var a222 = m1.self._22;
				var a232 = m1.self._23;
				var a302 = m1.self._30;
				var a312 = m1.self._31;
				var a322 = m1.self._32;
				var a332 = m1.self._33;
				var b010 = m4.self._00;
				var b12 = m4.self._10;
				var b21 = m4.self._20;
				var b31 = m4.self._30;
				m1.self._00 = a002 * b010 + a012 * b12 + a022 * b21 + a032 * b31;
				m1.self._10 = a102 * b010 + a112 * b12 + a122 * b21 + a132 * b31;
				m1.self._20 = a202 * b010 + a212 * b12 + a222 * b21 + a232 * b31;
				m1.self._30 = a302 * b010 + a312 * b12 + a322 * b21 + a332 * b31;
				b010 = m4.self._01;
				b12 = m4.self._11;
				b21 = m4.self._21;
				b31 = m4.self._31;
				m1.self._01 = a002 * b010 + a012 * b12 + a022 * b21 + a032 * b31;
				m1.self._11 = a102 * b010 + a112 * b12 + a122 * b21 + a132 * b31;
				m1.self._21 = a202 * b010 + a212 * b12 + a222 * b21 + a232 * b31;
				m1.self._31 = a302 * b010 + a312 * b12 + a322 * b21 + a332 * b31;
				b010 = m4.self._02;
				b12 = m4.self._12;
				b21 = m4.self._22;
				b31 = m4.self._32;
				m1.self._02 = a002 * b010 + a012 * b12 + a022 * b21 + a032 * b31;
				m1.self._12 = a102 * b010 + a112 * b12 + a122 * b21 + a132 * b31;
				m1.self._22 = a202 * b010 + a212 * b12 + a222 * b21 + a232 * b31;
				m1.self._32 = a302 * b010 + a312 * b12 + a322 * b21 + a332 * b31;
				b010 = m4.self._03;
				b12 = m4.self._13;
				b21 = m4.self._23;
				b31 = m4.self._33;
				m1.self._03 = a002 * b010 + a012 * b12 + a022 * b21 + a032 * b31;
				m1.self._13 = a102 * b010 + a112 * b12 + a122 * b21 + a132 * b31;
				m1.self._23 = a202 * b010 + a212 * b12 + a222 * b21 + a232 * b31;
				m1.self._33 = a302 * b010 + a312 * b12 + a322 * b21 + a332 * b31;
				var _this = iron_object_BoneAnimation.m1;
				var m5 = this.object.parent.transform.world;
				var a003 = m5.self._00;
				var a013 = m5.self._01;
				var a023 = m5.self._02;
				var a033 = m5.self._03;
				var a103 = m5.self._10;
				var a113 = m5.self._11;
				var a123 = m5.self._12;
				var a133 = m5.self._13;
				var a203 = m5.self._20;
				var a213 = m5.self._21;
				var a223 = m5.self._22;
				var a233 = m5.self._23;
				var a303 = m5.self._30;
				var a313 = m5.self._31;
				var a323 = m5.self._32;
				var a333 = m5.self._33;
				var b001 = a003 * a113 - a013 * a103;
				var b011 = a003 * a123 - a023 * a103;
				var b021 = a003 * a133 - a033 * a103;
				var b031 = a013 * a123 - a023 * a113;
				var b041 = a013 * a133 - a033 * a113;
				var b051 = a023 * a133 - a033 * a123;
				var b061 = a203 * a313 - a213 * a303;
				var b071 = a203 * a323 - a223 * a303;
				var b081 = a203 * a333 - a233 * a303;
				var b091 = a213 * a323 - a223 * a313;
				var b101 = a213 * a333 - a233 * a313;
				var b111 = a223 * a333 - a233 * a323;
				var det1 = b001 * b111 - b011 * b101 + b021 * b091 + b031 * b081 - b041 * b071 + b051 * b061;
				if(det1 == 0.0) {
					_this.self._00 = 1.0;
					_this.self._01 = 0.0;
					_this.self._02 = 0.0;
					_this.self._03 = 0.0;
					_this.self._10 = 0.0;
					_this.self._11 = 1.0;
					_this.self._12 = 0.0;
					_this.self._13 = 0.0;
					_this.self._20 = 0.0;
					_this.self._21 = 0.0;
					_this.self._22 = 1.0;
					_this.self._23 = 0.0;
					_this.self._30 = 0.0;
					_this.self._31 = 0.0;
					_this.self._32 = 0.0;
					_this.self._33 = 1.0;
				} else {
					det1 = 1.0 / det1;
					_this.self._00 = (a113 * b111 - a123 * b101 + a133 * b091) * det1;
					_this.self._01 = (a023 * b101 - a013 * b111 - a033 * b091) * det1;
					_this.self._02 = (a313 * b051 - a323 * b041 + a333 * b031) * det1;
					_this.self._03 = (a223 * b041 - a213 * b051 - a233 * b031) * det1;
					_this.self._10 = (a123 * b081 - a103 * b111 - a133 * b071) * det1;
					_this.self._11 = (a003 * b111 - a023 * b081 + a033 * b071) * det1;
					_this.self._12 = (a323 * b021 - a303 * b051 - a333 * b011) * det1;
					_this.self._13 = (a203 * b051 - a223 * b021 + a233 * b011) * det1;
					_this.self._20 = (a103 * b101 - a113 * b081 + a133 * b061) * det1;
					_this.self._21 = (a013 * b081 - a003 * b101 - a033 * b061) * det1;
					_this.self._22 = (a303 * b041 - a313 * b021 + a333 * b001) * det1;
					_this.self._23 = (a213 * b021 - a203 * b041 - a233 * b001) * det1;
					_this.self._30 = (a113 * b071 - a103 * b091 - a123 * b061) * det1;
					_this.self._31 = (a003 * b091 - a013 * b071 + a023 * b061) * det1;
					_this.self._32 = (a313 * b011 - a303 * b031 - a323 * b001) * det1;
					_this.self._33 = (a203 * b031 - a213 * b011 + a223 * b001) * det1;
				}
				var m6 = iron_object_BoneAnimation.m1;
				var a004 = m1.self._00;
				var a014 = m1.self._01;
				var a024 = m1.self._02;
				var a034 = m1.self._03;
				var a104 = m1.self._10;
				var a114 = m1.self._11;
				var a124 = m1.self._12;
				var a134 = m1.self._13;
				var a204 = m1.self._20;
				var a214 = m1.self._21;
				var a224 = m1.self._22;
				var a234 = m1.self._23;
				var a304 = m1.self._30;
				var a314 = m1.self._31;
				var a324 = m1.self._32;
				var a334 = m1.self._33;
				var b012 = m6.self._00;
				var b13 = m6.self._10;
				var b22 = m6.self._20;
				var b32 = m6.self._30;
				m1.self._00 = a004 * b012 + a014 * b13 + a024 * b22 + a034 * b32;
				m1.self._10 = a104 * b012 + a114 * b13 + a124 * b22 + a134 * b32;
				m1.self._20 = a204 * b012 + a214 * b13 + a224 * b22 + a234 * b32;
				m1.self._30 = a304 * b012 + a314 * b13 + a324 * b22 + a334 * b32;
				b012 = m6.self._01;
				b13 = m6.self._11;
				b22 = m6.self._21;
				b32 = m6.self._31;
				m1.self._01 = a004 * b012 + a014 * b13 + a024 * b22 + a034 * b32;
				m1.self._11 = a104 * b012 + a114 * b13 + a124 * b22 + a134 * b32;
				m1.self._21 = a204 * b012 + a214 * b13 + a224 * b22 + a234 * b32;
				m1.self._31 = a304 * b012 + a314 * b13 + a324 * b22 + a334 * b32;
				b012 = m6.self._02;
				b13 = m6.self._12;
				b22 = m6.self._22;
				b32 = m6.self._32;
				m1.self._02 = a004 * b012 + a014 * b13 + a024 * b22 + a034 * b32;
				m1.self._12 = a104 * b012 + a114 * b13 + a124 * b22 + a134 * b32;
				m1.self._22 = a204 * b012 + a214 * b13 + a224 * b22 + a234 * b32;
				m1.self._32 = a304 * b012 + a314 * b13 + a324 * b22 + a334 * b32;
				b012 = m6.self._03;
				b13 = m6.self._13;
				b22 = m6.self._23;
				b32 = m6.self._33;
				m1.self._03 = a004 * b012 + a014 * b13 + a024 * b22 + a034 * b32;
				m1.self._13 = a104 * b012 + a114 * b13 + a124 * b22 + a134 * b32;
				m1.self._23 = a204 * b012 + a214 * b13 + a224 * b22 + a234 * b32;
				m1.self._33 = a304 * b012 + a314 * b13 + a324 * b22 + a334 * b32;
			}
		}
	}
	,onUpdates: null
	,notifyOnUpdate: function(f) {
		if(this.onUpdates == null) {
			this.onUpdates = [];
		}
		this.onUpdates.push(f);
	}
	,removeUpdate: function(f) {
		HxOverrides.remove(this.onUpdates,f);
	}
	,updateBonesOnly: function() {
		if(this.boneChildren != null) {
			var _g = 0;
			var _g1 = this.skeletonBones.length;
			while(_g < _g1) {
				var i = _g++;
				var b = this.skeletonBones[i];
				var _this = iron_object_BoneAnimation.m;
				var m = this.matsFast[i];
				_this.self._00 = m.self._00;
				_this.self._01 = m.self._01;
				_this.self._02 = m.self._02;
				_this.self._03 = m.self._03;
				_this.self._10 = m.self._10;
				_this.self._11 = m.self._11;
				_this.self._12 = m.self._12;
				_this.self._13 = m.self._13;
				_this.self._20 = m.self._20;
				_this.self._21 = m.self._21;
				_this.self._22 = m.self._22;
				_this.self._23 = m.self._23;
				_this.self._30 = m.self._30;
				_this.self._31 = m.self._31;
				_this.self._32 = m.self._32;
				_this.self._33 = m.self._33;
				this.updateBoneChildren(b,iron_object_BoneAnimation.m);
			}
		}
	}
	,updateSkinGpu: function() {
		var bones = this.skeletonBones;
		var s = this.blendCurrent / this.blendTime;
		s = s * s * (3.0 - 2.0 * s);
		if(this.blendFactor != 0.0) {
			s = 1.0 - this.blendFactor;
		}
		var _g = 0;
		var _g1 = bones.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.constraintMats != null) {
				var m = this.constraintMats.h[bones[i].__id__];
				if(m != null) {
					this.updateSkinBuffer(m,i);
					continue;
				}
			}
			var _this = iron_object_BoneAnimation.m;
			var m1 = this.matsFast[i];
			_this.self._00 = m1.self._00;
			_this.self._01 = m1.self._01;
			_this.self._02 = m1.self._02;
			_this.self._03 = m1.self._03;
			_this.self._10 = m1.self._10;
			_this.self._11 = m1.self._11;
			_this.self._12 = m1.self._12;
			_this.self._13 = m1.self._13;
			_this.self._20 = m1.self._20;
			_this.self._21 = m1.self._21;
			_this.self._22 = m1.self._22;
			_this.self._23 = m1.self._23;
			_this.self._30 = m1.self._30;
			_this.self._31 = m1.self._31;
			_this.self._32 = m1.self._32;
			_this.self._33 = m1.self._33;
			if(this.blendTime > 0 && this.skeletonBonesBlend != null) {
				var _this1 = iron_object_BoneAnimation.m1;
				var m2 = this.matsFastBlend[i];
				_this1.self._00 = m2.self._00;
				_this1.self._01 = m2.self._01;
				_this1.self._02 = m2.self._02;
				_this1.self._03 = m2.self._03;
				_this1.self._10 = m2.self._10;
				_this1.self._11 = m2.self._11;
				_this1.self._12 = m2.self._12;
				_this1.self._13 = m2.self._13;
				_this1.self._20 = m2.self._20;
				_this1.self._21 = m2.self._21;
				_this1.self._22 = m2.self._22;
				_this1.self._23 = m2.self._23;
				_this1.self._30 = m2.self._30;
				_this1.self._31 = m2.self._31;
				_this1.self._32 = m2.self._32;
				_this1.self._33 = m2.self._33;
				var _this2 = iron_object_BoneAnimation.m1;
				var loc = iron_object_BoneAnimation.vpos;
				var quat = iron_object_BoneAnimation.q1;
				var scale = iron_object_BoneAnimation.vscl;
				loc.x = _this2.self._30;
				loc.y = _this2.self._31;
				loc.z = _this2.self._32;
				var _this3 = iron_math_Mat4.helpVec;
				_this3.x = _this2.self._00;
				_this3.y = _this2.self._01;
				_this3.z = _this2.self._02;
				_this3.w = 1.0;
				var _this11 = _this3;
				scale.x = Math.sqrt(_this11.x * _this11.x + _this11.y * _this11.y + _this11.z * _this11.z);
				var _this21 = iron_math_Mat4.helpVec;
				_this21.x = _this2.self._10;
				_this21.y = _this2.self._11;
				_this21.z = _this2.self._12;
				_this21.w = 1.0;
				var _this31 = _this21;
				scale.y = Math.sqrt(_this31.x * _this31.x + _this31.y * _this31.y + _this31.z * _this31.z);
				var _this4 = iron_math_Mat4.helpVec;
				_this4.x = _this2.self._20;
				_this4.y = _this2.self._21;
				_this4.z = _this2.self._22;
				_this4.w = 1.0;
				var _this5 = _this4;
				scale.z = Math.sqrt(_this5.x * _this5.x + _this5.y * _this5.y + _this5.z * _this5.z);
				var _this6 = _this2.self;
				var m3 = _this6._12;
				var m4 = _this6._22;
				var m5 = _this6._32;
				var m6 = _this6._13;
				var m7 = _this6._23;
				var m8 = _this6._33;
				var c00 = _this6._11 * (m4 * m8 - m5 * m7) - _this6._21 * (m3 * m8 - m5 * m6) + _this6._31 * (m3 * m7 - m4 * m6);
				var m31 = _this6._12;
				var m41 = _this6._22;
				var m51 = _this6._32;
				var m61 = _this6._13;
				var m71 = _this6._23;
				var m81 = _this6._33;
				var c01 = _this6._10 * (m41 * m81 - m51 * m71) - _this6._20 * (m31 * m81 - m51 * m61) + _this6._30 * (m31 * m71 - m41 * m61);
				var m32 = _this6._11;
				var m42 = _this6._21;
				var m52 = _this6._31;
				var m62 = _this6._13;
				var m72 = _this6._23;
				var m82 = _this6._33;
				var c02 = _this6._10 * (m42 * m82 - m52 * m72) - _this6._20 * (m32 * m82 - m52 * m62) + _this6._30 * (m32 * m72 - m42 * m62);
				var m33 = _this6._11;
				var m43 = _this6._21;
				var m53 = _this6._31;
				var m63 = _this6._12;
				var m73 = _this6._22;
				var m83 = _this6._32;
				var c03 = _this6._10 * (m43 * m83 - m53 * m73) - _this6._20 * (m33 * m83 - m53 * m63) + _this6._30 * (m33 * m73 - m43 * m63);
				if(_this6._00 * c00 - _this6._01 * c01 + _this6._02 * c02 - _this6._03 * c03 < 0.0) {
					scale.x = -scale.x;
				}
				var invs = 1.0 / scale.x;
				iron_math_Mat4.helpMat.self._00 = _this2.self._00 * invs;
				iron_math_Mat4.helpMat.self._01 = _this2.self._01 * invs;
				iron_math_Mat4.helpMat.self._02 = _this2.self._02 * invs;
				invs = 1.0 / scale.y;
				iron_math_Mat4.helpMat.self._10 = _this2.self._10 * invs;
				iron_math_Mat4.helpMat.self._11 = _this2.self._11 * invs;
				iron_math_Mat4.helpMat.self._12 = _this2.self._12 * invs;
				invs = 1.0 / scale.z;
				iron_math_Mat4.helpMat.self._20 = _this2.self._20 * invs;
				iron_math_Mat4.helpMat.self._21 = _this2.self._21 * invs;
				iron_math_Mat4.helpMat.self._22 = _this2.self._22 * invs;
				var m9 = iron_math_Mat4.helpMat;
				var m11 = m9.self._00;
				var m12 = m9.self._10;
				var m13 = m9.self._20;
				var m21 = m9.self._01;
				var m22 = m9.self._11;
				var m23 = m9.self._21;
				var m311 = m9.self._02;
				var m321 = m9.self._12;
				var m331 = m9.self._22;
				var tr = m11 + m22 + m331;
				var s1 = 0.0;
				if(tr > 0) {
					s1 = 0.5 / Math.sqrt(tr + 1.0);
					quat.w = 0.25 / s1;
					quat.x = (m321 - m23) * s1;
					quat.y = (m13 - m311) * s1;
					quat.z = (m21 - m12) * s1;
				} else if(m11 > m22 && m11 > m331) {
					s1 = 2.0 * Math.sqrt(1.0 + m11 - m22 - m331);
					quat.w = (m321 - m23) / s1;
					quat.x = 0.25 * s1;
					quat.y = (m12 + m21) / s1;
					quat.z = (m13 + m311) / s1;
				} else if(m22 > m331) {
					s1 = 2.0 * Math.sqrt(1.0 + m22 - m11 - m331);
					quat.w = (m13 - m311) / s1;
					quat.x = (m12 + m21) / s1;
					quat.y = 0.25 * s1;
					quat.z = (m23 + m321) / s1;
				} else {
					s1 = 2.0 * Math.sqrt(1.0 + m331 - m11 - m22);
					quat.w = (m21 - m12) / s1;
					quat.x = (m13 + m311) / s1;
					quat.y = (m23 + m321) / s1;
					quat.z = 0.25 * s1;
				}
				var _this7 = iron_object_BoneAnimation.m;
				var loc1 = iron_object_BoneAnimation.vpos2;
				var quat1 = iron_object_BoneAnimation.q2;
				var scale1 = iron_object_BoneAnimation.vscl2;
				loc1.x = _this7.self._30;
				loc1.y = _this7.self._31;
				loc1.z = _this7.self._32;
				var _this8 = iron_math_Mat4.helpVec;
				_this8.x = _this7.self._00;
				_this8.y = _this7.self._01;
				_this8.z = _this7.self._02;
				_this8.w = 1.0;
				var _this12 = _this8;
				scale1.x = Math.sqrt(_this12.x * _this12.x + _this12.y * _this12.y + _this12.z * _this12.z);
				var _this22 = iron_math_Mat4.helpVec;
				_this22.x = _this7.self._10;
				_this22.y = _this7.self._11;
				_this22.z = _this7.self._12;
				_this22.w = 1.0;
				var _this32 = _this22;
				scale1.y = Math.sqrt(_this32.x * _this32.x + _this32.y * _this32.y + _this32.z * _this32.z);
				var _this41 = iron_math_Mat4.helpVec;
				_this41.x = _this7.self._20;
				_this41.y = _this7.self._21;
				_this41.z = _this7.self._22;
				_this41.w = 1.0;
				var _this51 = _this41;
				scale1.z = Math.sqrt(_this51.x * _this51.x + _this51.y * _this51.y + _this51.z * _this51.z);
				var _this61 = _this7.self;
				var m34 = _this61._12;
				var m44 = _this61._22;
				var m54 = _this61._32;
				var m64 = _this61._13;
				var m74 = _this61._23;
				var m84 = _this61._33;
				var c001 = _this61._11 * (m44 * m84 - m54 * m74) - _this61._21 * (m34 * m84 - m54 * m64) + _this61._31 * (m34 * m74 - m44 * m64);
				var m312 = _this61._12;
				var m411 = _this61._22;
				var m511 = _this61._32;
				var m611 = _this61._13;
				var m711 = _this61._23;
				var m811 = _this61._33;
				var c011 = _this61._10 * (m411 * m811 - m511 * m711) - _this61._20 * (m312 * m811 - m511 * m611) + _this61._30 * (m312 * m711 - m411 * m611);
				var m322 = _this61._11;
				var m421 = _this61._21;
				var m521 = _this61._31;
				var m621 = _this61._13;
				var m721 = _this61._23;
				var m821 = _this61._33;
				var c021 = _this61._10 * (m421 * m821 - m521 * m721) - _this61._20 * (m322 * m821 - m521 * m621) + _this61._30 * (m322 * m721 - m421 * m621);
				var m332 = _this61._11;
				var m431 = _this61._21;
				var m531 = _this61._31;
				var m631 = _this61._12;
				var m731 = _this61._22;
				var m831 = _this61._32;
				var c031 = _this61._10 * (m431 * m831 - m531 * m731) - _this61._20 * (m332 * m831 - m531 * m631) + _this61._30 * (m332 * m731 - m431 * m631);
				if(_this61._00 * c001 - _this61._01 * c011 + _this61._02 * c021 - _this61._03 * c031 < 0.0) {
					scale1.x = -scale1.x;
				}
				var invs1 = 1.0 / scale1.x;
				iron_math_Mat4.helpMat.self._00 = _this7.self._00 * invs1;
				iron_math_Mat4.helpMat.self._01 = _this7.self._01 * invs1;
				iron_math_Mat4.helpMat.self._02 = _this7.self._02 * invs1;
				invs1 = 1.0 / scale1.y;
				iron_math_Mat4.helpMat.self._10 = _this7.self._10 * invs1;
				iron_math_Mat4.helpMat.self._11 = _this7.self._11 * invs1;
				iron_math_Mat4.helpMat.self._12 = _this7.self._12 * invs1;
				invs1 = 1.0 / scale1.z;
				iron_math_Mat4.helpMat.self._20 = _this7.self._20 * invs1;
				iron_math_Mat4.helpMat.self._21 = _this7.self._21 * invs1;
				iron_math_Mat4.helpMat.self._22 = _this7.self._22 * invs1;
				var m10 = iron_math_Mat4.helpMat;
				var m111 = m10.self._00;
				var m121 = m10.self._10;
				var m131 = m10.self._20;
				var m211 = m10.self._01;
				var m221 = m10.self._11;
				var m231 = m10.self._21;
				var m3111 = m10.self._02;
				var m3211 = m10.self._12;
				var m3311 = m10.self._22;
				var tr1 = m111 + m221 + m3311;
				var s2 = 0.0;
				if(tr1 > 0) {
					s2 = 0.5 / Math.sqrt(tr1 + 1.0);
					quat1.w = 0.25 / s2;
					quat1.x = (m3211 - m231) * s2;
					quat1.y = (m131 - m3111) * s2;
					quat1.z = (m211 - m121) * s2;
				} else if(m111 > m221 && m111 > m3311) {
					s2 = 2.0 * Math.sqrt(1.0 + m111 - m221 - m3311);
					quat1.w = (m3211 - m231) / s2;
					quat1.x = 0.25 * s2;
					quat1.y = (m121 + m211) / s2;
					quat1.z = (m131 + m3111) / s2;
				} else if(m221 > m3311) {
					s2 = 2.0 * Math.sqrt(1.0 + m221 - m111 - m3311);
					quat1.w = (m131 - m3111) / s2;
					quat1.x = (m121 + m211) / s2;
					quat1.y = 0.25 * s2;
					quat1.z = (m231 + m3211) / s2;
				} else {
					s2 = 2.0 * Math.sqrt(1.0 + m3311 - m111 - m221);
					quat1.w = (m211 - m121) / s2;
					quat1.x = (m131 + m3111) / s2;
					quat1.y = (m231 + m3211) / s2;
					quat1.z = 0.25 * s2;
				}
				var _this9 = iron_object_BoneAnimation.v1;
				var from = iron_object_BoneAnimation.vpos;
				var to = iron_object_BoneAnimation.vpos2;
				_this9.x = from.x + (to.x - from.x) * s;
				_this9.y = from.y + (to.y - from.y) * s;
				_this9.z = from.z + (to.z - from.z) * s;
				var _this10 = iron_object_BoneAnimation.v2;
				var from1 = iron_object_BoneAnimation.vscl;
				var to1 = iron_object_BoneAnimation.vscl2;
				_this10.x = from1.x + (to1.x - from1.x) * s;
				_this10.y = from1.y + (to1.y - from1.y) * s;
				_this10.z = from1.z + (to1.z - from1.z) * s;
				var _this13 = iron_object_BoneAnimation.q3;
				var from2 = iron_object_BoneAnimation.q1;
				var to2 = iron_object_BoneAnimation.q2;
				var fromx = from2.x;
				var fromy = from2.y;
				var fromz = from2.z;
				var fromw = from2.w;
				var dot = from2.x * to2.x + from2.y * to2.y + from2.z * to2.z + from2.w * to2.w;
				if(dot < 0.0) {
					fromx = -fromx;
					fromy = -fromy;
					fromz = -fromz;
					fromw = -fromw;
				}
				_this13.x = fromx + (to2.x - fromx) * s;
				_this13.y = fromy + (to2.y - fromy) * s;
				_this13.z = fromz + (to2.z - fromz) * s;
				_this13.w = fromw + (to2.w - fromw) * s;
				var l = Math.sqrt(_this13.x * _this13.x + _this13.y * _this13.y + _this13.z * _this13.z + _this13.w * _this13.w);
				if(l == 0.0) {
					_this13.x = 0;
					_this13.y = 0;
					_this13.z = 0;
					_this13.w = 0;
				} else {
					l = 1.0 / l;
					_this13.x *= l;
					_this13.y *= l;
					_this13.z *= l;
					_this13.w *= l;
				}
				var _this14 = iron_object_BoneAnimation.m;
				var q = iron_object_BoneAnimation.q3;
				var x = q.x;
				var y = q.y;
				var z = q.z;
				var w = q.w;
				var x2 = x + x;
				var y2 = y + y;
				var z2 = z + z;
				var xx = x * x2;
				var xy = x * y2;
				var xz = x * z2;
				var yy = y * y2;
				var yz = y * z2;
				var zz = z * z2;
				var wx = w * x2;
				var wy = w * y2;
				var wz = w * z2;
				_this14.self._00 = 1.0 - (yy + zz);
				_this14.self._10 = xy - wz;
				_this14.self._20 = xz + wy;
				_this14.self._01 = xy + wz;
				_this14.self._11 = 1.0 - (xx + zz);
				_this14.self._21 = yz - wx;
				_this14.self._02 = xz - wy;
				_this14.self._12 = yz + wx;
				_this14.self._22 = 1.0 - (xx + yy);
				_this14.self._03 = 0.0;
				_this14.self._13 = 0.0;
				_this14.self._23 = 0.0;
				_this14.self._30 = 0.0;
				_this14.self._31 = 0.0;
				_this14.self._32 = 0.0;
				_this14.self._33 = 1.0;
				var _this15 = iron_object_BoneAnimation.m;
				var v = iron_object_BoneAnimation.v2;
				var x1 = v.x;
				var y1 = v.y;
				var z1 = v.z;
				_this15.self._00 *= x1;
				_this15.self._01 *= x1;
				_this15.self._02 *= x1;
				_this15.self._03 *= x1;
				_this15.self._10 *= y1;
				_this15.self._11 *= y1;
				_this15.self._12 *= y1;
				_this15.self._13 *= y1;
				_this15.self._20 *= z1;
				_this15.self._21 *= z1;
				_this15.self._22 *= z1;
				_this15.self._23 *= z1;
				iron_object_BoneAnimation.m.self._30 = iron_object_BoneAnimation.v1.x;
				iron_object_BoneAnimation.m.self._31 = iron_object_BoneAnimation.v1.y;
				iron_object_BoneAnimation.m.self._32 = iron_object_BoneAnimation.v1.z;
			}
			if(this.absMats != null && i < this.absMats.length) {
				var _this16 = this.absMats[i];
				var m14 = iron_object_BoneAnimation.m;
				_this16.self._00 = m14.self._00;
				_this16.self._01 = m14.self._01;
				_this16.self._02 = m14.self._02;
				_this16.self._03 = m14.self._03;
				_this16.self._10 = m14.self._10;
				_this16.self._11 = m14.self._11;
				_this16.self._12 = m14.self._12;
				_this16.self._13 = m14.self._13;
				_this16.self._20 = m14.self._20;
				_this16.self._21 = m14.self._21;
				_this16.self._22 = m14.self._22;
				_this16.self._23 = m14.self._23;
				_this16.self._30 = m14.self._30;
				_this16.self._31 = m14.self._31;
				_this16.self._32 = m14.self._32;
				_this16.self._33 = m14.self._33;
			}
			if(this.boneChildren != null) {
				this.updateBoneChildren(bones[i],iron_object_BoneAnimation.m);
			}
			var _this17 = iron_object_BoneAnimation.m;
			var b = iron_object_BoneAnimation.m;
			var a = this.data.geom.skeletonTransformsI[i];
			var a00 = a.self._00;
			var a01 = a.self._01;
			var a02 = a.self._02;
			var a03 = a.self._03;
			var a10 = a.self._10;
			var a11 = a.self._11;
			var a12 = a.self._12;
			var a13 = a.self._13;
			var a20 = a.self._20;
			var a21 = a.self._21;
			var a22 = a.self._22;
			var a23 = a.self._23;
			var a30 = a.self._30;
			var a31 = a.self._31;
			var a32 = a.self._32;
			var a33 = a.self._33;
			var b0 = b.self._00;
			var b1 = b.self._10;
			var b2 = b.self._20;
			var b3 = b.self._30;
			_this17.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			_this17.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			_this17.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			_this17.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			b0 = b.self._01;
			b1 = b.self._11;
			b2 = b.self._21;
			b3 = b.self._31;
			_this17.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			_this17.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			_this17.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			_this17.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			b0 = b.self._02;
			b1 = b.self._12;
			b2 = b.self._22;
			b3 = b.self._32;
			_this17.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			_this17.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			_this17.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			_this17.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			b0 = b.self._03;
			b1 = b.self._13;
			b2 = b.self._23;
			b3 = b.self._33;
			_this17.self._03 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			_this17.self._13 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			_this17.self._23 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			_this17.self._33 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			this.updateSkinBuffer(iron_object_BoneAnimation.m,i);
		}
	}
	,updateSkinBuffer: function(m,i) {
		var loc = iron_object_BoneAnimation.vpos;
		var quat = iron_object_BoneAnimation.q1;
		var scale = iron_object_BoneAnimation.vscl;
		loc.x = m.self._30;
		loc.y = m.self._31;
		loc.z = m.self._32;
		var _this = iron_math_Mat4.helpVec;
		_this.x = m.self._00;
		_this.y = m.self._01;
		_this.z = m.self._02;
		_this.w = 1.0;
		var _this1 = _this;
		scale.x = Math.sqrt(_this1.x * _this1.x + _this1.y * _this1.y + _this1.z * _this1.z);
		var _this2 = iron_math_Mat4.helpVec;
		_this2.x = m.self._10;
		_this2.y = m.self._11;
		_this2.z = m.self._12;
		_this2.w = 1.0;
		var _this3 = _this2;
		scale.y = Math.sqrt(_this3.x * _this3.x + _this3.y * _this3.y + _this3.z * _this3.z);
		var _this4 = iron_math_Mat4.helpVec;
		_this4.x = m.self._20;
		_this4.y = m.self._21;
		_this4.z = m.self._22;
		_this4.w = 1.0;
		var _this5 = _this4;
		scale.z = Math.sqrt(_this5.x * _this5.x + _this5.y * _this5.y + _this5.z * _this5.z);
		var _this6 = m.self;
		var m3 = _this6._12;
		var m4 = _this6._22;
		var m5 = _this6._32;
		var m6 = _this6._13;
		var m7 = _this6._23;
		var m8 = _this6._33;
		var c00 = _this6._11 * (m4 * m8 - m5 * m7) - _this6._21 * (m3 * m8 - m5 * m6) + _this6._31 * (m3 * m7 - m4 * m6);
		var m31 = _this6._12;
		var m41 = _this6._22;
		var m51 = _this6._32;
		var m61 = _this6._13;
		var m71 = _this6._23;
		var m81 = _this6._33;
		var c01 = _this6._10 * (m41 * m81 - m51 * m71) - _this6._20 * (m31 * m81 - m51 * m61) + _this6._30 * (m31 * m71 - m41 * m61);
		var m32 = _this6._11;
		var m42 = _this6._21;
		var m52 = _this6._31;
		var m62 = _this6._13;
		var m72 = _this6._23;
		var m82 = _this6._33;
		var c02 = _this6._10 * (m42 * m82 - m52 * m72) - _this6._20 * (m32 * m82 - m52 * m62) + _this6._30 * (m32 * m72 - m42 * m62);
		var m33 = _this6._11;
		var m43 = _this6._21;
		var m53 = _this6._31;
		var m63 = _this6._12;
		var m73 = _this6._22;
		var m83 = _this6._32;
		var c03 = _this6._10 * (m43 * m83 - m53 * m73) - _this6._20 * (m33 * m83 - m53 * m63) + _this6._30 * (m33 * m73 - m43 * m63);
		if(_this6._00 * c00 - _this6._01 * c01 + _this6._02 * c02 - _this6._03 * c03 < 0.0) {
			scale.x = -scale.x;
		}
		var invs = 1.0 / scale.x;
		iron_math_Mat4.helpMat.self._00 = m.self._00 * invs;
		iron_math_Mat4.helpMat.self._01 = m.self._01 * invs;
		iron_math_Mat4.helpMat.self._02 = m.self._02 * invs;
		invs = 1.0 / scale.y;
		iron_math_Mat4.helpMat.self._10 = m.self._10 * invs;
		iron_math_Mat4.helpMat.self._11 = m.self._11 * invs;
		iron_math_Mat4.helpMat.self._12 = m.self._12 * invs;
		invs = 1.0 / scale.z;
		iron_math_Mat4.helpMat.self._20 = m.self._20 * invs;
		iron_math_Mat4.helpMat.self._21 = m.self._21 * invs;
		iron_math_Mat4.helpMat.self._22 = m.self._22 * invs;
		var m1 = iron_math_Mat4.helpMat;
		var m11 = m1.self._00;
		var m12 = m1.self._10;
		var m13 = m1.self._20;
		var m21 = m1.self._01;
		var m22 = m1.self._11;
		var m23 = m1.self._21;
		var m311 = m1.self._02;
		var m321 = m1.self._12;
		var m331 = m1.self._22;
		var tr = m11 + m22 + m331;
		var s = 0.0;
		if(tr > 0) {
			s = 0.5 / Math.sqrt(tr + 1.0);
			quat.w = 0.25 / s;
			quat.x = (m321 - m23) * s;
			quat.y = (m13 - m311) * s;
			quat.z = (m21 - m12) * s;
		} else if(m11 > m22 && m11 > m331) {
			s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m331);
			quat.w = (m321 - m23) / s;
			quat.x = 0.25 * s;
			quat.y = (m12 + m21) / s;
			quat.z = (m13 + m311) / s;
		} else if(m22 > m331) {
			s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m331);
			quat.w = (m13 - m311) / s;
			quat.x = (m12 + m21) / s;
			quat.y = 0.25 * s;
			quat.z = (m23 + m321) / s;
		} else {
			s = 2.0 * Math.sqrt(1.0 + m331 - m11 - m22);
			quat.w = (m21 - m12) / s;
			quat.x = (m13 + m311) / s;
			quat.y = (m23 + m321) / s;
			quat.z = 0.25 * s;
		}
		var _this7 = iron_object_BoneAnimation.q1;
		var l = Math.sqrt(_this7.x * _this7.x + _this7.y * _this7.y + _this7.z * _this7.z + _this7.w * _this7.w);
		if(l == 0.0) {
			_this7.x = 0;
			_this7.y = 0;
			_this7.z = 0;
			_this7.w = 0;
		} else {
			l = 1.0 / l;
			_this7.x *= l;
			_this7.y *= l;
			_this7.z *= l;
			_this7.w *= l;
		}
		var _this8 = iron_object_BoneAnimation.q2;
		_this8.x = iron_object_BoneAnimation.vpos.x;
		_this8.y = iron_object_BoneAnimation.vpos.y;
		_this8.z = iron_object_BoneAnimation.vpos.z;
		_this8.w = 0.0;
		var _this9 = iron_object_BoneAnimation.q2;
		var q1 = iron_object_BoneAnimation.q2;
		var q2 = iron_object_BoneAnimation.q1;
		var q1x = q1.x;
		var q1y = q1.y;
		var q1z = q1.z;
		var q1w = q1.w;
		var q2x = q2.x;
		var q2y = q2.y;
		var q2z = q2.z;
		var q2w = q2.w;
		_this9.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;
		_this9.y = q1w * q2y - q1x * q2z + q1y * q2w + q1z * q2x;
		_this9.z = q1w * q2z + q1x * q2y - q1y * q2x + q1z * q2w;
		_this9.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;
		this.skinBuffer[i * 8] = iron_object_BoneAnimation.q1.x;
		this.skinBuffer[i * 8 + 1] = iron_object_BoneAnimation.q1.y;
		this.skinBuffer[i * 8 + 2] = iron_object_BoneAnimation.q1.z;
		this.skinBuffer[i * 8 + 3] = iron_object_BoneAnimation.q1.w;
		this.skinBuffer[i * 8 + 4] = iron_object_BoneAnimation.q2.x * 0.5;
		this.skinBuffer[i * 8 + 5] = iron_object_BoneAnimation.q2.y * 0.5;
		this.skinBuffer[i * 8 + 6] = iron_object_BoneAnimation.q2.z * 0.5;
		this.skinBuffer[i * 8 + 7] = iron_object_BoneAnimation.q2.w * 0.5;
	}
	,totalFrames: function() {
		if(this.skeletonBones == null) {
			return 0;
		}
		var track = this.skeletonBones[0].anim.tracks[0];
		return track.frames[track.frames.length - 1] - track.frames[0] | 0;
	}
	,getBone: function(name) {
		if(this.skeletonBones == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.skeletonBones;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.name == name) {
				return b;
			}
		}
		return null;
	}
	,getBoneIndex: function(bone,bones) {
		if(bones == null) {
			bones = this.skeletonBones;
		}
		if(bones != null) {
			var _g = 0;
			var _g1 = bones.length;
			while(_g < _g1) {
				var i = _g++;
				if(bones[i] == bone) {
					return i;
				}
			}
		}
		return -1;
	}
	,getBoneMat: function(bone) {
		if(this.skeletonMats != null) {
			return this.skeletonMats[this.getBoneIndex(bone)];
		} else {
			return null;
		}
	}
	,getBoneMatBlend: function(bone) {
		if(this.skeletonMatsBlend != null) {
			return this.skeletonMatsBlend[this.getBoneIndex(bone)];
		} else {
			return null;
		}
	}
	,getAbsMat: function(bone) {
		if(this.skeletonMats == null) {
			return null;
		}
		if(this.absMats == null) {
			this.absMats = [];
			while(this.absMats.length < this.skeletonMats.length) this.absMats.push(new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0));
		}
		return this.absMats[this.getBoneIndex(bone)];
	}
	,getWorldMat: function(bone) {
		if(this.skeletonMats == null) {
			return null;
		}
		if(this.applyParent == null) {
			this.applyParent = [];
			var _g = 0;
			var _g1 = this.skeletonMats;
			while(_g < _g1.length) {
				var m = _g1[_g];
				++_g;
				this.applyParent.push(true);
			}
		}
		var i = this.getBoneIndex(bone);
		var _this = iron_object_BoneAnimation.wm;
		var m1 = this.skeletonMats[i];
		_this.self._00 = m1.self._00;
		_this.self._01 = m1.self._01;
		_this.self._02 = m1.self._02;
		_this.self._03 = m1.self._03;
		_this.self._10 = m1.self._10;
		_this.self._11 = m1.self._11;
		_this.self._12 = m1.self._12;
		_this.self._13 = m1.self._13;
		_this.self._20 = m1.self._20;
		_this.self._21 = m1.self._21;
		_this.self._22 = m1.self._22;
		_this.self._23 = m1.self._23;
		_this.self._30 = m1.self._30;
		_this.self._31 = m1.self._31;
		_this.self._32 = m1.self._32;
		_this.self._33 = m1.self._33;
		this.multParents(iron_object_BoneAnimation.wm,i,this.skeletonBones,this.skeletonMats);
		return iron_object_BoneAnimation.wm;
	}
	,getBoneLen: function(bone) {
		var refs = this.data.geom.skeletonBoneRefs;
		var lens = this.data.geom.skeletonBoneLens;
		var _g = 0;
		var _g1 = refs.length;
		while(_g < _g1) {
			var i = _g++;
			if(refs[i] == bone.name) {
				return lens[i];
			}
		}
		return 0.0;
	}
	,solveIK: function(effector,goal,precission,maxIterations) {
		if(maxIterations == null) {
			maxIterations = 6;
		}
		if(precission == null) {
			precission = 0.1;
		}
		var bones = [];
		var lengths = [];
		var start = effector;
		while(start.parent != null) {
			bones.push(start);
			lengths.push(this.getBoneLen(start));
			start = start.parent;
		}
		start = bones[bones.length - 1];
		var armsc = this.object.parent.transform.scale;
		goal.x *= 1 / armsc.x;
		goal.y *= 1 / armsc.y;
		goal.z *= 1 / armsc.z;
		var _this = this.getWorldMat(start);
		var x = _this.self._30;
		var y = _this.self._31;
		var z = _this.self._32;
		var w = _this.self._33;
		if(w == null) {
			w = 1.0;
		}
		if(z == null) {
			z = 0.0;
		}
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		var startLoc_x = x;
		var startLoc_y = y;
		var startLoc_z = z;
		var startLoc_w = w;
		startLoc_z -= this.getBoneLen(start.parent);
		var vx = goal.x - startLoc_x;
		var vy = goal.y - startLoc_y;
		var vz = goal.z - startLoc_z;
		var dist = Math.sqrt(vx * vx + vy * vy + vz * vz);
		var x1 = 0.0;
		var _g = 0;
		while(_g < lengths.length) {
			var l = lengths[_g];
			++_g;
			x1 += l;
		}
		var _this1 = iron_object_BoneAnimation.v1;
		_this1.x = 0;
		_this1.y = 1;
		_this1.z = 0;
		_this1.w = 1.0;
		if(dist > x1) {
			var m = this.getBoneMat(start);
			var w1 = this.getWorldMat(start);
			var iw = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
			var a00 = w1.self._00;
			var a01 = w1.self._01;
			var a02 = w1.self._02;
			var a03 = w1.self._03;
			var a10 = w1.self._10;
			var a11 = w1.self._11;
			var a12 = w1.self._12;
			var a13 = w1.self._13;
			var a20 = w1.self._20;
			var a21 = w1.self._21;
			var a22 = w1.self._22;
			var a23 = w1.self._23;
			var a30 = w1.self._30;
			var a31 = w1.self._31;
			var a32 = w1.self._32;
			var a33 = w1.self._33;
			var b00 = a00 * a11 - a01 * a10;
			var b01 = a00 * a12 - a02 * a10;
			var b02 = a00 * a13 - a03 * a10;
			var b03 = a01 * a12 - a02 * a11;
			var b04 = a01 * a13 - a03 * a11;
			var b05 = a02 * a13 - a03 * a12;
			var b06 = a20 * a31 - a21 * a30;
			var b07 = a20 * a32 - a22 * a30;
			var b08 = a20 * a33 - a23 * a30;
			var b09 = a21 * a32 - a22 * a31;
			var b10 = a21 * a33 - a23 * a31;
			var b11 = a22 * a33 - a23 * a32;
			var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
			if(det == 0.0) {
				iw.self._00 = 1.0;
				iw.self._01 = 0.0;
				iw.self._02 = 0.0;
				iw.self._03 = 0.0;
				iw.self._10 = 0.0;
				iw.self._11 = 1.0;
				iw.self._12 = 0.0;
				iw.self._13 = 0.0;
				iw.self._20 = 0.0;
				iw.self._21 = 0.0;
				iw.self._22 = 1.0;
				iw.self._23 = 0.0;
				iw.self._30 = 0.0;
				iw.self._31 = 0.0;
				iw.self._32 = 0.0;
				iw.self._33 = 1.0;
			} else {
				det = 1.0 / det;
				iw.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
				iw.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
				iw.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
				iw.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
				iw.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
				iw.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
				iw.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
				iw.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
				iw.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
				iw.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
				iw.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
				iw.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
				iw.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
				iw.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
				iw.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
				iw.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
			}
			m.self._00 = w1.self._00;
			m.self._01 = w1.self._01;
			m.self._02 = w1.self._02;
			m.self._03 = w1.self._03;
			m.self._10 = w1.self._10;
			m.self._11 = w1.self._11;
			m.self._12 = w1.self._12;
			m.self._13 = w1.self._13;
			m.self._20 = w1.self._20;
			m.self._21 = w1.self._21;
			m.self._22 = w1.self._22;
			m.self._23 = w1.self._23;
			m.self._30 = w1.self._30;
			m.self._31 = w1.self._31;
			m.self._32 = w1.self._32;
			m.self._33 = w1.self._33;
			var loc = iron_object_BoneAnimation.vpos;
			var quat = iron_object_BoneAnimation.q1;
			var scale = iron_object_BoneAnimation.vscl;
			loc.x = m.self._30;
			loc.y = m.self._31;
			loc.z = m.self._32;
			var _this2 = iron_math_Mat4.helpVec;
			_this2.x = m.self._00;
			_this2.y = m.self._01;
			_this2.z = m.self._02;
			_this2.w = 1.0;
			var _this11 = _this2;
			scale.x = Math.sqrt(_this11.x * _this11.x + _this11.y * _this11.y + _this11.z * _this11.z);
			var _this21 = iron_math_Mat4.helpVec;
			_this21.x = m.self._10;
			_this21.y = m.self._11;
			_this21.z = m.self._12;
			_this21.w = 1.0;
			var _this3 = _this21;
			scale.y = Math.sqrt(_this3.x * _this3.x + _this3.y * _this3.y + _this3.z * _this3.z);
			var _this4 = iron_math_Mat4.helpVec;
			_this4.x = m.self._20;
			_this4.y = m.self._21;
			_this4.z = m.self._22;
			_this4.w = 1.0;
			var _this5 = _this4;
			scale.z = Math.sqrt(_this5.x * _this5.x + _this5.y * _this5.y + _this5.z * _this5.z);
			var _this6 = m.self;
			var m3 = _this6._12;
			var m4 = _this6._22;
			var m5 = _this6._32;
			var m6 = _this6._13;
			var m7 = _this6._23;
			var m8 = _this6._33;
			var c00 = _this6._11 * (m4 * m8 - m5 * m7) - _this6._21 * (m3 * m8 - m5 * m6) + _this6._31 * (m3 * m7 - m4 * m6);
			var m31 = _this6._12;
			var m41 = _this6._22;
			var m51 = _this6._32;
			var m61 = _this6._13;
			var m71 = _this6._23;
			var m81 = _this6._33;
			var c01 = _this6._10 * (m41 * m81 - m51 * m71) - _this6._20 * (m31 * m81 - m51 * m61) + _this6._30 * (m31 * m71 - m41 * m61);
			var m32 = _this6._11;
			var m42 = _this6._21;
			var m52 = _this6._31;
			var m62 = _this6._13;
			var m72 = _this6._23;
			var m82 = _this6._33;
			var c02 = _this6._10 * (m42 * m82 - m52 * m72) - _this6._20 * (m32 * m82 - m52 * m62) + _this6._30 * (m32 * m72 - m42 * m62);
			var m33 = _this6._11;
			var m43 = _this6._21;
			var m53 = _this6._31;
			var m63 = _this6._12;
			var m73 = _this6._22;
			var m83 = _this6._32;
			var c03 = _this6._10 * (m43 * m83 - m53 * m73) - _this6._20 * (m33 * m83 - m53 * m63) + _this6._30 * (m33 * m73 - m43 * m63);
			if(_this6._00 * c00 - _this6._01 * c01 + _this6._02 * c02 - _this6._03 * c03 < 0.0) {
				scale.x = -scale.x;
			}
			var invs = 1.0 / scale.x;
			iron_math_Mat4.helpMat.self._00 = m.self._00 * invs;
			iron_math_Mat4.helpMat.self._01 = m.self._01 * invs;
			iron_math_Mat4.helpMat.self._02 = m.self._02 * invs;
			invs = 1.0 / scale.y;
			iron_math_Mat4.helpMat.self._10 = m.self._10 * invs;
			iron_math_Mat4.helpMat.self._11 = m.self._11 * invs;
			iron_math_Mat4.helpMat.self._12 = m.self._12 * invs;
			invs = 1.0 / scale.z;
			iron_math_Mat4.helpMat.self._20 = m.self._20 * invs;
			iron_math_Mat4.helpMat.self._21 = m.self._21 * invs;
			iron_math_Mat4.helpMat.self._22 = m.self._22 * invs;
			var m1 = iron_math_Mat4.helpMat;
			var m11 = m1.self._00;
			var m12 = m1.self._10;
			var m13 = m1.self._20;
			var m21 = m1.self._01;
			var m22 = m1.self._11;
			var m23 = m1.self._21;
			var m311 = m1.self._02;
			var m321 = m1.self._12;
			var m331 = m1.self._22;
			var tr = m11 + m22 + m331;
			var s = 0.0;
			if(tr > 0) {
				s = 0.5 / Math.sqrt(tr + 1.0);
				quat.w = 0.25 / s;
				quat.x = (m321 - m23) * s;
				quat.y = (m13 - m311) * s;
				quat.z = (m21 - m12) * s;
			} else if(m11 > m22 && m11 > m331) {
				s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m331);
				quat.w = (m321 - m23) / s;
				quat.x = 0.25 * s;
				quat.y = (m12 + m21) / s;
				quat.z = (m13 + m311) / s;
			} else if(m22 > m331) {
				s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m331);
				quat.w = (m13 - m311) / s;
				quat.x = (m12 + m21) / s;
				quat.y = 0.25 * s;
				quat.z = (m23 + m321) / s;
			} else {
				s = 2.0 * Math.sqrt(1.0 + m331 - m11 - m22);
				quat.w = (m21 - m12) / s;
				quat.x = (m13 + m311) / s;
				quat.y = (m23 + m321) / s;
				quat.z = 0.25 * s;
			}
			var _this7 = iron_object_BoneAnimation.v2;
			_this7.x = goal.x;
			_this7.y = goal.y;
			_this7.z = goal.z;
			_this7.w = goal.w;
			var _this8 = _this7;
			_this8.x -= startLoc_x;
			_this8.y -= startLoc_y;
			_this8.z -= startLoc_z;
			var _this9 = _this8;
			var n = Math.sqrt(_this9.x * _this9.x + _this9.y * _this9.y + _this9.z * _this9.z);
			if(n > 0.0) {
				var invN = 1.0 / n;
				_this9.x *= invN;
				_this9.y *= invN;
				_this9.z *= invN;
			}
			var _this10 = iron_object_BoneAnimation.q1;
			var v1 = iron_object_BoneAnimation.v1;
			var v2 = iron_object_BoneAnimation.v2;
			var a = iron_math_Quat.helpVec0;
			var dot = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
			if(dot < -0.999999) {
				var a1 = iron_math_Quat.xAxis;
				var ax = a1.x;
				var ay = a1.y;
				var az = a1.z;
				var bx = v1.x;
				var by = v1.y;
				var bz = v1.z;
				a.x = ay * bz - az * by;
				a.y = az * bx - ax * bz;
				a.z = ax * by - ay * bx;
				if(Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z) < 0.000001) {
					var a2 = iron_math_Quat.yAxis;
					var ax1 = a2.x;
					var ay1 = a2.y;
					var az1 = a2.z;
					var bx1 = v1.x;
					var by1 = v1.y;
					var bz1 = v1.z;
					a.x = ay1 * bz1 - az1 * by1;
					a.y = az1 * bx1 - ax1 * bz1;
					a.z = ax1 * by1 - ay1 * bx1;
				}
				var n1 = Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z);
				if(n1 > 0.0) {
					var invN1 = 1.0 / n1;
					a.x *= invN1;
					a.y *= invN1;
					a.z *= invN1;
				}
				var angle = Math.PI;
				var s1 = Math.sin(angle * 0.5);
				_this10.x = a.x * s1;
				_this10.y = a.y * s1;
				_this10.z = a.z * s1;
				_this10.w = Math.cos(angle * 0.5);
				var l1 = Math.sqrt(_this10.x * _this10.x + _this10.y * _this10.y + _this10.z * _this10.z + _this10.w * _this10.w);
				if(l1 == 0.0) {
					_this10.x = 0;
					_this10.y = 0;
					_this10.z = 0;
					_this10.w = 0;
				} else {
					l1 = 1.0 / l1;
					_this10.x *= l1;
					_this10.y *= l1;
					_this10.z *= l1;
					_this10.w *= l1;
				}
			} else if(dot > 0.999999) {
				_this10.x = 0;
				_this10.y = 0;
				_this10.z = 0;
				_this10.w = 1;
			} else {
				var ax2 = v1.x;
				var ay2 = v1.y;
				var az2 = v1.z;
				var bx2 = v2.x;
				var by2 = v2.y;
				var bz2 = v2.z;
				a.x = ay2 * bz2 - az2 * by2;
				a.y = az2 * bx2 - ax2 * bz2;
				a.z = ax2 * by2 - ay2 * bx2;
				_this10.x = a.x;
				_this10.y = a.y;
				_this10.z = a.z;
				_this10.w = 1 + dot;
				var l11 = Math.sqrt(_this10.x * _this10.x + _this10.y * _this10.y + _this10.z * _this10.z + _this10.w * _this10.w);
				if(l11 == 0.0) {
					_this10.x = 0;
					_this10.y = 0;
					_this10.z = 0;
					_this10.w = 0;
				} else {
					l11 = 1.0 / l11;
					_this10.x *= l11;
					_this10.y *= l11;
					_this10.z *= l11;
					_this10.w *= l11;
				}
			}
			var loc1 = iron_object_BoneAnimation.vpos;
			var quat1 = iron_object_BoneAnimation.q1;
			var sc = iron_object_BoneAnimation.vscl;
			var x2 = quat1.x;
			var y1 = quat1.y;
			var z1 = quat1.z;
			var w2 = quat1.w;
			var x21 = x2 + x2;
			var y2 = y1 + y1;
			var z2 = z1 + z1;
			var xx = x2 * x21;
			var xy = x2 * y2;
			var xz = x2 * z2;
			var yy = y1 * y2;
			var yz = y1 * z2;
			var zz = z1 * z2;
			var wx = w2 * x21;
			var wy = w2 * y2;
			var wz = w2 * z2;
			m.self._00 = 1.0 - (yy + zz);
			m.self._10 = xy - wz;
			m.self._20 = xz + wy;
			m.self._01 = xy + wz;
			m.self._11 = 1.0 - (xx + zz);
			m.self._21 = yz - wx;
			m.self._02 = xz - wy;
			m.self._12 = yz + wx;
			m.self._22 = 1.0 - (xx + yy);
			m.self._03 = 0.0;
			m.self._13 = 0.0;
			m.self._23 = 0.0;
			m.self._30 = 0.0;
			m.self._31 = 0.0;
			m.self._32 = 0.0;
			m.self._33 = 1.0;
			var x11 = sc.x;
			var y11 = sc.y;
			var z11 = sc.z;
			m.self._00 *= x11;
			m.self._01 *= x11;
			m.self._02 *= x11;
			m.self._03 *= x11;
			m.self._10 *= y11;
			m.self._11 *= y11;
			m.self._12 *= y11;
			m.self._13 *= y11;
			m.self._20 *= z11;
			m.self._21 *= z11;
			m.self._22 *= z11;
			m.self._23 *= z11;
			m.self._30 = loc1.x;
			m.self._31 = loc1.y;
			m.self._32 = loc1.z;
			var a001 = m.self._00;
			var a011 = m.self._01;
			var a021 = m.self._02;
			var a031 = m.self._03;
			var a101 = m.self._10;
			var a111 = m.self._11;
			var a121 = m.self._12;
			var a131 = m.self._13;
			var a201 = m.self._20;
			var a211 = m.self._21;
			var a221 = m.self._22;
			var a231 = m.self._23;
			var a301 = m.self._30;
			var a311 = m.self._31;
			var a321 = m.self._32;
			var a331 = m.self._33;
			var b0 = iw.self._00;
			var b1 = iw.self._10;
			var b2 = iw.self._20;
			var b3 = iw.self._30;
			m.self._00 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			m.self._10 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			m.self._20 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			m.self._30 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			b0 = iw.self._01;
			b1 = iw.self._11;
			b2 = iw.self._21;
			b3 = iw.self._31;
			m.self._01 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			m.self._11 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			m.self._21 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			m.self._31 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			b0 = iw.self._02;
			b1 = iw.self._12;
			b2 = iw.self._22;
			b3 = iw.self._32;
			m.self._02 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			m.self._12 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			m.self._22 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			m.self._32 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			b0 = iw.self._03;
			b1 = iw.self._13;
			b2 = iw.self._23;
			b3 = iw.self._33;
			m.self._03 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			m.self._13 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			m.self._23 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			m.self._33 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			var _g1 = 0;
			var _g2 = bones.length - 1;
			while(_g1 < _g2) {
				var i = _g1++;
				var b = bones[i];
				var m2 = this.skeletonMats[this.getBoneIndex(b)];
				var loc2 = iron_object_BoneAnimation.vpos;
				var quat2 = iron_object_BoneAnimation.q1;
				var scale1 = iron_object_BoneAnimation.vscl;
				loc2.x = m2.self._30;
				loc2.y = m2.self._31;
				loc2.z = m2.self._32;
				var _this12 = iron_math_Mat4.helpVec;
				_this12.x = m2.self._00;
				_this12.y = m2.self._01;
				_this12.z = m2.self._02;
				_this12.w = 1.0;
				var _this13 = _this12;
				scale1.x = Math.sqrt(_this13.x * _this13.x + _this13.y * _this13.y + _this13.z * _this13.z);
				var _this22 = iron_math_Mat4.helpVec;
				_this22.x = m2.self._10;
				_this22.y = m2.self._11;
				_this22.z = m2.self._12;
				_this22.w = 1.0;
				var _this31 = _this22;
				scale1.y = Math.sqrt(_this31.x * _this31.x + _this31.y * _this31.y + _this31.z * _this31.z);
				var _this41 = iron_math_Mat4.helpVec;
				_this41.x = m2.self._20;
				_this41.y = m2.self._21;
				_this41.z = m2.self._22;
				_this41.w = 1.0;
				var _this51 = _this41;
				scale1.z = Math.sqrt(_this51.x * _this51.x + _this51.y * _this51.y + _this51.z * _this51.z);
				var _this61 = m2.self;
				var m34 = _this61._12;
				var m44 = _this61._22;
				var m54 = _this61._32;
				var m64 = _this61._13;
				var m74 = _this61._23;
				var m84 = _this61._33;
				var c001 = _this61._11 * (m44 * m84 - m54 * m74) - _this61._21 * (m34 * m84 - m54 * m64) + _this61._31 * (m34 * m74 - m44 * m64);
				var m312 = _this61._12;
				var m411 = _this61._22;
				var m511 = _this61._32;
				var m611 = _this61._13;
				var m711 = _this61._23;
				var m811 = _this61._33;
				var c011 = _this61._10 * (m411 * m811 - m511 * m711) - _this61._20 * (m312 * m811 - m511 * m611) + _this61._30 * (m312 * m711 - m411 * m611);
				var m322 = _this61._11;
				var m421 = _this61._21;
				var m521 = _this61._31;
				var m621 = _this61._13;
				var m721 = _this61._23;
				var m821 = _this61._33;
				var c021 = _this61._10 * (m421 * m821 - m521 * m721) - _this61._20 * (m322 * m821 - m521 * m621) + _this61._30 * (m322 * m721 - m421 * m621);
				var m332 = _this61._11;
				var m431 = _this61._21;
				var m531 = _this61._31;
				var m631 = _this61._12;
				var m731 = _this61._22;
				var m831 = _this61._32;
				var c031 = _this61._10 * (m431 * m831 - m531 * m731) - _this61._20 * (m332 * m831 - m531 * m631) + _this61._30 * (m332 * m731 - m431 * m631);
				if(_this61._00 * c001 - _this61._01 * c011 + _this61._02 * c021 - _this61._03 * c031 < 0.0) {
					scale1.x = -scale1.x;
				}
				var invs1 = 1.0 / scale1.x;
				iron_math_Mat4.helpMat.self._00 = m2.self._00 * invs1;
				iron_math_Mat4.helpMat.self._01 = m2.self._01 * invs1;
				iron_math_Mat4.helpMat.self._02 = m2.self._02 * invs1;
				invs1 = 1.0 / scale1.y;
				iron_math_Mat4.helpMat.self._10 = m2.self._10 * invs1;
				iron_math_Mat4.helpMat.self._11 = m2.self._11 * invs1;
				iron_math_Mat4.helpMat.self._12 = m2.self._12 * invs1;
				invs1 = 1.0 / scale1.z;
				iron_math_Mat4.helpMat.self._20 = m2.self._20 * invs1;
				iron_math_Mat4.helpMat.self._21 = m2.self._21 * invs1;
				iron_math_Mat4.helpMat.self._22 = m2.self._22 * invs1;
				var m9 = iron_math_Mat4.helpMat;
				var m111 = m9.self._00;
				var m121 = m9.self._10;
				var m131 = m9.self._20;
				var m211 = m9.self._01;
				var m221 = m9.self._11;
				var m231 = m9.self._21;
				var m3111 = m9.self._02;
				var m3211 = m9.self._12;
				var m3311 = m9.self._22;
				var tr1 = m111 + m221 + m3311;
				var s2 = 0.0;
				if(tr1 > 0) {
					s2 = 0.5 / Math.sqrt(tr1 + 1.0);
					quat2.w = 0.25 / s2;
					quat2.x = (m3211 - m231) * s2;
					quat2.y = (m131 - m3111) * s2;
					quat2.z = (m211 - m121) * s2;
				} else if(m111 > m221 && m111 > m3311) {
					s2 = 2.0 * Math.sqrt(1.0 + m111 - m221 - m3311);
					quat2.w = (m3211 - m231) / s2;
					quat2.x = 0.25 * s2;
					quat2.y = (m121 + m211) / s2;
					quat2.z = (m131 + m3111) / s2;
				} else if(m221 > m3311) {
					s2 = 2.0 * Math.sqrt(1.0 + m221 - m111 - m3311);
					quat2.w = (m131 - m3111) / s2;
					quat2.x = (m121 + m211) / s2;
					quat2.y = 0.25 * s2;
					quat2.z = (m231 + m3211) / s2;
				} else {
					s2 = 2.0 * Math.sqrt(1.0 + m3311 - m111 - m221);
					quat2.w = (m211 - m121) / s2;
					quat2.x = (m131 + m3111) / s2;
					quat2.y = (m231 + m3211) / s2;
					quat2.z = 0.25 * s2;
				}
				var loc3 = iron_object_BoneAnimation.vpos;
				var quat_x = 0.0;
				var quat_y = 0.0;
				var quat_z = 0.0;
				var quat_w = 1.0;
				var sc1 = iron_object_BoneAnimation.vscl;
				var x3 = quat_x;
				var y3 = quat_y;
				var z3 = quat_z;
				var w3 = quat_w;
				var x22 = x3 + x3;
				var y21 = y3 + y3;
				var z21 = z3 + z3;
				var xx1 = x3 * x22;
				var xy1 = x3 * y21;
				var xz1 = x3 * z21;
				var yy1 = y3 * y21;
				var yz1 = y3 * z21;
				var zz1 = z3 * z21;
				var wx1 = w3 * x22;
				var wy1 = w3 * y21;
				var wz1 = w3 * z21;
				m2.self._00 = 1.0 - (yy1 + zz1);
				m2.self._10 = xy1 - wz1;
				m2.self._20 = xz1 + wy1;
				m2.self._01 = xy1 + wz1;
				m2.self._11 = 1.0 - (xx1 + zz1);
				m2.self._21 = yz1 - wx1;
				m2.self._02 = xz1 - wy1;
				m2.self._12 = yz1 + wx1;
				m2.self._22 = 1.0 - (xx1 + yy1);
				m2.self._03 = 0.0;
				m2.self._13 = 0.0;
				m2.self._23 = 0.0;
				m2.self._30 = 0.0;
				m2.self._31 = 0.0;
				m2.self._32 = 0.0;
				m2.self._33 = 1.0;
				var x12 = sc1.x;
				var y12 = sc1.y;
				var z12 = sc1.z;
				m2.self._00 *= x12;
				m2.self._01 *= x12;
				m2.self._02 *= x12;
				m2.self._03 *= x12;
				m2.self._10 *= y12;
				m2.self._11 *= y12;
				m2.self._12 *= y12;
				m2.self._13 *= y12;
				m2.self._20 *= z12;
				m2.self._21 *= z12;
				m2.self._22 *= z12;
				m2.self._23 *= z12;
				m2.self._30 = loc3.x;
				m2.self._31 = loc3.y;
				m2.self._32 = loc3.z;
			}
			var _g3 = 0;
			while(_g3 < bones.length) {
				var b4 = bones[_g3];
				++_g3;
				this.applyParent[this.getBoneIndex(b4)] = true;
			}
			return;
		}
		var vec_x = 0.0;
		var vec_y = 0.0;
		var vec_z = 0.0;
		var vec_w = 1.0;
		var locs = [];
		var _g11 = 0;
		while(_g11 < bones.length) {
			var b5 = bones[_g11];
			++_g11;
			var _this14 = this.getWorldMat(b5);
			locs.push(new iron_math_Vec4(_this14.self._30,_this14.self._31,_this14.self._32,_this14.self._33));
		}
		var _g21 = 0;
		var _g31 = maxIterations;
		while(_g21 < _g31) {
			var i1 = _g21++;
			vec_x = goal.x;
			vec_y = goal.y;
			vec_z = goal.z;
			vec_w = goal.w;
			var v = locs[0];
			vec_x -= v.x;
			vec_y -= v.y;
			vec_z -= v.z;
			var n2 = Math.sqrt(vec_x * vec_x + vec_y * vec_y + vec_z * vec_z);
			if(n2 > 0.0) {
				var invN2 = 1.0 / n2;
				vec_x *= invN2;
				vec_y *= invN2;
				vec_z *= invN2;
			}
			var f = lengths[0];
			vec_x *= f;
			vec_y *= f;
			vec_z *= f;
			var _this15 = locs[0];
			_this15.x = goal.x;
			_this15.y = goal.y;
			_this15.z = goal.z;
			_this15.w = goal.w;
			var _this16 = locs[0];
			_this16.x -= vec_x;
			_this16.y -= vec_y;
			_this16.z -= vec_z;
			var _g22 = 1;
			var _g32 = locs.length;
			while(_g22 < _g32) {
				var j = _g22++;
				var v3 = locs[j];
				vec_x = v3.x;
				vec_y = v3.y;
				vec_z = v3.z;
				vec_w = v3.w;
				var v4 = locs[j - 1];
				vec_x -= v4.x;
				vec_y -= v4.y;
				vec_z -= v4.z;
				var n3 = Math.sqrt(vec_x * vec_x + vec_y * vec_y + vec_z * vec_z);
				if(n3 > 0.0) {
					var invN3 = 1.0 / n3;
					vec_x *= invN3;
					vec_y *= invN3;
					vec_z *= invN3;
				}
				var f1 = lengths[j];
				vec_x *= f1;
				vec_y *= f1;
				vec_z *= f1;
				var _this17 = locs[j];
				var v5 = locs[j - 1];
				_this17.x = v5.x;
				_this17.y = v5.y;
				_this17.z = v5.z;
				_this17.w = v5.w;
				var _this18 = locs[j];
				_this18.x += vec_x;
				_this18.y += vec_y;
				_this18.z += vec_z;
			}
			var _this19 = locs[locs.length - 1];
			_this19.x = startLoc_x;
			_this19.y = startLoc_y;
			_this19.z = startLoc_z;
			_this19.w = startLoc_w;
			var l2 = locs.length;
			var _g4 = 1;
			var _g5 = l2;
			while(_g4 < _g5) {
				var j1 = _g4++;
				var v6 = locs[l2 - j1 - 1];
				vec_x = v6.x;
				vec_y = v6.y;
				vec_z = v6.z;
				vec_w = v6.w;
				var v7 = locs[l2 - j1];
				vec_x -= v7.x;
				vec_y -= v7.y;
				vec_z -= v7.z;
				var n4 = Math.sqrt(vec_x * vec_x + vec_y * vec_y + vec_z * vec_z);
				if(n4 > 0.0) {
					var invN4 = 1.0 / n4;
					vec_x *= invN4;
					vec_y *= invN4;
					vec_z *= invN4;
				}
				var f2 = lengths[l2 - j1];
				vec_x *= f2;
				vec_y *= f2;
				vec_z *= f2;
				var _this20 = locs[l2 - j1 - 1];
				var v8 = locs[l2 - j1];
				_this20.x = v8.x;
				_this20.y = v8.y;
				_this20.z = v8.z;
				_this20.w = v8.w;
				var _this23 = locs[l2 - j1 - 1];
				_this23.x += vec_x;
				_this23.y += vec_y;
				_this23.z += vec_z;
			}
			var v11 = locs[0];
			var vx1 = v11.x - goal.x;
			var vy1 = v11.y - goal.y;
			var vz1 = v11.z - goal.z;
			if(Math.sqrt(vx1 * vx1 + vy1 * vy1 + vz1 * vz1) <= precission) {
				break;
			}
		}
		var _g41 = 0;
		while(_g41 < bones.length) {
			var b6 = bones[_g41];
			++_g41;
			this.applyParent[this.getBoneIndex(b6)] = false;
		}
		var _g51 = 0;
		var _g6 = bones.length;
		while(_g51 < _g6) {
			var i2 = _g51++;
			var m10 = this.getBoneMat(bones[i2]);
			var loc4 = iron_object_BoneAnimation.vpos;
			var quat3 = iron_object_BoneAnimation.q1;
			var scale2 = iron_object_BoneAnimation.vscl;
			loc4.x = m10.self._30;
			loc4.y = m10.self._31;
			loc4.z = m10.self._32;
			var _this24 = iron_math_Mat4.helpVec;
			_this24.x = m10.self._00;
			_this24.y = m10.self._01;
			_this24.z = m10.self._02;
			_this24.w = 1.0;
			var _this110 = _this24;
			scale2.x = Math.sqrt(_this110.x * _this110.x + _this110.y * _this110.y + _this110.z * _this110.z);
			var _this25 = iron_math_Mat4.helpVec;
			_this25.x = m10.self._10;
			_this25.y = m10.self._11;
			_this25.z = m10.self._12;
			_this25.w = 1.0;
			var _this32 = _this25;
			scale2.y = Math.sqrt(_this32.x * _this32.x + _this32.y * _this32.y + _this32.z * _this32.z);
			var _this42 = iron_math_Mat4.helpVec;
			_this42.x = m10.self._20;
			_this42.y = m10.self._21;
			_this42.z = m10.self._22;
			_this42.w = 1.0;
			var _this52 = _this42;
			scale2.z = Math.sqrt(_this52.x * _this52.x + _this52.y * _this52.y + _this52.z * _this52.z);
			var _this62 = m10.self;
			var m35 = _this62._12;
			var m45 = _this62._22;
			var m55 = _this62._32;
			var m65 = _this62._13;
			var m75 = _this62._23;
			var m85 = _this62._33;
			var c002 = _this62._11 * (m45 * m85 - m55 * m75) - _this62._21 * (m35 * m85 - m55 * m65) + _this62._31 * (m35 * m75 - m45 * m65);
			var m313 = _this62._12;
			var m412 = _this62._22;
			var m512 = _this62._32;
			var m612 = _this62._13;
			var m712 = _this62._23;
			var m812 = _this62._33;
			var c012 = _this62._10 * (m412 * m812 - m512 * m712) - _this62._20 * (m313 * m812 - m512 * m612) + _this62._30 * (m313 * m712 - m412 * m612);
			var m323 = _this62._11;
			var m422 = _this62._21;
			var m522 = _this62._31;
			var m622 = _this62._13;
			var m722 = _this62._23;
			var m822 = _this62._33;
			var c022 = _this62._10 * (m422 * m822 - m522 * m722) - _this62._20 * (m323 * m822 - m522 * m622) + _this62._30 * (m323 * m722 - m422 * m622);
			var m333 = _this62._11;
			var m432 = _this62._21;
			var m532 = _this62._31;
			var m632 = _this62._12;
			var m732 = _this62._22;
			var m832 = _this62._32;
			var c032 = _this62._10 * (m432 * m832 - m532 * m732) - _this62._20 * (m333 * m832 - m532 * m632) + _this62._30 * (m333 * m732 - m432 * m632);
			if(_this62._00 * c002 - _this62._01 * c012 + _this62._02 * c022 - _this62._03 * c032 < 0.0) {
				scale2.x = -scale2.x;
			}
			var invs2 = 1.0 / scale2.x;
			iron_math_Mat4.helpMat.self._00 = m10.self._00 * invs2;
			iron_math_Mat4.helpMat.self._01 = m10.self._01 * invs2;
			iron_math_Mat4.helpMat.self._02 = m10.self._02 * invs2;
			invs2 = 1.0 / scale2.y;
			iron_math_Mat4.helpMat.self._10 = m10.self._10 * invs2;
			iron_math_Mat4.helpMat.self._11 = m10.self._11 * invs2;
			iron_math_Mat4.helpMat.self._12 = m10.self._12 * invs2;
			invs2 = 1.0 / scale2.z;
			iron_math_Mat4.helpMat.self._20 = m10.self._20 * invs2;
			iron_math_Mat4.helpMat.self._21 = m10.self._21 * invs2;
			iron_math_Mat4.helpMat.self._22 = m10.self._22 * invs2;
			var m14 = iron_math_Mat4.helpMat;
			var m112 = m14.self._00;
			var m122 = m14.self._10;
			var m132 = m14.self._20;
			var m212 = m14.self._01;
			var m222 = m14.self._11;
			var m232 = m14.self._21;
			var m3112 = m14.self._02;
			var m3212 = m14.self._12;
			var m3312 = m14.self._22;
			var tr2 = m112 + m222 + m3312;
			var s3 = 0.0;
			if(tr2 > 0) {
				s3 = 0.5 / Math.sqrt(tr2 + 1.0);
				quat3.w = 0.25 / s3;
				quat3.x = (m3212 - m232) * s3;
				quat3.y = (m132 - m3112) * s3;
				quat3.z = (m212 - m122) * s3;
			} else if(m112 > m222 && m112 > m3312) {
				s3 = 2.0 * Math.sqrt(1.0 + m112 - m222 - m3312);
				quat3.w = (m3212 - m232) / s3;
				quat3.x = 0.25 * s3;
				quat3.y = (m122 + m212) / s3;
				quat3.z = (m132 + m3112) / s3;
			} else if(m222 > m3312) {
				s3 = 2.0 * Math.sqrt(1.0 + m222 - m112 - m3312);
				quat3.w = (m132 - m3112) / s3;
				quat3.x = (m122 + m212) / s3;
				quat3.y = 0.25 * s3;
				quat3.z = (m232 + m3212) / s3;
			} else {
				s3 = 2.0 * Math.sqrt(1.0 + m3312 - m112 - m222);
				quat3.w = (m212 - m122) / s3;
				quat3.x = (m132 + m3112) / s3;
				quat3.y = (m232 + m3212) / s3;
				quat3.z = 0.25 * s3;
			}
			var l12 = i2 == 0 ? locs[i2] : locs[i2 - 1];
			var l21 = i2 == 0 ? locs[i2 + 1] : locs[i2];
			var _this26 = iron_object_BoneAnimation.v2;
			_this26.x = l12.x;
			_this26.y = l12.y;
			_this26.z = l12.z;
			_this26.w = l12.w;
			var _this27 = _this26;
			_this27.x -= l21.x;
			_this27.y -= l21.y;
			_this27.z -= l21.z;
			var _this28 = _this27;
			var n5 = Math.sqrt(_this28.x * _this28.x + _this28.y * _this28.y + _this28.z * _this28.z);
			if(n5 > 0.0) {
				var invN5 = 1.0 / n5;
				_this28.x *= invN5;
				_this28.y *= invN5;
				_this28.z *= invN5;
			}
			var _this29 = iron_object_BoneAnimation.q1;
			var v12 = iron_object_BoneAnimation.v1;
			var v21 = iron_object_BoneAnimation.v2;
			var a3 = iron_math_Quat.helpVec0;
			var dot1 = v12.x * v21.x + v12.y * v21.y + v12.z * v21.z;
			if(dot1 < -0.999999) {
				var a14 = iron_math_Quat.xAxis;
				var ax3 = a14.x;
				var ay3 = a14.y;
				var az3 = a14.z;
				var bx3 = v12.x;
				var by3 = v12.y;
				var bz3 = v12.z;
				a3.x = ay3 * bz3 - az3 * by3;
				a3.y = az3 * bx3 - ax3 * bz3;
				a3.z = ax3 * by3 - ay3 * bx3;
				if(Math.sqrt(a3.x * a3.x + a3.y * a3.y + a3.z * a3.z) < 0.000001) {
					var a24 = iron_math_Quat.yAxis;
					var ax11 = a24.x;
					var ay11 = a24.y;
					var az11 = a24.z;
					var bx11 = v12.x;
					var by11 = v12.y;
					var bz11 = v12.z;
					a3.x = ay11 * bz11 - az11 * by11;
					a3.y = az11 * bx11 - ax11 * bz11;
					a3.z = ax11 * by11 - ay11 * bx11;
				}
				var n6 = Math.sqrt(a3.x * a3.x + a3.y * a3.y + a3.z * a3.z);
				if(n6 > 0.0) {
					var invN6 = 1.0 / n6;
					a3.x *= invN6;
					a3.y *= invN6;
					a3.z *= invN6;
				}
				var angle1 = Math.PI;
				var s4 = Math.sin(angle1 * 0.5);
				_this29.x = a3.x * s4;
				_this29.y = a3.y * s4;
				_this29.z = a3.z * s4;
				_this29.w = Math.cos(angle1 * 0.5);
				var l3 = Math.sqrt(_this29.x * _this29.x + _this29.y * _this29.y + _this29.z * _this29.z + _this29.w * _this29.w);
				if(l3 == 0.0) {
					_this29.x = 0;
					_this29.y = 0;
					_this29.z = 0;
					_this29.w = 0;
				} else {
					l3 = 1.0 / l3;
					_this29.x *= l3;
					_this29.y *= l3;
					_this29.z *= l3;
					_this29.w *= l3;
				}
			} else if(dot1 > 0.999999) {
				_this29.x = 0;
				_this29.y = 0;
				_this29.z = 0;
				_this29.w = 1;
			} else {
				var ax21 = v12.x;
				var ay21 = v12.y;
				var az21 = v12.z;
				var bx21 = v21.x;
				var by21 = v21.y;
				var bz21 = v21.z;
				a3.x = ay21 * bz21 - az21 * by21;
				a3.y = az21 * bx21 - ax21 * bz21;
				a3.z = ax21 * by21 - ay21 * bx21;
				_this29.x = a3.x;
				_this29.y = a3.y;
				_this29.z = a3.z;
				_this29.w = 1 + dot1;
				var l13 = Math.sqrt(_this29.x * _this29.x + _this29.y * _this29.y + _this29.z * _this29.z + _this29.w * _this29.w);
				if(l13 == 0.0) {
					_this29.x = 0;
					_this29.y = 0;
					_this29.z = 0;
					_this29.w = 0;
				} else {
					l13 = 1.0 / l13;
					_this29.x *= l13;
					_this29.y *= l13;
					_this29.z *= l13;
					_this29.w *= l13;
				}
			}
			var v9 = locs[i2];
			vec_x = v9.x;
			vec_y = v9.y;
			vec_z = v9.z;
			vec_w = v9.w;
			var quat4 = iron_object_BoneAnimation.q1;
			var sc2 = iron_object_BoneAnimation.vscl;
			var x4 = quat4.x;
			var y4 = quat4.y;
			var z4 = quat4.z;
			var w4 = quat4.w;
			var x23 = x4 + x4;
			var y22 = y4 + y4;
			var z22 = z4 + z4;
			var xx2 = x4 * x23;
			var xy2 = x4 * y22;
			var xz2 = x4 * z22;
			var yy2 = y4 * y22;
			var yz2 = y4 * z22;
			var zz2 = z4 * z22;
			var wx2 = w4 * x23;
			var wy2 = w4 * y22;
			var wz2 = w4 * z22;
			m10.self._00 = 1.0 - (yy2 + zz2);
			m10.self._10 = xy2 - wz2;
			m10.self._20 = xz2 + wy2;
			m10.self._01 = xy2 + wz2;
			m10.self._11 = 1.0 - (xx2 + zz2);
			m10.self._21 = yz2 - wx2;
			m10.self._02 = xz2 - wy2;
			m10.self._12 = yz2 + wx2;
			m10.self._22 = 1.0 - (xx2 + yy2);
			m10.self._03 = 0.0;
			m10.self._13 = 0.0;
			m10.self._23 = 0.0;
			m10.self._30 = 0.0;
			m10.self._31 = 0.0;
			m10.self._32 = 0.0;
			m10.self._33 = 1.0;
			var x13 = sc2.x;
			var y13 = sc2.y;
			var z13 = sc2.z;
			m10.self._00 *= x13;
			m10.self._01 *= x13;
			m10.self._02 *= x13;
			m10.self._03 *= x13;
			m10.self._10 *= y13;
			m10.self._11 *= y13;
			m10.self._12 *= y13;
			m10.self._13 *= y13;
			m10.self._20 *= z13;
			m10.self._21 *= z13;
			m10.self._22 *= z13;
			m10.self._23 *= z13;
			m10.self._30 = vec_x;
			m10.self._31 = vec_y;
			m10.self._32 = vec_z;
		}
	}
	,__class__: iron_object_BoneAnimation
});
var iron_object_CameraObject = function(data) {
	this.currentFace = 0;
	this.renderTargetCube = null;
	this.renderTarget = null;
	this.frustumPlanes = null;
	this.prevV = null;
	iron_object_Object.call(this);
	this.data = data;
	this.buildProjection();
	this.V = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	this.VP = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	if(data.raw.frustum_culling) {
		this.frustumPlanes = [];
		this.frustumPlanes.push(new iron_object_FrustumPlane());
		this.frustumPlanes.push(new iron_object_FrustumPlane());
		this.frustumPlanes.push(new iron_object_FrustumPlane());
		this.frustumPlanes.push(new iron_object_FrustumPlane());
		this.frustumPlanes.push(new iron_object_FrustumPlane());
		this.frustumPlanes.push(new iron_object_FrustumPlane());
	}
	iron_Scene.active.cameras.push(this);
};
$hxClasses["iron.object.CameraObject"] = iron_object_CameraObject;
iron_object_CameraObject.__name__ = "iron.object.CameraObject";
iron_object_CameraObject.buildViewFrustum = function(VP,frustumPlanes) {
	var _this = frustumPlanes[0];
	var _this1 = _this.normal;
	_this1.x = VP.self._03 + VP.self._00;
	_this1.y = VP.self._13 + VP.self._10;
	_this1.z = VP.self._23 + VP.self._20;
	_this1.w = 1.0;
	_this.constant = VP.self._33 + VP.self._30;
	var _this2 = frustumPlanes[1];
	var _this3 = _this2.normal;
	_this3.x = VP.self._03 - VP.self._00;
	_this3.y = VP.self._13 - VP.self._10;
	_this3.z = VP.self._23 - VP.self._20;
	_this3.w = 1.0;
	_this2.constant = VP.self._33 - VP.self._30;
	var _this4 = frustumPlanes[2];
	var _this5 = _this4.normal;
	_this5.x = VP.self._03 - VP.self._01;
	_this5.y = VP.self._13 - VP.self._11;
	_this5.z = VP.self._23 - VP.self._21;
	_this5.w = 1.0;
	_this4.constant = VP.self._33 - VP.self._31;
	var _this6 = frustumPlanes[3];
	var _this7 = _this6.normal;
	_this7.x = VP.self._03 + VP.self._01;
	_this7.y = VP.self._13 + VP.self._11;
	_this7.z = VP.self._23 + VP.self._21;
	_this7.w = 1.0;
	_this6.constant = VP.self._33 + VP.self._31;
	var _this8 = frustumPlanes[4];
	var _this9 = _this8.normal;
	_this9.x = VP.self._02;
	_this9.y = VP.self._12;
	_this9.z = VP.self._22;
	_this9.w = 1.0;
	_this8.constant = VP.self._32;
	var _this10 = frustumPlanes[5];
	var _this11 = _this10.normal;
	_this11.x = VP.self._03 - VP.self._02;
	_this11.y = VP.self._13 - VP.self._12;
	_this11.z = VP.self._23 - VP.self._22;
	_this11.w = 1.0;
	_this10.constant = VP.self._33 - VP.self._32;
	var _g = 0;
	while(_g < frustumPlanes.length) {
		var plane = frustumPlanes[_g];
		++_g;
		plane.normalize();
	}
};
iron_object_CameraObject.sphereInFrustum = function(frustumPlanes,t,radiusScale,offsetX,offsetY,offsetZ) {
	if(offsetZ == null) {
		offsetZ = 0.0;
	}
	if(offsetY == null) {
		offsetY = 0.0;
	}
	if(offsetX == null) {
		offsetX = 0.0;
	}
	if(radiusScale == null) {
		radiusScale = 1.0;
	}
	var radius = t.radius * radiusScale;
	var _g = 0;
	while(_g < frustumPlanes.length) {
		var plane = frustumPlanes[_g];
		++_g;
		var _this = iron_object_CameraObject.sphereCenter;
		_this.x = t.world.self._30 + offsetX;
		_this.y = t.world.self._31 + offsetY;
		_this.z = t.world.self._32 + offsetZ;
		_this.w = 1.0;
		if(plane.distanceToSphere(iron_object_CameraObject.sphereCenter,radius) + radius * 2 < 0) {
			return false;
		}
	}
	return true;
};
iron_object_CameraObject.setCubeFace = function(m,eye,face,flip) {
	if(flip == null) {
		flip = false;
	}
	var _this = iron_object_CameraObject.vcenter;
	_this.x = eye.x;
	_this.y = eye.y;
	_this.z = eye.z;
	_this.w = eye.w;
	var f = flip ? -1.0 : 1.0;
	switch(face) {
	case 0:
		var _this1 = iron_object_CameraObject.vcenter;
		_this1.x += f;
		_this1.y += 0.0;
		_this1.z += 0.0;
		var _this2 = iron_object_CameraObject.vup;
		_this2.x = 0.0;
		_this2.y = -1.0 * f;
		_this2.z = 0.0;
		_this2.w = 1.0;
		break;
	case 1:
		var _this3 = iron_object_CameraObject.vcenter;
		_this3.x += -1.0 * f;
		_this3.y += 0.0;
		_this3.z += 0.0;
		var _this4 = iron_object_CameraObject.vup;
		_this4.x = 0.0;
		_this4.y = -1.0 * f;
		_this4.z = 0.0;
		_this4.w = 1.0;
		break;
	case 2:
		var _this5 = iron_object_CameraObject.vcenter;
		_this5.x += 0.0;
		_this5.y += f;
		_this5.z += 0.0;
		var _this6 = iron_object_CameraObject.vup;
		_this6.x = 0.0;
		_this6.y = 0.0;
		_this6.z = f;
		_this6.w = 1.0;
		break;
	case 3:
		var _this7 = iron_object_CameraObject.vcenter;
		_this7.x += 0.0;
		_this7.y += -1.0 * f;
		_this7.z += 0.0;
		var _this8 = iron_object_CameraObject.vup;
		_this8.x = 0.0;
		_this8.y = 0.0;
		_this8.z = -1.0 * f;
		_this8.w = 1.0;
		break;
	case 4:
		var _this9 = iron_object_CameraObject.vcenter;
		_this9.x += 0.0;
		_this9.y += 0.0;
		_this9.z += f;
		var _this10 = iron_object_CameraObject.vup;
		_this10.x = 0.0;
		_this10.y = -1.0 * f;
		_this10.z = 0.0;
		_this10.w = 1.0;
		break;
	case 5:
		var _this11 = iron_object_CameraObject.vcenter;
		_this11.x += 0.0;
		_this11.y += 0.0;
		_this11.z += -1.0 * f;
		var _this12 = iron_object_CameraObject.vup;
		_this12.x = 0.0;
		_this12.y = -1.0 * f;
		_this12.z = 0.0;
		_this12.w = 1.0;
		break;
	}
	var center = iron_object_CameraObject.vcenter;
	var up = iron_object_CameraObject.vup;
	var f0 = center.x - eye.x;
	var f1 = center.y - eye.y;
	var f2 = center.z - eye.z;
	var n = 1.0 / Math.sqrt(f0 * f0 + f1 * f1 + f2 * f2);
	f0 *= n;
	f1 *= n;
	f2 *= n;
	var s0 = f1 * up.z - f2 * up.y;
	var s1 = f2 * up.x - f0 * up.z;
	var s2 = f0 * up.y - f1 * up.x;
	n = 1.0 / Math.sqrt(s0 * s0 + s1 * s1 + s2 * s2);
	s0 *= n;
	s1 *= n;
	s2 *= n;
	var u0 = s1 * f2 - s2 * f1;
	var u1 = s2 * f0 - s0 * f2;
	var u2 = s0 * f1 - s1 * f0;
	var d0 = -eye.x * s0 - eye.y * s1 - eye.z * s2;
	var d1 = -eye.x * u0 - eye.y * u1 - eye.z * u2;
	var d2 = eye.x * f0 + eye.y * f1 + eye.z * f2;
	m.self._00 = s0;
	m.self._10 = s1;
	m.self._20 = s2;
	m.self._30 = d0;
	m.self._01 = u0;
	m.self._11 = u1;
	m.self._21 = u2;
	m.self._31 = d1;
	m.self._02 = -f0;
	m.self._12 = -f1;
	m.self._22 = -f2;
	m.self._32 = d2;
	m.self._03 = 0.0;
	m.self._13 = 0.0;
	m.self._23 = 0.0;
	m.self._33 = 1.0;
};
iron_object_CameraObject.__super__ = iron_object_Object;
iron_object_CameraObject.prototype = $extend(iron_object_Object.prototype,{
	data: null
	,P: null
	,V: null
	,prevV: null
	,VP: null
	,frustumPlanes: null
	,renderTarget: null
	,renderTargetCube: null
	,currentFace: null
	,buildProjection: function(screenAspect) {
		if(this.data.raw.ortho != null) {
			var left = this.data.raw.ortho[0];
			var right = this.data.raw.ortho[1];
			var bottom = this.data.raw.ortho[2];
			var top = this.data.raw.ortho[3];
			var near = this.data.raw.near_plane;
			var far = this.data.raw.far_plane;
			var rl = right - left;
			var tb = top - bottom;
			var fn = far - near;
			var tx = -(right + left) / rl;
			var ty = -(top + bottom) / tb;
			var tz = -(far + near) / fn;
			this.P = new iron_math_Mat4(2 / rl,0,0,tx,0,2 / tb,0,ty,0,0,-2 / fn,tz,0,0,0,1);
		} else {
			if(screenAspect == null) {
				screenAspect = kha_System.windowWidth() / kha_System.windowHeight();
			}
			var aspect = this.data.raw.aspect != null ? this.data.raw.aspect : screenAspect;
			var zn = this.data.raw.near_plane;
			var zf = this.data.raw.far_plane;
			var uh = 1.0 / Math.tan(this.data.raw.fov / 2);
			var uw = uh / aspect;
			this.P = new iron_math_Mat4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
		}
	}
	,remove: function() {
		HxOverrides.remove(iron_Scene.active.cameras,this);
		iron_object_Object.prototype.remove.call(this);
	}
	,renderFrame: function(g) {
		this.buildMatrix();
		iron_RenderPath.active.renderFrame(g);
		var _this = this.prevV;
		var m = this.V;
		_this.self._00 = m.self._00;
		_this.self._01 = m.self._01;
		_this.self._02 = m.self._02;
		_this.self._03 = m.self._03;
		_this.self._10 = m.self._10;
		_this.self._11 = m.self._11;
		_this.self._12 = m.self._12;
		_this.self._13 = m.self._13;
		_this.self._20 = m.self._20;
		_this.self._21 = m.self._21;
		_this.self._22 = m.self._22;
		_this.self._23 = m.self._23;
		_this.self._30 = m.self._30;
		_this.self._31 = m.self._31;
		_this.self._32 = m.self._32;
		_this.self._33 = m.self._33;
	}
	,buildMatrix: function() {
		this.transform.buildMatrix();
		var _this = this.transform.world;
		var x = Math.sqrt(_this.self._00 * _this.self._00 + _this.self._10 * _this.self._10 + _this.self._20 * _this.self._20);
		var y = Math.sqrt(_this.self._01 * _this.self._01 + _this.self._11 * _this.self._11 + _this.self._21 * _this.self._21);
		var z = Math.sqrt(_this.self._02 * _this.self._02 + _this.self._12 * _this.self._12 + _this.self._22 * _this.self._22);
		if(z == null) {
			z = 0.0;
		}
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		var sc_x = x;
		var sc_y = y;
		var sc_z = z;
		var sc_w = 1.0;
		if(sc_x != 1.0 || sc_y != 1.0 || sc_z != 1.0) {
			var _this1 = iron_object_CameraObject.temp;
			_this1.x = 1.0 / sc_x;
			_this1.y = 1.0 / sc_y;
			_this1.z = 1.0 / sc_z;
			_this1.w = 1.0;
			var _this2 = this.transform.world;
			var v = iron_object_CameraObject.temp;
			var x1 = v.x;
			var y1 = v.y;
			var z1 = v.z;
			_this2.self._00 *= x1;
			_this2.self._01 *= x1;
			_this2.self._02 *= x1;
			_this2.self._03 *= x1;
			_this2.self._10 *= y1;
			_this2.self._11 *= y1;
			_this2.self._12 *= y1;
			_this2.self._13 *= y1;
			_this2.self._20 *= z1;
			_this2.self._21 *= z1;
			_this2.self._22 *= z1;
			_this2.self._23 *= z1;
		}
		var _this3 = this.V;
		var m = this.transform.world;
		var a00 = m.self._00;
		var a01 = m.self._01;
		var a02 = m.self._02;
		var a03 = m.self._03;
		var a10 = m.self._10;
		var a11 = m.self._11;
		var a12 = m.self._12;
		var a13 = m.self._13;
		var a20 = m.self._20;
		var a21 = m.self._21;
		var a22 = m.self._22;
		var a23 = m.self._23;
		var a30 = m.self._30;
		var a31 = m.self._31;
		var a32 = m.self._32;
		var a33 = m.self._33;
		var b00 = a00 * a11 - a01 * a10;
		var b01 = a00 * a12 - a02 * a10;
		var b02 = a00 * a13 - a03 * a10;
		var b03 = a01 * a12 - a02 * a11;
		var b04 = a01 * a13 - a03 * a11;
		var b05 = a02 * a13 - a03 * a12;
		var b06 = a20 * a31 - a21 * a30;
		var b07 = a20 * a32 - a22 * a30;
		var b08 = a20 * a33 - a23 * a30;
		var b09 = a21 * a32 - a22 * a31;
		var b10 = a21 * a33 - a23 * a31;
		var b11 = a22 * a33 - a23 * a32;
		var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
		if(det == 0.0) {
			_this3.self._00 = 1.0;
			_this3.self._01 = 0.0;
			_this3.self._02 = 0.0;
			_this3.self._03 = 0.0;
			_this3.self._10 = 0.0;
			_this3.self._11 = 1.0;
			_this3.self._12 = 0.0;
			_this3.self._13 = 0.0;
			_this3.self._20 = 0.0;
			_this3.self._21 = 0.0;
			_this3.self._22 = 1.0;
			_this3.self._23 = 0.0;
			_this3.self._30 = 0.0;
			_this3.self._31 = 0.0;
			_this3.self._32 = 0.0;
			_this3.self._33 = 1.0;
		} else {
			det = 1.0 / det;
			_this3.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
			_this3.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
			_this3.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
			_this3.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
			_this3.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
			_this3.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
			_this3.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
			_this3.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
			_this3.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
			_this3.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
			_this3.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
			_this3.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
			_this3.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
			_this3.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
			_this3.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
			_this3.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
		}
		var _this4 = this.VP;
		var b = this.P;
		var a = this.V;
		var a001 = a.self._00;
		var a011 = a.self._01;
		var a021 = a.self._02;
		var a031 = a.self._03;
		var a101 = a.self._10;
		var a111 = a.self._11;
		var a121 = a.self._12;
		var a131 = a.self._13;
		var a201 = a.self._20;
		var a211 = a.self._21;
		var a221 = a.self._22;
		var a231 = a.self._23;
		var a301 = a.self._30;
		var a311 = a.self._31;
		var a321 = a.self._32;
		var a331 = a.self._33;
		var b0 = b.self._00;
		var b1 = b.self._10;
		var b2 = b.self._20;
		var b3 = b.self._30;
		_this4.self._00 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		_this4.self._10 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		_this4.self._20 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		_this4.self._30 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		b0 = b.self._01;
		b1 = b.self._11;
		b2 = b.self._21;
		b3 = b.self._31;
		_this4.self._01 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		_this4.self._11 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		_this4.self._21 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		_this4.self._31 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		b0 = b.self._02;
		b1 = b.self._12;
		b2 = b.self._22;
		b3 = b.self._32;
		_this4.self._02 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		_this4.self._12 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		_this4.self._22 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		_this4.self._32 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		b0 = b.self._03;
		b1 = b.self._13;
		b2 = b.self._23;
		b3 = b.self._33;
		_this4.self._03 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		_this4.self._13 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		_this4.self._23 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		_this4.self._33 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		if(this.data.raw.frustum_culling) {
			iron_object_CameraObject.buildViewFrustum(this.VP,this.frustumPlanes);
		}
		if(this.prevV == null) {
			this.prevV = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
			var _this5 = this.prevV;
			var m1 = this.V;
			_this5.self._00 = m1.self._00;
			_this5.self._01 = m1.self._01;
			_this5.self._02 = m1.self._02;
			_this5.self._03 = m1.self._03;
			_this5.self._10 = m1.self._10;
			_this5.self._11 = m1.self._11;
			_this5.self._12 = m1.self._12;
			_this5.self._13 = m1.self._13;
			_this5.self._20 = m1.self._20;
			_this5.self._21 = m1.self._21;
			_this5.self._22 = m1.self._22;
			_this5.self._23 = m1.self._23;
			_this5.self._30 = m1.self._30;
			_this5.self._31 = m1.self._31;
			_this5.self._32 = m1.self._32;
			_this5.self._33 = m1.self._33;
		}
	}
	,right: function() {
		return new iron_math_Vec4(this.transform.local.self._00,this.transform.local.self._01,this.transform.local.self._02);
	}
	,up: function() {
		return new iron_math_Vec4(this.transform.local.self._10,this.transform.local.self._11,this.transform.local.self._12);
	}
	,look: function() {
		return new iron_math_Vec4(-this.transform.local.self._20,-this.transform.local.self._21,-this.transform.local.self._22);
	}
	,rightWorld: function() {
		return new iron_math_Vec4(this.transform.world.self._00,this.transform.world.self._01,this.transform.world.self._02);
	}
	,upWorld: function() {
		return new iron_math_Vec4(this.transform.world.self._10,this.transform.world.self._11,this.transform.world.self._12);
	}
	,lookWorld: function() {
		return new iron_math_Vec4(-this.transform.world.self._20,-this.transform.world.self._21,-this.transform.world.self._22);
	}
	,__class__: iron_object_CameraObject
});
var iron_object_FrustumPlane = function() {
	this.constant = 0.0;
	this.normal = new iron_math_Vec4(1.0,0.0,0.0);
};
$hxClasses["iron.object.FrustumPlane"] = iron_object_FrustumPlane;
iron_object_FrustumPlane.__name__ = "iron.object.FrustumPlane";
iron_object_FrustumPlane.prototype = {
	normal: null
	,constant: null
	,normalize: function() {
		var _this = this.normal;
		var inverseNormalLength = 1.0 / Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z);
		var _this1 = this.normal;
		_this1.x *= inverseNormalLength;
		_this1.y *= inverseNormalLength;
		_this1.z *= inverseNormalLength;
		this.constant *= inverseNormalLength;
	}
	,distanceToSphere: function(sphereCenter,sphereRadius) {
		var _this = this.normal;
		return _this.x * sphereCenter.x + _this.y * sphereCenter.y + _this.z * sphereCenter.z + this.constant - sphereRadius;
	}
	,setComponents: function(x,y,z,w) {
		var _this = this.normal;
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.0;
		this.constant = w;
	}
	,__class__: iron_object_FrustumPlane
};
var iron_object_Constraint = function(constr) {
	this.target = null;
	this.raw = constr;
};
$hxClasses["iron.object.Constraint"] = iron_object_Constraint;
iron_object_Constraint.__name__ = "iron.object.Constraint";
iron_object_Constraint.prototype = {
	raw: null
	,target: null
	,apply: function(transform) {
		if(this.target == null && this.raw.target != null) {
			this.target = iron_Scene.active.getChild(this.raw.target).transform;
		}
		if(this.raw.type == "COPY_LOCATION") {
			if(this.raw.use_x) {
				transform.world.self._30 = this.target.loc.x;
				if(this.raw.use_offset) {
					transform.world.self._30 += transform.loc.x;
				}
			}
			if(this.raw.use_y) {
				transform.world.self._31 = this.target.loc.y;
				if(this.raw.use_offset) {
					transform.world.self._31 += transform.loc.y;
				}
			}
			if(this.raw.use_z) {
				transform.world.self._32 = this.target.loc.z;
				if(this.raw.use_offset) {
					transform.world.self._32 += transform.loc.z;
				}
			}
		}
	}
	,__class__: iron_object_Constraint
};
var iron_object_DecalObject = function() {
	iron_object_Object.call(this);
};
$hxClasses["iron.object.DecalObject"] = iron_object_DecalObject;
iron_object_DecalObject.__name__ = "iron.object.DecalObject";
iron_object_DecalObject.__super__ = iron_object_Object;
iron_object_DecalObject.prototype = $extend(iron_object_Object.prototype,{
	__class__: iron_object_DecalObject
});
var iron_object_LightObject = function(data) {
	this.frustumPlanes = null;
	this.VP = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	this.P = null;
	this.V = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	this.bias = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	this.camSlicedP = null;
	this.cascadeData = null;
	iron_object_Object.call(this);
	this.data = data;
	var type = data.raw.type;
	var fov = data.raw.fov;
	if(type == "sun") {
		if(iron_object_LightObject.corners == null) {
			iron_object_LightObject.corners = [];
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
			iron_object_LightObject.corners.push(new iron_math_Vec4());
		}
		this.P = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	} else if(type == "point" || type == "area") {
		var zn = data.raw.near_plane;
		var zf = data.raw.far_plane;
		var uh = 1.0 / Math.tan(fov / 2);
		var uw = uh / 1;
		this.P = new iron_math_Mat4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
	} else if(type == "spot") {
		var zn1 = data.raw.near_plane;
		var zf1 = data.raw.far_plane;
		var uh1 = 1.0 / Math.tan(fov / 2);
		var uw1 = uh1 / 1;
		this.P = new iron_math_Mat4(uw1,0,0,0,0,uh1,0,0,0,0,(zf1 + zn1) / (zn1 - zf1),2 * zf1 * zn1 / (zn1 - zf1),0,0,-1,0);
	}
	iron_Scene.active.lights.push(this);
};
$hxClasses["iron.object.LightObject"] = iron_object_LightObject;
iron_object_LightObject.__name__ = "iron.object.LightObject";
iron_object_LightObject.setCorners = function() {
	var _this = iron_object_LightObject.corners[0];
	_this.x = -1.0;
	_this.y = -1.0;
	_this.z = 1.0;
	_this.w = 1.0;
	var _this1 = iron_object_LightObject.corners[1];
	_this1.x = -1.0;
	_this1.y = -1.0;
	_this1.z = -1.0;
	_this1.w = 1.0;
	var _this2 = iron_object_LightObject.corners[2];
	_this2.x = -1.0;
	_this2.y = 1.0;
	_this2.z = 1.0;
	_this2.w = 1.0;
	var _this3 = iron_object_LightObject.corners[3];
	_this3.x = -1.0;
	_this3.y = 1.0;
	_this3.z = -1.0;
	_this3.w = 1.0;
	var _this4 = iron_object_LightObject.corners[4];
	_this4.x = 1.0;
	_this4.y = -1.0;
	_this4.z = 1.0;
	_this4.w = 1.0;
	var _this5 = iron_object_LightObject.corners[5];
	_this5.x = 1.0;
	_this5.y = -1.0;
	_this5.z = -1.0;
	_this5.w = 1.0;
	var _this6 = iron_object_LightObject.corners[6];
	_this6.x = 1.0;
	_this6.y = 1.0;
	_this6.z = 1.0;
	_this6.w = 1.0;
	var _this7 = iron_object_LightObject.corners[7];
	_this7.x = 1.0;
	_this7.y = 1.0;
	_this7.z = -1.0;
	_this7.w = 1.0;
};
iron_object_LightObject.mix = function(a,b,f) {
	return a * (1 - f) + b * f;
};
iron_object_LightObject.__super__ = iron_object_Object;
iron_object_LightObject.prototype = $extend(iron_object_Object.prototype,{
	data: null
	,cascadeData: null
	,cascadeVP: null
	,camSlicedP: null
	,cascadeSplit: null
	,bias: null
	,V: null
	,P: null
	,VP: null
	,frustumPlanes: null
	,remove: function() {
		if(iron_Scene.active != null) {
			HxOverrides.remove(iron_Scene.active.lights,this);
		}
		iron_object_Object.prototype.remove.call(this);
	}
	,buildMatrix: function(camera) {
		this.transform.buildMatrix();
		if(this.data.raw.type != "sun") {
			var _this = this.V;
			var m = this.transform.world;
			var a00 = m.self._00;
			var a01 = m.self._01;
			var a02 = m.self._02;
			var a03 = m.self._03;
			var a10 = m.self._10;
			var a11 = m.self._11;
			var a12 = m.self._12;
			var a13 = m.self._13;
			var a20 = m.self._20;
			var a21 = m.self._21;
			var a22 = m.self._22;
			var a23 = m.self._23;
			var a30 = m.self._30;
			var a31 = m.self._31;
			var a32 = m.self._32;
			var a33 = m.self._33;
			var b00 = a00 * a11 - a01 * a10;
			var b01 = a00 * a12 - a02 * a10;
			var b02 = a00 * a13 - a03 * a10;
			var b03 = a01 * a12 - a02 * a11;
			var b04 = a01 * a13 - a03 * a11;
			var b05 = a02 * a13 - a03 * a12;
			var b06 = a20 * a31 - a21 * a30;
			var b07 = a20 * a32 - a22 * a30;
			var b08 = a20 * a33 - a23 * a30;
			var b09 = a21 * a32 - a22 * a31;
			var b10 = a21 * a33 - a23 * a31;
			var b11 = a22 * a33 - a23 * a32;
			var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
			if(det == 0.0) {
				_this.self._00 = 1.0;
				_this.self._01 = 0.0;
				_this.self._02 = 0.0;
				_this.self._03 = 0.0;
				_this.self._10 = 0.0;
				_this.self._11 = 1.0;
				_this.self._12 = 0.0;
				_this.self._13 = 0.0;
				_this.self._20 = 0.0;
				_this.self._21 = 0.0;
				_this.self._22 = 1.0;
				_this.self._23 = 0.0;
				_this.self._30 = 0.0;
				_this.self._31 = 0.0;
				_this.self._32 = 0.0;
				_this.self._33 = 1.0;
			} else {
				det = 1.0 / det;
				_this.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
				_this.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
				_this.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
				_this.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
				_this.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
				_this.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
				_this.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
				_this.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
				_this.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
				_this.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
				_this.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
				_this.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
				_this.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
				_this.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
				_this.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
				_this.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
			}
			this.updateViewFrustum(camera);
		}
	}
	,setCascade: function(camera,cascade) {
		var _this = iron_object_LightObject.m;
		var m = camera.V;
		_this.self._00 = m.self._00;
		_this.self._01 = m.self._01;
		_this.self._02 = m.self._02;
		_this.self._03 = m.self._03;
		_this.self._10 = m.self._10;
		_this.self._11 = m.self._11;
		_this.self._12 = m.self._12;
		_this.self._13 = m.self._13;
		_this.self._20 = m.self._20;
		_this.self._21 = m.self._21;
		_this.self._22 = m.self._22;
		_this.self._23 = m.self._23;
		_this.self._30 = m.self._30;
		_this.self._31 = m.self._31;
		_this.self._32 = m.self._32;
		_this.self._33 = m.self._33;
		if(this.camSlicedP == null) {
			this.camSlicedP = [];
			this.cascadeSplit = [];
			var ortho = camera.data.raw.ortho;
			if(ortho == null) {
				var aspect = camera.data.raw.aspect != null ? camera.data.raw.aspect : kha_System.windowWidth() / kha_System.windowHeight();
				var fov = camera.data.raw.fov;
				var near = camera.data.raw.near_plane;
				var far = camera.data.raw.far_plane;
				var factor = iron_object_LightObject.cascadeCount > 2 ? iron_object_LightObject.cascadeSplitFactor : iron_object_LightObject.cascadeSplitFactor * 0.25;
				var _g = 0;
				var _g1 = iron_object_LightObject.cascadeCount;
				while(_g < _g1) {
					var i = _g++;
					var f = i + 1.0;
					var cfar = (near + f / iron_object_LightObject.cascadeCount * (far - near)) * (1 - factor) + near * Math.pow(far / near,f / iron_object_LightObject.cascadeCount) * factor;
					this.cascadeSplit.push(cfar);
					var uh = 1.0 / Math.tan(fov / 2);
					var uw = uh / aspect;
					this.camSlicedP.push(new iron_math_Mat4(uw,0,0,0,0,uh,0,0,0,0,(cfar + near) / (near - cfar),2 * cfar * near / (near - cfar),0,0,-1,0));
				}
			} else {
				var _g2 = 0;
				var _g11 = iron_object_LightObject.cascadeCount;
				while(_g2 < _g11) {
					var i1 = _g2++;
					this.cascadeSplit.push(this.data.raw.far_plane);
					var left = ortho[0];
					var right = ortho[1];
					var bottom = ortho[2];
					var top = ortho[3];
					var near1 = this.data.raw.near_plane;
					var far1 = this.data.raw.far_plane;
					var rl = right - left;
					var tb = top - bottom;
					var fn = far1 - near1;
					var tx = -(right + left) / rl;
					var ty = -(top + bottom) / tb;
					var tz = -(far1 + near1) / fn;
					this.camSlicedP.push(new iron_math_Mat4(2 / rl,0,0,tx,0,2 / tb,0,ty,0,0,-2 / fn,tz,0,0,0,1));
				}
			}
		}
		var _this1 = iron_object_LightObject.m;
		var m1 = this.camSlicedP[cascade];
		var a00 = _this1.self._00;
		var a01 = _this1.self._01;
		var a02 = _this1.self._02;
		var a03 = _this1.self._03;
		var a10 = _this1.self._10;
		var a11 = _this1.self._11;
		var a12 = _this1.self._12;
		var a13 = _this1.self._13;
		var a20 = _this1.self._20;
		var a21 = _this1.self._21;
		var a22 = _this1.self._22;
		var a23 = _this1.self._23;
		var a30 = _this1.self._30;
		var a31 = _this1.self._31;
		var a32 = _this1.self._32;
		var a33 = _this1.self._33;
		var b0 = m1.self._00;
		var b1 = m1.self._10;
		var b2 = m1.self._20;
		var b3 = m1.self._30;
		_this1.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this1.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this1.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this1.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = m1.self._01;
		b1 = m1.self._11;
		b2 = m1.self._21;
		b3 = m1.self._31;
		_this1.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this1.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this1.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this1.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = m1.self._02;
		b1 = m1.self._12;
		b2 = m1.self._22;
		b3 = m1.self._32;
		_this1.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this1.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this1.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this1.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = m1.self._03;
		b1 = m1.self._13;
		b2 = m1.self._23;
		b3 = m1.self._33;
		_this1.self._03 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this1.self._13 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this1.self._23 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this1.self._33 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		var _this2 = iron_object_LightObject.m;
		var m2 = iron_object_LightObject.m;
		var a001 = m2.self._00;
		var a011 = m2.self._01;
		var a021 = m2.self._02;
		var a031 = m2.self._03;
		var a101 = m2.self._10;
		var a111 = m2.self._11;
		var a121 = m2.self._12;
		var a131 = m2.self._13;
		var a201 = m2.self._20;
		var a211 = m2.self._21;
		var a221 = m2.self._22;
		var a231 = m2.self._23;
		var a301 = m2.self._30;
		var a311 = m2.self._31;
		var a321 = m2.self._32;
		var a331 = m2.self._33;
		var b00 = a001 * a111 - a011 * a101;
		var b01 = a001 * a121 - a021 * a101;
		var b02 = a001 * a131 - a031 * a101;
		var b03 = a011 * a121 - a021 * a111;
		var b04 = a011 * a131 - a031 * a111;
		var b05 = a021 * a131 - a031 * a121;
		var b06 = a201 * a311 - a211 * a301;
		var b07 = a201 * a321 - a221 * a301;
		var b08 = a201 * a331 - a231 * a301;
		var b09 = a211 * a321 - a221 * a311;
		var b10 = a211 * a331 - a231 * a311;
		var b11 = a221 * a331 - a231 * a321;
		var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
		if(det == 0.0) {
			_this2.self._00 = 1.0;
			_this2.self._01 = 0.0;
			_this2.self._02 = 0.0;
			_this2.self._03 = 0.0;
			_this2.self._10 = 0.0;
			_this2.self._11 = 1.0;
			_this2.self._12 = 0.0;
			_this2.self._13 = 0.0;
			_this2.self._20 = 0.0;
			_this2.self._21 = 0.0;
			_this2.self._22 = 1.0;
			_this2.self._23 = 0.0;
			_this2.self._30 = 0.0;
			_this2.self._31 = 0.0;
			_this2.self._32 = 0.0;
			_this2.self._33 = 1.0;
		} else {
			det = 1.0 / det;
			_this2.self._00 = (a111 * b11 - a121 * b10 + a131 * b09) * det;
			_this2.self._01 = (a021 * b10 - a011 * b11 - a031 * b09) * det;
			_this2.self._02 = (a311 * b05 - a321 * b04 + a331 * b03) * det;
			_this2.self._03 = (a221 * b04 - a211 * b05 - a231 * b03) * det;
			_this2.self._10 = (a121 * b08 - a101 * b11 - a131 * b07) * det;
			_this2.self._11 = (a001 * b11 - a021 * b08 + a031 * b07) * det;
			_this2.self._12 = (a321 * b02 - a301 * b05 - a331 * b01) * det;
			_this2.self._13 = (a201 * b05 - a221 * b02 + a231 * b01) * det;
			_this2.self._20 = (a101 * b10 - a111 * b08 + a131 * b06) * det;
			_this2.self._21 = (a011 * b08 - a001 * b10 - a031 * b06) * det;
			_this2.self._22 = (a301 * b04 - a311 * b02 + a331 * b00) * det;
			_this2.self._23 = (a211 * b02 - a201 * b04 - a231 * b00) * det;
			_this2.self._30 = (a111 * b07 - a101 * b09 - a121 * b06) * det;
			_this2.self._31 = (a001 * b09 - a011 * b07 + a021 * b06) * det;
			_this2.self._32 = (a311 * b01 - a301 * b03 - a321 * b00) * det;
			_this2.self._33 = (a201 * b03 - a211 * b01 + a221 * b00) * det;
		}
		var _this3 = this.V;
		var m3 = this.transform.world;
		var a002 = m3.self._00;
		var a012 = m3.self._01;
		var a022 = m3.self._02;
		var a032 = m3.self._03;
		var a102 = m3.self._10;
		var a112 = m3.self._11;
		var a122 = m3.self._12;
		var a132 = m3.self._13;
		var a202 = m3.self._20;
		var a212 = m3.self._21;
		var a222 = m3.self._22;
		var a232 = m3.self._23;
		var a302 = m3.self._30;
		var a312 = m3.self._31;
		var a322 = m3.self._32;
		var a332 = m3.self._33;
		var b001 = a002 * a112 - a012 * a102;
		var b011 = a002 * a122 - a022 * a102;
		var b021 = a002 * a132 - a032 * a102;
		var b031 = a012 * a122 - a022 * a112;
		var b041 = a012 * a132 - a032 * a112;
		var b051 = a022 * a132 - a032 * a122;
		var b061 = a202 * a312 - a212 * a302;
		var b071 = a202 * a322 - a222 * a302;
		var b081 = a202 * a332 - a232 * a302;
		var b091 = a212 * a322 - a222 * a312;
		var b101 = a212 * a332 - a232 * a312;
		var b111 = a222 * a332 - a232 * a322;
		var det1 = b001 * b111 - b011 * b101 + b021 * b091 + b031 * b081 - b041 * b071 + b051 * b061;
		if(det1 == 0.0) {
			_this3.self._00 = 1.0;
			_this3.self._01 = 0.0;
			_this3.self._02 = 0.0;
			_this3.self._03 = 0.0;
			_this3.self._10 = 0.0;
			_this3.self._11 = 1.0;
			_this3.self._12 = 0.0;
			_this3.self._13 = 0.0;
			_this3.self._20 = 0.0;
			_this3.self._21 = 0.0;
			_this3.self._22 = 1.0;
			_this3.self._23 = 0.0;
			_this3.self._30 = 0.0;
			_this3.self._31 = 0.0;
			_this3.self._32 = 0.0;
			_this3.self._33 = 1.0;
		} else {
			det1 = 1.0 / det1;
			_this3.self._00 = (a112 * b111 - a122 * b101 + a132 * b091) * det1;
			_this3.self._01 = (a022 * b101 - a012 * b111 - a032 * b091) * det1;
			_this3.self._02 = (a312 * b051 - a322 * b041 + a332 * b031) * det1;
			_this3.self._03 = (a222 * b041 - a212 * b051 - a232 * b031) * det1;
			_this3.self._10 = (a122 * b081 - a102 * b111 - a132 * b071) * det1;
			_this3.self._11 = (a002 * b111 - a022 * b081 + a032 * b071) * det1;
			_this3.self._12 = (a322 * b021 - a302 * b051 - a332 * b011) * det1;
			_this3.self._13 = (a202 * b051 - a222 * b021 + a232 * b011) * det1;
			_this3.self._20 = (a102 * b101 - a112 * b081 + a132 * b061) * det1;
			_this3.self._21 = (a012 * b081 - a002 * b101 - a032 * b061) * det1;
			_this3.self._22 = (a302 * b041 - a312 * b021 + a332 * b001) * det1;
			_this3.self._23 = (a212 * b021 - a202 * b041 - a232 * b001) * det1;
			_this3.self._30 = (a112 * b071 - a102 * b091 - a122 * b061) * det1;
			_this3.self._31 = (a002 * b091 - a012 * b071 + a022 * b061) * det1;
			_this3.self._32 = (a312 * b011 - a302 * b031 - a322 * b001) * det1;
			_this3.self._33 = (a202 * b031 - a212 * b011 + a222 * b001) * det1;
		}
		var _this4 = this.V;
		var _this5 = iron_math_Mat4.helpVec;
		_this5.x = _this4.self._00;
		_this5.y = _this4.self._01;
		_this5.z = _this4.self._02;
		_this5.w = 1.0;
		var _this11 = _this5;
		var scale = 1.0 / Math.sqrt(_this11.x * _this11.x + _this11.y * _this11.y + _this11.z * _this11.z);
		_this4.self._00 *= scale;
		_this4.self._01 *= scale;
		_this4.self._02 *= scale;
		var _this21 = iron_math_Mat4.helpVec;
		_this21.x = _this4.self._10;
		_this21.y = _this4.self._11;
		_this21.z = _this4.self._12;
		_this21.w = 1.0;
		var _this31 = _this21;
		scale = 1.0 / Math.sqrt(_this31.x * _this31.x + _this31.y * _this31.y + _this31.z * _this31.z);
		_this4.self._10 *= scale;
		_this4.self._11 *= scale;
		_this4.self._12 *= scale;
		var _this41 = iron_math_Mat4.helpVec;
		_this41.x = _this4.self._20;
		_this41.y = _this4.self._21;
		_this41.z = _this4.self._22;
		_this41.w = 1.0;
		var _this51 = _this41;
		scale = 1.0 / Math.sqrt(_this51.x * _this51.x + _this51.y * _this51.y + _this51.z * _this51.z);
		_this4.self._20 *= scale;
		_this4.self._21 *= scale;
		_this4.self._22 *= scale;
		_this4.self._03 = 0.0;
		_this4.self._13 = 0.0;
		_this4.self._23 = 0.0;
		_this4.self._30 = 0.0;
		_this4.self._31 = 0.0;
		_this4.self._32 = 0.0;
		_this4.self._33 = 1.0;
		var _this6 = iron_object_LightObject.m;
		var m4 = this.V;
		var a003 = _this6.self._00;
		var a013 = _this6.self._01;
		var a023 = _this6.self._02;
		var a033 = _this6.self._03;
		var a103 = _this6.self._10;
		var a113 = _this6.self._11;
		var a123 = _this6.self._12;
		var a133 = _this6.self._13;
		var a203 = _this6.self._20;
		var a213 = _this6.self._21;
		var a223 = _this6.self._22;
		var a233 = _this6.self._23;
		var a303 = _this6.self._30;
		var a313 = _this6.self._31;
		var a323 = _this6.self._32;
		var a333 = _this6.self._33;
		var b010 = m4.self._00;
		var b12 = m4.self._10;
		var b21 = m4.self._20;
		var b31 = m4.self._30;
		_this6.self._00 = a003 * b010 + a013 * b12 + a023 * b21 + a033 * b31;
		_this6.self._10 = a103 * b010 + a113 * b12 + a123 * b21 + a133 * b31;
		_this6.self._20 = a203 * b010 + a213 * b12 + a223 * b21 + a233 * b31;
		_this6.self._30 = a303 * b010 + a313 * b12 + a323 * b21 + a333 * b31;
		b010 = m4.self._01;
		b12 = m4.self._11;
		b21 = m4.self._21;
		b31 = m4.self._31;
		_this6.self._01 = a003 * b010 + a013 * b12 + a023 * b21 + a033 * b31;
		_this6.self._11 = a103 * b010 + a113 * b12 + a123 * b21 + a133 * b31;
		_this6.self._21 = a203 * b010 + a213 * b12 + a223 * b21 + a233 * b31;
		_this6.self._31 = a303 * b010 + a313 * b12 + a323 * b21 + a333 * b31;
		b010 = m4.self._02;
		b12 = m4.self._12;
		b21 = m4.self._22;
		b31 = m4.self._32;
		_this6.self._02 = a003 * b010 + a013 * b12 + a023 * b21 + a033 * b31;
		_this6.self._12 = a103 * b010 + a113 * b12 + a123 * b21 + a133 * b31;
		_this6.self._22 = a203 * b010 + a213 * b12 + a223 * b21 + a233 * b31;
		_this6.self._32 = a303 * b010 + a313 * b12 + a323 * b21 + a333 * b31;
		b010 = m4.self._03;
		b12 = m4.self._13;
		b21 = m4.self._23;
		b31 = m4.self._33;
		_this6.self._03 = a003 * b010 + a013 * b12 + a023 * b21 + a033 * b31;
		_this6.self._13 = a103 * b010 + a113 * b12 + a123 * b21 + a133 * b31;
		_this6.self._23 = a203 * b010 + a213 * b12 + a223 * b21 + a233 * b31;
		_this6.self._33 = a303 * b010 + a313 * b12 + a323 * b21 + a333 * b31;
		iron_object_LightObject.setCorners();
		var _g3 = 0;
		var _g12 = iron_object_LightObject.corners;
		while(_g3 < _g12.length) {
			var v = _g12[_g3];
			++_g3;
			var m5 = iron_object_LightObject.m;
			var x = v.x;
			var y = v.y;
			var z = v.z;
			var w = v.w;
			v.x = m5.self._00 * x + m5.self._10 * y + m5.self._20 * z + m5.self._30 * w;
			v.y = m5.self._01 * x + m5.self._11 * y + m5.self._21 * z + m5.self._31 * w;
			v.z = m5.self._02 * x + m5.self._12 * y + m5.self._22 * z + m5.self._32 * w;
			v.w = m5.self._03 * x + m5.self._13 * y + m5.self._23 * z + m5.self._33 * w;
			v.x /= v.w;
			v.y /= v.w;
			v.z /= v.w;
			v.w = 1.0;
		}
		var minx = iron_object_LightObject.corners[0].x;
		var miny = iron_object_LightObject.corners[0].y;
		var minz = iron_object_LightObject.corners[0].z;
		var maxx = iron_object_LightObject.corners[0].x;
		var maxy = iron_object_LightObject.corners[0].y;
		var maxz = iron_object_LightObject.corners[0].z;
		var _g21 = 0;
		var _g31 = iron_object_LightObject.corners;
		while(_g21 < _g31.length) {
			var v1 = _g31[_g21];
			++_g21;
			if(v1.x < minx) {
				minx = v1.x;
			}
			if(v1.x > maxx) {
				maxx = v1.x;
			}
			if(v1.y < miny) {
				miny = v1.y;
			}
			if(v1.y > maxy) {
				maxy = v1.y;
			}
			if(v1.z < minz) {
				minz = v1.z;
			}
			if(v1.z > maxz) {
				maxz = v1.z;
			}
		}
		var v11 = iron_object_LightObject.corners[0];
		var v2 = iron_object_LightObject.corners[7];
		var vx = v11.x - v2.x;
		var vy = v11.y - v2.y;
		var vz = v11.z - v2.z;
		var diag0 = Math.sqrt(vx * vx + vy * vy + vz * vz);
		var offx = (diag0 - (maxx - minx)) * 0.5;
		var offy = (diag0 - (maxy - miny)) * 0.5;
		minx -= offx;
		maxx += offx;
		miny -= offy;
		maxy += offy;
		var smsize = this.data.raw.shadowmap_size;
		smsize = smsize / 4 | 0;
		var worldPerTexelX = (maxx - minx) / smsize;
		var worldPerTexelY = (maxy - miny) / smsize;
		var worldPerTexelZ = (maxz - minz) / smsize;
		minx = Math.floor(minx / worldPerTexelX) * worldPerTexelX;
		miny = Math.floor(miny / worldPerTexelY) * worldPerTexelY;
		minz = Math.floor(minz / worldPerTexelZ) * worldPerTexelZ;
		maxx = Math.floor(maxx / worldPerTexelX) * worldPerTexelX;
		maxy = Math.floor(maxy / worldPerTexelY) * worldPerTexelY;
		maxz = Math.floor(maxz / worldPerTexelZ) * worldPerTexelZ;
		var hx = (maxx - minx) / 2;
		var hy = (maxy - miny) / 2;
		var hz = (maxz - minz) / 2;
		this.V.self._30 = -(minx + hx);
		this.V.self._31 = -(miny + hy);
		this.V.self._32 = -(minz + hz);
		var left1 = -hx;
		var bottom1 = -hy;
		var near2 = -hz * 4 * iron_object_LightObject.cascadeBounds;
		var rl1 = hx - left1;
		var tb1 = hy - bottom1;
		var fn1 = hz - near2;
		var tx1 = -(hx + left1) / rl1;
		var ty1 = -(hy + bottom1) / tb1;
		var tz1 = -(hz + near2) / fn1;
		iron_object_LightObject.m = new iron_math_Mat4(2 / rl1,0,0,tx1,0,2 / tb1,0,ty1,0,0,-2 / fn1,tz1,0,0,0,1);
		var _this7 = this.P;
		var m6 = iron_object_LightObject.m;
		_this7.self._00 = m6.self._00;
		_this7.self._01 = m6.self._01;
		_this7.self._02 = m6.self._02;
		_this7.self._03 = m6.self._03;
		_this7.self._10 = m6.self._10;
		_this7.self._11 = m6.self._11;
		_this7.self._12 = m6.self._12;
		_this7.self._13 = m6.self._13;
		_this7.self._20 = m6.self._20;
		_this7.self._21 = m6.self._21;
		_this7.self._22 = m6.self._22;
		_this7.self._23 = m6.self._23;
		_this7.self._30 = m6.self._30;
		_this7.self._31 = m6.self._31;
		_this7.self._32 = m6.self._32;
		_this7.self._33 = m6.self._33;
		this.updateViewFrustum(camera);
		if(this.cascadeVP == null) {
			this.cascadeVP = [];
			var _g4 = 0;
			var _g5 = iron_object_LightObject.cascadeCount;
			while(_g4 < _g5) {
				var i2 = _g4++;
				this.cascadeVP.push(new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0));
			}
		}
		var _this8 = this.cascadeVP[cascade];
		var m7 = this.VP;
		_this8.self._00 = m7.self._00;
		_this8.self._01 = m7.self._01;
		_this8.self._02 = m7.self._02;
		_this8.self._03 = m7.self._03;
		_this8.self._10 = m7.self._10;
		_this8.self._11 = m7.self._11;
		_this8.self._12 = m7.self._12;
		_this8.self._13 = m7.self._13;
		_this8.self._20 = m7.self._20;
		_this8.self._21 = m7.self._21;
		_this8.self._22 = m7.self._22;
		_this8.self._23 = m7.self._23;
		_this8.self._30 = m7.self._30;
		_this8.self._31 = m7.self._31;
		_this8.self._32 = m7.self._32;
		_this8.self._33 = m7.self._33;
	}
	,updateViewFrustum: function(camera) {
		var _this = this.VP;
		var b = this.P;
		var a = this.V;
		var a00 = a.self._00;
		var a01 = a.self._01;
		var a02 = a.self._02;
		var a03 = a.self._03;
		var a10 = a.self._10;
		var a11 = a.self._11;
		var a12 = a.self._12;
		var a13 = a.self._13;
		var a20 = a.self._20;
		var a21 = a.self._21;
		var a22 = a.self._22;
		var a23 = a.self._23;
		var a30 = a.self._30;
		var a31 = a.self._31;
		var a32 = a.self._32;
		var a33 = a.self._33;
		var b0 = b.self._00;
		var b1 = b.self._10;
		var b2 = b.self._20;
		var b3 = b.self._30;
		_this.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = b.self._01;
		b1 = b.self._11;
		b2 = b.self._21;
		b3 = b.self._31;
		_this.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = b.self._02;
		b1 = b.self._12;
		b2 = b.self._22;
		b3 = b.self._32;
		_this.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = b.self._03;
		b1 = b.self._13;
		b2 = b.self._23;
		b3 = b.self._33;
		_this.self._03 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this.self._13 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this.self._23 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this.self._33 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		if(camera.data.raw.frustum_culling) {
			if(this.frustumPlanes == null) {
				this.frustumPlanes = [];
				this.frustumPlanes.push(new iron_object_FrustumPlane());
				this.frustumPlanes.push(new iron_object_FrustumPlane());
				this.frustumPlanes.push(new iron_object_FrustumPlane());
				this.frustumPlanes.push(new iron_object_FrustumPlane());
				this.frustumPlanes.push(new iron_object_FrustumPlane());
				this.frustumPlanes.push(new iron_object_FrustumPlane());
			}
			iron_object_CameraObject.buildViewFrustum(this.VP,this.frustumPlanes);
		}
	}
	,setCubeFace: function(face,camera) {
		var _this = iron_object_LightObject.eye;
		_this.x = this.transform.world.self._30;
		_this.y = this.transform.world.self._31;
		_this.z = this.transform.world.self._32;
		_this.w = 1.0;
		var flip = face == 2 || face == 3;
		iron_object_CameraObject.setCubeFace(this.V,iron_object_LightObject.eye,face,flip);
		this.updateViewFrustum(camera);
	}
	,getCascadeData: function() {
		if(this.cascadeData == null) {
			var this1 = new Float32Array(iron_object_LightObject.cascadeCount * 16 + 4);
			this.cascadeData = this1;
		}
		if(this.cascadeVP == null) {
			return this.cascadeData;
		}
		var _g = 0;
		var _g1 = iron_object_LightObject.cascadeCount;
		while(_g < _g1) {
			var i = _g++;
			var _this = iron_object_LightObject.m;
			var m = this.cascadeVP[i];
			_this.self._00 = m.self._00;
			_this.self._01 = m.self._01;
			_this.self._02 = m.self._02;
			_this.self._03 = m.self._03;
			_this.self._10 = m.self._10;
			_this.self._11 = m.self._11;
			_this.self._12 = m.self._12;
			_this.self._13 = m.self._13;
			_this.self._20 = m.self._20;
			_this.self._21 = m.self._21;
			_this.self._22 = m.self._22;
			_this.self._23 = m.self._23;
			_this.self._30 = m.self._30;
			_this.self._31 = m.self._31;
			_this.self._32 = m.self._32;
			_this.self._33 = m.self._33;
			var _this1 = this.bias;
			var m1 = iron_object_Uniforms.biasMat;
			_this1.self._00 = m1.self._00;
			_this1.self._01 = m1.self._01;
			_this1.self._02 = m1.self._02;
			_this1.self._03 = m1.self._03;
			_this1.self._10 = m1.self._10;
			_this1.self._11 = m1.self._11;
			_this1.self._12 = m1.self._12;
			_this1.self._13 = m1.self._13;
			_this1.self._20 = m1.self._20;
			_this1.self._21 = m1.self._21;
			_this1.self._22 = m1.self._22;
			_this1.self._23 = m1.self._23;
			_this1.self._30 = m1.self._30;
			_this1.self._31 = m1.self._31;
			_this1.self._32 = m1.self._32;
			_this1.self._33 = m1.self._33;
			this.bias.self._00 /= iron_object_LightObject.cascadeCount;
			this.bias.self._30 /= iron_object_LightObject.cascadeCount;
			this.bias.self._30 += i * (1 / iron_object_LightObject.cascadeCount);
			var _this2 = iron_object_LightObject.m;
			var m2 = this.bias;
			var a00 = _this2.self._00;
			var a01 = _this2.self._01;
			var a02 = _this2.self._02;
			var a03 = _this2.self._03;
			var a10 = _this2.self._10;
			var a11 = _this2.self._11;
			var a12 = _this2.self._12;
			var a13 = _this2.self._13;
			var a20 = _this2.self._20;
			var a21 = _this2.self._21;
			var a22 = _this2.self._22;
			var a23 = _this2.self._23;
			var a30 = _this2.self._30;
			var a31 = _this2.self._31;
			var a32 = _this2.self._32;
			var a33 = _this2.self._33;
			var b0 = m2.self._00;
			var b1 = m2.self._10;
			var b2 = m2.self._20;
			var b3 = m2.self._30;
			_this2.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			_this2.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			_this2.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			_this2.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			b0 = m2.self._01;
			b1 = m2.self._11;
			b2 = m2.self._21;
			b3 = m2.self._31;
			_this2.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			_this2.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			_this2.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			_this2.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			b0 = m2.self._02;
			b1 = m2.self._12;
			b2 = m2.self._22;
			b3 = m2.self._32;
			_this2.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			_this2.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			_this2.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			_this2.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			b0 = m2.self._03;
			b1 = m2.self._13;
			b2 = m2.self._23;
			b3 = m2.self._33;
			_this2.self._03 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			_this2.self._13 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			_this2.self._23 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			_this2.self._33 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			this.cascadeData[i * 16] = iron_object_LightObject.m.self._00;
			this.cascadeData[i * 16 + 1] = iron_object_LightObject.m.self._01;
			this.cascadeData[i * 16 + 2] = iron_object_LightObject.m.self._02;
			this.cascadeData[i * 16 + 3] = iron_object_LightObject.m.self._03;
			this.cascadeData[i * 16 + 4] = iron_object_LightObject.m.self._10;
			this.cascadeData[i * 16 + 5] = iron_object_LightObject.m.self._11;
			this.cascadeData[i * 16 + 6] = iron_object_LightObject.m.self._12;
			this.cascadeData[i * 16 + 7] = iron_object_LightObject.m.self._13;
			this.cascadeData[i * 16 + 8] = iron_object_LightObject.m.self._20;
			this.cascadeData[i * 16 + 9] = iron_object_LightObject.m.self._21;
			this.cascadeData[i * 16 + 10] = iron_object_LightObject.m.self._22;
			this.cascadeData[i * 16 + 11] = iron_object_LightObject.m.self._23;
			this.cascadeData[i * 16 + 12] = iron_object_LightObject.m.self._30;
			this.cascadeData[i * 16 + 13] = iron_object_LightObject.m.self._31;
			this.cascadeData[i * 16 + 14] = iron_object_LightObject.m.self._32;
			this.cascadeData[i * 16 + 15] = iron_object_LightObject.m.self._33;
		}
		this.cascadeData[iron_object_LightObject.cascadeCount * 16] = this.cascadeSplit[0];
		this.cascadeData[iron_object_LightObject.cascadeCount * 16 + 1] = this.cascadeSplit[1];
		this.cascadeData[iron_object_LightObject.cascadeCount * 16 + 2] = this.cascadeSplit[2];
		this.cascadeData[iron_object_LightObject.cascadeCount * 16 + 3] = this.cascadeSplit[3];
		return this.cascadeData;
	}
	,right: function() {
		return new iron_math_Vec4(this.V.self._00,this.V.self._10,this.V.self._20);
	}
	,up: function() {
		return new iron_math_Vec4(this.V.self._01,this.V.self._11,this.V.self._21);
	}
	,look: function() {
		return new iron_math_Vec4(this.V.self._02,this.V.self._12,this.V.self._22);
	}
	,__class__: iron_object_LightObject
});
var iron_object_MeshObject = function(data,materials) {
	this.force_context = null;
	this.skip_context = null;
	this.tilesheet = null;
	this.frustumCulling = true;
	this.screenSize = 0.0;
	this.particleIndex = -1;
	this.particleOwner = null;
	this.particleChildren = null;
	this.particleSystems = null;
	this.materialIndex = 0;
	this.data = null;
	iron_object_Object.call(this);
	this.materials = materials;
	this.setData(data);
	iron_Scene.active.meshes.push(this);
};
$hxClasses["iron.object.MeshObject"] = iron_object_MeshObject;
iron_object_MeshObject.__name__ = "iron.object.MeshObject";
iron_object_MeshObject.__super__ = iron_object_Object;
iron_object_MeshObject.prototype = $extend(iron_object_Object.prototype,{
	data: null
	,materials: null
	,materialIndex: null
	,particleSystems: null
	,particleChildren: null
	,particleOwner: null
	,particleIndex: null
	,cameraDistance: null
	,screenSize: null
	,frustumCulling: null
	,tilesheet: null
	,skip_context: null
	,force_context: null
	,setData: function(data) {
		this.data = data;
		data.refcount++;
		data.geom.build();
		this.transform.scaleWorld = data.scalePos;
	}
	,remove: function() {
		if(this.particleChildren != null) {
			var _g = 0;
			var _g1 = this.particleChildren;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.remove();
			}
			this.particleChildren = null;
		}
		if(this.particleSystems != null) {
			var _g2 = 0;
			var _g11 = this.particleSystems;
			while(_g2 < _g11.length) {
				var psys = _g11[_g2];
				++_g2;
				psys.remove();
			}
			this.particleSystems = null;
		}
		if(this.tilesheet != null) {
			this.tilesheet.remove();
		}
		if(iron_Scene.active != null) {
			HxOverrides.remove(iron_Scene.active.meshes,this);
		}
		this.data.refcount--;
		iron_object_Object.prototype.remove.call(this);
	}
	,setupAnimation: function(oactions) {
		var hasAction = this.parent != null && this.parent.raw != null && this.parent.raw.bone_actions != null;
		if(hasAction) {
			var armatureName = this.parent.name;
			this.animation = this.getParentArmature(armatureName);
			if(this.animation == null) {
				this.animation = new iron_object_BoneAnimation(armatureName);
			}
			if(this.data.isSkinned) {
				(js_Boot.__cast(this.animation , iron_object_BoneAnimation)).setSkin(this);
			}
		}
		iron_object_Object.prototype.setupAnimation.call(this,oactions);
	}
	,setupParticleSystem: function(sceneName,pref) {
		if(this.particleSystems == null) {
			this.particleSystems = [];
		}
		var psys = new iron_object_ParticleSystem(sceneName,pref);
		this.particleSystems.push(psys);
	}
	,setupTilesheet: function(sceneName,tilesheet_ref,tilesheet_action_ref) {
		this.tilesheet = new iron_object_Tilesheet(sceneName,tilesheet_ref,tilesheet_action_ref);
	}
	,isLodMaterial: function() {
		if(this.raw != null && this.raw.lod_material != null) {
			return this.raw.lod_material == true;
		} else {
			return false;
		}
	}
	,setCulled: function(isShadow,b) {
		if(isShadow) {
			this.culledShadow = b;
		} else {
			this.culledMesh = b;
		}
		this.culled = this.culledMesh && this.culledShadow;
		if(b) {
			iron_RenderPath.culled++;
		}
		return b;
	}
	,cullMaterial: function(context) {
		var mats = this.materials;
		if(!(this.raw != null && this.raw.lod_material != null && this.raw.lod_material == true) && !this.validContext(mats,context)) {
			return true;
		}
		var isShadow = context == "shadowmap";
		if(!this.visibleMesh && !isShadow) {
			return this.setCulled(isShadow,true);
		}
		if(!this.visibleShadow && isShadow) {
			return this.setCulled(isShadow,true);
		}
		if(this.skip_context == context) {
			return this.setCulled(isShadow,true);
		}
		if(this.force_context != null && this.force_context != context) {
			return this.setCulled(isShadow,true);
		}
		if(context == "voxel" && this.raw != null && this.raw.mobile == true) {
			return this.setCulled(isShadow,true);
		}
		return this.setCulled(isShadow,false);
	}
	,cullMesh: function(context,camera,light) {
		if(camera == null) {
			return false;
		}
		if(camera.data.raw.frustum_culling && this.frustumCulling) {
			var radiusScale = this.data.isSkinned ? 2.0 : 1.0;
			if(this.particleSystems != null || this.particleOwner != null) {
				radiusScale *= 1000;
			}
			if(context == "voxel") {
				radiusScale *= 100;
			}
			if(this.data.geom.instanced) {
				radiusScale *= 100;
			}
			var isShadow = context == "shadowmap";
			var frustumPlanes = isShadow ? light.frustumPlanes : camera.frustumPlanes;
			if(isShadow && light.data.raw.type != "sun") {
				light.transform.radius = light.data.raw.far_plane;
				if(!iron_object_CameraObject.sphereInFrustum(camera.frustumPlanes,light.transform)) {
					return this.setCulled(isShadow,true);
				}
			}
			if(!iron_object_CameraObject.sphereInFrustum(frustumPlanes,this.transform,radiusScale)) {
				return this.setCulled(isShadow,true);
			}
		}
		this.culled = false;
		return this.culled;
	}
	,skipContext: function(context,mat) {
		if(mat.raw.skip_context != null && mat.raw.skip_context == context) {
			return true;
		}
		return false;
	}
	,getContexts: function(context,materials,materialContexts,shaderContexts) {
		var _g = 0;
		while(_g < materials.length) {
			var mat = materials[_g];
			++_g;
			var found = false;
			var _g1 = 0;
			var _g2 = mat.raw.contexts.length;
			while(_g1 < _g2) {
				var i = _g1++;
				if(HxOverrides.substr(mat.raw.contexts[i].name,0,context.length) == context) {
					materialContexts.push(mat.contexts[i]);
					shaderContexts.push(mat.shader.getContext(context));
					found = true;
					break;
				}
			}
			if(!found) {
				materialContexts.push(null);
				shaderContexts.push(null);
			}
		}
	}
	,render: function(g,context,bindParams) {
		var _gthis = this;
		if(this.data == null || !this.data.geom.ready) {
			return;
		}
		if(!this.visible) {
			return;
		}
		if(this.cullMesh(context,iron_Scene.active.camera,iron_RenderPath.active.light)) {
			return;
		}
		var meshContext = this.raw != null && context == "mesh";
		if(this.raw != null && this.raw.is_particle && this.particleOwner == null) {
			return;
		}
		if(this.particleSystems != null && meshContext) {
			if(this.particleChildren == null) {
				this.particleChildren = [];
				var _g = 0;
				var _g1 = this.particleSystems;
				while(_g < _g1.length) {
					var psys = _g1[_g];
					++_g;
					iron_Scene.active.spawnObject(psys.data.raw.instance_object,null,function(o) {
						if(o != null) {
							var c = o;
							_gthis.particleChildren.push(c);
							c.particleOwner = _gthis;
							c.particleIndex = _gthis.particleChildren.length - 1;
						}
					});
				}
			}
			var _g2 = 0;
			var _g11 = this.particleSystems.length;
			while(_g2 < _g11) {
				var i = _g2++;
				this.particleSystems[i].update(this.particleChildren[i],this);
			}
		}
		if(this.particleSystems != null && this.particleSystems.length > 0 && !this.particleSystems[0].data.raw.render_emitter) {
			return;
		}
		if(this.tilesheet != null) {
			this.tilesheet.update();
		}
		if(this.cullMaterial(context)) {
			return;
		}
		var mats = this.materials;
		var lod = this;
		if(this.raw != null && this.raw.lods != null && this.raw.lods.length > 0) {
			var camera = iron_Scene.active.camera;
			var tr = this.transform;
			var volume = tr.dim.x * tr.dim.y * tr.dim.z;
			this.screenSize = volume * (1.0 / this.cameraDistance);
			this.screenSize = this.screenSize > 1.0 ? 1.0 : this.screenSize;
			if(this.lods == null) {
				this.lods = [];
				var _g3 = 0;
				var _g12 = this.raw.lods;
				while(_g3 < _g12.length) {
					var l = _g12[_g3];
					++_g3;
					if(l.object_ref == "") {
						this.lods.push(null);
					} else {
						this.lods.push(iron_Scene.active.getChild(l.object_ref));
					}
				}
			}
			if(context == "voxel") {
				lod = this.lods[this.lods.length - 1];
			} else {
				var _g4 = 0;
				var _g13 = this.raw.lods.length;
				while(_g4 < _g13) {
					var i1 = _g4++;
					if(this.screenSize > this.raw.lods[i1].screen_size) {
						break;
					}
					lod = this.lods[i1];
					if(this.raw != null && this.raw.lod_material != null && this.raw.lod_material == true) {
						mats = lod.materials;
					}
				}
			}
			if(lod == null) {
				return;
			}
		} else {
			var camera1 = iron_Scene.active.camera;
			var tr1 = this.transform;
			var volume1 = tr1.dim.x * tr1.dim.y * tr1.dim.z;
			this.screenSize = volume1 * (1.0 / this.cameraDistance);
			this.screenSize = this.screenSize > 1.0 ? 1.0 : this.screenSize;
		}
		if(this.raw != null && this.raw.lod_material != null && this.raw.lod_material == true && !this.validContext(mats,context)) {
			return;
		}
		var materialContexts = [];
		var shaderContexts = [];
		this.getContexts(context,mats,materialContexts,shaderContexts);
		iron_object_Uniforms.posUnpack = this.data.scalePos;
		iron_object_Uniforms.texUnpack = this.data.scaleTex;
		this.transform.update();
		var ldata = lod.data;
		var _g5 = 0;
		var _g14 = ldata.geom.indexBuffers.length;
		while(_g5 < _g14) {
			var i2 = _g5++;
			var mi = ldata.geom.materialIndices[i2];
			if(shaderContexts.length <= mi || shaderContexts[mi] == null) {
				continue;
			}
			this.materialIndex = mi;
			if(this.materials.length > mi && this.skipContext(context,this.materials[mi])) {
				continue;
			}
			var scontext = shaderContexts[mi];
			if(scontext == null) {
				continue;
			}
			var elems = scontext.raw.vertex_elements;
			if(scontext.pipeState != iron_object_MeshObject.lastPipeline) {
				g.setPipeline(scontext.pipeState);
				iron_object_MeshObject.lastPipeline = scontext.pipeState;
			}
			iron_object_Uniforms.setContextConstants(g,scontext,bindParams);
			iron_object_Uniforms.setObjectConstants(g,scontext,this);
			if(materialContexts.length > mi) {
				iron_object_Uniforms.setMaterialConstants(g,scontext,materialContexts[mi]);
			}
			if(ldata.geom.instanced) {
				g.setVertexBuffers([ldata.geom.get(elems),ldata.geom.instancedVB]);
			} else {
				g.setVertexBuffer(ldata.geom.get(elems));
			}
			g.setIndexBuffer(ldata.geom.indexBuffers[i2]);
			if(ldata.geom.instanced) {
				g.drawIndexedVerticesInstanced(ldata.geom.instanceCount,ldata.geom.start,ldata.geom.count);
			} else {
				g.drawIndexedVertices(ldata.geom.start,ldata.geom.count);
			}
		}
		var isShadow = context == "shadowmap";
		if(meshContext) {
			iron_RenderPath.numTrisMesh += ldata.geom.numTris;
		} else if(isShadow) {
			iron_RenderPath.numTrisShadow += ldata.geom.numTris;
		}
		iron_RenderPath.drawCalls++;
	}
	,validContext: function(mats,context) {
		var _g = 0;
		while(_g < mats.length) {
			var mat = mats[_g];
			++_g;
			if(mat.getContext(context) != null) {
				return true;
			}
		}
		return false;
	}
	,computeCameraDistance: function(camX,camY,camZ) {
		var vx = camX - this.transform.world.self._30;
		var vy = camY - this.transform.world.self._31;
		var vz = camZ - this.transform.world.self._32;
		this.cameraDistance = Math.sqrt(vx * vx + vy * vy + vz * vz);
	}
	,computeScreenSize: function(camera) {
		var tr = this.transform;
		var volume = tr.dim.x * tr.dim.y * tr.dim.z;
		this.screenSize = volume * (1.0 / this.cameraDistance);
		this.screenSize = this.screenSize > 1.0 ? 1.0 : this.screenSize;
	}
	,initLods: function() {
		if(this.lods == null) {
			this.lods = [];
			var _g = 0;
			var _g1 = this.raw.lods;
			while(_g < _g1.length) {
				var l = _g1[_g];
				++_g;
				if(l.object_ref == "") {
					this.lods.push(null);
				} else {
					this.lods.push(iron_Scene.active.getChild(l.object_ref));
				}
			}
		}
	}
	,__class__: iron_object_MeshObject
});
var iron_object_ObjectAnimation = function(object,oactions) {
	this.bezierFrameIndex = -1;
	this.s0 = 0.0;
	this.object = object;
	this.oactions = oactions;
	this.isSkinned = false;
	iron_object_Animation.call(this);
};
$hxClasses["iron.object.ObjectAnimation"] = iron_object_ObjectAnimation;
iron_object_ObjectAnimation.__name__ = "iron.object.ObjectAnimation";
iron_object_ObjectAnimation.__super__ = iron_object_Animation;
iron_object_ObjectAnimation.prototype = $extend(iron_object_Animation.prototype,{
	object: null
	,oactions: null
	,oaction: null
	,s0: null
	,bezierFrameIndex: null
	,getAction: function(action) {
		var _g = 0;
		var _g1 = this.oactions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a != null && a.objects[0].name == action) {
				return a.objects[0];
			}
		}
		return null;
	}
	,play: function(action,onComplete,blendTime,speed,loop) {
		if(loop == null) {
			loop = true;
		}
		if(speed == null) {
			speed = 1.0;
		}
		if(blendTime == null) {
			blendTime = 0.0;
		}
		if(action == null) {
			action = "";
		}
		iron_object_Animation.prototype.play.call(this,action,onComplete,blendTime,speed,loop);
		if(this.action == "" && this.oactions[0] != null) {
			this.action = this.oactions[0].objects[0].name;
		}
		this.oaction = this.getAction(this.action);
		if(this.oaction != null) {
			this.isSampled = this.oaction.sampled != null && this.oaction.sampled;
		}
	}
	,update: function(delta) {
		if(!this.object.visible || this.object.culled || this.oaction == null) {
			return;
		}
		iron_object_Animation.beginProfile();
		iron_object_Animation.prototype.update.call(this,delta);
		if(this.paused) {
			return;
		}
		if(!this.isSkinned) {
			this.updateObjectAnim();
		}
		iron_object_Animation.endProfile();
	}
	,updateObjectAnim: function() {
		this.updateTransformAnim(this.oaction.anim,this.object.transform);
		this.object.transform.buildMatrix();
	}
	,interpolateLinear: function(t,t1,t2,v1,v2) {
		var s = (t - t1) / (t2 - t1);
		return (1.0 - s) * v1 + s * v2;
	}
	,isTrackEnd: function(track) {
		if(this.speed > 0) {
			return this.frameIndex >= track.frames.length - 2;
		} else {
			return this.frameIndex <= 0;
		}
	}
	,checkFrameIndexT: function(frameValues,t) {
		if(this.speed > 0) {
			if(this.frameIndex < frameValues.length - 2) {
				return t > frameValues[this.frameIndex + 1] * this.frameTime;
			} else {
				return false;
			}
		} else if(this.frameIndex > 1) {
			return t > frameValues[this.frameIndex - 1] * this.frameTime;
		} else {
			return false;
		}
	}
	,updateTransformAnim: function(anim,transform) {
		if(anim == null) {
			return;
		}
		var total = anim.end * this.frameTime - anim.begin * this.frameTime;
		if(anim.has_delta) {
			var t = transform;
			if(t.dloc == null) {
				t.dloc = new iron_math_Vec4();
				t.drot = new iron_math_Quat();
				t.dscale = new iron_math_Vec4();
			}
			var _this = t.dloc;
			_this.x = 0;
			_this.y = 0;
			_this.z = 0;
			_this.w = 1.0;
			var _this1 = t.dscale;
			_this1.x = 0;
			_this1.y = 0;
			_this1.z = 0;
			_this1.w = 1.0;
			t._deulerX = t._deulerY = t._deulerZ = 0.0;
		}
		var _g = 0;
		var _g1 = anim.tracks;
		while(_g < _g1.length) {
			var track = _g1[_g];
			++_g;
			if(this.frameIndex == -1) {
				this.rewind(track);
			}
			var sign = this.speed > 0 ? 1 : -1;
			var t1 = this.time + anim.begin * this.frameTime;
			while(true) {
				var frameValues = track.frames;
				if(!(this.speed > 0 ? this.frameIndex < frameValues.length - 2 && t1 > frameValues[this.frameIndex + 1] * this.frameTime : this.frameIndex > 1 && t1 > frameValues[this.frameIndex - 1] * this.frameTime)) {
					break;
				}
				this.frameIndex += sign;
			}
			if(this.frameIndex >= track.frames.length) {
				continue;
			}
			if(this.time > total) {
				if(this.onComplete != null) {
					this.onComplete();
				}
				if(this.loop) {
					this.rewind(track);
				} else {
					this.frameIndex -= sign;
					this.paused = true;
				}
				return;
			}
			var ti = this.frameIndex;
			var t11 = track.frames[ti] * this.frameTime;
			var t2 = track.frames[ti + sign] * this.frameTime;
			var v1 = track.values[ti];
			var v2 = track.values[ti + sign];
			var s = (t1 - t11) / (t2 - t11);
			var value = (1.0 - s) * v1 + s * v2;
			switch(track.target) {
			case "dqwrot":
				transform.drot.w = value;
				break;
			case "dqxrot":
				transform.drot.x = value;
				break;
			case "dqyrot":
				transform.drot.y = value;
				break;
			case "dqzrot":
				transform.drot.z = value;
				break;
			case "dxloc":
				transform.dloc.x = value;
				break;
			case "dxrot":
				transform._deulerX = value;
				break;
			case "dxscl":
				transform.dscale.x = value;
				break;
			case "dyloc":
				transform.dloc.y = value;
				break;
			case "dyrot":
				transform._deulerY = value;
				break;
			case "dyscl":
				transform.dscale.y = value;
				break;
			case "dzloc":
				transform.dloc.z = value;
				break;
			case "dzrot":
				transform._deulerZ = value;
				break;
			case "dzscl":
				transform.dscale.z = value;
				break;
			case "qwrot":
				transform.rot.w = value;
				break;
			case "qxrot":
				transform.rot.x = value;
				break;
			case "qyrot":
				transform.rot.y = value;
				break;
			case "qzrot":
				transform.rot.z = value;
				break;
			case "xloc":
				transform.loc.x = value;
				break;
			case "xrot":
				transform.setRotation(value,transform._eulerY,transform._eulerZ);
				break;
			case "xscl":
				transform.scale.x = value;
				break;
			case "yloc":
				transform.loc.y = value;
				break;
			case "yrot":
				transform.setRotation(transform._eulerX,value,transform._eulerZ);
				break;
			case "yscl":
				transform.scale.y = value;
				break;
			case "zloc":
				transform.loc.z = value;
				break;
			case "zrot":
				transform.setRotation(transform._eulerX,transform._eulerY,value);
				break;
			case "zscl":
				transform.scale.z = value;
				break;
			}
		}
	}
	,totalFrames: function() {
		if(this.oaction == null || this.oaction.anim == null) {
			return 0;
		}
		return this.oaction.anim.end - this.oaction.anim.begin;
	}
	,__class__: iron_object_ObjectAnimation
});
var iron_object_ParticleSystem = function(sceneName,pref) {
	this.m = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
	this.lapTime = 0.0;
	this.lap = 0;
	this.count = 0;
	this.seed = 0;
	this.spawnRate = 0.0;
	this.time = 0.0;
	this.animtime = 0.0;
	this.lifetime = 0.0;
	this.frameRate = 24;
	this.speed = 1.0;
	var _gthis = this;
	this.seed = pref.seed;
	this.particles = [];
	this.ready = false;
	iron_data_Data.getParticle(sceneName,pref.particle,function(b) {
		_gthis.data = b;
		_gthis.r = _gthis.data.raw;
		if(iron_Scene.active.raw.gravity != null) {
			_gthis.gx = iron_Scene.active.raw.gravity[0] * _gthis.r.weight_gravity;
			_gthis.gy = iron_Scene.active.raw.gravity[1] * _gthis.r.weight_gravity;
			_gthis.gz = iron_Scene.active.raw.gravity[2] * _gthis.r.weight_gravity;
		} else {
			_gthis.gx = 0;
			_gthis.gy = 0;
			_gthis.gz = -9.81 * _gthis.r.weight_gravity;
		}
		_gthis.alignx = _gthis.r.object_align_factor[0] / 2;
		_gthis.aligny = _gthis.r.object_align_factor[1] / 2;
		_gthis.alignz = _gthis.r.object_align_factor[2] / 2;
		_gthis.lifetime = _gthis.r.lifetime / _gthis.frameRate;
		_gthis.animtime = (_gthis.r.frame_end - _gthis.r.frame_start) / _gthis.frameRate;
		_gthis.spawnRate = (_gthis.r.frame_end - _gthis.r.frame_start) / _gthis.r.count / _gthis.frameRate;
		var _g = 0;
		var _g1 = _gthis.r.count;
		while(_g < _g1) {
			var i = _g++;
			_gthis.particles.push(new iron_object_Particle(i));
		}
		_gthis.ready = true;
	});
};
$hxClasses["iron.object.ParticleSystem"] = iron_object_ParticleSystem;
iron_object_ParticleSystem.__name__ = "iron.object.ParticleSystem";
iron_object_ParticleSystem.prototype = {
	data: null
	,speed: null
	,particles: null
	,ready: null
	,frameRate: null
	,lifetime: null
	,animtime: null
	,time: null
	,spawnRate: null
	,seed: null
	,r: null
	,gx: null
	,gy: null
	,gz: null
	,alignx: null
	,aligny: null
	,alignz: null
	,dimx: null
	,dimy: null
	,tilesx: null
	,tilesy: null
	,tilesFramerate: null
	,count: null
	,lap: null
	,lapTime: null
	,m: null
	,update: function(object,owner) {
		if(!this.ready || object == null || this.speed == 0.0) {
			return;
		}
		object.transform.loc = owner.transform.loc;
		object.transform.rot = owner.transform.rot;
		object.transform.buildMatrix();
		owner.transform.buildMatrix();
		var _this = object.transform.dim;
		var v = owner.transform.dim;
		_this.x = v.x;
		_this.y = v.y;
		_this.z = v.z;
		_this.w = v.w;
		this.dimx = object.transform.dim.x;
		this.dimy = object.transform.dim.y;
		if(object.tilesheet != null) {
			this.tilesx = object.tilesheet.raw.tilesx;
			this.tilesy = object.tilesheet.raw.tilesy;
			this.tilesFramerate = object.tilesheet.raw.framerate;
		}
		this.time += iron_system_Time.realDelta * this.speed;
		this.lap = this.time / this.animtime | 0;
		this.lapTime = this.time - this.lap * this.animtime;
		this.count = this.lapTime / this.spawnRate | 0;
		this.updateGpu(object,owner);
	}
	,getData: function() {
		var hair = this.r.type == 1;
		this.m.self._00 = this.r.loop ? this.animtime : -this.animtime;
		this.m.self._01 = hair ? 1 / this.particles.length : this.spawnRate;
		this.m.self._02 = hair ? 1 : this.lifetime;
		this.m.self._03 = this.particles.length;
		this.m.self._10 = hair ? 0 : this.alignx;
		this.m.self._11 = hair ? 0 : this.aligny;
		this.m.self._12 = hair ? 0 : this.alignz;
		this.m.self._13 = hair ? 0 : this.r.factor_random;
		this.m.self._20 = hair ? 0 : this.gx * this.r.mass;
		this.m.self._21 = hair ? 0 : this.gy * this.r.mass;
		this.m.self._22 = hair ? 0 : this.gz * this.r.mass;
		this.m.self._23 = hair ? 0 : this.r.lifetime_random;
		this.m.self._30 = this.tilesx;
		this.m.self._31 = this.tilesy;
		this.m.self._32 = 1 / this.tilesFramerate;
		this.m.self._33 = hair ? 1 : this.lapTime;
		return this.m;
	}
	,updateGpu: function(object,owner) {
		if(!object.data.geom.instanced) {
			this.setupGeomGpu(object,owner);
		}
	}
	,setupGeomGpu: function(object,owner) {
		var this1 = new Float32Array(this.particles.length * 3);
		var instancedData = this1;
		var i = 0;
		if(this.r.emit_from == 0) {
			var pa = owner.data.geom.positions;
			var sc = owner.data.scalePos;
			var _g = 0;
			var _g1 = this.particles;
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				var j = this.fhash(i) * (pa.values.length / pa.size) | 0;
				instancedData[i] = pa.values[j * pa.size] / 32767 * sc;
				++i;
				instancedData[i] = pa.values[j * pa.size + 1] / 32767 * sc;
				++i;
				instancedData[i] = pa.values[j * pa.size + 2] / 32767 * sc;
				++i;
			}
		} else {
			var _g2 = 0;
			var _g11 = this.particles;
			while(_g2 < _g11.length) {
				var p1 = _g11[_g2];
				++_g2;
				instancedData[i] = (Math.random() * 2.0 - 1.0) * (object.transform.dim.x / 2.0);
				++i;
				instancedData[i] = (Math.random() * 2.0 - 1.0) * (object.transform.dim.y / 2.0);
				++i;
				instancedData[i] = (Math.random() * 2.0 - 1.0) * (object.transform.dim.z / 2.0);
				++i;
			}
		}
		if(this.r.particle_size != 1.0) {
			object.data.geom.applyScale(this.r.particle_size,this.r.particle_size,this.r.particle_size);
		}
		object.data.geom.setupInstanced(instancedData,1,0);
	}
	,fhash: function(n) {
		var s = n + 1.0;
		s *= 9301.0 % s;
		s = (s * 9301.0 + 49297.0) % 233280.0;
		return s / 233280.0;
	}
	,remove: function() {
	}
	,__class__: iron_object_ParticleSystem
};
var iron_object_Particle = function(i) {
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.i = i;
};
$hxClasses["iron.object.Particle"] = iron_object_Particle;
iron_object_Particle.__name__ = "iron.object.Particle";
iron_object_Particle.prototype = {
	i: null
	,x: null
	,y: null
	,z: null
	,cameraDistance: null
	,__class__: iron_object_Particle
};
var iron_object_ProbeObject = function() {
	iron_object_Object.call(this);
};
$hxClasses["iron.object.ProbeObject"] = iron_object_ProbeObject;
iron_object_ProbeObject.__name__ = "iron.object.ProbeObject";
iron_object_ProbeObject.__super__ = iron_object_Object;
iron_object_ProbeObject.prototype = $extend(iron_object_Object.prototype,{
	__class__: iron_object_ProbeObject
});
var iron_object_SpeakerObject = function(data) {
	this.paused = false;
	this.channels = [];
	this.sound = null;
	var _gthis = this;
	iron_object_Object.call(this);
	this.data = data;
	iron_Scene.active.speakers.push(this);
	if(data.sound == "") {
		return;
	}
	iron_data_Data.getSound(data.sound,function(sound) {
		_gthis.sound = sound;
		iron_App.notifyOnInit($bind(_gthis,_gthis.init));
	});
};
$hxClasses["iron.object.SpeakerObject"] = iron_object_SpeakerObject;
iron_object_SpeakerObject.__name__ = "iron.object.SpeakerObject";
iron_object_SpeakerObject.__super__ = iron_object_Object;
iron_object_SpeakerObject.prototype = $extend(iron_object_Object.prototype,{
	data: null
	,sound: null
	,channels: null
	,paused: null
	,init: function() {
		if(this.visible && this.data.play_on_start) {
			this.play();
		}
	}
	,play: function() {
		if(this.sound == null || this.data.muted) {
			return;
		}
		if(this.paused) {
			var _g = 0;
			var _g1 = this.channels;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.play();
			}
			this.paused = false;
			return;
		}
		var channel = iron_system_Audio.play(this.sound,this.data.loop,this.data.stream);
		this.channels.push(channel);
		if(this.data.attenuation > 0 && this.channels.length == 1) {
			iron_App.notifyOnUpdate($bind(this,this.update));
		}
	}
	,pause: function() {
		var _g = 0;
		var _g1 = this.channels;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.pause();
		}
		this.paused = true;
	}
	,stop: function() {
		var _g = 0;
		var _g1 = this.channels;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.stop();
		}
		this.channels.splice(0,this.channels.length);
	}
	,update: function() {
		if(this.paused) {
			return;
		}
		var _g = 0;
		var _g1 = this.channels;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.get_finished()) {
				HxOverrides.remove(this.channels,c);
			}
		}
		if(this.channels.length == 0) {
			iron_App.removeUpdate($bind(this,this.update));
			return;
		}
		var cam = iron_Scene.active.camera;
		var _this = cam.transform.world;
		var x = _this.self._30;
		var y = _this.self._31;
		var z = _this.self._32;
		var w = _this.self._33;
		if(w == null) {
			w = 1.0;
		}
		if(z == null) {
			z = 0.0;
		}
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		var loc1_x = x;
		var loc1_y = y;
		var loc1_z = z;
		var loc1_w = w;
		var _this1 = this.transform.world;
		var x1 = _this1.self._30;
		var y1 = _this1.self._31;
		var z1 = _this1.self._32;
		var w1 = _this1.self._33;
		if(w1 == null) {
			w1 = 1.0;
		}
		if(z1 == null) {
			z1 = 0.0;
		}
		if(y1 == null) {
			y1 = 0.0;
		}
		if(x1 == null) {
			x1 = 0.0;
		}
		var loc2_x = x1;
		var loc2_y = y1;
		var loc2_z = z1;
		var loc2_w = w1;
		var vx = loc1_x - loc2_x;
		var vy = loc1_y - loc2_y;
		var vz = loc1_z - loc2_z;
		var d = Math.sqrt(vx * vx + vy * vy + vz * vz);
		d *= this.data.attenuation;
		var vol = 1.0 - Math.min(d / 100,1);
		var _g2 = 0;
		var _g3 = this.channels;
		while(_g2 < _g3.length) {
			var c1 = _g3[_g2];
			++_g2;
			c1.set_volume(vol * this.data.volume);
		}
	}
	,remove: function() {
		if(iron_Scene.active != null) {
			HxOverrides.remove(iron_Scene.active.speakers,this);
		}
		iron_object_Object.prototype.remove.call(this);
	}
	,__class__: iron_object_SpeakerObject
});
var iron_object_Tilesheet = function(sceneName,tilesheet_ref,tilesheet_action_ref) {
	this.onActionComplete = null;
	this.time = 0.0;
	this.frame = 0;
	this.paused = false;
	this.action = null;
	this.tileY = 0.0;
	this.tileX = 0.0;
	var _gthis = this;
	this.ready = false;
	iron_data_Data.getSceneRaw(sceneName,function(format) {
		var _g = 0;
		var _g1 = format.tilesheet_datas;
		while(_g < _g1.length) {
			var ts = _g1[_g];
			++_g;
			if(ts.name == tilesheet_ref) {
				_gthis.raw = ts;
				_gthis.play(tilesheet_action_ref);
				_gthis.ready = true;
				break;
			}
		}
	});
};
$hxClasses["iron.object.Tilesheet"] = iron_object_Tilesheet;
iron_object_Tilesheet.__name__ = "iron.object.Tilesheet";
iron_object_Tilesheet.prototype = {
	tileX: null
	,tileY: null
	,raw: null
	,action: null
	,ready: null
	,paused: null
	,frame: null
	,time: null
	,onActionComplete: null
	,play: function(action_ref,onActionComplete) {
		this.onActionComplete = onActionComplete;
		var _g = 0;
		var _g1 = this.raw.actions;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.name == action_ref) {
				this.action = a;
				break;
			}
		}
		this.setFrame(this.action.start);
		this.paused = false;
	}
	,pause: function() {
		this.paused = true;
	}
	,resume: function() {
		this.paused = false;
	}
	,remove: function() {
	}
	,update: function() {
		if(!this.ready || this.paused || this.action.start >= this.action.end) {
			return;
		}
		this.time += 0.016666666666666666 * iron_system_Time.scale;
		if(this.time >= 1 / this.raw.framerate) {
			this.setFrame(this.frame + 1);
		}
	}
	,setFrame: function(f) {
		this.frame = f;
		this.time = 0;
		var tx = this.frame % this.raw.tilesx;
		var ty = this.frame / this.raw.tilesx | 0;
		this.tileX = tx * (1 / this.raw.tilesx);
		this.tileY = ty * (1 / this.raw.tilesy);
		if(this.frame >= this.action.end && this.action.start < this.action.end) {
			if(this.onActionComplete != null) {
				this.onActionComplete();
			}
			if(this.action.loop) {
				this.setFrame(this.action.start);
			} else {
				this.paused = true;
			}
		}
	}
	,__class__: iron_object_Tilesheet
};
var iron_object_Transform = function(object) {
	this.dscale = null;
	this.drot = null;
	this.dloc = null;
	this.lastWorld = null;
	this.boneParent = null;
	this.scaleWorld = 1.0;
	this.localOnly = false;
	this.object = object;
	this.reset();
};
$hxClasses["iron.object.Transform"] = iron_object_Transform;
iron_object_Transform.__name__ = "iron.object.Transform";
iron_object_Transform.prototype = {
	world: null
	,localOnly: null
	,local: null
	,loc: null
	,rot: null
	,scale: null
	,scaleWorld: null
	,worldUnpack: null
	,dirty: null
	,object: null
	,dim: null
	,radius: null
	,boneParent: null
	,lastWorld: null
	,_eulerX: null
	,_eulerY: null
	,_eulerZ: null
	,dloc: null
	,drot: null
	,dscale: null
	,_deulerX: null
	,_deulerY: null
	,_deulerZ: null
	,reset: function() {
		this.world = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		this.worldUnpack = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		this.local = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
		this.loc = new iron_math_Vec4();
		this.rot = new iron_math_Quat();
		this.scale = new iron_math_Vec4(1.0,1.0,1.0);
		this.dim = new iron_math_Vec4(2.0,2.0,2.0);
		this.radius = 1.0;
		this.dirty = true;
	}
	,update: function() {
		if(this.dirty) {
			this.buildMatrix();
		}
	}
	,composeDelta: function() {
		var _this = this.dloc;
		var a = this.loc;
		var b = this.dloc;
		_this.x = a.x + b.x;
		_this.y = a.y + b.y;
		_this.z = a.z + b.z;
		var _this1 = this.dscale;
		var a1 = this.dscale;
		var b1 = this.scale;
		_this1.x = a1.x + b1.x;
		_this1.y = a1.y + b1.y;
		_this1.z = a1.z + b1.z;
		var _this2 = this.drot;
		var f = this._deulerX / 2;
		var c1 = Math.cos(f);
		var s1 = Math.sin(f);
		f = this._deulerY / 2;
		var c2 = Math.cos(f);
		var s2 = Math.sin(f);
		f = this._deulerZ / 2;
		var c3 = Math.cos(f);
		var s3 = Math.sin(f);
		_this2.x = s1 * c2 * c3 + c1 * s2 * s3;
		_this2.y = c1 * s2 * c3 + s1 * c2 * s3;
		_this2.z = c1 * c2 * s3 - s1 * s2 * c3;
		_this2.w = c1 * c2 * c3 - s1 * s2 * s3;
		var _this3 = this.drot;
		var q1 = this.rot;
		var q2 = this.drot;
		var q1x = q1.x;
		var q1y = q1.y;
		var q1z = q1.z;
		var q1w = q1.w;
		var q2x = q2.x;
		var q2y = q2.y;
		var q2z = q2.z;
		var q2w = q2.w;
		_this3.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;
		_this3.y = q1w * q2y - q1x * q2z + q1y * q2w + q1z * q2x;
		_this3.z = q1w * q2z + q1x * q2y - q1y * q2x + q1z * q2w;
		_this3.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;
		var _this4 = this.local;
		var loc = this.dloc;
		var quat = this.drot;
		var sc = this.dscale;
		var x = quat.x;
		var y = quat.y;
		var z = quat.z;
		var w = quat.w;
		var x2 = x + x;
		var y2 = y + y;
		var z2 = z + z;
		var xx = x * x2;
		var xy = x * y2;
		var xz = x * z2;
		var yy = y * y2;
		var yz = y * z2;
		var zz = z * z2;
		var wx = w * x2;
		var wy = w * y2;
		var wz = w * z2;
		_this4.self._00 = 1.0 - (yy + zz);
		_this4.self._10 = xy - wz;
		_this4.self._20 = xz + wy;
		_this4.self._01 = xy + wz;
		_this4.self._11 = 1.0 - (xx + zz);
		_this4.self._21 = yz - wx;
		_this4.self._02 = xz - wy;
		_this4.self._12 = yz + wx;
		_this4.self._22 = 1.0 - (xx + yy);
		_this4.self._03 = 0.0;
		_this4.self._13 = 0.0;
		_this4.self._23 = 0.0;
		_this4.self._30 = 0.0;
		_this4.self._31 = 0.0;
		_this4.self._32 = 0.0;
		_this4.self._33 = 1.0;
		var x1 = sc.x;
		var y1 = sc.y;
		var z1 = sc.z;
		_this4.self._00 *= x1;
		_this4.self._01 *= x1;
		_this4.self._02 *= x1;
		_this4.self._03 *= x1;
		_this4.self._10 *= y1;
		_this4.self._11 *= y1;
		_this4.self._12 *= y1;
		_this4.self._13 *= y1;
		_this4.self._20 *= z1;
		_this4.self._21 *= z1;
		_this4.self._22 *= z1;
		_this4.self._23 *= z1;
		_this4.self._30 = loc.x;
		_this4.self._31 = loc.y;
		_this4.self._32 = loc.z;
	}
	,buildMatrix: function() {
		if(this.dloc == null) {
			var _this = this.local;
			var loc = this.loc;
			var quat = this.rot;
			var sc = this.scale;
			var x = quat.x;
			var y = quat.y;
			var z = quat.z;
			var w = quat.w;
			var x2 = x + x;
			var y2 = y + y;
			var z2 = z + z;
			var xx = x * x2;
			var xy = x * y2;
			var xz = x * z2;
			var yy = y * y2;
			var yz = y * z2;
			var zz = z * z2;
			var wx = w * x2;
			var wy = w * y2;
			var wz = w * z2;
			_this.self._00 = 1.0 - (yy + zz);
			_this.self._10 = xy - wz;
			_this.self._20 = xz + wy;
			_this.self._01 = xy + wz;
			_this.self._11 = 1.0 - (xx + zz);
			_this.self._21 = yz - wx;
			_this.self._02 = xz - wy;
			_this.self._12 = yz + wx;
			_this.self._22 = 1.0 - (xx + yy);
			_this.self._03 = 0.0;
			_this.self._13 = 0.0;
			_this.self._23 = 0.0;
			_this.self._30 = 0.0;
			_this.self._31 = 0.0;
			_this.self._32 = 0.0;
			_this.self._33 = 1.0;
			var x1 = sc.x;
			var y1 = sc.y;
			var z1 = sc.z;
			_this.self._00 *= x1;
			_this.self._01 *= x1;
			_this.self._02 *= x1;
			_this.self._03 *= x1;
			_this.self._10 *= y1;
			_this.self._11 *= y1;
			_this.self._12 *= y1;
			_this.self._13 *= y1;
			_this.self._20 *= z1;
			_this.self._21 *= z1;
			_this.self._22 *= z1;
			_this.self._23 *= z1;
			_this.self._30 = loc.x;
			_this.self._31 = loc.y;
			_this.self._32 = loc.z;
		} else {
			this.composeDelta();
		}
		if(this.boneParent != null) {
			var _this1 = this.local;
			var b = this.boneParent;
			var a = this.local;
			var a00 = a.self._00;
			var a01 = a.self._01;
			var a02 = a.self._02;
			var a03 = a.self._03;
			var a10 = a.self._10;
			var a11 = a.self._11;
			var a12 = a.self._12;
			var a13 = a.self._13;
			var a20 = a.self._20;
			var a21 = a.self._21;
			var a22 = a.self._22;
			var a23 = a.self._23;
			var a30 = a.self._30;
			var a31 = a.self._31;
			var a32 = a.self._32;
			var a33 = a.self._33;
			var b0 = b.self._00;
			var b1 = b.self._10;
			var b2 = b.self._20;
			var b3 = b.self._30;
			_this1.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			_this1.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			_this1.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			_this1.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			b0 = b.self._01;
			b1 = b.self._11;
			b2 = b.self._21;
			b3 = b.self._31;
			_this1.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			_this1.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			_this1.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			_this1.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			b0 = b.self._02;
			b1 = b.self._12;
			b2 = b.self._22;
			b3 = b.self._32;
			_this1.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			_this1.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			_this1.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			_this1.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
			b0 = b.self._03;
			b1 = b.self._13;
			b2 = b.self._23;
			b3 = b.self._33;
			_this1.self._03 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
			_this1.self._13 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
			_this1.self._23 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
			_this1.self._33 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		}
		if(this.object.parent != null && !this.localOnly) {
			var _this2 = this.world;
			var a1 = this.local;
			var b4 = this.object.parent.transform.world;
			var a001 = a1.self._00;
			var a011 = a1.self._01;
			var a021 = a1.self._02;
			var a031 = a1.self._03;
			var a101 = a1.self._10;
			var a111 = a1.self._11;
			var a121 = a1.self._12;
			var a131 = a1.self._13;
			var a201 = a1.self._20;
			var a211 = a1.self._21;
			var a221 = a1.self._22;
			var a231 = a1.self._23;
			var a301 = a1.self._30;
			var a311 = a1.self._31;
			var a321 = a1.self._32;
			var a331 = a1.self._33;
			var b01 = b4.self._00;
			var b11 = b4.self._10;
			var b21 = b4.self._20;
			var b31 = b4.self._30;
			_this2.self._00 = a001 * b01 + a011 * b11 + a021 * b21 + a031 * b31;
			_this2.self._10 = a101 * b01 + a111 * b11 + a121 * b21 + a131 * b31;
			_this2.self._20 = a201 * b01 + a211 * b11 + a221 * b21 + a231 * b31;
			_this2.self._30 = a301 * b01 + a311 * b11 + a321 * b21 + a331 * b31;
			b01 = b4.self._01;
			b11 = b4.self._11;
			b21 = b4.self._21;
			b31 = b4.self._31;
			_this2.self._01 = a001 * b01 + a011 * b11 + a021 * b21 + a031 * b31;
			_this2.self._11 = a101 * b01 + a111 * b11 + a121 * b21 + a131 * b31;
			_this2.self._21 = a201 * b01 + a211 * b11 + a221 * b21 + a231 * b31;
			_this2.self._31 = a301 * b01 + a311 * b11 + a321 * b21 + a331 * b31;
			b01 = b4.self._02;
			b11 = b4.self._12;
			b21 = b4.self._22;
			b31 = b4.self._32;
			_this2.self._02 = a001 * b01 + a011 * b11 + a021 * b21 + a031 * b31;
			_this2.self._12 = a101 * b01 + a111 * b11 + a121 * b21 + a131 * b31;
			_this2.self._22 = a201 * b01 + a211 * b11 + a221 * b21 + a231 * b31;
			_this2.self._32 = a301 * b01 + a311 * b11 + a321 * b21 + a331 * b31;
			_this2.self._03 = 0;
			_this2.self._13 = 0;
			_this2.self._23 = 0;
			_this2.self._33 = 1;
		} else {
			var _this3 = this.world;
			var m = this.local;
			_this3.self._00 = m.self._00;
			_this3.self._01 = m.self._01;
			_this3.self._02 = m.self._02;
			_this3.self._03 = m.self._03;
			_this3.self._10 = m.self._10;
			_this3.self._11 = m.self._11;
			_this3.self._12 = m.self._12;
			_this3.self._13 = m.self._13;
			_this3.self._20 = m.self._20;
			_this3.self._21 = m.self._21;
			_this3.self._22 = m.self._22;
			_this3.self._23 = m.self._23;
			_this3.self._30 = m.self._30;
			_this3.self._31 = m.self._31;
			_this3.self._32 = m.self._32;
			_this3.self._33 = m.self._33;
		}
		var _this4 = this.worldUnpack;
		var m1 = this.world;
		_this4.self._00 = m1.self._00;
		_this4.self._01 = m1.self._01;
		_this4.self._02 = m1.self._02;
		_this4.self._03 = m1.self._03;
		_this4.self._10 = m1.self._10;
		_this4.self._11 = m1.self._11;
		_this4.self._12 = m1.self._12;
		_this4.self._13 = m1.self._13;
		_this4.self._20 = m1.self._20;
		_this4.self._21 = m1.self._21;
		_this4.self._22 = m1.self._22;
		_this4.self._23 = m1.self._23;
		_this4.self._30 = m1.self._30;
		_this4.self._31 = m1.self._31;
		_this4.self._32 = m1.self._32;
		_this4.self._33 = m1.self._33;
		if(this.scaleWorld != 1.0) {
			this.worldUnpack.self._00 *= this.scaleWorld;
			this.worldUnpack.self._01 *= this.scaleWorld;
			this.worldUnpack.self._02 *= this.scaleWorld;
			this.worldUnpack.self._03 *= this.scaleWorld;
			this.worldUnpack.self._10 *= this.scaleWorld;
			this.worldUnpack.self._11 *= this.scaleWorld;
			this.worldUnpack.self._12 *= this.scaleWorld;
			this.worldUnpack.self._13 *= this.scaleWorld;
			this.worldUnpack.self._20 *= this.scaleWorld;
			this.worldUnpack.self._21 *= this.scaleWorld;
			this.worldUnpack.self._22 *= this.scaleWorld;
			this.worldUnpack.self._23 *= this.scaleWorld;
		}
		if(this.object.constraints != null) {
			var _g = 0;
			var _g1 = this.object.constraints;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.apply(this);
			}
		}
		this.computeDim();
		var _g2 = 0;
		var _g11 = this.object.children;
		while(_g2 < _g11.length) {
			var n = _g11[_g2];
			++_g2;
			n.transform.buildMatrix();
		}
		this.dirty = false;
	}
	,translate: function(x,y,z) {
		this.loc.x += x;
		this.loc.y += y;
		this.loc.z += z;
		this.buildMatrix();
	}
	,setMatrix: function(mat) {
		var _this = this.local;
		_this.self._00 = mat.self._00;
		_this.self._01 = mat.self._01;
		_this.self._02 = mat.self._02;
		_this.self._03 = mat.self._03;
		_this.self._10 = mat.self._10;
		_this.self._11 = mat.self._11;
		_this.self._12 = mat.self._12;
		_this.self._13 = mat.self._13;
		_this.self._20 = mat.self._20;
		_this.self._21 = mat.self._21;
		_this.self._22 = mat.self._22;
		_this.self._23 = mat.self._23;
		_this.self._30 = mat.self._30;
		_this.self._31 = mat.self._31;
		_this.self._32 = mat.self._32;
		_this.self._33 = mat.self._33;
		this.decompose();
		this.buildMatrix();
	}
	,multMatrix: function(mat) {
		var _this = this.local;
		var a00 = _this.self._00;
		var a01 = _this.self._01;
		var a02 = _this.self._02;
		var a03 = _this.self._03;
		var a10 = _this.self._10;
		var a11 = _this.self._11;
		var a12 = _this.self._12;
		var a13 = _this.self._13;
		var a20 = _this.self._20;
		var a21 = _this.self._21;
		var a22 = _this.self._22;
		var a23 = _this.self._23;
		var a30 = _this.self._30;
		var a31 = _this.self._31;
		var a32 = _this.self._32;
		var a33 = _this.self._33;
		var b0 = mat.self._00;
		var b1 = mat.self._10;
		var b2 = mat.self._20;
		var b3 = mat.self._30;
		_this.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = mat.self._01;
		b1 = mat.self._11;
		b2 = mat.self._21;
		b3 = mat.self._31;
		_this.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = mat.self._02;
		b1 = mat.self._12;
		b2 = mat.self._22;
		b3 = mat.self._32;
		_this.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = mat.self._03;
		b1 = mat.self._13;
		b2 = mat.self._23;
		b3 = mat.self._33;
		_this.self._03 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this.self._13 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this.self._23 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this.self._33 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		this.decompose();
		this.buildMatrix();
	}
	,decompose: function() {
		var _this = this.local;
		var loc = this.loc;
		var quat = this.rot;
		var scale = this.scale;
		loc.x = _this.self._30;
		loc.y = _this.self._31;
		loc.z = _this.self._32;
		var _this1 = iron_math_Mat4.helpVec;
		_this1.x = _this.self._00;
		_this1.y = _this.self._01;
		_this1.z = _this.self._02;
		_this1.w = 1.0;
		var _this11 = _this1;
		scale.x = Math.sqrt(_this11.x * _this11.x + _this11.y * _this11.y + _this11.z * _this11.z);
		var _this2 = iron_math_Mat4.helpVec;
		_this2.x = _this.self._10;
		_this2.y = _this.self._11;
		_this2.z = _this.self._12;
		_this2.w = 1.0;
		var _this3 = _this2;
		scale.y = Math.sqrt(_this3.x * _this3.x + _this3.y * _this3.y + _this3.z * _this3.z);
		var _this4 = iron_math_Mat4.helpVec;
		_this4.x = _this.self._20;
		_this4.y = _this.self._21;
		_this4.z = _this.self._22;
		_this4.w = 1.0;
		var _this5 = _this4;
		scale.z = Math.sqrt(_this5.x * _this5.x + _this5.y * _this5.y + _this5.z * _this5.z);
		var _this6 = _this.self;
		var m3 = _this6._12;
		var m4 = _this6._22;
		var m5 = _this6._32;
		var m6 = _this6._13;
		var m7 = _this6._23;
		var m8 = _this6._33;
		var c00 = _this6._11 * (m4 * m8 - m5 * m7) - _this6._21 * (m3 * m8 - m5 * m6) + _this6._31 * (m3 * m7 - m4 * m6);
		var m31 = _this6._12;
		var m41 = _this6._22;
		var m51 = _this6._32;
		var m61 = _this6._13;
		var m71 = _this6._23;
		var m81 = _this6._33;
		var c01 = _this6._10 * (m41 * m81 - m51 * m71) - _this6._20 * (m31 * m81 - m51 * m61) + _this6._30 * (m31 * m71 - m41 * m61);
		var m32 = _this6._11;
		var m42 = _this6._21;
		var m52 = _this6._31;
		var m62 = _this6._13;
		var m72 = _this6._23;
		var m82 = _this6._33;
		var c02 = _this6._10 * (m42 * m82 - m52 * m72) - _this6._20 * (m32 * m82 - m52 * m62) + _this6._30 * (m32 * m72 - m42 * m62);
		var m33 = _this6._11;
		var m43 = _this6._21;
		var m53 = _this6._31;
		var m63 = _this6._12;
		var m73 = _this6._22;
		var m83 = _this6._32;
		var c03 = _this6._10 * (m43 * m83 - m53 * m73) - _this6._20 * (m33 * m83 - m53 * m63) + _this6._30 * (m33 * m73 - m43 * m63);
		if(_this6._00 * c00 - _this6._01 * c01 + _this6._02 * c02 - _this6._03 * c03 < 0.0) {
			scale.x = -scale.x;
		}
		var invs = 1.0 / scale.x;
		iron_math_Mat4.helpMat.self._00 = _this.self._00 * invs;
		iron_math_Mat4.helpMat.self._01 = _this.self._01 * invs;
		iron_math_Mat4.helpMat.self._02 = _this.self._02 * invs;
		invs = 1.0 / scale.y;
		iron_math_Mat4.helpMat.self._10 = _this.self._10 * invs;
		iron_math_Mat4.helpMat.self._11 = _this.self._11 * invs;
		iron_math_Mat4.helpMat.self._12 = _this.self._12 * invs;
		invs = 1.0 / scale.z;
		iron_math_Mat4.helpMat.self._20 = _this.self._20 * invs;
		iron_math_Mat4.helpMat.self._21 = _this.self._21 * invs;
		iron_math_Mat4.helpMat.self._22 = _this.self._22 * invs;
		var m = iron_math_Mat4.helpMat;
		var m11 = m.self._00;
		var m12 = m.self._10;
		var m13 = m.self._20;
		var m21 = m.self._01;
		var m22 = m.self._11;
		var m23 = m.self._21;
		var m311 = m.self._02;
		var m321 = m.self._12;
		var m331 = m.self._22;
		var tr = m11 + m22 + m331;
		var s = 0.0;
		if(tr > 0) {
			s = 0.5 / Math.sqrt(tr + 1.0);
			quat.w = 0.25 / s;
			quat.x = (m321 - m23) * s;
			quat.y = (m13 - m311) * s;
			quat.z = (m21 - m12) * s;
		} else if(m11 > m22 && m11 > m331) {
			s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m331);
			quat.w = (m321 - m23) / s;
			quat.x = 0.25 * s;
			quat.y = (m12 + m21) / s;
			quat.z = (m13 + m311) / s;
		} else if(m22 > m331) {
			s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m331);
			quat.w = (m13 - m311) / s;
			quat.x = (m12 + m21) / s;
			quat.y = 0.25 * s;
			quat.z = (m23 + m321) / s;
		} else {
			s = 2.0 * Math.sqrt(1.0 + m331 - m11 - m22);
			quat.w = (m21 - m12) / s;
			quat.x = (m13 + m311) / s;
			quat.y = (m23 + m321) / s;
			quat.z = 0.25 * s;
		}
	}
	,rotate: function(axis,f) {
		var _this = iron_object_Transform.q;
		var s = Math.sin(f * 0.5);
		_this.x = axis.x * s;
		_this.y = axis.y * s;
		_this.z = axis.z * s;
		_this.w = Math.cos(f * 0.5);
		var l = Math.sqrt(_this.x * _this.x + _this.y * _this.y + _this.z * _this.z + _this.w * _this.w);
		if(l == 0.0) {
			_this.x = 0;
			_this.y = 0;
			_this.z = 0;
			_this.w = 0;
		} else {
			l = 1.0 / l;
			_this.x *= l;
			_this.y *= l;
			_this.z *= l;
			_this.w *= l;
		}
		var _this1 = this.rot;
		var q1 = iron_object_Transform.q;
		var q2 = this.rot;
		var q1x = q1.x;
		var q1y = q1.y;
		var q1z = q1.z;
		var q1w = q1.w;
		var q2x = q2.x;
		var q2y = q2.y;
		var q2z = q2.z;
		var q2w = q2.w;
		_this1.x = q1x * q2w + q1w * q2x + q1y * q2z - q1z * q2y;
		_this1.y = q1w * q2y - q1x * q2z + q1y * q2w + q1z * q2x;
		_this1.z = q1w * q2z + q1x * q2y - q1y * q2x + q1z * q2w;
		_this1.w = q1w * q2w - q1x * q2x - q1y * q2y - q1z * q2z;
		this.buildMatrix();
	}
	,move: function(axis,f) {
		if(f == null) {
			f = 1.0;
		}
		var _this = this.loc;
		_this.x += axis.x * f;
		_this.y += axis.y * f;
		_this.z += axis.z * f;
		this.buildMatrix();
	}
	,setRotation: function(x,y,z) {
		var _this = this.rot;
		var f = x / 2;
		var c1 = Math.cos(f);
		var s1 = Math.sin(f);
		f = y / 2;
		var c2 = Math.cos(f);
		var s2 = Math.sin(f);
		f = z / 2;
		var c3 = Math.cos(f);
		var s3 = Math.sin(f);
		_this.x = s1 * c2 * c3 + c1 * s2 * s3;
		_this.y = c1 * s2 * c3 + s1 * c2 * s3;
		_this.z = c1 * c2 * s3 - s1 * s2 * c3;
		_this.w = c1 * c2 * c3 - s1 * s2 * s3;
		this._eulerX = x;
		this._eulerY = y;
		this._eulerZ = z;
		this.dirty = true;
	}
	,computeRadius: function() {
		this.radius = Math.sqrt(this.dim.x * this.dim.x + this.dim.y * this.dim.y + this.dim.z * this.dim.z);
	}
	,computeDim: function() {
		if(this.object.raw == null) {
			this.computeRadius();
			return;
		}
		var d = this.object.raw.dimensions;
		if(d == null) {
			var _this = this.dim;
			_this.x = 2 * this.scale.x;
			_this.y = 2 * this.scale.y;
			_this.z = 2 * this.scale.z;
			_this.w = 1.0;
		} else {
			var _this1 = this.dim;
			var y = d[1] * this.scale.y;
			var z = d[2] * this.scale.z;
			_this1.x = d[0] * this.scale.x;
			_this1.y = y;
			_this1.z = z;
			_this1.w = 1.0;
		}
		this.computeRadius();
	}
	,applyParentInverse: function() {
		var pt = this.object.parent.transform;
		pt.buildMatrix();
		var _this = iron_object_Transform.temp;
		var m = pt.world;
		var a00 = m.self._00;
		var a01 = m.self._01;
		var a02 = m.self._02;
		var a03 = m.self._03;
		var a10 = m.self._10;
		var a11 = m.self._11;
		var a12 = m.self._12;
		var a13 = m.self._13;
		var a20 = m.self._20;
		var a21 = m.self._21;
		var a22 = m.self._22;
		var a23 = m.self._23;
		var a30 = m.self._30;
		var a31 = m.self._31;
		var a32 = m.self._32;
		var a33 = m.self._33;
		var b00 = a00 * a11 - a01 * a10;
		var b01 = a00 * a12 - a02 * a10;
		var b02 = a00 * a13 - a03 * a10;
		var b03 = a01 * a12 - a02 * a11;
		var b04 = a01 * a13 - a03 * a11;
		var b05 = a02 * a13 - a03 * a12;
		var b06 = a20 * a31 - a21 * a30;
		var b07 = a20 * a32 - a22 * a30;
		var b08 = a20 * a33 - a23 * a30;
		var b09 = a21 * a32 - a22 * a31;
		var b10 = a21 * a33 - a23 * a31;
		var b11 = a22 * a33 - a23 * a32;
		var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
		if(det == 0.0) {
			_this.self._00 = 1.0;
			_this.self._01 = 0.0;
			_this.self._02 = 0.0;
			_this.self._03 = 0.0;
			_this.self._10 = 0.0;
			_this.self._11 = 1.0;
			_this.self._12 = 0.0;
			_this.self._13 = 0.0;
			_this.self._20 = 0.0;
			_this.self._21 = 0.0;
			_this.self._22 = 1.0;
			_this.self._23 = 0.0;
			_this.self._30 = 0.0;
			_this.self._31 = 0.0;
			_this.self._32 = 0.0;
			_this.self._33 = 1.0;
		} else {
			det = 1.0 / det;
			_this.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
			_this.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
			_this.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
			_this.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
			_this.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
			_this.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
			_this.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
			_this.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
			_this.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
			_this.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
			_this.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
			_this.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
			_this.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
			_this.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
			_this.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
			_this.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
		}
		var _this1 = this.local;
		var m1 = iron_object_Transform.temp;
		var a001 = _this1.self._00;
		var a011 = _this1.self._01;
		var a021 = _this1.self._02;
		var a031 = _this1.self._03;
		var a101 = _this1.self._10;
		var a111 = _this1.self._11;
		var a121 = _this1.self._12;
		var a131 = _this1.self._13;
		var a201 = _this1.self._20;
		var a211 = _this1.self._21;
		var a221 = _this1.self._22;
		var a231 = _this1.self._23;
		var a301 = _this1.self._30;
		var a311 = _this1.self._31;
		var a321 = _this1.self._32;
		var a331 = _this1.self._33;
		var b0 = m1.self._00;
		var b1 = m1.self._10;
		var b2 = m1.self._20;
		var b3 = m1.self._30;
		_this1.self._00 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		_this1.self._10 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		_this1.self._20 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		_this1.self._30 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		b0 = m1.self._01;
		b1 = m1.self._11;
		b2 = m1.self._21;
		b3 = m1.self._31;
		_this1.self._01 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		_this1.self._11 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		_this1.self._21 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		_this1.self._31 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		b0 = m1.self._02;
		b1 = m1.self._12;
		b2 = m1.self._22;
		b3 = m1.self._32;
		_this1.self._02 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		_this1.self._12 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		_this1.self._22 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		_this1.self._32 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		b0 = m1.self._03;
		b1 = m1.self._13;
		b2 = m1.self._23;
		b3 = m1.self._33;
		_this1.self._03 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
		_this1.self._13 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
		_this1.self._23 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
		_this1.self._33 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
		this.decompose();
		this.buildMatrix();
	}
	,applyParent: function() {
		var pt = this.object.parent.transform;
		pt.buildMatrix();
		var _this = this.local;
		var m = pt.world;
		var a00 = _this.self._00;
		var a01 = _this.self._01;
		var a02 = _this.self._02;
		var a03 = _this.self._03;
		var a10 = _this.self._10;
		var a11 = _this.self._11;
		var a12 = _this.self._12;
		var a13 = _this.self._13;
		var a20 = _this.self._20;
		var a21 = _this.self._21;
		var a22 = _this.self._22;
		var a23 = _this.self._23;
		var a30 = _this.self._30;
		var a31 = _this.self._31;
		var a32 = _this.self._32;
		var a33 = _this.self._33;
		var b0 = m.self._00;
		var b1 = m.self._10;
		var b2 = m.self._20;
		var b3 = m.self._30;
		_this.self._00 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this.self._10 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this.self._20 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this.self._30 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = m.self._01;
		b1 = m.self._11;
		b2 = m.self._21;
		b3 = m.self._31;
		_this.self._01 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this.self._11 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this.self._21 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this.self._31 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = m.self._02;
		b1 = m.self._12;
		b2 = m.self._22;
		b3 = m.self._32;
		_this.self._02 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this.self._12 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this.self._22 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this.self._32 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		b0 = m.self._03;
		b1 = m.self._13;
		b2 = m.self._23;
		b3 = m.self._33;
		_this.self._03 = a00 * b0 + a01 * b1 + a02 * b2 + a03 * b3;
		_this.self._13 = a10 * b0 + a11 * b1 + a12 * b2 + a13 * b3;
		_this.self._23 = a20 * b0 + a21 * b1 + a22 * b2 + a23 * b3;
		_this.self._33 = a30 * b0 + a31 * b1 + a32 * b2 + a33 * b3;
		this.decompose();
		this.buildMatrix();
	}
	,diff: function() {
		if(this.lastWorld == null) {
			var _this = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
			var m = this.world;
			_this.self._00 = m.self._00;
			_this.self._01 = m.self._01;
			_this.self._02 = m.self._02;
			_this.self._03 = m.self._03;
			_this.self._10 = m.self._10;
			_this.self._11 = m.self._11;
			_this.self._12 = m.self._12;
			_this.self._13 = m.self._13;
			_this.self._20 = m.self._20;
			_this.self._21 = m.self._21;
			_this.self._22 = m.self._22;
			_this.self._23 = m.self._23;
			_this.self._30 = m.self._30;
			_this.self._31 = m.self._31;
			_this.self._32 = m.self._32;
			_this.self._33 = m.self._33;
			this.lastWorld = _this;
			return false;
		}
		var a = this.world;
		var b = this.lastWorld;
		var r = a.self._00 != b.self._00 || a.self._01 != b.self._01 || a.self._02 != b.self._02 || a.self._03 != b.self._03 || a.self._10 != b.self._10 || a.self._11 != b.self._11 || a.self._12 != b.self._12 || a.self._13 != b.self._13 || a.self._20 != b.self._20 || a.self._21 != b.self._21 || a.self._22 != b.self._22 || a.self._23 != b.self._23 || a.self._30 != b.self._30 || a.self._31 != b.self._31 || a.self._32 != b.self._32 || a.self._33 != b.self._33;
		if(r) {
			var _this1 = this.lastWorld;
			var m1 = this.world;
			_this1.self._00 = m1.self._00;
			_this1.self._01 = m1.self._01;
			_this1.self._02 = m1.self._02;
			_this1.self._03 = m1.self._03;
			_this1.self._10 = m1.self._10;
			_this1.self._11 = m1.self._11;
			_this1.self._12 = m1.self._12;
			_this1.self._13 = m1.self._13;
			_this1.self._20 = m1.self._20;
			_this1.self._21 = m1.self._21;
			_this1.self._22 = m1.self._22;
			_this1.self._23 = m1.self._23;
			_this1.self._30 = m1.self._30;
			_this1.self._31 = m1.self._31;
			_this1.self._32 = m1.self._32;
			_this1.self._33 = m1.self._33;
		}
		return r;
	}
	,look: function() {
		var _this = this.world;
		return new iron_math_Vec4(_this.self._10,_this.self._11,_this.self._12);
	}
	,right: function() {
		var _this = this.world;
		return new iron_math_Vec4(_this.self._00,_this.self._01,_this.self._02);
	}
	,up: function() {
		var _this = this.world;
		return new iron_math_Vec4(_this.self._20,_this.self._21,_this.self._22);
	}
	,worldx: function() {
		return this.world.self._30;
	}
	,worldy: function() {
		return this.world.self._31;
	}
	,worldz: function() {
		return this.world.self._32;
	}
	,__class__: iron_object_Transform
};
var kha_math_FastMatrix3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
$hxClasses["kha.math.FastMatrix3"] = kha_math_FastMatrix3;
kha_math_FastMatrix3.__name__ = "kha.math.FastMatrix3";
kha_math_FastMatrix3.fromMatrix3 = function(m) {
	return new kha_math_FastMatrix3(m._00,m._10,m._20,m._01,m._11,m._21,m._02,m._12,m._22);
};
kha_math_FastMatrix3.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_01: null
	,_11: null
	,_21: null
	,_02: null
	,_12: null
	,_22: null
	,__class__: kha_math_FastMatrix3
};
var iron_object_Uniforms = function() { };
$hxClasses["iron.object.Uniforms"] = iron_object_Uniforms;
iron_object_Uniforms.__name__ = "iron.object.Uniforms";
iron_object_Uniforms.setContextConstants = function(g,context,bindParams) {
	if(context.raw.constants != null) {
		var _g = 0;
		var _g1 = context.raw.constants.length;
		while(_g < _g1) {
			var i = _g++;
			var c = context.raw.constants[i];
			iron_object_Uniforms.setContextConstant(g,context.constants[i],c);
		}
	}
	if(bindParams != null) {
		var _g2 = 0;
		var _g11 = bindParams.length / 2 | 0;
		while(_g2 < _g11) {
			var i1 = _g2++;
			var pos = i1 * 2;
			var rtID = bindParams[pos];
			var samplerID = bindParams[pos + 1];
			var attachDepth = false;
			var char = rtID.charAt(0);
			if(char == "_") {
				attachDepth = true;
				rtID = HxOverrides.substr(rtID,1,null);
			}
			var rt;
			if(attachDepth) {
				var _this = iron_RenderPath.active.depthToRenderTarget;
				rt = __map_reserved[rtID] != null ? _this.getReserved(rtID) : _this.h[rtID];
			} else {
				var _this1 = iron_RenderPath.active.renderTargets;
				rt = __map_reserved[rtID] != null ? _this1.getReserved(rtID) : _this1.h[rtID];
			}
			iron_object_Uniforms.bindRenderTarget(g,rt,context,samplerID,attachDepth);
		}
	}
	if(context.raw.texture_units != null) {
		var _g3 = 0;
		var _g12 = context.raw.texture_units.length;
		while(_g3 < _g12) {
			var j = _g3++;
			var tulink = context.raw.texture_units[j].link;
			if(tulink == null) {
				continue;
			}
			if(tulink.charAt(0) == "$") {
				var key = HxOverrides.substr(tulink,1,null);
				var _this2 = iron_Scene.active.embedded;
				g.setTexture(context.textureUnits[j],__map_reserved[key] != null ? _this2.getReserved(key) : _this2.h[key]);
				if(StringTools.endsWith(tulink,".raw")) {
					g.setTexture3DParameters(context.textureUnits[j],0,0,0,1,1,0);
				} else {
					g.setTextureParameters(context.textureUnits[j],0,0,1,1,0);
				}
			} else if(tulink == "_envmapRadiance") {
				var w = iron_Scene.active.world;
				if(w != null) {
					g.setTexture(context.textureUnits[j],w.probe.radiance);
					g.setTextureParameters(context.textureUnits[j],0,0,1,1,2);
				}
			} else if(tulink == "_envmap") {
				var w1 = iron_Scene.active.world;
				if(w1 != null) {
					g.setTexture(context.textureUnits[j],w1.envmap);
				}
			}
		}
	}
};
iron_object_Uniforms.setObjectConstants = function(g,context,object) {
	if(context.raw.constants != null) {
		var _g = 0;
		var _g1 = context.raw.constants.length;
		while(_g < _g1) {
			var i = _g++;
			var c = context.raw.constants[i];
			iron_object_Uniforms.setObjectConstant(g,object,context.constants[i],c);
		}
	}
	if(iron_object_Uniforms.externalTextureLinks != null) {
		if(context.raw.texture_units != null) {
			var _g2 = 0;
			var _g11 = context.raw.texture_units.length;
			while(_g2 < _g11) {
				var j = _g2++;
				var tulink = context.raw.texture_units[j].link;
				if(tulink == null) {
					continue;
				}
				var _g3 = 0;
				var _g12 = iron_object_Uniforms.externalTextureLinks;
				while(_g3 < _g12.length) {
					var f = _g12[_g3];
					++_g3;
					var image = f(object,iron_object_Uniforms.currentMat(object),tulink);
					if(image != null) {
						g.setTexture(context.textureUnits[j],image);
						break;
					}
				}
			}
		}
	}
};
iron_object_Uniforms.bindRenderTarget = function(g,rt,context,samplerID,attachDepth) {
	if(rt != null) {
		var tus = context.raw.texture_units;
		var _g = 0;
		var _g1 = tus.length;
		while(_g < _g1) {
			var j = _g++;
			if(samplerID == tus[j].name) {
				var isImage = tus[j].is_image != null && tus[j].is_image;
				var paramsSet = false;
				if(rt.raw.depth > 1) {
					g.setTexture3DParameters(context.textureUnits[j],2,2,2,1,2,2);
					paramsSet = true;
				}
				if(isImage) {
					g.setImageTexture(context.textureUnits[j],rt.image);
					g.setTexture3DParameters(context.textureUnits[j],2,2,2,1,0,2);
					paramsSet = true;
				} else if(rt.isCubeMap) {
					if(attachDepth) {
						g.setCubeMapDepth(context.textureUnits[j],rt.cubeMap);
					} else {
						g.setCubeMap(context.textureUnits[j],rt.cubeMap);
					}
				} else if(attachDepth) {
					g.setTextureDepth(context.textureUnits[j],rt.image);
				} else {
					g.setTexture(context.textureUnits[j],rt.image);
				}
				if(!paramsSet && rt.raw.mipmaps != null && rt.raw.mipmaps == true && !isImage) {
					g.setTextureParameters(context.textureUnits[j],2,2,1,1,2);
					paramsSet = true;
				}
				if(!paramsSet) {
					if(StringTools.startsWith(samplerID,"shadowMap")) {
						if(rt.isCubeMap) {
							g.setCubeMapCompareMode(context.textureUnits[j],true);
						} else {
							g.setTextureParameters(context.textureUnits[j],2,2,1,1,0);
							g.setTextureCompareMode(context.textureUnits[j],true);
						}
						paramsSet = true;
					} else if(attachDepth) {
						g.setTextureParameters(context.textureUnits[j],2,2,0,0,0);
						paramsSet = true;
					}
				}
				if(!paramsSet) {
					var oc = context.overrideContext;
					var allowParams = oc == null || oc.shared_sampler == null || oc.shared_sampler == samplerID;
					if(allowParams) {
						var addressing = oc != null && oc.addressing == "repeat" ? 0 : 2;
						var filter = oc != null && oc.filter == "point" ? 0 : iron_object_Uniforms.defaultFilter;
						g.setTextureParameters(context.textureUnits[j],addressing,addressing,filter,filter,0);
					}
					paramsSet = true;
				}
			}
		}
	}
};
iron_object_Uniforms.setContextConstant = function(g,location,c) {
	if(c.link == null) {
		return true;
	}
	var camera = iron_Scene.active.camera;
	var light = iron_RenderPath.active.light;
	if(c.type == "mat4") {
		var m = null;
		if(c.link == "_viewMatrix") {
			m = camera.V;
		} else if(c.link == "_transposeViewMatrix") {
			var _this = iron_object_Uniforms.helpMat;
			var m1 = camera.V;
			_this.self._00 = m1.self._00;
			_this.self._01 = m1.self._01;
			_this.self._02 = m1.self._02;
			_this.self._03 = m1.self._03;
			_this.self._10 = m1.self._10;
			_this.self._11 = m1.self._11;
			_this.self._12 = m1.self._12;
			_this.self._13 = m1.self._13;
			_this.self._20 = m1.self._20;
			_this.self._21 = m1.self._21;
			_this.self._22 = m1.self._22;
			_this.self._23 = m1.self._23;
			_this.self._30 = m1.self._30;
			_this.self._31 = m1.self._31;
			_this.self._32 = m1.self._32;
			_this.self._33 = m1.self._33;
			var _this1 = iron_object_Uniforms.helpMat;
			var f = _this1.self._01;
			_this1.self._01 = _this1.self._10;
			_this1.self._10 = f;
			f = _this1.self._02;
			_this1.self._02 = _this1.self._20;
			_this1.self._20 = f;
			f = _this1.self._12;
			_this1.self._12 = _this1.self._21;
			_this1.self._21 = f;
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_projectionMatrix") {
			m = camera.P;
		} else if(c.link == "_inverseProjectionMatrix") {
			var _this2 = iron_object_Uniforms.helpMat;
			var m2 = camera.P;
			var a00 = m2.self._00;
			var a01 = m2.self._01;
			var a02 = m2.self._02;
			var a03 = m2.self._03;
			var a10 = m2.self._10;
			var a11 = m2.self._11;
			var a12 = m2.self._12;
			var a13 = m2.self._13;
			var a20 = m2.self._20;
			var a21 = m2.self._21;
			var a22 = m2.self._22;
			var a23 = m2.self._23;
			var a30 = m2.self._30;
			var a31 = m2.self._31;
			var a32 = m2.self._32;
			var a33 = m2.self._33;
			var b00 = a00 * a11 - a01 * a10;
			var b01 = a00 * a12 - a02 * a10;
			var b02 = a00 * a13 - a03 * a10;
			var b03 = a01 * a12 - a02 * a11;
			var b04 = a01 * a13 - a03 * a11;
			var b05 = a02 * a13 - a03 * a12;
			var b06 = a20 * a31 - a21 * a30;
			var b07 = a20 * a32 - a22 * a30;
			var b08 = a20 * a33 - a23 * a30;
			var b09 = a21 * a32 - a22 * a31;
			var b10 = a21 * a33 - a23 * a31;
			var b11 = a22 * a33 - a23 * a32;
			var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
			if(det == 0.0) {
				_this2.self._00 = 1.0;
				_this2.self._01 = 0.0;
				_this2.self._02 = 0.0;
				_this2.self._03 = 0.0;
				_this2.self._10 = 0.0;
				_this2.self._11 = 1.0;
				_this2.self._12 = 0.0;
				_this2.self._13 = 0.0;
				_this2.self._20 = 0.0;
				_this2.self._21 = 0.0;
				_this2.self._22 = 1.0;
				_this2.self._23 = 0.0;
				_this2.self._30 = 0.0;
				_this2.self._31 = 0.0;
				_this2.self._32 = 0.0;
				_this2.self._33 = 1.0;
			} else {
				det = 1.0 / det;
				_this2.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
				_this2.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
				_this2.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
				_this2.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
				_this2.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
				_this2.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
				_this2.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
				_this2.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
				_this2.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
				_this2.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
				_this2.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
				_this2.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
				_this2.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
				_this2.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
				_this2.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
				_this2.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
			}
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_inverseViewProjectionMatrix") {
			var _this3 = iron_object_Uniforms.helpMat;
			var m3 = camera.V;
			_this3.self._00 = m3.self._00;
			_this3.self._01 = m3.self._01;
			_this3.self._02 = m3.self._02;
			_this3.self._03 = m3.self._03;
			_this3.self._10 = m3.self._10;
			_this3.self._11 = m3.self._11;
			_this3.self._12 = m3.self._12;
			_this3.self._13 = m3.self._13;
			_this3.self._20 = m3.self._20;
			_this3.self._21 = m3.self._21;
			_this3.self._22 = m3.self._22;
			_this3.self._23 = m3.self._23;
			_this3.self._30 = m3.self._30;
			_this3.self._31 = m3.self._31;
			_this3.self._32 = m3.self._32;
			_this3.self._33 = m3.self._33;
			var _this4 = iron_object_Uniforms.helpMat;
			var m4 = camera.P;
			var a001 = _this4.self._00;
			var a011 = _this4.self._01;
			var a021 = _this4.self._02;
			var a031 = _this4.self._03;
			var a101 = _this4.self._10;
			var a111 = _this4.self._11;
			var a121 = _this4.self._12;
			var a131 = _this4.self._13;
			var a201 = _this4.self._20;
			var a211 = _this4.self._21;
			var a221 = _this4.self._22;
			var a231 = _this4.self._23;
			var a301 = _this4.self._30;
			var a311 = _this4.self._31;
			var a321 = _this4.self._32;
			var a331 = _this4.self._33;
			var b0 = m4.self._00;
			var b1 = m4.self._10;
			var b2 = m4.self._20;
			var b3 = m4.self._30;
			_this4.self._00 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			_this4.self._10 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			_this4.self._20 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			_this4.self._30 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			b0 = m4.self._01;
			b1 = m4.self._11;
			b2 = m4.self._21;
			b3 = m4.self._31;
			_this4.self._01 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			_this4.self._11 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			_this4.self._21 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			_this4.self._31 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			b0 = m4.self._02;
			b1 = m4.self._12;
			b2 = m4.self._22;
			b3 = m4.self._32;
			_this4.self._02 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			_this4.self._12 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			_this4.self._22 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			_this4.self._32 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			b0 = m4.self._03;
			b1 = m4.self._13;
			b2 = m4.self._23;
			b3 = m4.self._33;
			_this4.self._03 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			_this4.self._13 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			_this4.self._23 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			_this4.self._33 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			var _this5 = iron_object_Uniforms.helpMat;
			var m5 = iron_object_Uniforms.helpMat;
			var a002 = m5.self._00;
			var a012 = m5.self._01;
			var a022 = m5.self._02;
			var a032 = m5.self._03;
			var a102 = m5.self._10;
			var a112 = m5.self._11;
			var a122 = m5.self._12;
			var a132 = m5.self._13;
			var a202 = m5.self._20;
			var a212 = m5.self._21;
			var a222 = m5.self._22;
			var a232 = m5.self._23;
			var a302 = m5.self._30;
			var a312 = m5.self._31;
			var a322 = m5.self._32;
			var a332 = m5.self._33;
			var b001 = a002 * a112 - a012 * a102;
			var b011 = a002 * a122 - a022 * a102;
			var b021 = a002 * a132 - a032 * a102;
			var b031 = a012 * a122 - a022 * a112;
			var b041 = a012 * a132 - a032 * a112;
			var b051 = a022 * a132 - a032 * a122;
			var b061 = a202 * a312 - a212 * a302;
			var b071 = a202 * a322 - a222 * a302;
			var b081 = a202 * a332 - a232 * a302;
			var b091 = a212 * a322 - a222 * a312;
			var b101 = a212 * a332 - a232 * a312;
			var b111 = a222 * a332 - a232 * a322;
			var det1 = b001 * b111 - b011 * b101 + b021 * b091 + b031 * b081 - b041 * b071 + b051 * b061;
			if(det1 == 0.0) {
				_this5.self._00 = 1.0;
				_this5.self._01 = 0.0;
				_this5.self._02 = 0.0;
				_this5.self._03 = 0.0;
				_this5.self._10 = 0.0;
				_this5.self._11 = 1.0;
				_this5.self._12 = 0.0;
				_this5.self._13 = 0.0;
				_this5.self._20 = 0.0;
				_this5.self._21 = 0.0;
				_this5.self._22 = 1.0;
				_this5.self._23 = 0.0;
				_this5.self._30 = 0.0;
				_this5.self._31 = 0.0;
				_this5.self._32 = 0.0;
				_this5.self._33 = 1.0;
			} else {
				det1 = 1.0 / det1;
				_this5.self._00 = (a112 * b111 - a122 * b101 + a132 * b091) * det1;
				_this5.self._01 = (a022 * b101 - a012 * b111 - a032 * b091) * det1;
				_this5.self._02 = (a312 * b051 - a322 * b041 + a332 * b031) * det1;
				_this5.self._03 = (a222 * b041 - a212 * b051 - a232 * b031) * det1;
				_this5.self._10 = (a122 * b081 - a102 * b111 - a132 * b071) * det1;
				_this5.self._11 = (a002 * b111 - a022 * b081 + a032 * b071) * det1;
				_this5.self._12 = (a322 * b021 - a302 * b051 - a332 * b011) * det1;
				_this5.self._13 = (a202 * b051 - a222 * b021 + a232 * b011) * det1;
				_this5.self._20 = (a102 * b101 - a112 * b081 + a132 * b061) * det1;
				_this5.self._21 = (a012 * b081 - a002 * b101 - a032 * b061) * det1;
				_this5.self._22 = (a302 * b041 - a312 * b021 + a332 * b001) * det1;
				_this5.self._23 = (a212 * b021 - a202 * b041 - a232 * b001) * det1;
				_this5.self._30 = (a112 * b071 - a102 * b091 - a122 * b061) * det1;
				_this5.self._31 = (a002 * b091 - a012 * b071 + a022 * b061) * det1;
				_this5.self._32 = (a312 * b011 - a302 * b031 - a322 * b001) * det1;
				_this5.self._33 = (a202 * b031 - a212 * b011 + a222 * b001) * det1;
			}
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_viewProjectionMatrix") {
			m = camera.VP;
		} else if(c.link == "_prevViewProjectionMatrix") {
			var _this6 = iron_object_Uniforms.helpMat;
			var m6 = camera.prevV;
			_this6.self._00 = m6.self._00;
			_this6.self._01 = m6.self._01;
			_this6.self._02 = m6.self._02;
			_this6.self._03 = m6.self._03;
			_this6.self._10 = m6.self._10;
			_this6.self._11 = m6.self._11;
			_this6.self._12 = m6.self._12;
			_this6.self._13 = m6.self._13;
			_this6.self._20 = m6.self._20;
			_this6.self._21 = m6.self._21;
			_this6.self._22 = m6.self._22;
			_this6.self._23 = m6.self._23;
			_this6.self._30 = m6.self._30;
			_this6.self._31 = m6.self._31;
			_this6.self._32 = m6.self._32;
			_this6.self._33 = m6.self._33;
			var _this7 = iron_object_Uniforms.helpMat;
			var m7 = camera.P;
			var a003 = _this7.self._00;
			var a013 = _this7.self._01;
			var a023 = _this7.self._02;
			var a033 = _this7.self._03;
			var a103 = _this7.self._10;
			var a113 = _this7.self._11;
			var a123 = _this7.self._12;
			var a133 = _this7.self._13;
			var a203 = _this7.self._20;
			var a213 = _this7.self._21;
			var a223 = _this7.self._22;
			var a233 = _this7.self._23;
			var a303 = _this7.self._30;
			var a313 = _this7.self._31;
			var a323 = _this7.self._32;
			var a333 = _this7.self._33;
			var b010 = m7.self._00;
			var b12 = m7.self._10;
			var b21 = m7.self._20;
			var b31 = m7.self._30;
			_this7.self._00 = a003 * b010 + a013 * b12 + a023 * b21 + a033 * b31;
			_this7.self._10 = a103 * b010 + a113 * b12 + a123 * b21 + a133 * b31;
			_this7.self._20 = a203 * b010 + a213 * b12 + a223 * b21 + a233 * b31;
			_this7.self._30 = a303 * b010 + a313 * b12 + a323 * b21 + a333 * b31;
			b010 = m7.self._01;
			b12 = m7.self._11;
			b21 = m7.self._21;
			b31 = m7.self._31;
			_this7.self._01 = a003 * b010 + a013 * b12 + a023 * b21 + a033 * b31;
			_this7.self._11 = a103 * b010 + a113 * b12 + a123 * b21 + a133 * b31;
			_this7.self._21 = a203 * b010 + a213 * b12 + a223 * b21 + a233 * b31;
			_this7.self._31 = a303 * b010 + a313 * b12 + a323 * b21 + a333 * b31;
			b010 = m7.self._02;
			b12 = m7.self._12;
			b21 = m7.self._22;
			b31 = m7.self._32;
			_this7.self._02 = a003 * b010 + a013 * b12 + a023 * b21 + a033 * b31;
			_this7.self._12 = a103 * b010 + a113 * b12 + a123 * b21 + a133 * b31;
			_this7.self._22 = a203 * b010 + a213 * b12 + a223 * b21 + a233 * b31;
			_this7.self._32 = a303 * b010 + a313 * b12 + a323 * b21 + a333 * b31;
			b010 = m7.self._03;
			b12 = m7.self._13;
			b21 = m7.self._23;
			b31 = m7.self._33;
			_this7.self._03 = a003 * b010 + a013 * b12 + a023 * b21 + a033 * b31;
			_this7.self._13 = a103 * b010 + a113 * b12 + a123 * b21 + a133 * b31;
			_this7.self._23 = a203 * b010 + a213 * b12 + a223 * b21 + a233 * b31;
			_this7.self._33 = a303 * b010 + a313 * b12 + a323 * b21 + a333 * b31;
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_lightViewProjectionMatrix") {
			if(light != null) {
				m = light.VP;
			}
		} else if(c.link == "_biasLightViewProjectionMatrix") {
			if(light != null) {
				var _this8 = iron_object_Uniforms.helpMat;
				var m8 = light.VP;
				_this8.self._00 = m8.self._00;
				_this8.self._01 = m8.self._01;
				_this8.self._02 = m8.self._02;
				_this8.self._03 = m8.self._03;
				_this8.self._10 = m8.self._10;
				_this8.self._11 = m8.self._11;
				_this8.self._12 = m8.self._12;
				_this8.self._13 = m8.self._13;
				_this8.self._20 = m8.self._20;
				_this8.self._21 = m8.self._21;
				_this8.self._22 = m8.self._22;
				_this8.self._23 = m8.self._23;
				_this8.self._30 = m8.self._30;
				_this8.self._31 = m8.self._31;
				_this8.self._32 = m8.self._32;
				_this8.self._33 = m8.self._33;
				var _this9 = iron_object_Uniforms.helpMat;
				var m9 = iron_object_Uniforms.biasMat;
				var a004 = _this9.self._00;
				var a014 = _this9.self._01;
				var a024 = _this9.self._02;
				var a034 = _this9.self._03;
				var a104 = _this9.self._10;
				var a114 = _this9.self._11;
				var a124 = _this9.self._12;
				var a134 = _this9.self._13;
				var a204 = _this9.self._20;
				var a214 = _this9.self._21;
				var a224 = _this9.self._22;
				var a234 = _this9.self._23;
				var a304 = _this9.self._30;
				var a314 = _this9.self._31;
				var a324 = _this9.self._32;
				var a334 = _this9.self._33;
				var b012 = m9.self._00;
				var b13 = m9.self._10;
				var b22 = m9.self._20;
				var b32 = m9.self._30;
				_this9.self._00 = a004 * b012 + a014 * b13 + a024 * b22 + a034 * b32;
				_this9.self._10 = a104 * b012 + a114 * b13 + a124 * b22 + a134 * b32;
				_this9.self._20 = a204 * b012 + a214 * b13 + a224 * b22 + a234 * b32;
				_this9.self._30 = a304 * b012 + a314 * b13 + a324 * b22 + a334 * b32;
				b012 = m9.self._01;
				b13 = m9.self._11;
				b22 = m9.self._21;
				b32 = m9.self._31;
				_this9.self._01 = a004 * b012 + a014 * b13 + a024 * b22 + a034 * b32;
				_this9.self._11 = a104 * b012 + a114 * b13 + a124 * b22 + a134 * b32;
				_this9.self._21 = a204 * b012 + a214 * b13 + a224 * b22 + a234 * b32;
				_this9.self._31 = a304 * b012 + a314 * b13 + a324 * b22 + a334 * b32;
				b012 = m9.self._02;
				b13 = m9.self._12;
				b22 = m9.self._22;
				b32 = m9.self._32;
				_this9.self._02 = a004 * b012 + a014 * b13 + a024 * b22 + a034 * b32;
				_this9.self._12 = a104 * b012 + a114 * b13 + a124 * b22 + a134 * b32;
				_this9.self._22 = a204 * b012 + a214 * b13 + a224 * b22 + a234 * b32;
				_this9.self._32 = a304 * b012 + a314 * b13 + a324 * b22 + a334 * b32;
				b012 = m9.self._03;
				b13 = m9.self._13;
				b22 = m9.self._23;
				b32 = m9.self._33;
				_this9.self._03 = a004 * b012 + a014 * b13 + a024 * b22 + a034 * b32;
				_this9.self._13 = a104 * b012 + a114 * b13 + a124 * b22 + a134 * b32;
				_this9.self._23 = a204 * b012 + a214 * b13 + a224 * b22 + a234 * b32;
				_this9.self._33 = a304 * b012 + a314 * b13 + a324 * b22 + a334 * b32;
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_skydomeMatrix") {
			var tr = camera.transform;
			var _this10 = iron_object_Uniforms.helpVec;
			_this10.x = tr.world.self._30;
			_this10.y = tr.world.self._31;
			_this10.z = tr.world.self._32 - 3.5;
			_this10.w = 1.0;
			var bounds = camera.data.raw.far_plane * 0.95;
			var _this11 = iron_object_Uniforms.helpVec2;
			_this11.x = bounds;
			_this11.y = bounds;
			_this11.z = bounds;
			_this11.w = 1.0;
			var _this12 = iron_object_Uniforms.helpMat;
			var loc = iron_object_Uniforms.helpVec;
			var quat = iron_object_Uniforms.helpQuat;
			var sc = iron_object_Uniforms.helpVec2;
			var x = quat.x;
			var y = quat.y;
			var z = quat.z;
			var w = quat.w;
			var x2 = x + x;
			var y2 = y + y;
			var z2 = z + z;
			var xx = x * x2;
			var xy = x * y2;
			var xz = x * z2;
			var yy = y * y2;
			var yz = y * z2;
			var zz = z * z2;
			var wx = w * x2;
			var wy = w * y2;
			var wz = w * z2;
			_this12.self._00 = 1.0 - (yy + zz);
			_this12.self._10 = xy - wz;
			_this12.self._20 = xz + wy;
			_this12.self._01 = xy + wz;
			_this12.self._11 = 1.0 - (xx + zz);
			_this12.self._21 = yz - wx;
			_this12.self._02 = xz - wy;
			_this12.self._12 = yz + wx;
			_this12.self._22 = 1.0 - (xx + yy);
			_this12.self._03 = 0.0;
			_this12.self._13 = 0.0;
			_this12.self._23 = 0.0;
			_this12.self._30 = 0.0;
			_this12.self._31 = 0.0;
			_this12.self._32 = 0.0;
			_this12.self._33 = 1.0;
			var x1 = sc.x;
			var y1 = sc.y;
			var z1 = sc.z;
			_this12.self._00 *= x1;
			_this12.self._01 *= x1;
			_this12.self._02 *= x1;
			_this12.self._03 *= x1;
			_this12.self._10 *= y1;
			_this12.self._11 *= y1;
			_this12.self._12 *= y1;
			_this12.self._13 *= y1;
			_this12.self._20 *= z1;
			_this12.self._21 *= z1;
			_this12.self._22 *= z1;
			_this12.self._23 *= z1;
			_this12.self._30 = loc.x;
			_this12.self._31 = loc.y;
			_this12.self._32 = loc.z;
			var _this13 = iron_object_Uniforms.helpMat;
			var m10 = camera.V;
			var a005 = _this13.self._00;
			var a015 = _this13.self._01;
			var a025 = _this13.self._02;
			var a035 = _this13.self._03;
			var a105 = _this13.self._10;
			var a115 = _this13.self._11;
			var a125 = _this13.self._12;
			var a135 = _this13.self._13;
			var a205 = _this13.self._20;
			var a215 = _this13.self._21;
			var a225 = _this13.self._22;
			var a235 = _this13.self._23;
			var a305 = _this13.self._30;
			var a315 = _this13.self._31;
			var a325 = _this13.self._32;
			var a335 = _this13.self._33;
			var b013 = m10.self._00;
			var b14 = m10.self._10;
			var b23 = m10.self._20;
			var b33 = m10.self._30;
			_this13.self._00 = a005 * b013 + a015 * b14 + a025 * b23 + a035 * b33;
			_this13.self._10 = a105 * b013 + a115 * b14 + a125 * b23 + a135 * b33;
			_this13.self._20 = a205 * b013 + a215 * b14 + a225 * b23 + a235 * b33;
			_this13.self._30 = a305 * b013 + a315 * b14 + a325 * b23 + a335 * b33;
			b013 = m10.self._01;
			b14 = m10.self._11;
			b23 = m10.self._21;
			b33 = m10.self._31;
			_this13.self._01 = a005 * b013 + a015 * b14 + a025 * b23 + a035 * b33;
			_this13.self._11 = a105 * b013 + a115 * b14 + a125 * b23 + a135 * b33;
			_this13.self._21 = a205 * b013 + a215 * b14 + a225 * b23 + a235 * b33;
			_this13.self._31 = a305 * b013 + a315 * b14 + a325 * b23 + a335 * b33;
			b013 = m10.self._02;
			b14 = m10.self._12;
			b23 = m10.self._22;
			b33 = m10.self._32;
			_this13.self._02 = a005 * b013 + a015 * b14 + a025 * b23 + a035 * b33;
			_this13.self._12 = a105 * b013 + a115 * b14 + a125 * b23 + a135 * b33;
			_this13.self._22 = a205 * b013 + a215 * b14 + a225 * b23 + a235 * b33;
			_this13.self._32 = a305 * b013 + a315 * b14 + a325 * b23 + a335 * b33;
			b013 = m10.self._03;
			b14 = m10.self._13;
			b23 = m10.self._23;
			b33 = m10.self._33;
			_this13.self._03 = a005 * b013 + a015 * b14 + a025 * b23 + a035 * b33;
			_this13.self._13 = a105 * b013 + a115 * b14 + a125 * b23 + a135 * b33;
			_this13.self._23 = a205 * b013 + a215 * b14 + a225 * b23 + a235 * b33;
			_this13.self._33 = a305 * b013 + a315 * b14 + a325 * b23 + a335 * b33;
			var _this14 = iron_object_Uniforms.helpMat;
			var m11 = camera.P;
			var a006 = _this14.self._00;
			var a016 = _this14.self._01;
			var a026 = _this14.self._02;
			var a036 = _this14.self._03;
			var a106 = _this14.self._10;
			var a116 = _this14.self._11;
			var a126 = _this14.self._12;
			var a136 = _this14.self._13;
			var a206 = _this14.self._20;
			var a216 = _this14.self._21;
			var a226 = _this14.self._22;
			var a236 = _this14.self._23;
			var a306 = _this14.self._30;
			var a316 = _this14.self._31;
			var a326 = _this14.self._32;
			var a336 = _this14.self._33;
			var b014 = m11.self._00;
			var b15 = m11.self._10;
			var b24 = m11.self._20;
			var b34 = m11.self._30;
			_this14.self._00 = a006 * b014 + a016 * b15 + a026 * b24 + a036 * b34;
			_this14.self._10 = a106 * b014 + a116 * b15 + a126 * b24 + a136 * b34;
			_this14.self._20 = a206 * b014 + a216 * b15 + a226 * b24 + a236 * b34;
			_this14.self._30 = a306 * b014 + a316 * b15 + a326 * b24 + a336 * b34;
			b014 = m11.self._01;
			b15 = m11.self._11;
			b24 = m11.self._21;
			b34 = m11.self._31;
			_this14.self._01 = a006 * b014 + a016 * b15 + a026 * b24 + a036 * b34;
			_this14.self._11 = a106 * b014 + a116 * b15 + a126 * b24 + a136 * b34;
			_this14.self._21 = a206 * b014 + a216 * b15 + a226 * b24 + a236 * b34;
			_this14.self._31 = a306 * b014 + a316 * b15 + a326 * b24 + a336 * b34;
			b014 = m11.self._02;
			b15 = m11.self._12;
			b24 = m11.self._22;
			b34 = m11.self._32;
			_this14.self._02 = a006 * b014 + a016 * b15 + a026 * b24 + a036 * b34;
			_this14.self._12 = a106 * b014 + a116 * b15 + a126 * b24 + a136 * b34;
			_this14.self._22 = a206 * b014 + a216 * b15 + a226 * b24 + a236 * b34;
			_this14.self._32 = a306 * b014 + a316 * b15 + a326 * b24 + a336 * b34;
			b014 = m11.self._03;
			b15 = m11.self._13;
			b24 = m11.self._23;
			b34 = m11.self._33;
			_this14.self._03 = a006 * b014 + a016 * b15 + a026 * b24 + a036 * b34;
			_this14.self._13 = a106 * b014 + a116 * b15 + a126 * b24 + a136 * b34;
			_this14.self._23 = a206 * b014 + a216 * b15 + a226 * b24 + a236 * b34;
			_this14.self._33 = a306 * b014 + a316 * b15 + a326 * b24 + a336 * b34;
			m = iron_object_Uniforms.helpMat;
		}
		if(m != null) {
			g.setMatrix(location,m.self);
			return true;
		}
	} else if(c.type == "vec4") {
		var v = null;
		var _this15 = iron_object_Uniforms.helpVec;
		_this15.x = 0;
		_this15.y = 0;
		_this15.z = 0;
		_this15.w = 1.0;
		if(c.link == "_input") {
			var _this16 = iron_object_Uniforms.helpVec;
			var x3 = iron_system_Input.getMouse().x / kha_System.windowWidth();
			var y3 = iron_system_Input.getMouse().y / kha_System.windowHeight();
			var z3 = iron_system_Input.getMouse().down() ? 1.0 : 0.0;
			var w1 = 0.0;
			if(w1 == null) {
				w1 = 1.0;
			}
			_this16.x = x3;
			_this16.y = y3;
			_this16.z = z3;
			_this16.w = w1;
			v = iron_object_Uniforms.helpVec;
		}
		if(v != null) {
			g.setFloat4(location,v.x,v.y,v.z,v.w);
			return true;
		}
	} else if(c.type == "vec3") {
		var v1 = null;
		var _this17 = iron_object_Uniforms.helpVec;
		_this17.x = 0;
		_this17.y = 0;
		_this17.z = 0;
		_this17.w = 1.0;
		if(c.link == "_lightPosition") {
			if(light != null) {
				var _this18 = iron_object_Uniforms.helpVec;
				_this18.x = light.transform.world.self._30;
				_this18.y = light.transform.world.self._31;
				_this18.z = light.transform.world.self._32;
				_this18.w = 1.0;
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_lightDirection") {
			if(light != null) {
				var _this19 = new iron_math_Vec4(light.V.self._02,light.V.self._12,light.V.self._22);
				var n = Math.sqrt(_this19.x * _this19.x + _this19.y * _this19.y + _this19.z * _this19.z);
				if(n > 0.0) {
					var invN = 1.0 / n;
					_this19.x *= invN;
					_this19.y *= invN;
					_this19.z *= invN;
				}
				iron_object_Uniforms.helpVec = _this19;
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_sunDirection") {
			var sun = iron_RenderPath.active.sun;
			if(sun != null) {
				var _this20 = new iron_math_Vec4(sun.V.self._02,sun.V.self._12,sun.V.self._22);
				var n1 = Math.sqrt(_this20.x * _this20.x + _this20.y * _this20.y + _this20.z * _this20.z);
				if(n1 > 0.0) {
					var invN1 = 1.0 / n1;
					_this20.x *= invN1;
					_this20.y *= invN1;
					_this20.z *= invN1;
				}
				iron_object_Uniforms.helpVec = _this20;
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_sunColor") {
			var sun1 = iron_RenderPath.active.sun;
			if(sun1 != null) {
				var str = sun1.visible ? sun1.data.raw.strength : 0.0;
				var _this21 = iron_object_Uniforms.helpVec;
				var y4 = sun1.data.raw.color[1] * str;
				var z4 = sun1.data.raw.color[2] * str;
				_this21.x = sun1.data.raw.color[0] * str;
				_this21.y = y4;
				_this21.z = z4;
				_this21.w = 1.0;
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_pointPosition") {
			var point = iron_RenderPath.active.point;
			if(point != null) {
				var _this22 = iron_object_Uniforms.helpVec;
				_this22.x = point.transform.world.self._30;
				_this22.y = point.transform.world.self._31;
				_this22.z = point.transform.world.self._32;
				_this22.w = 1.0;
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_spotDirection") {
			var point1 = iron_RenderPath.active.point;
			if(point1 != null) {
				var _this23 = new iron_math_Vec4(point1.V.self._02,point1.V.self._12,point1.V.self._22);
				var n2 = Math.sqrt(_this23.x * _this23.x + _this23.y * _this23.y + _this23.z * _this23.z);
				if(n2 > 0.0) {
					var invN2 = 1.0 / n2;
					_this23.x *= invN2;
					_this23.y *= invN2;
					_this23.z *= invN2;
				}
				iron_object_Uniforms.helpVec = _this23;
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_pointColor") {
			var point2 = iron_RenderPath.active.point;
			if(point2 != null) {
				var str1 = point2.visible ? point2.data.raw.strength : 0.0;
				var _this24 = iron_object_Uniforms.helpVec;
				var y5 = point2.data.raw.color[1] * str1;
				var z5 = point2.data.raw.color[2] * str1;
				_this24.x = point2.data.raw.color[0] * str1;
				_this24.y = y5;
				_this24.z = z5;
				_this24.w = 1.0;
				v1 = iron_object_Uniforms.helpVec;
			}
		} else if(c.link == "_cameraPosition") {
			var _this25 = iron_object_Uniforms.helpVec;
			_this25.x = camera.transform.world.self._30;
			_this25.y = camera.transform.world.self._31;
			_this25.z = camera.transform.world.self._32;
			_this25.w = 1.0;
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_cameraLook") {
			var _this26 = new iron_math_Vec4(-camera.transform.world.self._20,-camera.transform.world.self._21,-camera.transform.world.self._22);
			var n3 = Math.sqrt(_this26.x * _this26.x + _this26.y * _this26.y + _this26.z * _this26.z);
			if(n3 > 0.0) {
				var invN3 = 1.0 / n3;
				_this26.x *= invN3;
				_this26.y *= invN3;
				_this26.z *= invN3;
			}
			iron_object_Uniforms.helpVec = _this26;
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_cameraUp") {
			var _this27 = new iron_math_Vec4(camera.transform.world.self._10,camera.transform.world.self._11,camera.transform.world.self._12);
			var n4 = Math.sqrt(_this27.x * _this27.x + _this27.y * _this27.y + _this27.z * _this27.z);
			if(n4 > 0.0) {
				var invN4 = 1.0 / n4;
				_this27.x *= invN4;
				_this27.y *= invN4;
				_this27.z *= invN4;
			}
			iron_object_Uniforms.helpVec = _this27;
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_cameraRight") {
			var _this28 = new iron_math_Vec4(camera.transform.world.self._00,camera.transform.world.self._01,camera.transform.world.self._02);
			var n5 = Math.sqrt(_this28.x * _this28.x + _this28.y * _this28.y + _this28.z * _this28.z);
			if(n5 > 0.0) {
				var invN5 = 1.0 / n5;
				_this28.x *= invN5;
				_this28.y *= invN5;
				_this28.z *= invN5;
			}
			iron_object_Uniforms.helpVec = _this28;
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_backgroundCol") {
			if(camera.data.raw.clear_color != null) {
				var _this29 = iron_object_Uniforms.helpVec;
				var y6 = camera.data.raw.clear_color[1];
				var z6 = camera.data.raw.clear_color[2];
				_this29.x = camera.data.raw.clear_color[0];
				_this29.y = y6;
				_this29.z = z6;
				_this29.w = 1.0;
			}
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_hosekSunDirection") {
			var w2 = iron_Scene.active.world;
			if(w2 != null) {
				var _this30 = iron_object_Uniforms.helpVec;
				var y7 = w2.raw.sun_direction[1];
				var z7 = w2.raw.sun_direction[2] > 0 ? w2.raw.sun_direction[2] : 0;
				_this30.x = w2.raw.sun_direction[0];
				_this30.y = y7;
				_this30.z = z7;
				_this30.w = 1.0;
				v1 = iron_object_Uniforms.helpVec;
			}
		}
		if(v1 != null) {
			g.setFloat3(location,v1.x,v1.y,v1.z);
			return true;
		}
	} else if(c.type == "vec2") {
		var v2 = null;
		var _this31 = iron_object_Uniforms.helpVec;
		_this31.x = 0;
		_this31.y = 0;
		_this31.z = 0;
		_this31.w = 1.0;
		if(c.link == "_vec2x") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 1.0;
			v2.y = 0.0;
		} else if(c.link == "_vec2xInv") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 1.0 / iron_RenderPath.active.currentW;
			v2.y = 0.0;
		} else if(c.link == "_vec2x2") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 2.0;
			v2.y = 0.0;
		} else if(c.link == "_vec2x2Inv") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 2.0 / iron_RenderPath.active.currentW;
			v2.y = 0.0;
		} else if(c.link == "_vec2y") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 0.0;
			v2.y = 1.0;
		} else if(c.link == "_vec2yInv") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 0.0;
			v2.y = 1.0 / iron_RenderPath.active.currentH;
		} else if(c.link == "_vec2y2") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 0.0;
			v2.y = 2.0;
		} else if(c.link == "_vec2y2Inv") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 0.0;
			v2.y = 2.0 / iron_RenderPath.active.currentH;
		} else if(c.link == "_vec2y3") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 0.0;
			v2.y = 3.0;
		} else if(c.link == "_vec2y3Inv") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 0.0;
			v2.y = 3.0 / iron_RenderPath.active.currentH;
		} else if(c.link == "_windowSize") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = kha_System.windowWidth();
			v2.y = kha_System.windowHeight();
		} else if(c.link == "_screenSize") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = iron_RenderPath.active.currentW;
			v2.y = iron_RenderPath.active.currentH;
		} else if(c.link == "_screenSizeInv") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = 1.0 / iron_RenderPath.active.currentW;
			v2.y = 1.0 / iron_RenderPath.active.currentH;
		} else if(c.link == "_aspectRatio") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = iron_RenderPath.active.currentH / iron_RenderPath.active.currentW;
			v2.y = iron_RenderPath.active.currentW / iron_RenderPath.active.currentH;
			v2.x = v2.x > 1.0 ? 1.0 : v2.x;
			v2.y = v2.y > 1.0 ? 1.0 : v2.y;
		} else if(c.link == "_cameraPlane") {
			v2 = iron_object_Uniforms.helpVec;
			v2.x = camera.data.raw.near_plane;
			v2.y = camera.data.raw.far_plane;
		} else if(c.link == "_cameraPlaneProj") {
			var near = camera.data.raw.near_plane;
			var far = camera.data.raw.far_plane;
			v2 = iron_object_Uniforms.helpVec;
			v2.x = far / (far - near);
			v2.y = -far * near / (far - near);
		} else if(c.link == "_lightPlane") {
			if(light != null) {
				v2 = iron_object_Uniforms.helpVec;
				v2.x = light.data.raw.near_plane;
				v2.y = light.data.raw.far_plane;
			}
		} else if(c.link == "_lightPlaneProj") {
			if(light != null) {
				var near1 = light.data.raw.near_plane;
				var far1 = light.data.raw.far_plane;
				var a = far1 + near1;
				var b = far1 - near1;
				var f2 = 2.0;
				var c1 = f2 * far1 * near1;
				v2 = iron_object_Uniforms.helpVec;
				v2.x = a / b;
				v2.y = c1 / b;
			}
		} else if(c.link == "_spotData") {
			var point3 = iron_RenderPath.active.point;
			if(point3 != null) {
				v2 = iron_object_Uniforms.helpVec;
				v2.x = point3.data.raw.spot_size;
				v2.y = v2.x - point3.data.raw.spot_blend;
			}
		} else if(c.link == "_shadowMapSize") {
			if(light != null && light.data.raw.cast_shadow) {
				v2 = iron_object_Uniforms.helpVec;
				v2.x = v2.y = light.data.raw.shadowmap_size;
			}
		}
		if(v2 != null) {
			g.setFloat2(location,v2.x,v2.y);
			return true;
		}
	} else if(c.type == "float") {
		var f1 = null;
		if(c.link == "_time") {
			f1 = kha_Scheduler.time();
		} else if(c.link == "_sunShadowsBias") {
			var sun2 = iron_RenderPath.active.sun;
			f1 = sun2 == null ? 0.0 : sun2.data.raw.shadows_bias;
		} else if(c.link == "_pointShadowsBias") {
			var point4 = iron_RenderPath.active.point;
			f1 = point4 == null ? 0.0 : point4.data.raw.shadows_bias;
		} else if(c.link == "_envmapStrength") {
			f1 = iron_Scene.active.world == null ? 0.0 : iron_Scene.active.world.probe.raw.strength;
		} else if(c.link == "_aspectRatioF") {
			f1 = iron_RenderPath.active.currentW / iron_RenderPath.active.currentH;
		} else if(c.link == "_aspectRatioWindowF") {
			f1 = kha_System.windowWidth() / kha_System.windowHeight();
		} else if(c.link == "_frameScale") {
			f1 = iron_RenderPath.active.frameTime / (0.016666666666666666 * iron_system_Time.scale);
		} else if(c.link == "_fieldOfView") {
			f1 = camera.data.raw.fov;
		}
		if(f1 != null) {
			g.setFloat(location,f1);
			return true;
		}
	} else if(c.type == "floats") {
		var fa = null;
		if(c.link == "_envmapIrradiance") {
			fa = iron_Scene.active.world == null ? iron_data_WorldData.getEmptyIrradiance() : iron_Scene.active.world.probe.irradiance;
		} else if(c.link == "_cascadeData") {
			if(light != null) {
				fa = light.getCascadeData();
			}
		}
		if(fa != null) {
			g.setFloats(location,fa);
			return true;
		}
	} else if(c.type == "int") {
		var i = null;
		if(c.link == "_envmapNumMipmaps") {
			var w3 = iron_Scene.active.world;
			i = w3 != null ? w3.probe.raw.radiance_mipmaps + 1 - 2 : 1;
		}
		if(i != null) {
			g.setInt(location,i);
			return true;
		}
	}
	return false;
};
iron_object_Uniforms.setObjectConstant = function(g,object,location,c) {
	if(c.link == null) {
		return;
	}
	var camera = iron_Scene.active.camera;
	var light = iron_RenderPath.active.light;
	if(c.type == "mat4") {
		var m = null;
		if(c.link == "_worldMatrix") {
			m = object.transform.worldUnpack;
		} else if(c.link == "_inverseWorldMatrix") {
			var _this = iron_object_Uniforms.helpMat;
			var m1 = object.transform.worldUnpack;
			var a00 = m1.self._00;
			var a01 = m1.self._01;
			var a02 = m1.self._02;
			var a03 = m1.self._03;
			var a10 = m1.self._10;
			var a11 = m1.self._11;
			var a12 = m1.self._12;
			var a13 = m1.self._13;
			var a20 = m1.self._20;
			var a21 = m1.self._21;
			var a22 = m1.self._22;
			var a23 = m1.self._23;
			var a30 = m1.self._30;
			var a31 = m1.self._31;
			var a32 = m1.self._32;
			var a33 = m1.self._33;
			var b00 = a00 * a11 - a01 * a10;
			var b01 = a00 * a12 - a02 * a10;
			var b02 = a00 * a13 - a03 * a10;
			var b03 = a01 * a12 - a02 * a11;
			var b04 = a01 * a13 - a03 * a11;
			var b05 = a02 * a13 - a03 * a12;
			var b06 = a20 * a31 - a21 * a30;
			var b07 = a20 * a32 - a22 * a30;
			var b08 = a20 * a33 - a23 * a30;
			var b09 = a21 * a32 - a22 * a31;
			var b10 = a21 * a33 - a23 * a31;
			var b11 = a22 * a33 - a23 * a32;
			var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
			if(det == 0.0) {
				_this.self._00 = 1.0;
				_this.self._01 = 0.0;
				_this.self._02 = 0.0;
				_this.self._03 = 0.0;
				_this.self._10 = 0.0;
				_this.self._11 = 1.0;
				_this.self._12 = 0.0;
				_this.self._13 = 0.0;
				_this.self._20 = 0.0;
				_this.self._21 = 0.0;
				_this.self._22 = 1.0;
				_this.self._23 = 0.0;
				_this.self._30 = 0.0;
				_this.self._31 = 0.0;
				_this.self._32 = 0.0;
				_this.self._33 = 1.0;
			} else {
				det = 1.0 / det;
				_this.self._00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
				_this.self._01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
				_this.self._02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
				_this.self._03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
				_this.self._10 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
				_this.self._11 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
				_this.self._12 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
				_this.self._13 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
				_this.self._20 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
				_this.self._21 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
				_this.self._22 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
				_this.self._23 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
				_this.self._30 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
				_this.self._31 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
				_this.self._32 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
				_this.self._33 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
			}
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_worldViewProjectionMatrix") {
			var _this1 = iron_object_Uniforms.helpMat;
			var m2 = object.transform.worldUnpack;
			_this1.self._00 = m2.self._00;
			_this1.self._01 = m2.self._01;
			_this1.self._02 = m2.self._02;
			_this1.self._03 = m2.self._03;
			_this1.self._10 = m2.self._10;
			_this1.self._11 = m2.self._11;
			_this1.self._12 = m2.self._12;
			_this1.self._13 = m2.self._13;
			_this1.self._20 = m2.self._20;
			_this1.self._21 = m2.self._21;
			_this1.self._22 = m2.self._22;
			_this1.self._23 = m2.self._23;
			_this1.self._30 = m2.self._30;
			_this1.self._31 = m2.self._31;
			_this1.self._32 = m2.self._32;
			_this1.self._33 = m2.self._33;
			var _this2 = iron_object_Uniforms.helpMat;
			var m3 = camera.V;
			var a001 = _this2.self._00;
			var a011 = _this2.self._01;
			var a021 = _this2.self._02;
			var a031 = _this2.self._03;
			var a101 = _this2.self._10;
			var a111 = _this2.self._11;
			var a121 = _this2.self._12;
			var a131 = _this2.self._13;
			var a201 = _this2.self._20;
			var a211 = _this2.self._21;
			var a221 = _this2.self._22;
			var a231 = _this2.self._23;
			var a301 = _this2.self._30;
			var a311 = _this2.self._31;
			var a321 = _this2.self._32;
			var a331 = _this2.self._33;
			var b0 = m3.self._00;
			var b1 = m3.self._10;
			var b2 = m3.self._20;
			var b3 = m3.self._30;
			_this2.self._00 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			_this2.self._10 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			_this2.self._20 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			_this2.self._30 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			b0 = m3.self._01;
			b1 = m3.self._11;
			b2 = m3.self._21;
			b3 = m3.self._31;
			_this2.self._01 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			_this2.self._11 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			_this2.self._21 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			_this2.self._31 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			b0 = m3.self._02;
			b1 = m3.self._12;
			b2 = m3.self._22;
			b3 = m3.self._32;
			_this2.self._02 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			_this2.self._12 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			_this2.self._22 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			_this2.self._32 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			b0 = m3.self._03;
			b1 = m3.self._13;
			b2 = m3.self._23;
			b3 = m3.self._33;
			_this2.self._03 = a001 * b0 + a011 * b1 + a021 * b2 + a031 * b3;
			_this2.self._13 = a101 * b0 + a111 * b1 + a121 * b2 + a131 * b3;
			_this2.self._23 = a201 * b0 + a211 * b1 + a221 * b2 + a231 * b3;
			_this2.self._33 = a301 * b0 + a311 * b1 + a321 * b2 + a331 * b3;
			var _this3 = iron_object_Uniforms.helpMat;
			var m4 = camera.P;
			var a002 = _this3.self._00;
			var a012 = _this3.self._01;
			var a022 = _this3.self._02;
			var a032 = _this3.self._03;
			var a102 = _this3.self._10;
			var a112 = _this3.self._11;
			var a122 = _this3.self._12;
			var a132 = _this3.self._13;
			var a202 = _this3.self._20;
			var a212 = _this3.self._21;
			var a222 = _this3.self._22;
			var a232 = _this3.self._23;
			var a302 = _this3.self._30;
			var a312 = _this3.self._31;
			var a322 = _this3.self._32;
			var a332 = _this3.self._33;
			var b010 = m4.self._00;
			var b12 = m4.self._10;
			var b21 = m4.self._20;
			var b31 = m4.self._30;
			_this3.self._00 = a002 * b010 + a012 * b12 + a022 * b21 + a032 * b31;
			_this3.self._10 = a102 * b010 + a112 * b12 + a122 * b21 + a132 * b31;
			_this3.self._20 = a202 * b010 + a212 * b12 + a222 * b21 + a232 * b31;
			_this3.self._30 = a302 * b010 + a312 * b12 + a322 * b21 + a332 * b31;
			b010 = m4.self._01;
			b12 = m4.self._11;
			b21 = m4.self._21;
			b31 = m4.self._31;
			_this3.self._01 = a002 * b010 + a012 * b12 + a022 * b21 + a032 * b31;
			_this3.self._11 = a102 * b010 + a112 * b12 + a122 * b21 + a132 * b31;
			_this3.self._21 = a202 * b010 + a212 * b12 + a222 * b21 + a232 * b31;
			_this3.self._31 = a302 * b010 + a312 * b12 + a322 * b21 + a332 * b31;
			b010 = m4.self._02;
			b12 = m4.self._12;
			b21 = m4.self._22;
			b31 = m4.self._32;
			_this3.self._02 = a002 * b010 + a012 * b12 + a022 * b21 + a032 * b31;
			_this3.self._12 = a102 * b010 + a112 * b12 + a122 * b21 + a132 * b31;
			_this3.self._22 = a202 * b010 + a212 * b12 + a222 * b21 + a232 * b31;
			_this3.self._32 = a302 * b010 + a312 * b12 + a322 * b21 + a332 * b31;
			b010 = m4.self._03;
			b12 = m4.self._13;
			b21 = m4.self._23;
			b31 = m4.self._33;
			_this3.self._03 = a002 * b010 + a012 * b12 + a022 * b21 + a032 * b31;
			_this3.self._13 = a102 * b010 + a112 * b12 + a122 * b21 + a132 * b31;
			_this3.self._23 = a202 * b010 + a212 * b12 + a222 * b21 + a232 * b31;
			_this3.self._33 = a302 * b010 + a312 * b12 + a322 * b21 + a332 * b31;
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_worldViewProjectionMatrixSphere") {
			var t = object.transform;
			var _this4 = iron_object_Uniforms.helpMat;
			var m5 = t.worldUnpack;
			_this4.self._00 = m5.self._00;
			_this4.self._01 = m5.self._01;
			_this4.self._02 = m5.self._02;
			_this4.self._03 = m5.self._03;
			_this4.self._10 = m5.self._10;
			_this4.self._11 = m5.self._11;
			_this4.self._12 = m5.self._12;
			_this4.self._13 = m5.self._13;
			_this4.self._20 = m5.self._20;
			_this4.self._21 = m5.self._21;
			_this4.self._22 = m5.self._22;
			_this4.self._23 = m5.self._23;
			_this4.self._30 = m5.self._30;
			_this4.self._31 = m5.self._31;
			_this4.self._32 = m5.self._32;
			_this4.self._33 = m5.self._33;
			var _this5 = iron_object_Uniforms.helpMat;
			var m6 = camera.V;
			var a003 = _this5.self._00;
			var a013 = _this5.self._01;
			var a023 = _this5.self._02;
			var a033 = _this5.self._03;
			var a103 = _this5.self._10;
			var a113 = _this5.self._11;
			var a123 = _this5.self._12;
			var a133 = _this5.self._13;
			var a203 = _this5.self._20;
			var a213 = _this5.self._21;
			var a223 = _this5.self._22;
			var a233 = _this5.self._23;
			var a303 = _this5.self._30;
			var a313 = _this5.self._31;
			var a323 = _this5.self._32;
			var a333 = _this5.self._33;
			var b011 = m6.self._00;
			var b13 = m6.self._10;
			var b22 = m6.self._20;
			var b32 = m6.self._30;
			_this5.self._00 = a003 * b011 + a013 * b13 + a023 * b22 + a033 * b32;
			_this5.self._10 = a103 * b011 + a113 * b13 + a123 * b22 + a133 * b32;
			_this5.self._20 = a203 * b011 + a213 * b13 + a223 * b22 + a233 * b32;
			_this5.self._30 = a303 * b011 + a313 * b13 + a323 * b22 + a333 * b32;
			b011 = m6.self._01;
			b13 = m6.self._11;
			b22 = m6.self._21;
			b32 = m6.self._31;
			_this5.self._01 = a003 * b011 + a013 * b13 + a023 * b22 + a033 * b32;
			_this5.self._11 = a103 * b011 + a113 * b13 + a123 * b22 + a133 * b32;
			_this5.self._21 = a203 * b011 + a213 * b13 + a223 * b22 + a233 * b32;
			_this5.self._31 = a303 * b011 + a313 * b13 + a323 * b22 + a333 * b32;
			b011 = m6.self._02;
			b13 = m6.self._12;
			b22 = m6.self._22;
			b32 = m6.self._32;
			_this5.self._02 = a003 * b011 + a013 * b13 + a023 * b22 + a033 * b32;
			_this5.self._12 = a103 * b011 + a113 * b13 + a123 * b22 + a133 * b32;
			_this5.self._22 = a203 * b011 + a213 * b13 + a223 * b22 + a233 * b32;
			_this5.self._32 = a303 * b011 + a313 * b13 + a323 * b22 + a333 * b32;
			b011 = m6.self._03;
			b13 = m6.self._13;
			b22 = m6.self._23;
			b32 = m6.self._33;
			_this5.self._03 = a003 * b011 + a013 * b13 + a023 * b22 + a033 * b32;
			_this5.self._13 = a103 * b011 + a113 * b13 + a123 * b22 + a133 * b32;
			_this5.self._23 = a203 * b011 + a213 * b13 + a223 * b22 + a233 * b32;
			_this5.self._33 = a303 * b011 + a313 * b13 + a323 * b22 + a333 * b32;
			iron_object_Uniforms.helpMat.self._00 = t.scale.x;
			iron_object_Uniforms.helpMat.self._10 = 0.0;
			iron_object_Uniforms.helpMat.self._20 = 0.0;
			iron_object_Uniforms.helpMat.self._01 = 0.0;
			iron_object_Uniforms.helpMat.self._11 = t.scale.y;
			iron_object_Uniforms.helpMat.self._21 = 0.0;
			iron_object_Uniforms.helpMat.self._02 = 0.0;
			iron_object_Uniforms.helpMat.self._12 = 0.0;
			iron_object_Uniforms.helpMat.self._22 = t.scale.z;
			var _this6 = iron_object_Uniforms.helpMat;
			var m7 = camera.P;
			var a004 = _this6.self._00;
			var a014 = _this6.self._01;
			var a024 = _this6.self._02;
			var a034 = _this6.self._03;
			var a104 = _this6.self._10;
			var a114 = _this6.self._11;
			var a124 = _this6.self._12;
			var a134 = _this6.self._13;
			var a204 = _this6.self._20;
			var a214 = _this6.self._21;
			var a224 = _this6.self._22;
			var a234 = _this6.self._23;
			var a304 = _this6.self._30;
			var a314 = _this6.self._31;
			var a324 = _this6.self._32;
			var a334 = _this6.self._33;
			var b012 = m7.self._00;
			var b14 = m7.self._10;
			var b23 = m7.self._20;
			var b33 = m7.self._30;
			_this6.self._00 = a004 * b012 + a014 * b14 + a024 * b23 + a034 * b33;
			_this6.self._10 = a104 * b012 + a114 * b14 + a124 * b23 + a134 * b33;
			_this6.self._20 = a204 * b012 + a214 * b14 + a224 * b23 + a234 * b33;
			_this6.self._30 = a304 * b012 + a314 * b14 + a324 * b23 + a334 * b33;
			b012 = m7.self._01;
			b14 = m7.self._11;
			b23 = m7.self._21;
			b33 = m7.self._31;
			_this6.self._01 = a004 * b012 + a014 * b14 + a024 * b23 + a034 * b33;
			_this6.self._11 = a104 * b012 + a114 * b14 + a124 * b23 + a134 * b33;
			_this6.self._21 = a204 * b012 + a214 * b14 + a224 * b23 + a234 * b33;
			_this6.self._31 = a304 * b012 + a314 * b14 + a324 * b23 + a334 * b33;
			b012 = m7.self._02;
			b14 = m7.self._12;
			b23 = m7.self._22;
			b33 = m7.self._32;
			_this6.self._02 = a004 * b012 + a014 * b14 + a024 * b23 + a034 * b33;
			_this6.self._12 = a104 * b012 + a114 * b14 + a124 * b23 + a134 * b33;
			_this6.self._22 = a204 * b012 + a214 * b14 + a224 * b23 + a234 * b33;
			_this6.self._32 = a304 * b012 + a314 * b14 + a324 * b23 + a334 * b33;
			b012 = m7.self._03;
			b14 = m7.self._13;
			b23 = m7.self._23;
			b33 = m7.self._33;
			_this6.self._03 = a004 * b012 + a014 * b14 + a024 * b23 + a034 * b33;
			_this6.self._13 = a104 * b012 + a114 * b14 + a124 * b23 + a134 * b33;
			_this6.self._23 = a204 * b012 + a214 * b14 + a224 * b23 + a234 * b33;
			_this6.self._33 = a304 * b012 + a314 * b14 + a324 * b23 + a334 * b33;
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_worldViewProjectionMatrixCylinder") {
			var t1 = object.transform;
			var _this7 = iron_object_Uniforms.helpMat;
			var m8 = t1.worldUnpack;
			_this7.self._00 = m8.self._00;
			_this7.self._01 = m8.self._01;
			_this7.self._02 = m8.self._02;
			_this7.self._03 = m8.self._03;
			_this7.self._10 = m8.self._10;
			_this7.self._11 = m8.self._11;
			_this7.self._12 = m8.self._12;
			_this7.self._13 = m8.self._13;
			_this7.self._20 = m8.self._20;
			_this7.self._21 = m8.self._21;
			_this7.self._22 = m8.self._22;
			_this7.self._23 = m8.self._23;
			_this7.self._30 = m8.self._30;
			_this7.self._31 = m8.self._31;
			_this7.self._32 = m8.self._32;
			_this7.self._33 = m8.self._33;
			var _this8 = iron_object_Uniforms.helpMat;
			var m9 = camera.V;
			var a005 = _this8.self._00;
			var a015 = _this8.self._01;
			var a025 = _this8.self._02;
			var a035 = _this8.self._03;
			var a105 = _this8.self._10;
			var a115 = _this8.self._11;
			var a125 = _this8.self._12;
			var a135 = _this8.self._13;
			var a205 = _this8.self._20;
			var a215 = _this8.self._21;
			var a225 = _this8.self._22;
			var a235 = _this8.self._23;
			var a305 = _this8.self._30;
			var a315 = _this8.self._31;
			var a325 = _this8.self._32;
			var a335 = _this8.self._33;
			var b013 = m9.self._00;
			var b15 = m9.self._10;
			var b24 = m9.self._20;
			var b34 = m9.self._30;
			_this8.self._00 = a005 * b013 + a015 * b15 + a025 * b24 + a035 * b34;
			_this8.self._10 = a105 * b013 + a115 * b15 + a125 * b24 + a135 * b34;
			_this8.self._20 = a205 * b013 + a215 * b15 + a225 * b24 + a235 * b34;
			_this8.self._30 = a305 * b013 + a315 * b15 + a325 * b24 + a335 * b34;
			b013 = m9.self._01;
			b15 = m9.self._11;
			b24 = m9.self._21;
			b34 = m9.self._31;
			_this8.self._01 = a005 * b013 + a015 * b15 + a025 * b24 + a035 * b34;
			_this8.self._11 = a105 * b013 + a115 * b15 + a125 * b24 + a135 * b34;
			_this8.self._21 = a205 * b013 + a215 * b15 + a225 * b24 + a235 * b34;
			_this8.self._31 = a305 * b013 + a315 * b15 + a325 * b24 + a335 * b34;
			b013 = m9.self._02;
			b15 = m9.self._12;
			b24 = m9.self._22;
			b34 = m9.self._32;
			_this8.self._02 = a005 * b013 + a015 * b15 + a025 * b24 + a035 * b34;
			_this8.self._12 = a105 * b013 + a115 * b15 + a125 * b24 + a135 * b34;
			_this8.self._22 = a205 * b013 + a215 * b15 + a225 * b24 + a235 * b34;
			_this8.self._32 = a305 * b013 + a315 * b15 + a325 * b24 + a335 * b34;
			b013 = m9.self._03;
			b15 = m9.self._13;
			b24 = m9.self._23;
			b34 = m9.self._33;
			_this8.self._03 = a005 * b013 + a015 * b15 + a025 * b24 + a035 * b34;
			_this8.self._13 = a105 * b013 + a115 * b15 + a125 * b24 + a135 * b34;
			_this8.self._23 = a205 * b013 + a215 * b15 + a225 * b24 + a235 * b34;
			_this8.self._33 = a305 * b013 + a315 * b15 + a325 * b24 + a335 * b34;
			iron_object_Uniforms.helpMat.self._00 = t1.scale.x;
			iron_object_Uniforms.helpMat.self._20 = 0.0;
			iron_object_Uniforms.helpMat.self._01 = 0.0;
			iron_object_Uniforms.helpMat.self._21 = 0.0;
			iron_object_Uniforms.helpMat.self._02 = 0.0;
			iron_object_Uniforms.helpMat.self._22 = t1.scale.z;
			var _this9 = iron_object_Uniforms.helpMat;
			var m10 = camera.P;
			var a006 = _this9.self._00;
			var a016 = _this9.self._01;
			var a026 = _this9.self._02;
			var a036 = _this9.self._03;
			var a106 = _this9.self._10;
			var a116 = _this9.self._11;
			var a126 = _this9.self._12;
			var a136 = _this9.self._13;
			var a206 = _this9.self._20;
			var a216 = _this9.self._21;
			var a226 = _this9.self._22;
			var a236 = _this9.self._23;
			var a306 = _this9.self._30;
			var a316 = _this9.self._31;
			var a326 = _this9.self._32;
			var a336 = _this9.self._33;
			var b014 = m10.self._00;
			var b16 = m10.self._10;
			var b25 = m10.self._20;
			var b35 = m10.self._30;
			_this9.self._00 = a006 * b014 + a016 * b16 + a026 * b25 + a036 * b35;
			_this9.self._10 = a106 * b014 + a116 * b16 + a126 * b25 + a136 * b35;
			_this9.self._20 = a206 * b014 + a216 * b16 + a226 * b25 + a236 * b35;
			_this9.self._30 = a306 * b014 + a316 * b16 + a326 * b25 + a336 * b35;
			b014 = m10.self._01;
			b16 = m10.self._11;
			b25 = m10.self._21;
			b35 = m10.self._31;
			_this9.self._01 = a006 * b014 + a016 * b16 + a026 * b25 + a036 * b35;
			_this9.self._11 = a106 * b014 + a116 * b16 + a126 * b25 + a136 * b35;
			_this9.self._21 = a206 * b014 + a216 * b16 + a226 * b25 + a236 * b35;
			_this9.self._31 = a306 * b014 + a316 * b16 + a326 * b25 + a336 * b35;
			b014 = m10.self._02;
			b16 = m10.self._12;
			b25 = m10.self._22;
			b35 = m10.self._32;
			_this9.self._02 = a006 * b014 + a016 * b16 + a026 * b25 + a036 * b35;
			_this9.self._12 = a106 * b014 + a116 * b16 + a126 * b25 + a136 * b35;
			_this9.self._22 = a206 * b014 + a216 * b16 + a226 * b25 + a236 * b35;
			_this9.self._32 = a306 * b014 + a316 * b16 + a326 * b25 + a336 * b35;
			b014 = m10.self._03;
			b16 = m10.self._13;
			b25 = m10.self._23;
			b35 = m10.self._33;
			_this9.self._03 = a006 * b014 + a016 * b16 + a026 * b25 + a036 * b35;
			_this9.self._13 = a106 * b014 + a116 * b16 + a126 * b25 + a136 * b35;
			_this9.self._23 = a206 * b014 + a216 * b16 + a226 * b25 + a236 * b35;
			_this9.self._33 = a306 * b014 + a316 * b16 + a326 * b25 + a336 * b35;
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_worldViewMatrix") {
			var _this10 = iron_object_Uniforms.helpMat;
			var m11 = object.transform.worldUnpack;
			_this10.self._00 = m11.self._00;
			_this10.self._01 = m11.self._01;
			_this10.self._02 = m11.self._02;
			_this10.self._03 = m11.self._03;
			_this10.self._10 = m11.self._10;
			_this10.self._11 = m11.self._11;
			_this10.self._12 = m11.self._12;
			_this10.self._13 = m11.self._13;
			_this10.self._20 = m11.self._20;
			_this10.self._21 = m11.self._21;
			_this10.self._22 = m11.self._22;
			_this10.self._23 = m11.self._23;
			_this10.self._30 = m11.self._30;
			_this10.self._31 = m11.self._31;
			_this10.self._32 = m11.self._32;
			_this10.self._33 = m11.self._33;
			var _this11 = iron_object_Uniforms.helpMat;
			var m12 = camera.V;
			var a007 = _this11.self._00;
			var a017 = _this11.self._01;
			var a027 = _this11.self._02;
			var a037 = _this11.self._03;
			var a107 = _this11.self._10;
			var a117 = _this11.self._11;
			var a127 = _this11.self._12;
			var a137 = _this11.self._13;
			var a207 = _this11.self._20;
			var a217 = _this11.self._21;
			var a227 = _this11.self._22;
			var a237 = _this11.self._23;
			var a307 = _this11.self._30;
			var a317 = _this11.self._31;
			var a327 = _this11.self._32;
			var a337 = _this11.self._33;
			var b015 = m12.self._00;
			var b17 = m12.self._10;
			var b26 = m12.self._20;
			var b36 = m12.self._30;
			_this11.self._00 = a007 * b015 + a017 * b17 + a027 * b26 + a037 * b36;
			_this11.self._10 = a107 * b015 + a117 * b17 + a127 * b26 + a137 * b36;
			_this11.self._20 = a207 * b015 + a217 * b17 + a227 * b26 + a237 * b36;
			_this11.self._30 = a307 * b015 + a317 * b17 + a327 * b26 + a337 * b36;
			b015 = m12.self._01;
			b17 = m12.self._11;
			b26 = m12.self._21;
			b36 = m12.self._31;
			_this11.self._01 = a007 * b015 + a017 * b17 + a027 * b26 + a037 * b36;
			_this11.self._11 = a107 * b015 + a117 * b17 + a127 * b26 + a137 * b36;
			_this11.self._21 = a207 * b015 + a217 * b17 + a227 * b26 + a237 * b36;
			_this11.self._31 = a307 * b015 + a317 * b17 + a327 * b26 + a337 * b36;
			b015 = m12.self._02;
			b17 = m12.self._12;
			b26 = m12.self._22;
			b36 = m12.self._32;
			_this11.self._02 = a007 * b015 + a017 * b17 + a027 * b26 + a037 * b36;
			_this11.self._12 = a107 * b015 + a117 * b17 + a127 * b26 + a137 * b36;
			_this11.self._22 = a207 * b015 + a217 * b17 + a227 * b26 + a237 * b36;
			_this11.self._32 = a307 * b015 + a317 * b17 + a327 * b26 + a337 * b36;
			b015 = m12.self._03;
			b17 = m12.self._13;
			b26 = m12.self._23;
			b36 = m12.self._33;
			_this11.self._03 = a007 * b015 + a017 * b17 + a027 * b26 + a037 * b36;
			_this11.self._13 = a107 * b015 + a117 * b17 + a127 * b26 + a137 * b36;
			_this11.self._23 = a207 * b015 + a217 * b17 + a227 * b26 + a237 * b36;
			_this11.self._33 = a307 * b015 + a317 * b17 + a327 * b26 + a337 * b36;
			m = iron_object_Uniforms.helpMat;
		} else if(c.link == "_lightWorldViewProjectionMatrix") {
			if(light != null) {
				if(object == null) {
					var _this12 = iron_object_Uniforms.helpMat;
					_this12.self._00 = 1.0;
					_this12.self._01 = 0.0;
					_this12.self._02 = 0.0;
					_this12.self._03 = 0.0;
					_this12.self._10 = 0.0;
					_this12.self._11 = 1.0;
					_this12.self._12 = 0.0;
					_this12.self._13 = 0.0;
					_this12.self._20 = 0.0;
					_this12.self._21 = 0.0;
					_this12.self._22 = 1.0;
					_this12.self._23 = 0.0;
					_this12.self._30 = 0.0;
					_this12.self._31 = 0.0;
					_this12.self._32 = 0.0;
					_this12.self._33 = 1.0;
				} else {
					var _this13 = iron_object_Uniforms.helpMat;
					var m13 = object.transform.worldUnpack;
					_this13.self._00 = m13.self._00;
					_this13.self._01 = m13.self._01;
					_this13.self._02 = m13.self._02;
					_this13.self._03 = m13.self._03;
					_this13.self._10 = m13.self._10;
					_this13.self._11 = m13.self._11;
					_this13.self._12 = m13.self._12;
					_this13.self._13 = m13.self._13;
					_this13.self._20 = m13.self._20;
					_this13.self._21 = m13.self._21;
					_this13.self._22 = m13.self._22;
					_this13.self._23 = m13.self._23;
					_this13.self._30 = m13.self._30;
					_this13.self._31 = m13.self._31;
					_this13.self._32 = m13.self._32;
					_this13.self._33 = m13.self._33;
				}
				var _this14 = iron_object_Uniforms.helpMat;
				var m14 = light.VP;
				var a008 = _this14.self._00;
				var a018 = _this14.self._01;
				var a028 = _this14.self._02;
				var a038 = _this14.self._03;
				var a108 = _this14.self._10;
				var a118 = _this14.self._11;
				var a128 = _this14.self._12;
				var a138 = _this14.self._13;
				var a208 = _this14.self._20;
				var a218 = _this14.self._21;
				var a228 = _this14.self._22;
				var a238 = _this14.self._23;
				var a308 = _this14.self._30;
				var a318 = _this14.self._31;
				var a328 = _this14.self._32;
				var a338 = _this14.self._33;
				var b016 = m14.self._00;
				var b18 = m14.self._10;
				var b27 = m14.self._20;
				var b37 = m14.self._30;
				_this14.self._00 = a008 * b016 + a018 * b18 + a028 * b27 + a038 * b37;
				_this14.self._10 = a108 * b016 + a118 * b18 + a128 * b27 + a138 * b37;
				_this14.self._20 = a208 * b016 + a218 * b18 + a228 * b27 + a238 * b37;
				_this14.self._30 = a308 * b016 + a318 * b18 + a328 * b27 + a338 * b37;
				b016 = m14.self._01;
				b18 = m14.self._11;
				b27 = m14.self._21;
				b37 = m14.self._31;
				_this14.self._01 = a008 * b016 + a018 * b18 + a028 * b27 + a038 * b37;
				_this14.self._11 = a108 * b016 + a118 * b18 + a128 * b27 + a138 * b37;
				_this14.self._21 = a208 * b016 + a218 * b18 + a228 * b27 + a238 * b37;
				_this14.self._31 = a308 * b016 + a318 * b18 + a328 * b27 + a338 * b37;
				b016 = m14.self._02;
				b18 = m14.self._12;
				b27 = m14.self._22;
				b37 = m14.self._32;
				_this14.self._02 = a008 * b016 + a018 * b18 + a028 * b27 + a038 * b37;
				_this14.self._12 = a108 * b016 + a118 * b18 + a128 * b27 + a138 * b37;
				_this14.self._22 = a208 * b016 + a218 * b18 + a228 * b27 + a238 * b37;
				_this14.self._32 = a308 * b016 + a318 * b18 + a328 * b27 + a338 * b37;
				b016 = m14.self._03;
				b18 = m14.self._13;
				b27 = m14.self._23;
				b37 = m14.self._33;
				_this14.self._03 = a008 * b016 + a018 * b18 + a028 * b27 + a038 * b37;
				_this14.self._13 = a108 * b016 + a118 * b18 + a128 * b27 + a138 * b37;
				_this14.self._23 = a208 * b016 + a218 * b18 + a228 * b27 + a238 * b37;
				_this14.self._33 = a308 * b016 + a318 * b18 + a328 * b27 + a338 * b37;
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_lightWorldViewProjectionMatrixSphere") {
			if(light != null) {
				var _this15 = iron_object_Uniforms.helpMat;
				var m15 = object.transform.worldUnpack;
				_this15.self._00 = m15.self._00;
				_this15.self._01 = m15.self._01;
				_this15.self._02 = m15.self._02;
				_this15.self._03 = m15.self._03;
				_this15.self._10 = m15.self._10;
				_this15.self._11 = m15.self._11;
				_this15.self._12 = m15.self._12;
				_this15.self._13 = m15.self._13;
				_this15.self._20 = m15.self._20;
				_this15.self._21 = m15.self._21;
				_this15.self._22 = m15.self._22;
				_this15.self._23 = m15.self._23;
				_this15.self._30 = m15.self._30;
				_this15.self._31 = m15.self._31;
				_this15.self._32 = m15.self._32;
				_this15.self._33 = m15.self._33;
				var _this16 = iron_object_Uniforms.helpMat;
				var m16 = camera.V;
				var a009 = _this16.self._00;
				var a019 = _this16.self._01;
				var a029 = _this16.self._02;
				var a039 = _this16.self._03;
				var a109 = _this16.self._10;
				var a119 = _this16.self._11;
				var a129 = _this16.self._12;
				var a139 = _this16.self._13;
				var a209 = _this16.self._20;
				var a219 = _this16.self._21;
				var a229 = _this16.self._22;
				var a239 = _this16.self._23;
				var a309 = _this16.self._30;
				var a319 = _this16.self._31;
				var a329 = _this16.self._32;
				var a339 = _this16.self._33;
				var b017 = m16.self._00;
				var b19 = m16.self._10;
				var b28 = m16.self._20;
				var b38 = m16.self._30;
				_this16.self._00 = a009 * b017 + a019 * b19 + a029 * b28 + a039 * b38;
				_this16.self._10 = a109 * b017 + a119 * b19 + a129 * b28 + a139 * b38;
				_this16.self._20 = a209 * b017 + a219 * b19 + a229 * b28 + a239 * b38;
				_this16.self._30 = a309 * b017 + a319 * b19 + a329 * b28 + a339 * b38;
				b017 = m16.self._01;
				b19 = m16.self._11;
				b28 = m16.self._21;
				b38 = m16.self._31;
				_this16.self._01 = a009 * b017 + a019 * b19 + a029 * b28 + a039 * b38;
				_this16.self._11 = a109 * b017 + a119 * b19 + a129 * b28 + a139 * b38;
				_this16.self._21 = a209 * b017 + a219 * b19 + a229 * b28 + a239 * b38;
				_this16.self._31 = a309 * b017 + a319 * b19 + a329 * b28 + a339 * b38;
				b017 = m16.self._02;
				b19 = m16.self._12;
				b28 = m16.self._22;
				b38 = m16.self._32;
				_this16.self._02 = a009 * b017 + a019 * b19 + a029 * b28 + a039 * b38;
				_this16.self._12 = a109 * b017 + a119 * b19 + a129 * b28 + a139 * b38;
				_this16.self._22 = a209 * b017 + a219 * b19 + a229 * b28 + a239 * b38;
				_this16.self._32 = a309 * b017 + a319 * b19 + a329 * b28 + a339 * b38;
				b017 = m16.self._03;
				b19 = m16.self._13;
				b28 = m16.self._23;
				b38 = m16.self._33;
				_this16.self._03 = a009 * b017 + a019 * b19 + a029 * b28 + a039 * b38;
				_this16.self._13 = a109 * b017 + a119 * b19 + a129 * b28 + a139 * b38;
				_this16.self._23 = a209 * b017 + a219 * b19 + a229 * b28 + a239 * b38;
				_this16.self._33 = a309 * b017 + a319 * b19 + a329 * b28 + a339 * b38;
				iron_object_Uniforms.helpMat.self._00 = 1.0;
				iron_object_Uniforms.helpMat.self._10 = 0.0;
				iron_object_Uniforms.helpMat.self._20 = 0.0;
				iron_object_Uniforms.helpMat.self._01 = 0.0;
				iron_object_Uniforms.helpMat.self._11 = 1.0;
				iron_object_Uniforms.helpMat.self._21 = 0.0;
				iron_object_Uniforms.helpMat.self._02 = 0.0;
				iron_object_Uniforms.helpMat.self._12 = 0.0;
				iron_object_Uniforms.helpMat.self._22 = 1.0;
				var _this17 = iron_object_Uniforms.helpMat2;
				var m17 = camera.V;
				var a0010 = m17.self._00;
				var a0110 = m17.self._01;
				var a0210 = m17.self._02;
				var a0310 = m17.self._03;
				var a1010 = m17.self._10;
				var a1110 = m17.self._11;
				var a1210 = m17.self._12;
				var a1310 = m17.self._13;
				var a2010 = m17.self._20;
				var a2110 = m17.self._21;
				var a2210 = m17.self._22;
				var a2310 = m17.self._23;
				var a3010 = m17.self._30;
				var a3110 = m17.self._31;
				var a3210 = m17.self._32;
				var a3310 = m17.self._33;
				var b001 = a0010 * a1110 - a0110 * a1010;
				var b018 = a0010 * a1210 - a0210 * a1010;
				var b021 = a0010 * a1310 - a0310 * a1010;
				var b031 = a0110 * a1210 - a0210 * a1110;
				var b041 = a0110 * a1310 - a0310 * a1110;
				var b051 = a0210 * a1310 - a0310 * a1210;
				var b061 = a2010 * a3110 - a2110 * a3010;
				var b071 = a2010 * a3210 - a2210 * a3010;
				var b081 = a2010 * a3310 - a2310 * a3010;
				var b091 = a2110 * a3210 - a2210 * a3110;
				var b101 = a2110 * a3310 - a2310 * a3110;
				var b111 = a2210 * a3310 - a2310 * a3210;
				var det1 = b001 * b111 - b018 * b101 + b021 * b091 + b031 * b081 - b041 * b071 + b051 * b061;
				if(det1 == 0.0) {
					_this17.self._00 = 1.0;
					_this17.self._01 = 0.0;
					_this17.self._02 = 0.0;
					_this17.self._03 = 0.0;
					_this17.self._10 = 0.0;
					_this17.self._11 = 1.0;
					_this17.self._12 = 0.0;
					_this17.self._13 = 0.0;
					_this17.self._20 = 0.0;
					_this17.self._21 = 0.0;
					_this17.self._22 = 1.0;
					_this17.self._23 = 0.0;
					_this17.self._30 = 0.0;
					_this17.self._31 = 0.0;
					_this17.self._32 = 0.0;
					_this17.self._33 = 1.0;
				} else {
					det1 = 1.0 / det1;
					_this17.self._00 = (a1110 * b111 - a1210 * b101 + a1310 * b091) * det1;
					_this17.self._01 = (a0210 * b101 - a0110 * b111 - a0310 * b091) * det1;
					_this17.self._02 = (a3110 * b051 - a3210 * b041 + a3310 * b031) * det1;
					_this17.self._03 = (a2210 * b041 - a2110 * b051 - a2310 * b031) * det1;
					_this17.self._10 = (a1210 * b081 - a1010 * b111 - a1310 * b071) * det1;
					_this17.self._11 = (a0010 * b111 - a0210 * b081 + a0310 * b071) * det1;
					_this17.self._12 = (a3210 * b021 - a3010 * b051 - a3310 * b018) * det1;
					_this17.self._13 = (a2010 * b051 - a2210 * b021 + a2310 * b018) * det1;
					_this17.self._20 = (a1010 * b101 - a1110 * b081 + a1310 * b061) * det1;
					_this17.self._21 = (a0110 * b081 - a0010 * b101 - a0310 * b061) * det1;
					_this17.self._22 = (a3010 * b041 - a3110 * b021 + a3310 * b001) * det1;
					_this17.self._23 = (a2110 * b021 - a2010 * b041 - a2310 * b001) * det1;
					_this17.self._30 = (a1110 * b071 - a1010 * b091 - a1210 * b061) * det1;
					_this17.self._31 = (a0010 * b091 - a0110 * b071 + a0210 * b061) * det1;
					_this17.self._32 = (a3110 * b018 - a3010 * b031 - a3210 * b001) * det1;
					_this17.self._33 = (a2010 * b031 - a2110 * b018 + a2210 * b001) * det1;
				}
				var _this18 = iron_object_Uniforms.helpMat;
				var m18 = iron_object_Uniforms.helpMat2;
				var a0011 = _this18.self._00;
				var a0111 = _this18.self._01;
				var a0211 = _this18.self._02;
				var a0311 = _this18.self._03;
				var a1011 = _this18.self._10;
				var a1111 = _this18.self._11;
				var a1211 = _this18.self._12;
				var a1311 = _this18.self._13;
				var a2011 = _this18.self._20;
				var a2111 = _this18.self._21;
				var a2211 = _this18.self._22;
				var a2311 = _this18.self._23;
				var a3011 = _this18.self._30;
				var a3111 = _this18.self._31;
				var a3211 = _this18.self._32;
				var a3311 = _this18.self._33;
				var b019 = m18.self._00;
				var b110 = m18.self._10;
				var b29 = m18.self._20;
				var b39 = m18.self._30;
				_this18.self._00 = a0011 * b019 + a0111 * b110 + a0211 * b29 + a0311 * b39;
				_this18.self._10 = a1011 * b019 + a1111 * b110 + a1211 * b29 + a1311 * b39;
				_this18.self._20 = a2011 * b019 + a2111 * b110 + a2211 * b29 + a2311 * b39;
				_this18.self._30 = a3011 * b019 + a3111 * b110 + a3211 * b29 + a3311 * b39;
				b019 = m18.self._01;
				b110 = m18.self._11;
				b29 = m18.self._21;
				b39 = m18.self._31;
				_this18.self._01 = a0011 * b019 + a0111 * b110 + a0211 * b29 + a0311 * b39;
				_this18.self._11 = a1011 * b019 + a1111 * b110 + a1211 * b29 + a1311 * b39;
				_this18.self._21 = a2011 * b019 + a2111 * b110 + a2211 * b29 + a2311 * b39;
				_this18.self._31 = a3011 * b019 + a3111 * b110 + a3211 * b29 + a3311 * b39;
				b019 = m18.self._02;
				b110 = m18.self._12;
				b29 = m18.self._22;
				b39 = m18.self._32;
				_this18.self._02 = a0011 * b019 + a0111 * b110 + a0211 * b29 + a0311 * b39;
				_this18.self._12 = a1011 * b019 + a1111 * b110 + a1211 * b29 + a1311 * b39;
				_this18.self._22 = a2011 * b019 + a2111 * b110 + a2211 * b29 + a2311 * b39;
				_this18.self._32 = a3011 * b019 + a3111 * b110 + a3211 * b29 + a3311 * b39;
				b019 = m18.self._03;
				b110 = m18.self._13;
				b29 = m18.self._23;
				b39 = m18.self._33;
				_this18.self._03 = a0011 * b019 + a0111 * b110 + a0211 * b29 + a0311 * b39;
				_this18.self._13 = a1011 * b019 + a1111 * b110 + a1211 * b29 + a1311 * b39;
				_this18.self._23 = a2011 * b019 + a2111 * b110 + a2211 * b29 + a2311 * b39;
				_this18.self._33 = a3011 * b019 + a3111 * b110 + a3211 * b29 + a3311 * b39;
				var _this19 = iron_object_Uniforms.helpMat;
				var m19 = light.VP;
				var a0012 = _this19.self._00;
				var a0112 = _this19.self._01;
				var a0212 = _this19.self._02;
				var a0312 = _this19.self._03;
				var a1012 = _this19.self._10;
				var a1112 = _this19.self._11;
				var a1212 = _this19.self._12;
				var a1312 = _this19.self._13;
				var a2012 = _this19.self._20;
				var a2112 = _this19.self._21;
				var a2212 = _this19.self._22;
				var a2312 = _this19.self._23;
				var a3012 = _this19.self._30;
				var a3112 = _this19.self._31;
				var a3212 = _this19.self._32;
				var a3312 = _this19.self._33;
				var b020 = m19.self._00;
				var b112 = m19.self._10;
				var b210 = m19.self._20;
				var b310 = m19.self._30;
				_this19.self._00 = a0012 * b020 + a0112 * b112 + a0212 * b210 + a0312 * b310;
				_this19.self._10 = a1012 * b020 + a1112 * b112 + a1212 * b210 + a1312 * b310;
				_this19.self._20 = a2012 * b020 + a2112 * b112 + a2212 * b210 + a2312 * b310;
				_this19.self._30 = a3012 * b020 + a3112 * b112 + a3212 * b210 + a3312 * b310;
				b020 = m19.self._01;
				b112 = m19.self._11;
				b210 = m19.self._21;
				b310 = m19.self._31;
				_this19.self._01 = a0012 * b020 + a0112 * b112 + a0212 * b210 + a0312 * b310;
				_this19.self._11 = a1012 * b020 + a1112 * b112 + a1212 * b210 + a1312 * b310;
				_this19.self._21 = a2012 * b020 + a2112 * b112 + a2212 * b210 + a2312 * b310;
				_this19.self._31 = a3012 * b020 + a3112 * b112 + a3212 * b210 + a3312 * b310;
				b020 = m19.self._02;
				b112 = m19.self._12;
				b210 = m19.self._22;
				b310 = m19.self._32;
				_this19.self._02 = a0012 * b020 + a0112 * b112 + a0212 * b210 + a0312 * b310;
				_this19.self._12 = a1012 * b020 + a1112 * b112 + a1212 * b210 + a1312 * b310;
				_this19.self._22 = a2012 * b020 + a2112 * b112 + a2212 * b210 + a2312 * b310;
				_this19.self._32 = a3012 * b020 + a3112 * b112 + a3212 * b210 + a3312 * b310;
				b020 = m19.self._03;
				b112 = m19.self._13;
				b210 = m19.self._23;
				b310 = m19.self._33;
				_this19.self._03 = a0012 * b020 + a0112 * b112 + a0212 * b210 + a0312 * b310;
				_this19.self._13 = a1012 * b020 + a1112 * b112 + a1212 * b210 + a1312 * b310;
				_this19.self._23 = a2012 * b020 + a2112 * b112 + a2212 * b210 + a2312 * b310;
				_this19.self._33 = a3012 * b020 + a3112 * b112 + a3212 * b210 + a3312 * b310;
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_lightWorldViewProjectionMatrixCylinder") {
			if(light != null) {
				var _this20 = iron_object_Uniforms.helpMat;
				var m20 = object.transform.worldUnpack;
				_this20.self._00 = m20.self._00;
				_this20.self._01 = m20.self._01;
				_this20.self._02 = m20.self._02;
				_this20.self._03 = m20.self._03;
				_this20.self._10 = m20.self._10;
				_this20.self._11 = m20.self._11;
				_this20.self._12 = m20.self._12;
				_this20.self._13 = m20.self._13;
				_this20.self._20 = m20.self._20;
				_this20.self._21 = m20.self._21;
				_this20.self._22 = m20.self._22;
				_this20.self._23 = m20.self._23;
				_this20.self._30 = m20.self._30;
				_this20.self._31 = m20.self._31;
				_this20.self._32 = m20.self._32;
				_this20.self._33 = m20.self._33;
				var _this21 = iron_object_Uniforms.helpMat;
				var m21 = camera.V;
				var a0013 = _this21.self._00;
				var a0113 = _this21.self._01;
				var a0213 = _this21.self._02;
				var a0313 = _this21.self._03;
				var a1013 = _this21.self._10;
				var a1113 = _this21.self._11;
				var a1213 = _this21.self._12;
				var a1313 = _this21.self._13;
				var a2013 = _this21.self._20;
				var a2113 = _this21.self._21;
				var a2213 = _this21.self._22;
				var a2313 = _this21.self._23;
				var a3013 = _this21.self._30;
				var a3113 = _this21.self._31;
				var a3213 = _this21.self._32;
				var a3313 = _this21.self._33;
				var b022 = m21.self._00;
				var b113 = m21.self._10;
				var b211 = m21.self._20;
				var b311 = m21.self._30;
				_this21.self._00 = a0013 * b022 + a0113 * b113 + a0213 * b211 + a0313 * b311;
				_this21.self._10 = a1013 * b022 + a1113 * b113 + a1213 * b211 + a1313 * b311;
				_this21.self._20 = a2013 * b022 + a2113 * b113 + a2213 * b211 + a2313 * b311;
				_this21.self._30 = a3013 * b022 + a3113 * b113 + a3213 * b211 + a3313 * b311;
				b022 = m21.self._01;
				b113 = m21.self._11;
				b211 = m21.self._21;
				b311 = m21.self._31;
				_this21.self._01 = a0013 * b022 + a0113 * b113 + a0213 * b211 + a0313 * b311;
				_this21.self._11 = a1013 * b022 + a1113 * b113 + a1213 * b211 + a1313 * b311;
				_this21.self._21 = a2013 * b022 + a2113 * b113 + a2213 * b211 + a2313 * b311;
				_this21.self._31 = a3013 * b022 + a3113 * b113 + a3213 * b211 + a3313 * b311;
				b022 = m21.self._02;
				b113 = m21.self._12;
				b211 = m21.self._22;
				b311 = m21.self._32;
				_this21.self._02 = a0013 * b022 + a0113 * b113 + a0213 * b211 + a0313 * b311;
				_this21.self._12 = a1013 * b022 + a1113 * b113 + a1213 * b211 + a1313 * b311;
				_this21.self._22 = a2013 * b022 + a2113 * b113 + a2213 * b211 + a2313 * b311;
				_this21.self._32 = a3013 * b022 + a3113 * b113 + a3213 * b211 + a3313 * b311;
				b022 = m21.self._03;
				b113 = m21.self._13;
				b211 = m21.self._23;
				b311 = m21.self._33;
				_this21.self._03 = a0013 * b022 + a0113 * b113 + a0213 * b211 + a0313 * b311;
				_this21.self._13 = a1013 * b022 + a1113 * b113 + a1213 * b211 + a1313 * b311;
				_this21.self._23 = a2013 * b022 + a2113 * b113 + a2213 * b211 + a2313 * b311;
				_this21.self._33 = a3013 * b022 + a3113 * b113 + a3213 * b211 + a3313 * b311;
				iron_object_Uniforms.helpMat.self._00 = 1.0;
				iron_object_Uniforms.helpMat.self._20 = 0.0;
				iron_object_Uniforms.helpMat.self._01 = 0.0;
				iron_object_Uniforms.helpMat.self._21 = 0.0;
				iron_object_Uniforms.helpMat.self._02 = 0.0;
				iron_object_Uniforms.helpMat.self._22 = 1.0;
				var _this22 = iron_object_Uniforms.helpMat2;
				var m22 = camera.V;
				var a0014 = m22.self._00;
				var a0114 = m22.self._01;
				var a0214 = m22.self._02;
				var a0314 = m22.self._03;
				var a1014 = m22.self._10;
				var a1114 = m22.self._11;
				var a1214 = m22.self._12;
				var a1314 = m22.self._13;
				var a2014 = m22.self._20;
				var a2114 = m22.self._21;
				var a2214 = m22.self._22;
				var a2314 = m22.self._23;
				var a3014 = m22.self._30;
				var a3114 = m22.self._31;
				var a3214 = m22.self._32;
				var a3314 = m22.self._33;
				var b002 = a0014 * a1114 - a0114 * a1014;
				var b0110 = a0014 * a1214 - a0214 * a1014;
				var b023 = a0014 * a1314 - a0314 * a1014;
				var b032 = a0114 * a1214 - a0214 * a1114;
				var b042 = a0114 * a1314 - a0314 * a1114;
				var b052 = a0214 * a1314 - a0314 * a1214;
				var b062 = a2014 * a3114 - a2114 * a3014;
				var b072 = a2014 * a3214 - a2214 * a3014;
				var b082 = a2014 * a3314 - a2314 * a3014;
				var b092 = a2114 * a3214 - a2214 * a3114;
				var b102 = a2114 * a3314 - a2314 * a3114;
				var b114 = a2214 * a3314 - a2314 * a3214;
				var det2 = b002 * b114 - b0110 * b102 + b023 * b092 + b032 * b082 - b042 * b072 + b052 * b062;
				if(det2 == 0.0) {
					_this22.self._00 = 1.0;
					_this22.self._01 = 0.0;
					_this22.self._02 = 0.0;
					_this22.self._03 = 0.0;
					_this22.self._10 = 0.0;
					_this22.self._11 = 1.0;
					_this22.self._12 = 0.0;
					_this22.self._13 = 0.0;
					_this22.self._20 = 0.0;
					_this22.self._21 = 0.0;
					_this22.self._22 = 1.0;
					_this22.self._23 = 0.0;
					_this22.self._30 = 0.0;
					_this22.self._31 = 0.0;
					_this22.self._32 = 0.0;
					_this22.self._33 = 1.0;
				} else {
					det2 = 1.0 / det2;
					_this22.self._00 = (a1114 * b114 - a1214 * b102 + a1314 * b092) * det2;
					_this22.self._01 = (a0214 * b102 - a0114 * b114 - a0314 * b092) * det2;
					_this22.self._02 = (a3114 * b052 - a3214 * b042 + a3314 * b032) * det2;
					_this22.self._03 = (a2214 * b042 - a2114 * b052 - a2314 * b032) * det2;
					_this22.self._10 = (a1214 * b082 - a1014 * b114 - a1314 * b072) * det2;
					_this22.self._11 = (a0014 * b114 - a0214 * b082 + a0314 * b072) * det2;
					_this22.self._12 = (a3214 * b023 - a3014 * b052 - a3314 * b0110) * det2;
					_this22.self._13 = (a2014 * b052 - a2214 * b023 + a2314 * b0110) * det2;
					_this22.self._20 = (a1014 * b102 - a1114 * b082 + a1314 * b062) * det2;
					_this22.self._21 = (a0114 * b082 - a0014 * b102 - a0314 * b062) * det2;
					_this22.self._22 = (a3014 * b042 - a3114 * b023 + a3314 * b002) * det2;
					_this22.self._23 = (a2114 * b023 - a2014 * b042 - a2314 * b002) * det2;
					_this22.self._30 = (a1114 * b072 - a1014 * b092 - a1214 * b062) * det2;
					_this22.self._31 = (a0014 * b092 - a0114 * b072 + a0214 * b062) * det2;
					_this22.self._32 = (a3114 * b0110 - a3014 * b032 - a3214 * b002) * det2;
					_this22.self._33 = (a2014 * b032 - a2114 * b0110 + a2214 * b002) * det2;
				}
				var _this23 = iron_object_Uniforms.helpMat;
				var m23 = iron_object_Uniforms.helpMat2;
				var a0015 = _this23.self._00;
				var a0115 = _this23.self._01;
				var a0215 = _this23.self._02;
				var a0315 = _this23.self._03;
				var a1015 = _this23.self._10;
				var a1115 = _this23.self._11;
				var a1215 = _this23.self._12;
				var a1315 = _this23.self._13;
				var a2015 = _this23.self._20;
				var a2115 = _this23.self._21;
				var a2215 = _this23.self._22;
				var a2315 = _this23.self._23;
				var a3015 = _this23.self._30;
				var a3115 = _this23.self._31;
				var a3215 = _this23.self._32;
				var a3315 = _this23.self._33;
				var b024 = m23.self._00;
				var b115 = m23.self._10;
				var b212 = m23.self._20;
				var b312 = m23.self._30;
				_this23.self._00 = a0015 * b024 + a0115 * b115 + a0215 * b212 + a0315 * b312;
				_this23.self._10 = a1015 * b024 + a1115 * b115 + a1215 * b212 + a1315 * b312;
				_this23.self._20 = a2015 * b024 + a2115 * b115 + a2215 * b212 + a2315 * b312;
				_this23.self._30 = a3015 * b024 + a3115 * b115 + a3215 * b212 + a3315 * b312;
				b024 = m23.self._01;
				b115 = m23.self._11;
				b212 = m23.self._21;
				b312 = m23.self._31;
				_this23.self._01 = a0015 * b024 + a0115 * b115 + a0215 * b212 + a0315 * b312;
				_this23.self._11 = a1015 * b024 + a1115 * b115 + a1215 * b212 + a1315 * b312;
				_this23.self._21 = a2015 * b024 + a2115 * b115 + a2215 * b212 + a2315 * b312;
				_this23.self._31 = a3015 * b024 + a3115 * b115 + a3215 * b212 + a3315 * b312;
				b024 = m23.self._02;
				b115 = m23.self._12;
				b212 = m23.self._22;
				b312 = m23.self._32;
				_this23.self._02 = a0015 * b024 + a0115 * b115 + a0215 * b212 + a0315 * b312;
				_this23.self._12 = a1015 * b024 + a1115 * b115 + a1215 * b212 + a1315 * b312;
				_this23.self._22 = a2015 * b024 + a2115 * b115 + a2215 * b212 + a2315 * b312;
				_this23.self._32 = a3015 * b024 + a3115 * b115 + a3215 * b212 + a3315 * b312;
				b024 = m23.self._03;
				b115 = m23.self._13;
				b212 = m23.self._23;
				b312 = m23.self._33;
				_this23.self._03 = a0015 * b024 + a0115 * b115 + a0215 * b212 + a0315 * b312;
				_this23.self._13 = a1015 * b024 + a1115 * b115 + a1215 * b212 + a1315 * b312;
				_this23.self._23 = a2015 * b024 + a2115 * b115 + a2215 * b212 + a2315 * b312;
				_this23.self._33 = a3015 * b024 + a3115 * b115 + a3215 * b212 + a3315 * b312;
				var _this24 = iron_object_Uniforms.helpMat;
				var m24 = light.VP;
				var a0016 = _this24.self._00;
				var a0116 = _this24.self._01;
				var a0216 = _this24.self._02;
				var a0316 = _this24.self._03;
				var a1016 = _this24.self._10;
				var a1116 = _this24.self._11;
				var a1216 = _this24.self._12;
				var a1316 = _this24.self._13;
				var a2016 = _this24.self._20;
				var a2116 = _this24.self._21;
				var a2216 = _this24.self._22;
				var a2316 = _this24.self._23;
				var a3016 = _this24.self._30;
				var a3116 = _this24.self._31;
				var a3216 = _this24.self._32;
				var a3316 = _this24.self._33;
				var b025 = m24.self._00;
				var b116 = m24.self._10;
				var b213 = m24.self._20;
				var b313 = m24.self._30;
				_this24.self._00 = a0016 * b025 + a0116 * b116 + a0216 * b213 + a0316 * b313;
				_this24.self._10 = a1016 * b025 + a1116 * b116 + a1216 * b213 + a1316 * b313;
				_this24.self._20 = a2016 * b025 + a2116 * b116 + a2216 * b213 + a2316 * b313;
				_this24.self._30 = a3016 * b025 + a3116 * b116 + a3216 * b213 + a3316 * b313;
				b025 = m24.self._01;
				b116 = m24.self._11;
				b213 = m24.self._21;
				b313 = m24.self._31;
				_this24.self._01 = a0016 * b025 + a0116 * b116 + a0216 * b213 + a0316 * b313;
				_this24.self._11 = a1016 * b025 + a1116 * b116 + a1216 * b213 + a1316 * b313;
				_this24.self._21 = a2016 * b025 + a2116 * b116 + a2216 * b213 + a2316 * b313;
				_this24.self._31 = a3016 * b025 + a3116 * b116 + a3216 * b213 + a3316 * b313;
				b025 = m24.self._02;
				b116 = m24.self._12;
				b213 = m24.self._22;
				b313 = m24.self._32;
				_this24.self._02 = a0016 * b025 + a0116 * b116 + a0216 * b213 + a0316 * b313;
				_this24.self._12 = a1016 * b025 + a1116 * b116 + a1216 * b213 + a1316 * b313;
				_this24.self._22 = a2016 * b025 + a2116 * b116 + a2216 * b213 + a2316 * b313;
				_this24.self._32 = a3016 * b025 + a3116 * b116 + a3216 * b213 + a3316 * b313;
				b025 = m24.self._03;
				b116 = m24.self._13;
				b213 = m24.self._23;
				b313 = m24.self._33;
				_this24.self._03 = a0016 * b025 + a0116 * b116 + a0216 * b213 + a0316 * b313;
				_this24.self._13 = a1016 * b025 + a1116 * b116 + a1216 * b213 + a1316 * b313;
				_this24.self._23 = a2016 * b025 + a2116 * b116 + a2216 * b213 + a2316 * b313;
				_this24.self._33 = a3016 * b025 + a3116 * b116 + a3216 * b213 + a3316 * b313;
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_biasLightWorldViewProjectionMatrix") {
			if(light != null) {
				if(object == null) {
					var _this25 = iron_object_Uniforms.helpMat;
					_this25.self._00 = 1.0;
					_this25.self._01 = 0.0;
					_this25.self._02 = 0.0;
					_this25.self._03 = 0.0;
					_this25.self._10 = 0.0;
					_this25.self._11 = 1.0;
					_this25.self._12 = 0.0;
					_this25.self._13 = 0.0;
					_this25.self._20 = 0.0;
					_this25.self._21 = 0.0;
					_this25.self._22 = 1.0;
					_this25.self._23 = 0.0;
					_this25.self._30 = 0.0;
					_this25.self._31 = 0.0;
					_this25.self._32 = 0.0;
					_this25.self._33 = 1.0;
				} else {
					var _this26 = iron_object_Uniforms.helpMat;
					var m25 = object.transform.worldUnpack;
					_this26.self._00 = m25.self._00;
					_this26.self._01 = m25.self._01;
					_this26.self._02 = m25.self._02;
					_this26.self._03 = m25.self._03;
					_this26.self._10 = m25.self._10;
					_this26.self._11 = m25.self._11;
					_this26.self._12 = m25.self._12;
					_this26.self._13 = m25.self._13;
					_this26.self._20 = m25.self._20;
					_this26.self._21 = m25.self._21;
					_this26.self._22 = m25.self._22;
					_this26.self._23 = m25.self._23;
					_this26.self._30 = m25.self._30;
					_this26.self._31 = m25.self._31;
					_this26.self._32 = m25.self._32;
					_this26.self._33 = m25.self._33;
				}
				var _this27 = iron_object_Uniforms.helpMat;
				var m26 = light.VP;
				var a0017 = _this27.self._00;
				var a0117 = _this27.self._01;
				var a0217 = _this27.self._02;
				var a0317 = _this27.self._03;
				var a1017 = _this27.self._10;
				var a1117 = _this27.self._11;
				var a1217 = _this27.self._12;
				var a1317 = _this27.self._13;
				var a2017 = _this27.self._20;
				var a2117 = _this27.self._21;
				var a2217 = _this27.self._22;
				var a2317 = _this27.self._23;
				var a3017 = _this27.self._30;
				var a3117 = _this27.self._31;
				var a3217 = _this27.self._32;
				var a3317 = _this27.self._33;
				var b026 = m26.self._00;
				var b117 = m26.self._10;
				var b214 = m26.self._20;
				var b314 = m26.self._30;
				_this27.self._00 = a0017 * b026 + a0117 * b117 + a0217 * b214 + a0317 * b314;
				_this27.self._10 = a1017 * b026 + a1117 * b117 + a1217 * b214 + a1317 * b314;
				_this27.self._20 = a2017 * b026 + a2117 * b117 + a2217 * b214 + a2317 * b314;
				_this27.self._30 = a3017 * b026 + a3117 * b117 + a3217 * b214 + a3317 * b314;
				b026 = m26.self._01;
				b117 = m26.self._11;
				b214 = m26.self._21;
				b314 = m26.self._31;
				_this27.self._01 = a0017 * b026 + a0117 * b117 + a0217 * b214 + a0317 * b314;
				_this27.self._11 = a1017 * b026 + a1117 * b117 + a1217 * b214 + a1317 * b314;
				_this27.self._21 = a2017 * b026 + a2117 * b117 + a2217 * b214 + a2317 * b314;
				_this27.self._31 = a3017 * b026 + a3117 * b117 + a3217 * b214 + a3317 * b314;
				b026 = m26.self._02;
				b117 = m26.self._12;
				b214 = m26.self._22;
				b314 = m26.self._32;
				_this27.self._02 = a0017 * b026 + a0117 * b117 + a0217 * b214 + a0317 * b314;
				_this27.self._12 = a1017 * b026 + a1117 * b117 + a1217 * b214 + a1317 * b314;
				_this27.self._22 = a2017 * b026 + a2117 * b117 + a2217 * b214 + a2317 * b314;
				_this27.self._32 = a3017 * b026 + a3117 * b117 + a3217 * b214 + a3317 * b314;
				b026 = m26.self._03;
				b117 = m26.self._13;
				b214 = m26.self._23;
				b314 = m26.self._33;
				_this27.self._03 = a0017 * b026 + a0117 * b117 + a0217 * b214 + a0317 * b314;
				_this27.self._13 = a1017 * b026 + a1117 * b117 + a1217 * b214 + a1317 * b314;
				_this27.self._23 = a2017 * b026 + a2117 * b117 + a2217 * b214 + a2317 * b314;
				_this27.self._33 = a3017 * b026 + a3117 * b117 + a3217 * b214 + a3317 * b314;
				var _this28 = iron_object_Uniforms.helpMat;
				var m27 = iron_object_Uniforms.biasMat;
				var a0018 = _this28.self._00;
				var a0118 = _this28.self._01;
				var a0218 = _this28.self._02;
				var a0318 = _this28.self._03;
				var a1018 = _this28.self._10;
				var a1118 = _this28.self._11;
				var a1218 = _this28.self._12;
				var a1318 = _this28.self._13;
				var a2018 = _this28.self._20;
				var a2118 = _this28.self._21;
				var a2218 = _this28.self._22;
				var a2318 = _this28.self._23;
				var a3018 = _this28.self._30;
				var a3118 = _this28.self._31;
				var a3218 = _this28.self._32;
				var a3318 = _this28.self._33;
				var b027 = m27.self._00;
				var b118 = m27.self._10;
				var b215 = m27.self._20;
				var b315 = m27.self._30;
				_this28.self._00 = a0018 * b027 + a0118 * b118 + a0218 * b215 + a0318 * b315;
				_this28.self._10 = a1018 * b027 + a1118 * b118 + a1218 * b215 + a1318 * b315;
				_this28.self._20 = a2018 * b027 + a2118 * b118 + a2218 * b215 + a2318 * b315;
				_this28.self._30 = a3018 * b027 + a3118 * b118 + a3218 * b215 + a3318 * b315;
				b027 = m27.self._01;
				b118 = m27.self._11;
				b215 = m27.self._21;
				b315 = m27.self._31;
				_this28.self._01 = a0018 * b027 + a0118 * b118 + a0218 * b215 + a0318 * b315;
				_this28.self._11 = a1018 * b027 + a1118 * b118 + a1218 * b215 + a1318 * b315;
				_this28.self._21 = a2018 * b027 + a2118 * b118 + a2218 * b215 + a2318 * b315;
				_this28.self._31 = a3018 * b027 + a3118 * b118 + a3218 * b215 + a3318 * b315;
				b027 = m27.self._02;
				b118 = m27.self._12;
				b215 = m27.self._22;
				b315 = m27.self._32;
				_this28.self._02 = a0018 * b027 + a0118 * b118 + a0218 * b215 + a0318 * b315;
				_this28.self._12 = a1018 * b027 + a1118 * b118 + a1218 * b215 + a1318 * b315;
				_this28.self._22 = a2018 * b027 + a2118 * b118 + a2218 * b215 + a2318 * b315;
				_this28.self._32 = a3018 * b027 + a3118 * b118 + a3218 * b215 + a3318 * b315;
				b027 = m27.self._03;
				b118 = m27.self._13;
				b215 = m27.self._23;
				b315 = m27.self._33;
				_this28.self._03 = a0018 * b027 + a0118 * b118 + a0218 * b215 + a0318 * b315;
				_this28.self._13 = a1018 * b027 + a1118 * b118 + a1218 * b215 + a1318 * b315;
				_this28.self._23 = a2018 * b027 + a2118 * b118 + a2218 * b215 + a2318 * b315;
				_this28.self._33 = a3018 * b027 + a3118 * b118 + a3218 * b215 + a3318 * b315;
				m = iron_object_Uniforms.helpMat;
			}
		} else if(StringTools.startsWith(c.link,"_biasLightWorldViewProjectionMatrixSpot")) {
			var light1 = iron_object_Uniforms.getSpot(HxOverrides.cca(c.link,c.link.length - 1) - 48);
			if(light1 != null) {
				if(object == null) {
					var _this29 = iron_object_Uniforms.helpMat;
					_this29.self._00 = 1.0;
					_this29.self._01 = 0.0;
					_this29.self._02 = 0.0;
					_this29.self._03 = 0.0;
					_this29.self._10 = 0.0;
					_this29.self._11 = 1.0;
					_this29.self._12 = 0.0;
					_this29.self._13 = 0.0;
					_this29.self._20 = 0.0;
					_this29.self._21 = 0.0;
					_this29.self._22 = 1.0;
					_this29.self._23 = 0.0;
					_this29.self._30 = 0.0;
					_this29.self._31 = 0.0;
					_this29.self._32 = 0.0;
					_this29.self._33 = 1.0;
				} else {
					var _this30 = iron_object_Uniforms.helpMat;
					var m28 = object.transform.worldUnpack;
					_this30.self._00 = m28.self._00;
					_this30.self._01 = m28.self._01;
					_this30.self._02 = m28.self._02;
					_this30.self._03 = m28.self._03;
					_this30.self._10 = m28.self._10;
					_this30.self._11 = m28.self._11;
					_this30.self._12 = m28.self._12;
					_this30.self._13 = m28.self._13;
					_this30.self._20 = m28.self._20;
					_this30.self._21 = m28.self._21;
					_this30.self._22 = m28.self._22;
					_this30.self._23 = m28.self._23;
					_this30.self._30 = m28.self._30;
					_this30.self._31 = m28.self._31;
					_this30.self._32 = m28.self._32;
					_this30.self._33 = m28.self._33;
				}
				var _this31 = iron_object_Uniforms.helpMat;
				var m29 = light1.VP;
				var a0019 = _this31.self._00;
				var a0119 = _this31.self._01;
				var a0219 = _this31.self._02;
				var a0319 = _this31.self._03;
				var a1019 = _this31.self._10;
				var a1119 = _this31.self._11;
				var a1219 = _this31.self._12;
				var a1319 = _this31.self._13;
				var a2019 = _this31.self._20;
				var a2119 = _this31.self._21;
				var a2219 = _this31.self._22;
				var a2319 = _this31.self._23;
				var a3019 = _this31.self._30;
				var a3119 = _this31.self._31;
				var a3219 = _this31.self._32;
				var a3319 = _this31.self._33;
				var b028 = m29.self._00;
				var b119 = m29.self._10;
				var b216 = m29.self._20;
				var b316 = m29.self._30;
				_this31.self._00 = a0019 * b028 + a0119 * b119 + a0219 * b216 + a0319 * b316;
				_this31.self._10 = a1019 * b028 + a1119 * b119 + a1219 * b216 + a1319 * b316;
				_this31.self._20 = a2019 * b028 + a2119 * b119 + a2219 * b216 + a2319 * b316;
				_this31.self._30 = a3019 * b028 + a3119 * b119 + a3219 * b216 + a3319 * b316;
				b028 = m29.self._01;
				b119 = m29.self._11;
				b216 = m29.self._21;
				b316 = m29.self._31;
				_this31.self._01 = a0019 * b028 + a0119 * b119 + a0219 * b216 + a0319 * b316;
				_this31.self._11 = a1019 * b028 + a1119 * b119 + a1219 * b216 + a1319 * b316;
				_this31.self._21 = a2019 * b028 + a2119 * b119 + a2219 * b216 + a2319 * b316;
				_this31.self._31 = a3019 * b028 + a3119 * b119 + a3219 * b216 + a3319 * b316;
				b028 = m29.self._02;
				b119 = m29.self._12;
				b216 = m29.self._22;
				b316 = m29.self._32;
				_this31.self._02 = a0019 * b028 + a0119 * b119 + a0219 * b216 + a0319 * b316;
				_this31.self._12 = a1019 * b028 + a1119 * b119 + a1219 * b216 + a1319 * b316;
				_this31.self._22 = a2019 * b028 + a2119 * b119 + a2219 * b216 + a2319 * b316;
				_this31.self._32 = a3019 * b028 + a3119 * b119 + a3219 * b216 + a3319 * b316;
				b028 = m29.self._03;
				b119 = m29.self._13;
				b216 = m29.self._23;
				b316 = m29.self._33;
				_this31.self._03 = a0019 * b028 + a0119 * b119 + a0219 * b216 + a0319 * b316;
				_this31.self._13 = a1019 * b028 + a1119 * b119 + a1219 * b216 + a1319 * b316;
				_this31.self._23 = a2019 * b028 + a2119 * b119 + a2219 * b216 + a2319 * b316;
				_this31.self._33 = a3019 * b028 + a3119 * b119 + a3219 * b216 + a3319 * b316;
				var _this32 = iron_object_Uniforms.helpMat;
				var m30 = iron_object_Uniforms.biasMat;
				var a0020 = _this32.self._00;
				var a0120 = _this32.self._01;
				var a0220 = _this32.self._02;
				var a0320 = _this32.self._03;
				var a1020 = _this32.self._10;
				var a1120 = _this32.self._11;
				var a1220 = _this32.self._12;
				var a1320 = _this32.self._13;
				var a2020 = _this32.self._20;
				var a2120 = _this32.self._21;
				var a2220 = _this32.self._22;
				var a2320 = _this32.self._23;
				var a3020 = _this32.self._30;
				var a3120 = _this32.self._31;
				var a3220 = _this32.self._32;
				var a3320 = _this32.self._33;
				var b029 = m30.self._00;
				var b120 = m30.self._10;
				var b217 = m30.self._20;
				var b317 = m30.self._30;
				_this32.self._00 = a0020 * b029 + a0120 * b120 + a0220 * b217 + a0320 * b317;
				_this32.self._10 = a1020 * b029 + a1120 * b120 + a1220 * b217 + a1320 * b317;
				_this32.self._20 = a2020 * b029 + a2120 * b120 + a2220 * b217 + a2320 * b317;
				_this32.self._30 = a3020 * b029 + a3120 * b120 + a3220 * b217 + a3320 * b317;
				b029 = m30.self._01;
				b120 = m30.self._11;
				b217 = m30.self._21;
				b317 = m30.self._31;
				_this32.self._01 = a0020 * b029 + a0120 * b120 + a0220 * b217 + a0320 * b317;
				_this32.self._11 = a1020 * b029 + a1120 * b120 + a1220 * b217 + a1320 * b317;
				_this32.self._21 = a2020 * b029 + a2120 * b120 + a2220 * b217 + a2320 * b317;
				_this32.self._31 = a3020 * b029 + a3120 * b120 + a3220 * b217 + a3320 * b317;
				b029 = m30.self._02;
				b120 = m30.self._12;
				b217 = m30.self._22;
				b317 = m30.self._32;
				_this32.self._02 = a0020 * b029 + a0120 * b120 + a0220 * b217 + a0320 * b317;
				_this32.self._12 = a1020 * b029 + a1120 * b120 + a1220 * b217 + a1320 * b317;
				_this32.self._22 = a2020 * b029 + a2120 * b120 + a2220 * b217 + a2320 * b317;
				_this32.self._32 = a3020 * b029 + a3120 * b120 + a3220 * b217 + a3320 * b317;
				b029 = m30.self._03;
				b120 = m30.self._13;
				b217 = m30.self._23;
				b317 = m30.self._33;
				_this32.self._03 = a0020 * b029 + a0120 * b120 + a0220 * b217 + a0320 * b317;
				_this32.self._13 = a1020 * b029 + a1120 * b120 + a1220 * b217 + a1320 * b317;
				_this32.self._23 = a2020 * b029 + a2120 * b120 + a2220 * b217 + a2320 * b317;
				_this32.self._33 = a3020 * b029 + a3120 * b120 + a3220 * b217 + a3320 * b317;
				m = iron_object_Uniforms.helpMat;
			}
		} else if(StringTools.startsWith(c.link,"_biasLightViewProjectionMatrixSpot")) {
			var light2 = iron_object_Uniforms.getSpot(HxOverrides.cca(c.link,c.link.length - 1) - 48);
			if(light2 != null) {
				var _this33 = iron_object_Uniforms.helpMat;
				var m31 = light2.VP;
				_this33.self._00 = m31.self._00;
				_this33.self._01 = m31.self._01;
				_this33.self._02 = m31.self._02;
				_this33.self._03 = m31.self._03;
				_this33.self._10 = m31.self._10;
				_this33.self._11 = m31.self._11;
				_this33.self._12 = m31.self._12;
				_this33.self._13 = m31.self._13;
				_this33.self._20 = m31.self._20;
				_this33.self._21 = m31.self._21;
				_this33.self._22 = m31.self._22;
				_this33.self._23 = m31.self._23;
				_this33.self._30 = m31.self._30;
				_this33.self._31 = m31.self._31;
				_this33.self._32 = m31.self._32;
				_this33.self._33 = m31.self._33;
				var _this34 = iron_object_Uniforms.helpMat;
				var m32 = iron_object_Uniforms.biasMat;
				var a0021 = _this34.self._00;
				var a0121 = _this34.self._01;
				var a0221 = _this34.self._02;
				var a0321 = _this34.self._03;
				var a1021 = _this34.self._10;
				var a1121 = _this34.self._11;
				var a1221 = _this34.self._12;
				var a1321 = _this34.self._13;
				var a2021 = _this34.self._20;
				var a2121 = _this34.self._21;
				var a2221 = _this34.self._22;
				var a2321 = _this34.self._23;
				var a3021 = _this34.self._30;
				var a3121 = _this34.self._31;
				var a3221 = _this34.self._32;
				var a3321 = _this34.self._33;
				var b030 = m32.self._00;
				var b121 = m32.self._10;
				var b218 = m32.self._20;
				var b318 = m32.self._30;
				_this34.self._00 = a0021 * b030 + a0121 * b121 + a0221 * b218 + a0321 * b318;
				_this34.self._10 = a1021 * b030 + a1121 * b121 + a1221 * b218 + a1321 * b318;
				_this34.self._20 = a2021 * b030 + a2121 * b121 + a2221 * b218 + a2321 * b318;
				_this34.self._30 = a3021 * b030 + a3121 * b121 + a3221 * b218 + a3321 * b318;
				b030 = m32.self._01;
				b121 = m32.self._11;
				b218 = m32.self._21;
				b318 = m32.self._31;
				_this34.self._01 = a0021 * b030 + a0121 * b121 + a0221 * b218 + a0321 * b318;
				_this34.self._11 = a1021 * b030 + a1121 * b121 + a1221 * b218 + a1321 * b318;
				_this34.self._21 = a2021 * b030 + a2121 * b121 + a2221 * b218 + a2321 * b318;
				_this34.self._31 = a3021 * b030 + a3121 * b121 + a3221 * b218 + a3321 * b318;
				b030 = m32.self._02;
				b121 = m32.self._12;
				b218 = m32.self._22;
				b318 = m32.self._32;
				_this34.self._02 = a0021 * b030 + a0121 * b121 + a0221 * b218 + a0321 * b318;
				_this34.self._12 = a1021 * b030 + a1121 * b121 + a1221 * b218 + a1321 * b318;
				_this34.self._22 = a2021 * b030 + a2121 * b121 + a2221 * b218 + a2321 * b318;
				_this34.self._32 = a3021 * b030 + a3121 * b121 + a3221 * b218 + a3321 * b318;
				b030 = m32.self._03;
				b121 = m32.self._13;
				b218 = m32.self._23;
				b318 = m32.self._33;
				_this34.self._03 = a0021 * b030 + a0121 * b121 + a0221 * b218 + a0321 * b318;
				_this34.self._13 = a1021 * b030 + a1121 * b121 + a1221 * b218 + a1321 * b318;
				_this34.self._23 = a2021 * b030 + a2121 * b121 + a2221 * b218 + a2321 * b318;
				_this34.self._33 = a3021 * b030 + a3121 * b121 + a3221 * b218 + a3321 * b318;
				m = iron_object_Uniforms.helpMat;
			}
		} else if(c.link == "_particleData") {
			var mo = js_Boot.__cast(object , iron_object_MeshObject);
			if(mo.particleOwner != null && mo.particleOwner.particleSystems != null) {
				m = mo.particleOwner.particleSystems[mo.particleIndex].getData();
			}
		} else if(iron_object_Uniforms.externalMat4Links != null) {
			var _g = 0;
			var _g1 = iron_object_Uniforms.externalMat4Links;
			while(_g < _g1.length) {
				var fn = _g1[_g];
				++_g;
				m = fn(object,iron_object_Uniforms.currentMat(object),c.link);
				if(m != null) {
					break;
				}
			}
		}
		if(m == null) {
			return;
		}
		g.setMatrix(location,m.self);
	} else if(c.type == "mat3") {
		var m33 = null;
		if(c.link == "_normalMatrix") {
			var _this35 = iron_object_Uniforms.helpMat;
			var m34 = object.transform.world;
			var a0022 = m34.self._00;
			var a0122 = m34.self._01;
			var a0222 = m34.self._02;
			var a0322 = m34.self._03;
			var a1022 = m34.self._10;
			var a1122 = m34.self._11;
			var a1222 = m34.self._12;
			var a1322 = m34.self._13;
			var a2022 = m34.self._20;
			var a2122 = m34.self._21;
			var a2222 = m34.self._22;
			var a2322 = m34.self._23;
			var a3022 = m34.self._30;
			var a3122 = m34.self._31;
			var a3222 = m34.self._32;
			var a3322 = m34.self._33;
			var b003 = a0022 * a1122 - a0122 * a1022;
			var b0111 = a0022 * a1222 - a0222 * a1022;
			var b0210 = a0022 * a1322 - a0322 * a1022;
			var b033 = a0122 * a1222 - a0222 * a1122;
			var b043 = a0122 * a1322 - a0322 * a1122;
			var b053 = a0222 * a1322 - a0322 * a1222;
			var b063 = a2022 * a3122 - a2122 * a3022;
			var b073 = a2022 * a3222 - a2222 * a3022;
			var b083 = a2022 * a3322 - a2322 * a3022;
			var b093 = a2122 * a3222 - a2222 * a3122;
			var b103 = a2122 * a3322 - a2322 * a3122;
			var b1110 = a2222 * a3322 - a2322 * a3222;
			var det3 = b003 * b1110 - b0111 * b103 + b0210 * b093 + b033 * b083 - b043 * b073 + b053 * b063;
			if(det3 == 0.0) {
				_this35.self._00 = 1.0;
				_this35.self._01 = 0.0;
				_this35.self._02 = 0.0;
				_this35.self._03 = 0.0;
				_this35.self._10 = 0.0;
				_this35.self._11 = 1.0;
				_this35.self._12 = 0.0;
				_this35.self._13 = 0.0;
				_this35.self._20 = 0.0;
				_this35.self._21 = 0.0;
				_this35.self._22 = 1.0;
				_this35.self._23 = 0.0;
				_this35.self._30 = 0.0;
				_this35.self._31 = 0.0;
				_this35.self._32 = 0.0;
				_this35.self._33 = 1.0;
			} else {
				det3 = 1.0 / det3;
				_this35.self._00 = (a1122 * b1110 - a1222 * b103 + a1322 * b093) * det3;
				_this35.self._01 = (a0222 * b103 - a0122 * b1110 - a0322 * b093) * det3;
				_this35.self._02 = (a3122 * b053 - a3222 * b043 + a3322 * b033) * det3;
				_this35.self._03 = (a2222 * b043 - a2122 * b053 - a2322 * b033) * det3;
				_this35.self._10 = (a1222 * b083 - a1022 * b1110 - a1322 * b073) * det3;
				_this35.self._11 = (a0022 * b1110 - a0222 * b083 + a0322 * b073) * det3;
				_this35.self._12 = (a3222 * b0210 - a3022 * b053 - a3322 * b0111) * det3;
				_this35.self._13 = (a2022 * b053 - a2222 * b0210 + a2322 * b0111) * det3;
				_this35.self._20 = (a1022 * b103 - a1122 * b083 + a1322 * b063) * det3;
				_this35.self._21 = (a0122 * b083 - a0022 * b103 - a0322 * b063) * det3;
				_this35.self._22 = (a3022 * b043 - a3122 * b0210 + a3322 * b003) * det3;
				_this35.self._23 = (a2122 * b0210 - a2022 * b043 - a2322 * b003) * det3;
				_this35.self._30 = (a1122 * b073 - a1022 * b093 - a1222 * b063) * det3;
				_this35.self._31 = (a0022 * b093 - a0122 * b073 + a0222 * b063) * det3;
				_this35.self._32 = (a3122 * b0111 - a3022 * b033 - a3222 * b003) * det3;
				_this35.self._33 = (a2022 * b033 - a2122 * b0111 + a2222 * b003) * det3;
			}
			var _this36 = iron_object_Uniforms.helpMat;
			var f = _this36.self._01;
			_this36.self._01 = _this36.self._10;
			_this36.self._10 = f;
			f = _this36.self._02;
			_this36.self._02 = _this36.self._20;
			_this36.self._20 = f;
			f = _this36.self._12;
			_this36.self._12 = _this36.self._21;
			_this36.self._21 = f;
			var _this37 = iron_object_Uniforms.helpMat3;
			var m35 = iron_object_Uniforms.helpMat;
			_this37.self._00 = m35.self._00;
			_this37.self._01 = m35.self._01;
			_this37.self._02 = m35.self._02;
			_this37.self._10 = m35.self._10;
			_this37.self._11 = m35.self._11;
			_this37.self._12 = m35.self._12;
			_this37.self._20 = m35.self._20;
			_this37.self._21 = m35.self._21;
			_this37.self._22 = m35.self._22;
			m33 = iron_object_Uniforms.helpMat3;
		}
		if(c.link == "_viewMatrix3") {
			var _this38 = iron_object_Uniforms.helpMat3;
			var m36 = camera.V;
			_this38.self._00 = m36.self._00;
			_this38.self._01 = m36.self._01;
			_this38.self._02 = m36.self._02;
			_this38.self._10 = m36.self._10;
			_this38.self._11 = m36.self._11;
			_this38.self._12 = m36.self._12;
			_this38.self._20 = m36.self._20;
			_this38.self._21 = m36.self._21;
			_this38.self._22 = m36.self._22;
			m33 = iron_object_Uniforms.helpMat3;
		}
		if(m33 == null) {
			return;
		}
		g.setMatrix3(location,m33.self);
	} else if(c.type == "vec4") {
		var v = null;
		var _this39 = iron_object_Uniforms.helpVec;
		_this39.x = 0;
		_this39.y = 0;
		_this39.z = 0;
		_this39.w = 1.0;
		if(iron_object_Uniforms.externalVec4Links != null) {
			var _g2 = 0;
			var _g11 = iron_object_Uniforms.externalVec4Links;
			while(_g2 < _g11.length) {
				var fn1 = _g11[_g2];
				++_g2;
				v = fn1(object,iron_object_Uniforms.currentMat(object),c.link);
				if(v != null) {
					break;
				}
			}
		}
		if(v == null) {
			return;
		}
		g.setFloat4(location,v.x,v.y,v.z,v.w);
	} else if(c.type == "vec3") {
		var v1 = null;
		var _this40 = iron_object_Uniforms.helpVec;
		_this40.x = 0;
		_this40.y = 0;
		_this40.z = 0;
		_this40.w = 1.0;
		if(c.link == "_dim") {
			var d = object.transform.dim;
			var s = object.transform.scale;
			var _this41 = iron_object_Uniforms.helpVec;
			_this41.x = d.x / s.x;
			_this41.y = d.y / s.y;
			_this41.z = d.z / s.z;
			_this41.w = 1.0;
			v1 = iron_object_Uniforms.helpVec;
		} else if(c.link == "_halfDim") {
			var d1 = object.transform.dim;
			var s1 = object.transform.scale;
			var _this42 = iron_object_Uniforms.helpVec;
			_this42.x = d1.x / s1.x / 2;
			_this42.y = d1.y / s1.y / 2;
			_this42.z = d1.z / s1.z / 2;
			_this42.w = 1.0;
			v1 = iron_object_Uniforms.helpVec;
		} else if(iron_object_Uniforms.externalVec3Links != null) {
			var _g3 = 0;
			var _g12 = iron_object_Uniforms.externalVec3Links;
			while(_g3 < _g12.length) {
				var f1 = _g12[_g3];
				++_g3;
				v1 = f1(object,iron_object_Uniforms.currentMat(object),c.link);
				if(v1 != null) {
					break;
				}
			}
		}
		if(v1 == null) {
			return;
		}
		g.setFloat3(location,v1.x,v1.y,v1.z);
	} else if(c.type == "vec2") {
		var vx = null;
		var vy = 0;
		if(c.link == "_tilesheetOffset") {
			var ts = (js_Boot.__cast(object , iron_object_MeshObject)).tilesheet;
			vx = ts.tileX;
			vy = ts.tileY;
		} else if(iron_object_Uniforms.externalVec2Links != null) {
			var _g4 = 0;
			var _g13 = iron_object_Uniforms.externalVec2Links;
			while(_g4 < _g13.length) {
				var fn2 = _g13[_g4];
				++_g4;
				var v2 = fn2(object,iron_object_Uniforms.currentMat(object),c.link);
				if(v2 != null) {
					vx = v2.x;
					vy = v2.y;
					break;
				}
			}
		}
		if(vx == null) {
			return;
		}
		g.setFloat2(location,vx,vy);
	} else if(c.type == "float") {
		var f2 = null;
		if(c.link == "_objectInfoIndex") {
			f2 = object.uid;
		} else if(c.link == "_objectInfoMaterialIndex") {
			f2 = iron_object_Uniforms.currentMat(object).uid;
		} else if(c.link == "_objectInfoRandom") {
			f2 = object.urandom;
		} else if(c.link == "_posUnpack") {
			f2 = iron_object_Uniforms.posUnpack != null ? iron_object_Uniforms.posUnpack : 1.0;
		} else if(c.link == "_texUnpack") {
			f2 = iron_object_Uniforms.texUnpack != null ? iron_object_Uniforms.texUnpack : 1.0;
		} else if(iron_object_Uniforms.externalFloatLinks != null) {
			var _g5 = 0;
			var _g14 = iron_object_Uniforms.externalFloatLinks;
			while(_g5 < _g14.length) {
				var fn3 = _g14[_g5];
				++_g5;
				var res = fn3(object,iron_object_Uniforms.currentMat(object),c.link);
				if(res != null) {
					f2 = res;
					break;
				}
			}
		}
		if(f2 == null) {
			return;
		}
		g.setFloat(location,f2);
	} else if(c.type == "floats") {
		var fa = null;
		if(c.link == "_skinBones") {
			if(object.animation != null) {
				fa = (js_Boot.__cast(object.animation , iron_object_BoneAnimation)).skinBuffer;
			}
		}
		if(fa == null && iron_object_Uniforms.externalFloatsLinks != null) {
			var _g6 = 0;
			var _g15 = iron_object_Uniforms.externalFloatsLinks;
			while(_g6 < _g15.length) {
				var fn4 = _g15[_g6];
				++_g6;
				fa = fn4(object,iron_object_Uniforms.currentMat(object),c.link);
				if(fa != null) {
					break;
				}
			}
		}
		if(fa == null) {
			return;
		}
		g.setFloats(location,fa);
	} else if(c.type == "int") {
		var i = null;
		if(c.link == "_uid") {
			i = object.uid;
		} else if(iron_object_Uniforms.externalIntLinks != null) {
			var _g7 = 0;
			var _g16 = iron_object_Uniforms.externalIntLinks;
			while(_g7 < _g16.length) {
				var fn5 = _g16[_g7];
				++_g7;
				var res1 = fn5(object,iron_object_Uniforms.currentMat(object),c.link);
				if(res1 != null) {
					i = res1;
					break;
				}
			}
		}
		if(i == null) {
			return;
		}
		g.setInt(location,i);
	}
};
iron_object_Uniforms.setMaterialConstants = function(g,context,materialContext) {
	if(materialContext.raw.bind_constants != null) {
		var _g = 0;
		var _g1 = materialContext.raw.bind_constants.length;
		while(_g < _g1) {
			var i = _g++;
			var matc = materialContext.raw.bind_constants[i];
			var pos = -1;
			var _g2 = 0;
			var _g11 = context.raw.constants.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				if(context.raw.constants[i1].name == matc.name) {
					pos = i1;
					break;
				}
			}
			if(pos == -1) {
				continue;
			}
			var c = context.raw.constants[pos];
			iron_object_Uniforms.setMaterialConstant(g,context.constants[pos],c,matc);
		}
	}
	if(materialContext.textures != null) {
		var _g3 = 0;
		var _g12 = materialContext.textures.length;
		while(_g3 < _g12) {
			var i2 = _g3++;
			var mname = materialContext.raw.bind_textures[i2].name;
			var _g4 = 0;
			var _g13 = context.textureUnits.length;
			while(_g4 < _g13) {
				var j = _g4++;
				var sname = context.raw.texture_units[j].name;
				if(mname == sname) {
					g.setTexture(context.textureUnits[j],materialContext.textures[i2]);
					materialContext.setTextureParameters(g,i2,context,j);
					break;
				}
			}
		}
	}
};
iron_object_Uniforms.getSpot = function(index) {
	var i = 0;
	var _g = 0;
	var _g1 = iron_Scene.active.lights;
	while(_g < _g1.length) {
		var l = _g1[_g];
		++_g;
		if(l.data.raw.type != "spot" && l.data.raw.type != "area") {
			continue;
		}
		if(i == index) {
			return l;
		}
		++i;
	}
	return null;
};
iron_object_Uniforms.currentMat = function(object) {
	if(object != null && ((object) instanceof iron_object_MeshObject)) {
		var mo = js_Boot.__cast(object , iron_object_MeshObject);
		return mo.materials[mo.materialIndex];
	}
	return null;
};
iron_object_Uniforms.setMaterialConstant = function(g,location,c,matc) {
	switch(c.type) {
	case "bool":
		g.setBool(location,matc.bool);
		break;
	case "float":
		g.setFloat(location,matc.float);
		break;
	case "int":
		g.setInt(location,matc.int);
		break;
	case "vec2":
		g.setFloat2(location,matc.vec2[0],matc.vec2[1]);
		break;
	case "vec3":
		g.setFloat3(location,matc.vec3[0],matc.vec3[1],matc.vec3[2]);
		break;
	case "vec4":
		g.setFloat4(location,matc.vec4[0],matc.vec4[1],matc.vec4[2],matc.vec4[3]);
		break;
	}
};
var iron_system_ArmPack = function() { };
$hxClasses["iron.system.ArmPack"] = iron_system_ArmPack;
iron_system_ArmPack.__name__ = "iron.system.ArmPack";
iron_system_ArmPack.decode = function(b) {
	var i = new haxe_io_BytesInput(b);
	i.set_bigEndian(false);
	return iron_system_ArmPack.read(i);
};
iron_system_ArmPack.read = function(i,key,parentKey) {
	if(parentKey == null) {
		parentKey = "";
	}
	if(key == null) {
		key = "";
	}
	try {
		var b = i.readByte();
		switch(b) {
		case 192:
			return null;
		case 194:
			return false;
		case 195:
			return true;
		case 196:
			return i.read(i.readByte());
		case 197:
			return i.read(i.readUInt16());
		case 198:
			return i.read(i.readInt32());
		case 202:
			return i.readFloat();
		case 204:
			return i.readByte();
		case 205:
			return i.readUInt16();
		case 206:
			return i.readInt32();
		case 208:
			return i.readInt8();
		case 209:
			return i.readInt16();
		case 210:
			return i.readInt32();
		case 217:
			return i.readString(i.readByte());
		case 218:
			return i.readString(i.readUInt16());
		case 219:
			return i.readString(i.readInt32());
		case 220:
			return iron_system_ArmPack.readArray(i,i.readUInt16(),key,parentKey);
		case 221:
			return iron_system_ArmPack.readArray(i,i.readInt32(),key,parentKey);
		case 222:
			return iron_system_ArmPack.readMap(i,i.readUInt16(),key,parentKey);
		case 223:
			return iron_system_ArmPack.readMap(i,i.readInt32(),key,parentKey);
		default:
			if(b < 128) {
				return b;
			} else if(b < 144) {
				return iron_system_ArmPack.readMap(i,15 & b,key,parentKey);
			} else if(b < 160) {
				return iron_system_ArmPack.readArray(i,15 & b,key,parentKey);
			} else if(b < 192) {
				return i.readString(31 & b);
			} else if(b > 223) {
				return -256 | b;
			}
		}
	} catch( e ) {
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		if(((e1) instanceof haxe_io_Eof)) {
			var e2 = e1;
		} else {
			throw e;
		}
	}
	return null;
};
iron_system_ArmPack.readArray = function(i,length,key,parentKey) {
	if(parentKey == null) {
		parentKey = "";
	}
	if(key == null) {
		key = "";
	}
	var b = i.readByte();
	var _g = i;
	_g.set_position(_g.pos - 1);
	if(b == 202) {
		var _g1 = i;
		_g1.set_position(_g1.pos + 1);
		var this1 = new Float32Array(length);
		var a = this1;
		var _g2 = 0;
		var _g11 = length;
		while(_g2 < _g11) {
			var x = _g2++;
			a[x] = i.readFloat();
		}
		return a;
	} else if(b == 210) {
		var _g3 = i;
		_g3.set_position(_g3.pos + 1);
		var this2 = new Uint32Array(length);
		var a1 = this2;
		var _g4 = 0;
		var _g12 = length;
		while(_g4 < _g12) {
			var x1 = _g4++;
			a1[x1] = i.readInt32();
		}
		return a1;
	} else if(b == 209) {
		var _g5 = i;
		_g5.set_position(_g5.pos + 1);
		var this3 = new Int16Array(length);
		var a2 = this3;
		var _g6 = 0;
		var _g13 = length;
		while(_g6 < _g13) {
			var x2 = _g6++;
			a2[x2] = i.readInt16();
		}
		return a2;
	} else {
		var a3 = [];
		var _g7 = 0;
		var _g14 = length;
		while(_g7 < _g14) {
			var x3 = _g7++;
			a3.push(iron_system_ArmPack.read(i,key,parentKey));
		}
		return a3;
	}
};
iron_system_ArmPack.readMap = function(i,length,key,parentKey) {
	if(parentKey == null) {
		parentKey = "";
	}
	if(key == null) {
		key = "";
	}
	var out = { };
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var n = _g++;
		var k = Std.string(iron_system_ArmPack.read(i));
		var v = iron_system_ArmPack.read(i,k,key);
		out[k] = v;
	}
	return out;
};
iron_system_ArmPack.encode = function(d) {
	var o = new haxe_io_BytesOutput();
	o.set_bigEndian(false);
	iron_system_ArmPack.write(o,d);
	return o.getBytes();
};
iron_system_ArmPack.write = function(o,d) {
	var _g = Type.typeof(d);
	switch(_g._hx_index) {
	case 0:
		o.writeByte(192);
		break;
	case 1:
		o.writeByte(210);
		o.writeInt32(d);
		break;
	case 2:
		o.writeByte(202);
		o.writeFloat(d);
		break;
	case 3:
		o.writeByte(d ? 195 : 194);
		break;
	case 4:
		var f = Reflect.fields(d);
		o.writeByte(223);
		o.writeInt32(f.length);
		var _g1 = 0;
		while(_g1 < f.length) {
			var k = f[_g1];
			++_g1;
			o.writeByte(219);
			o.writeInt32(k.length);
			o.writeString(k);
			iron_system_ArmPack.write(o,Reflect.field(d,k));
		}
		break;
	case 6:
		var c = _g.c;
		var _g2 = c.__name__;
		if(_g2 == null) {
			o.writeByte(221);
			o.writeInt32(d.length);
			var isInt16 = ((d) instanceof Int16Array);
			var isInt = js_Boot.__instanceof(d[0],Int) && !((d) instanceof Float32Array);
			var isFloat = typeof(d[0]) == "number";
			if(isInt16) {
				o.writeByte(209);
				var _g3 = 0;
				var _g11 = d.length;
				while(_g3 < _g11) {
					var i = _g3++;
					o.writeInt16(d[i]);
				}
			} else if(isFloat && !isInt) {
				o.writeByte(202);
				var _g4 = 0;
				var _g12 = d.length;
				while(_g4 < _g12) {
					var i1 = _g4++;
					o.writeFloat(d[i1]);
				}
			} else if(isInt) {
				o.writeByte(210);
				var _g5 = 0;
				var _g13 = d.length;
				while(_g5 < _g13) {
					var i2 = _g5++;
					o.writeInt32(d[i2]);
				}
			} else {
				var _g6 = 0;
				var _g14 = d.length;
				while(_g6 < _g14) {
					var i3 = _g6++;
					iron_system_ArmPack.write(o,d[i3]);
				}
			}
		} else {
			switch(_g2) {
			case "Array":
				o.writeByte(221);
				o.writeInt32(d.length);
				var isInt161 = ((d) instanceof Int16Array);
				var isInt1 = js_Boot.__instanceof(d[0],Int) && !((d) instanceof Float32Array);
				var isFloat1 = typeof(d[0]) == "number";
				if(isInt161) {
					o.writeByte(209);
					var _g7 = 0;
					var _g15 = d.length;
					while(_g7 < _g15) {
						var i4 = _g7++;
						o.writeInt16(d[i4]);
					}
				} else if(isFloat1 && !isInt1) {
					o.writeByte(202);
					var _g8 = 0;
					var _g16 = d.length;
					while(_g8 < _g16) {
						var i5 = _g8++;
						o.writeFloat(d[i5]);
					}
				} else if(isInt1) {
					o.writeByte(210);
					var _g9 = 0;
					var _g17 = d.length;
					while(_g9 < _g17) {
						var i6 = _g9++;
						o.writeInt32(d[i6]);
					}
				} else {
					var _g10 = 0;
					var _g18 = d.length;
					while(_g10 < _g18) {
						var i7 = _g10++;
						iron_system_ArmPack.write(o,d[i7]);
					}
				}
				break;
			case "String":
				o.writeByte(219);
				o.writeInt32(d.length);
				o.writeString(d);
				break;
			case "haxe.io.Bytes":
				o.writeByte(198);
				o.writeInt32(d.length);
				o.write(d);
				break;
			default:
			}
		}
		break;
	default:
	}
};
var iron_system_Audio = function() {
};
$hxClasses["iron.system.Audio"] = iron_system_Audio;
iron_system_Audio.__name__ = "iron.system.Audio";
iron_system_Audio.play = function(sound,loop,stream) {
	if(stream == null) {
		stream = false;
	}
	if(loop == null) {
		loop = false;
	}
	if(stream && sound.compressedData != null) {
		return kha_audio2_Audio1.stream(sound,loop);
	} else if(sound.uncompressedData != null) {
		return kha_audio2_Audio1.play(sound,loop);
	} else {
		return null;
	}
};
iron_system_Audio.prototype = {
	__class__: iron_system_Audio
};
var iron_system_VirtualButton = function() {
	this.down = false;
	this.released = false;
	this.started = false;
};
$hxClasses["iron.system.VirtualButton"] = iron_system_VirtualButton;
iron_system_VirtualButton.__name__ = "iron.system.VirtualButton";
iron_system_VirtualButton.prototype = {
	started: null
	,released: null
	,down: null
	,__class__: iron_system_VirtualButton
};
var iron_system_VirtualInput = function() {
	this.virtualButtons = null;
};
$hxClasses["iron.system.VirtualInput"] = iron_system_VirtualInput;
iron_system_VirtualInput.__name__ = "iron.system.VirtualInput";
iron_system_VirtualInput.prototype = {
	virtualButtons: null
	,setVirtual: function(virtual,button) {
		if(iron_system_Input.virtualButtons == null) {
			iron_system_Input.virtualButtons = new haxe_ds_StringMap();
		}
		var _this = iron_system_Input.virtualButtons;
		var vb = __map_reserved[virtual] != null ? _this.getReserved(virtual) : _this.h[virtual];
		if(vb == null) {
			vb = new iron_system_VirtualButton();
			var _this1 = iron_system_Input.virtualButtons;
			if(__map_reserved[virtual] != null) {
				_this1.setReserved(virtual,vb);
			} else {
				_this1.h[virtual] = vb;
			}
		}
		if(this.virtualButtons == null) {
			this.virtualButtons = new haxe_ds_StringMap();
		}
		var _this2 = this.virtualButtons;
		if(__map_reserved[button] != null) {
			_this2.setReserved(button,vb);
		} else {
			_this2.h[button] = vb;
		}
	}
	,downVirtual: function(button) {
		if(this.virtualButtons != null) {
			var _this = this.virtualButtons;
			var vb = __map_reserved[button] != null ? _this.getReserved(button) : _this.h[button];
			if(vb != null) {
				vb.down = true;
				vb.started = true;
			}
		}
	}
	,upVirtual: function(button) {
		if(this.virtualButtons != null) {
			var _this = this.virtualButtons;
			var vb = __map_reserved[button] != null ? _this.getReserved(button) : _this.h[button];
			if(vb != null) {
				vb.down = false;
				vb.released = true;
			}
		}
	}
	,__class__: iron_system_VirtualInput
};
var iron_system_Mouse = function() {
	this.lastY = -1.0;
	this.lastX = -1.0;
	this.hidden = false;
	this.locked = false;
	this.wheelDelta = 0;
	this.movementY = 0.0;
	this.movementX = 0.0;
	this.moved = false;
	this.viewY = 0.0;
	this.viewX = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.buttonsReleased = [false,false,false];
	this.buttonsStarted = [false,false,false];
	this.buttonsDown = [false,false,false];
	iron_system_VirtualInput.call(this);
	kha_input_Mouse.get().notify($bind(this,this.downListener),$bind(this,this.upListener),$bind(this,this.moveListener),$bind(this,this.wheelListener));
};
$hxClasses["iron.system.Mouse"] = iron_system_Mouse;
iron_system_Mouse.__name__ = "iron.system.Mouse";
iron_system_Mouse.__super__ = iron_system_VirtualInput;
iron_system_Mouse.prototype = $extend(iron_system_VirtualInput.prototype,{
	buttonsDown: null
	,buttonsStarted: null
	,buttonsReleased: null
	,x: null
	,y: null
	,viewX: null
	,viewY: null
	,moved: null
	,movementX: null
	,movementY: null
	,wheelDelta: null
	,locked: null
	,hidden: null
	,lastX: null
	,lastY: null
	,endFrame: function() {
		var tmp = this.buttonsStarted[1] = this.buttonsStarted[2] = false;
		this.buttonsStarted[0] = tmp;
		var tmp1 = this.buttonsReleased[1] = this.buttonsReleased[2] = false;
		this.buttonsReleased[0] = tmp1;
		this.moved = false;
		this.movementX = 0;
		this.movementY = 0;
		this.wheelDelta = 0;
	}
	,reset: function() {
		var tmp = this.buttonsDown[1] = this.buttonsDown[2] = false;
		this.buttonsDown[0] = tmp;
		this.endFrame();
	}
	,buttonIndex: function(button) {
		if(button == "left") {
			return 0;
		} else if(button == "right") {
			return 1;
		} else {
			return 2;
		}
	}
	,down: function(button) {
		if(button == null) {
			button = "left";
		}
		return this.buttonsDown[this.buttonIndex(button)];
	}
	,started: function(button) {
		if(button == null) {
			button = "left";
		}
		return this.buttonsStarted[this.buttonIndex(button)];
	}
	,released: function(button) {
		if(button == null) {
			button = "left";
		}
		return this.buttonsReleased[this.buttonIndex(button)];
	}
	,lock: function() {
		if(kha_input_Mouse.get().canLock()) {
			kha_input_Mouse.get().lock();
			this.locked = true;
			this.hidden = true;
		}
	}
	,unlock: function() {
		if(kha_input_Mouse.get().canLock()) {
			kha_input_Mouse.get().unlock();
			this.locked = false;
			this.hidden = false;
		}
	}
	,hide: function() {
		kha_input_Mouse.get().hideSystemCursor();
		this.hidden = true;
	}
	,show: function() {
		kha_input_Mouse.get().showSystemCursor();
		this.hidden = false;
	}
	,downListener: function(index,x,y) {
		this.buttonsDown[index] = true;
		this.buttonsStarted[index] = true;
		this.x = x;
		this.y = y;
		this.downVirtual(iron_system_Mouse.buttons[index]);
	}
	,upListener: function(index,x,y) {
		this.buttonsDown[index] = false;
		this.buttonsReleased[index] = true;
		this.x = x;
		this.y = y;
		this.upVirtual(iron_system_Mouse.buttons[index]);
	}
	,moveListener: function(x,y,movementX,movementY) {
		if(this.lastX == -1.0 && this.lastY == -1.0) {
			this.lastX = x;
			this.lastY = y;
		}
		if(this.locked) {
			this.movementX += movementX;
			this.movementY += movementY;
		} else {
			this.movementX += x - this.lastX;
			this.movementY += y - this.lastY;
		}
		this.lastX = x;
		this.lastY = y;
		this.x = x;
		this.y = y;
		this.moved = true;
	}
	,wheelListener: function(delta) {
		this.wheelDelta = delta;
	}
	,get_viewX: function() {
		return this.x;
	}
	,get_viewY: function() {
		return this.y;
	}
	,__class__: iron_system_Mouse
	,__properties__: {get_viewY:"get_viewY",get_viewX:"get_viewX"}
});
var iron_system_Pen = function() {
	this.lastY = -1.0;
	this.lastX = -1.0;
	this.connected = false;
	this.pressure = 0.0;
	this.movementY = 0.0;
	this.movementX = 0.0;
	this.moved = false;
	this.viewY = 0.0;
	this.viewX = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.buttonsReleased = [false];
	this.buttonsStarted = [false];
	this.buttonsDown = [false];
	iron_system_VirtualInput.call(this);
	kha_input_Pen.get().notify($bind(this,this.downListener),$bind(this,this.upListener),$bind(this,this.moveListener));
};
$hxClasses["iron.system.Pen"] = iron_system_Pen;
iron_system_Pen.__name__ = "iron.system.Pen";
iron_system_Pen.__super__ = iron_system_VirtualInput;
iron_system_Pen.prototype = $extend(iron_system_VirtualInput.prototype,{
	buttonsDown: null
	,buttonsStarted: null
	,buttonsReleased: null
	,x: null
	,y: null
	,viewX: null
	,viewY: null
	,moved: null
	,movementX: null
	,movementY: null
	,pressure: null
	,connected: null
	,lastX: null
	,lastY: null
	,endFrame: function() {
		this.buttonsStarted[0] = false;
		this.buttonsReleased[0] = false;
		this.moved = false;
		this.movementX = 0;
		this.movementY = 0;
	}
	,reset: function() {
		this.buttonsDown[0] = false;
		this.endFrame();
	}
	,buttonIndex: function(button) {
		return 0;
	}
	,down: function(button) {
		if(button == null) {
			button = "tip";
		}
		return this.buttonsDown[this.buttonIndex(button)];
	}
	,started: function(button) {
		if(button == null) {
			button = "tip";
		}
		return this.buttonsStarted[this.buttonIndex(button)];
	}
	,released: function(button) {
		if(button == null) {
			button = "tip";
		}
		return this.buttonsReleased[this.buttonIndex(button)];
	}
	,downListener: function(x,y,pressure) {
		this.buttonsDown[0] = true;
		this.buttonsStarted[0] = true;
		this.x = x;
		this.y = y;
		this.pressure = pressure;
	}
	,upListener: function(x,y,pressure) {
		this.buttonsDown[0] = false;
		this.buttonsReleased[0] = true;
		this.x = x;
		this.y = y;
		this.pressure = pressure;
	}
	,moveListener: function(x,y,pressure) {
		if(this.lastX == -1.0 && this.lastY == -1.0) {
			this.lastX = x;
			this.lastY = y;
		}
		this.movementX = x - this.lastX;
		this.movementY = y - this.lastY;
		this.lastX = x;
		this.lastY = y;
		this.x = x;
		this.y = y;
		this.moved = true;
		this.pressure = pressure;
		this.connected = true;
	}
	,get_viewX: function() {
		return this.x;
	}
	,get_viewY: function() {
		return this.y;
	}
	,__class__: iron_system_Pen
	,__properties__: {get_viewY:"get_viewY",get_viewX:"get_viewX"}
});
var iron_system_Keyboard = function() {
	this.repeatTime = 0.0;
	this.repeatKey = false;
	this.keysFrame = [];
	this.keysReleased = new haxe_ds_StringMap();
	this.keysStarted = new haxe_ds_StringMap();
	this.keysDown = new haxe_ds_StringMap();
	iron_system_VirtualInput.call(this);
	this.reset();
	kha_input_Keyboard.get().notify($bind(this,this.downListener),$bind(this,this.upListener),$bind(this,this.pressListener));
};
$hxClasses["iron.system.Keyboard"] = iron_system_Keyboard;
iron_system_Keyboard.__name__ = "iron.system.Keyboard";
iron_system_Keyboard.keyCode = function(key) {
	if(key == 32) {
		return "space";
	} else if(key == 8) {
		return "backspace";
	} else if(key == 9) {
		return "tab";
	} else if(key == 13) {
		return "enter";
	} else if(key == 16) {
		return "shift";
	} else if(key == 17) {
		return "control";
	} else if(key == 18) {
		return "alt";
	} else if(key == 27) {
		return "escape";
	} else if(key == 46) {
		return "delete";
	} else if(key == 38) {
		return "up";
	} else if(key == 40) {
		return "down";
	} else if(key == 37) {
		return "left";
	} else if(key == 39) {
		return "right";
	} else if(key == 1) {
		return "back";
	} else if(key == 188) {
		return ",";
	} else if(key == 190) {
		return ".";
	} else if(key == 58) {
		return ":";
	} else if(key == 59) {
		return ";";
	} else if(key == 60) {
		return "<";
	} else if(key == 61) {
		return "=";
	} else if(key == 62) {
		return ">";
	} else if(key == 63) {
		return "?";
	} else if(key == 161) {
		return "!";
	} else if(key == 162) {
		return "\"";
	} else if(key == 163) {
		return "#";
	} else if(key == 164) {
		return "$";
	} else if(key == 165) {
		return "%";
	} else if(key == 166) {
		return "&";
	} else if(key == 167) {
		return "_";
	} else if(key == 168) {
		return "(";
	} else if(key == 169) {
		return ")";
	} else if(key == 170) {
		return "*";
	} else if(key == 172) {
		return "|";
	} else if(key == 174) {
		return "{";
	} else if(key == 175) {
		return "}";
	} else if(key == 219) {
		return "[";
	} else if(key == 221) {
		return "]";
	} else if(key == 176) {
		return "~";
	} else if(key == 192) {
		return "`";
	} else if(key == 191) {
		return "/";
	} else if(key == 220) {
		return "\\";
	} else if(key == 64) {
		return "@";
	} else if(key == 107) {
		return "+";
	} else if(key == 171) {
		return "+";
	} else if(key == 109) {
		return "-";
	} else if(key == 173) {
		return "-";
	} else if(key == 106) {
		return "*";
	} else if(key == 111) {
		return "/";
	} else if(key == 110) {
		return ".";
	} else if(key == 48) {
		return "0";
	} else if(key == 96) {
		return "0";
	} else if(key == 49) {
		return "1";
	} else if(key == 97) {
		return "1";
	} else if(key == 50) {
		return "2";
	} else if(key == 98) {
		return "2";
	} else if(key == 51) {
		return "3";
	} else if(key == 99) {
		return "3";
	} else if(key == 52) {
		return "4";
	} else if(key == 100) {
		return "4";
	} else if(key == 53) {
		return "5";
	} else if(key == 101) {
		return "5";
	} else if(key == 54) {
		return "6";
	} else if(key == 102) {
		return "6";
	} else if(key == 55) {
		return "7";
	} else if(key == 103) {
		return "7";
	} else if(key == 56) {
		return "8";
	} else if(key == 104) {
		return "8";
	} else if(key == 57) {
		return "9";
	} else if(key == 105) {
		return "9";
	} else if(key == 112) {
		return "f1";
	} else if(key == 113) {
		return "f2";
	} else if(key == 114) {
		return "f3";
	} else if(key == 115) {
		return "f4";
	} else if(key == 116) {
		return "f5";
	} else if(key == 117) {
		return "f6";
	} else if(key == 118) {
		return "f7";
	} else if(key == 119) {
		return "f8";
	} else if(key == 120) {
		return "f9";
	} else if(key == 121) {
		return "f10";
	} else if(key == 122) {
		return "f11";
	} else if(key == 123) {
		return "f12";
	} else {
		return String.fromCodePoint(key).toLowerCase();
	}
};
iron_system_Keyboard.__super__ = iron_system_VirtualInput;
iron_system_Keyboard.prototype = $extend(iron_system_VirtualInput.prototype,{
	keysDown: null
	,keysStarted: null
	,keysReleased: null
	,keysFrame: null
	,repeatKey: null
	,repeatTime: null
	,endFrame: function() {
		if(this.keysFrame.length > 0) {
			var _g = 0;
			var _g1 = this.keysFrame;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				var _this = this.keysStarted;
				if(__map_reserved[s] != null) {
					_this.setReserved(s,false);
				} else {
					_this.h[s] = false;
				}
				var _this1 = this.keysReleased;
				if(__map_reserved[s] != null) {
					_this1.setReserved(s,false);
				} else {
					_this1.h[s] = false;
				}
			}
			this.keysFrame.splice(0,this.keysFrame.length);
		}
		if(kha_Scheduler.time() - this.repeatTime > 0.05) {
			this.repeatTime = kha_Scheduler.time();
			this.repeatKey = true;
		} else {
			this.repeatKey = false;
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = iron_system_Keyboard.keys;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var _this = this.keysDown;
			if(__map_reserved[s] != null) {
				_this.setReserved(s,false);
			} else {
				_this.h[s] = false;
			}
			var _this1 = this.keysStarted;
			if(__map_reserved[s] != null) {
				_this1.setReserved(s,false);
			} else {
				_this1.h[s] = false;
			}
			var _this2 = this.keysReleased;
			if(__map_reserved[s] != null) {
				_this2.setReserved(s,false);
			} else {
				_this2.h[s] = false;
			}
		}
		this.endFrame();
	}
	,down: function(key) {
		var _this = this.keysDown;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,started: function(key) {
		var _this = this.keysStarted;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,released: function(key) {
		var _this = this.keysReleased;
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,repeat: function(key) {
		var _this = this.keysStarted;
		if(!(__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key])) {
			if(this.repeatKey) {
				var _this1 = this.keysDown;
				if(__map_reserved[key] != null) {
					return _this1.getReserved(key);
				} else {
					return _this1.h[key];
				}
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,downListener: function(code) {
		var s = iron_system_Keyboard.keyCode(code);
		this.keysFrame.push(s);
		var _this = this.keysStarted;
		if(__map_reserved[s] != null) {
			_this.setReserved(s,true);
		} else {
			_this.h[s] = true;
		}
		var _this1 = this.keysDown;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,true);
		} else {
			_this1.h[s] = true;
		}
		this.repeatTime = kha_Scheduler.time() + 0.4;
		this.downVirtual(s);
	}
	,upListener: function(code) {
		var s = iron_system_Keyboard.keyCode(code);
		this.keysFrame.push(s);
		var _this = this.keysReleased;
		if(__map_reserved[s] != null) {
			_this.setReserved(s,true);
		} else {
			_this.h[s] = true;
		}
		var _this1 = this.keysDown;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,false);
		} else {
			_this1.h[s] = false;
		}
		this.upVirtual(s);
	}
	,pressListener: function(char) {
	}
	,__class__: iron_system_Keyboard
});
var iron_system_GamepadStick = function() {
	this.movementY = 0.0;
	this.movementX = 0.0;
	this.moved = false;
	this.lastY = 0.0;
	this.lastX = 0.0;
	this.y = 0.0;
	this.x = 0.0;
};
$hxClasses["iron.system.GamepadStick"] = iron_system_GamepadStick;
iron_system_GamepadStick.__name__ = "iron.system.GamepadStick";
iron_system_GamepadStick.prototype = {
	x: null
	,y: null
	,lastX: null
	,lastY: null
	,moved: null
	,movementX: null
	,movementY: null
	,__class__: iron_system_GamepadStick
};
var iron_system_Gamepad = function(i,virtual) {
	if(virtual == null) {
		virtual = false;
	}
	this.connects = 0;
	this.num = 0;
	this.connected = false;
	this.rightStick = new iron_system_GamepadStick();
	this.leftStick = new iron_system_GamepadStick();
	this.buttonsFrame = [];
	this.buttonsReleased = [];
	this.buttonsStarted = [];
	this.buttonsDown = [];
	iron_system_VirtualInput.call(this);
	var _g = 0;
	var _g1 = iron_system_Gamepad.buttons;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		this.buttonsDown.push(0.0);
		this.buttonsStarted.push(false);
		this.buttonsReleased.push(false);
	}
	this.num = i;
	this.reset();
	if(virtual) {
		this.connected = true;
	} else {
		this.connect();
	}
};
$hxClasses["iron.system.Gamepad"] = iron_system_Gamepad;
iron_system_Gamepad.__name__ = "iron.system.Gamepad";
iron_system_Gamepad.keyCode = function(button) {
	return iron_system_Gamepad.buttons[button];
};
iron_system_Gamepad.__super__ = iron_system_VirtualInput;
iron_system_Gamepad.prototype = $extend(iron_system_VirtualInput.prototype,{
	buttonsDown: null
	,buttonsStarted: null
	,buttonsReleased: null
	,buttonsFrame: null
	,leftStick: null
	,rightStick: null
	,connected: null
	,num: null
	,connects: null
	,connect: function() {
		var gamepad = kha_input_Gamepad.get(this.num);
		if(gamepad == null) {
			return;
		}
		this.connected = true;
		gamepad.notify($bind(this,this.axisListener),$bind(this,this.buttonListener));
	}
	,endFrame: function() {
		if(this.buttonsFrame.length > 0) {
			var _g = 0;
			var _g1 = this.buttonsFrame;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				this.buttonsStarted[i] = false;
				this.buttonsReleased[i] = false;
			}
			this.buttonsFrame.splice(0,this.buttonsFrame.length);
		}
		this.leftStick.moved = false;
		this.leftStick.movementX = 0;
		this.leftStick.movementY = 0;
		this.rightStick.moved = false;
		this.rightStick.movementX = 0;
		this.rightStick.movementY = 0;
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.buttonsDown.length;
		while(_g < _g1) {
			var i = _g++;
			this.buttonsDown[i] = 0.0;
			this.buttonsStarted[i] = false;
			this.buttonsReleased[i] = false;
		}
		this.endFrame();
	}
	,buttonIndex: function(button) {
		var _g = 0;
		var _g1 = iron_system_Gamepad.buttons.length;
		while(_g < _g1) {
			var i = _g++;
			if(iron_system_Gamepad.buttons[i] == button) {
				return i;
			}
		}
		return 0;
	}
	,down: function(button) {
		return this.buttonsDown[this.buttonIndex(button)];
	}
	,started: function(button) {
		return this.buttonsStarted[this.buttonIndex(button)];
	}
	,released: function(button) {
		return this.buttonsReleased[this.buttonIndex(button)];
	}
	,axisListener: function(axis,value) {
		var stick = axis <= 1 ? this.leftStick : this.rightStick;
		if(axis == 0 || axis == 2) {
			stick.lastX = stick.x;
			stick.x = value;
			stick.movementX = stick.x - stick.lastX;
		} else if(axis == 1 || axis == 3) {
			stick.lastY = stick.y;
			stick.y = value;
			stick.movementY = stick.y - stick.lastY;
		}
		stick.moved = true;
	}
	,buttonListener: function(button,value) {
		this.buttonsFrame.push(button);
		this.buttonsDown[button] = value;
		if(value > 0) {
			this.buttonsStarted[button] = true;
		} else {
			this.buttonsReleased[button] = true;
		}
		if(value == 0.0) {
			this.upVirtual(iron_system_Gamepad.buttons[button]);
		} else if(value == 1.0) {
			this.downVirtual(iron_system_Gamepad.buttons[button]);
		}
	}
	,__class__: iron_system_Gamepad
});
var iron_system_Sensor = function() {
	this.z = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	kha_input_Sensor.get(0).notify($bind(this,this.listener));
};
$hxClasses["iron.system.Sensor"] = iron_system_Sensor;
iron_system_Sensor.__name__ = "iron.system.Sensor";
iron_system_Sensor.prototype = {
	x: null
	,y: null
	,z: null
	,listener: function(x,y,z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
	,__class__: iron_system_Sensor
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var kha__$Assets_ImageList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.ImageList"] = kha__$Assets_ImageList;
kha__$Assets_ImageList.__name__ = "kha._Assets.ImageList";
kha__$Assets_ImageList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_ImageList
};
var kha__$Assets_SoundList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.SoundList"] = kha__$Assets_SoundList;
kha__$Assets_SoundList.__name__ = "kha._Assets.SoundList";
kha__$Assets_SoundList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_SoundList
};
var kha__$Assets_BlobList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.BlobList"] = kha__$Assets_BlobList;
kha__$Assets_BlobList.__name__ = "kha._Assets.BlobList";
kha__$Assets_BlobList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_BlobList
};
var kha__$Assets_FontList = function() {
	this.names = ["font_default"];
	this.font_defaultDescription = { name : "font_default", file_sizes : [1], files : ["font_default.ttf"], type : "font"};
	this.font_defaultName = "font_default";
	this.font_default = null;
};
$hxClasses["kha._Assets.FontList"] = kha__$Assets_FontList;
kha__$Assets_FontList.__name__ = "kha._Assets.FontList";
kha__$Assets_FontList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,font_default: null
	,font_defaultName: null
	,font_defaultDescription: null
	,font_defaultLoad: function(done,failure) {
		kha_Assets.loadFont("font_default",function(font) {
			done();
		},failure,{ fileName : "kha/internal/AssetsBuilder.hx", lineNumber : 138, className : "kha._Assets.FontList", methodName : "font_defaultLoad"});
	}
	,font_defaultUnload: function() {
		this.font_default.unload();
		this.font_default = null;
	}
	,names: null
	,__class__: kha__$Assets_FontList
};
var kha__$Assets_VideoList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.VideoList"] = kha__$Assets_VideoList;
kha__$Assets_VideoList.__name__ = "kha._Assets.VideoList";
kha__$Assets_VideoList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_VideoList
};
var kha_Assets = function() { };
$hxClasses["kha.Assets"] = kha_Assets;
kha_Assets.__name__ = "kha.Assets";
kha_Assets.__properties__ = {get_videoFormats:"get_videoFormats",get_fontFormats:"get_fontFormats",get_soundFormats:"get_soundFormats",get_imageFormats:"get_imageFormats"};
kha_Assets.loadEverything = function(callback,filter,uncompressSoundsFilter,failed) {
	var lists = [kha__$Assets_ImageList,kha__$Assets_SoundList,kha__$Assets_BlobList,kha__$Assets_FontList,kha__$Assets_VideoList];
	var listInstances = [kha_Assets.images,kha_Assets.sounds,kha_Assets.blobs,kha_Assets.fonts,kha_Assets.videos];
	var fileCount = 0;
	var _g = 0;
	while(_g < lists.length) {
		var list = lists[_g];
		++_g;
		var _g1 = 0;
		var _g11 = Type.getInstanceFields(list);
		while(_g1 < _g11.length) {
			var file = _g11[_g1];
			++_g1;
			if(StringTools.endsWith(file,"Description")) {
				fileCount += 1;
			}
		}
	}
	if(fileCount == 0) {
		callback();
		return;
	}
	var filesLeft = fileCount;
	var loadFunc = function(desc,done,failure) {
		var name = desc.name;
		switch(desc.type) {
		case "blob":
			kha_Assets.loadBlob(name,function(blob) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 122, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "font":
			kha_Assets.loadFont(name,function(font) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 124, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "image":
			kha_Assets.loadImage(name,function(image) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 113, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "sound":
			kha_Assets.loadSound(name,function(sound) {
				if(uncompressSoundsFilter == null || uncompressSoundsFilter(desc)) {
					sound.uncompress(done);
				} else {
					done();
				}
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 115, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "video":
			kha_Assets.loadVideo(name,function(video) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 126, className : "kha.Assets", methodName : "loadEverything"});
			break;
		}
	};
	var onLoaded = function() {
		filesLeft -= 1;
		kha_Assets.progress = 1 - filesLeft / fileCount;
		if(filesLeft == 0) {
			callback();
		}
	};
	var onError = function(err) {
		(kha_Assets.reporter(failed,{ fileName : "kha/Assets.hx", lineNumber : 137, className : "kha.Assets", methodName : "loadEverything"}))(err);
		onLoaded();
	};
	var _g12 = 0;
	var _g2 = lists.length;
	while(_g12 < _g2) {
		var i = _g12++;
		var list1 = lists[i];
		var listInstance = listInstances[i];
		var _g13 = 0;
		var _g21 = Type.getInstanceFields(list1);
		while(_g13 < _g21.length) {
			var field = _g21[_g13];
			++_g13;
			if(!StringTools.endsWith(field,"Description")) {
				continue;
			}
			var desc1 = Reflect.field(listInstance,field);
			if(filter == null || filter(desc1)) {
				loadFunc(desc1,onLoaded,onError);
			} else {
				onLoaded();
			}
		}
	}
};
kha_Assets.loadImage = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.images,name + "Description");
	kha_LoaderImpl.loadImageFromDescription(description,function(image) {
		kha_Assets.images[name] = image;
		done(image);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadImageFromPath = function(path,readable,done,failed,pos) {
	var description = { files : [path], readable : readable};
	kha_LoaderImpl.loadImageFromDescription(description,done,kha_Assets.reporter(failed,pos));
};
kha_Assets.get_imageFormats = function() {
	return kha_LoaderImpl.getImageFormats();
};
kha_Assets.loadBlob = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.blobs,name + "Description");
	kha_LoaderImpl.loadBlobFromDescription(description,function(blob) {
		kha_Assets.blobs[name] = blob;
		done(blob);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadBlobFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadBlobFromDescription(description,done,kha_Assets.reporter(failed,pos));
};
kha_Assets.loadSound = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.sounds,name + "Description");
	kha_LoaderImpl.loadSoundFromDescription(description,function(sound) {
		kha_Assets.sounds[name] = sound;
		done(sound);
	},kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.loadSoundFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadSoundFromDescription(description,done,kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.get_soundFormats = function() {
	return kha_LoaderImpl.getSoundFormats();
};
kha_Assets.loadFont = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.fonts,name + "Description");
	kha_LoaderImpl.loadFontFromDescription(description,function(font) {
		kha_Assets.fonts[name] = font;
		done(font);
	},kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.loadFontFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadFontFromDescription(description,done,kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.get_fontFormats = function() {
	return ["ttf"];
};
kha_Assets.loadVideo = function(name,done,failed,pos) {
	var description = Reflect.field(kha_Assets.videos,name + "Description");
	kha_LoaderImpl.loadVideoFromDescription(description,function(video) {
		kha_Assets.videos[name] = video;
		done(video);
	},kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.loadVideoFromPath = function(path,done,failed,pos) {
	var description = { files : [path]};
	kha_LoaderImpl.loadVideoFromDescription(description,done,kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.get_videoFormats = function() {
	return kha_LoaderImpl.getVideoFormats();
};
kha_Assets.reporter = function(custom,pos) {
	if(custom != null) {
		return custom;
	} else {
		var f = haxe_Log.trace;
		var infos = pos;
		return function(v) {
			f(v,infos);
		};
	}
};
var kha_Canvas = function() { };
$hxClasses["kha.Canvas"] = kha_Canvas;
kha_Canvas.__name__ = "kha.Canvas";
kha_Canvas.__isInterface__ = true;
kha_Canvas.prototype = {
	get_width: null
	,get_height: null
	,get_g1: null
	,get_g2: null
	,get_g4: null
	,width: null
	,height: null
	,g1: null
	,g2: null
	,g4: null
	,__class__: kha_Canvas
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_height:"get_height",get_width:"get_width"}
};
var kha__$Color_Color_$Impl_$ = {};
$hxClasses["kha._Color.Color_Impl_"] = kha__$Color_Color_$Impl_$;
kha__$Color_Color_$Impl_$.__name__ = "kha._Color.Color_Impl_";
kha__$Color_Color_$Impl_$.__properties__ = {set_value:"set_value",get_value:"get_value",set_A:"set_A",get_A:"get_A",set_B:"set_B",get_B:"get_B",set_G:"set_G",get_G:"get_G",set_R:"set_R",get_R:"get_R",set_Ab:"set_Ab",get_Ab:"get_Ab",set_Bb:"set_Bb",get_Bb:"get_Bb",set_Gb:"set_Gb",get_Gb:"get_Gb",set_Rb:"set_Rb",get_Rb:"get_Rb"};
kha__$Color_Color_$Impl_$.fromValue = function(value) {
	return kha__$Color_Color_$Impl_$._new(value);
};
kha__$Color_Color_$Impl_$.fromBytes = function(r,g,b,a) {
	if(a == null) {
		a = 255;
	}
	return kha__$Color_Color_$Impl_$._new(a << 24 | r << 16 | g << 8 | b);
};
kha__$Color_Color_$Impl_$.fromFloats = function(r,g,b,a) {
	if(a == null) {
		a = 1;
	}
	return kha__$Color_Color_$Impl_$._new((a * 255 | 0) << 24 | (r * 255 | 0) << 16 | (g * 255 | 0) << 8 | (b * 255 | 0));
};
kha__$Color_Color_$Impl_$.fromString = function(value) {
	if((value.length == 7 || value.length == 9) && value.charCodeAt(0) == 35) {
		var colorValue = Std.parseInt("0x" + HxOverrides.substr(value,1,null));
		if(value.length == 7) {
			colorValue += -16777216;
		}
		return kha__$Color_Color_$Impl_$._new(colorValue);
	} else {
		throw new js__$Boot_HaxeError("Invalid Color string: '" + value + "'");
	}
};
kha__$Color_Color_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
kha__$Color_Color_$Impl_$.get_value = function(this1) {
	return this1;
};
kha__$Color_Color_$Impl_$.set_value = function(this1,value) {
	this1 = value;
	return this1;
};
kha__$Color_Color_$Impl_$.get_Rb = function(this1) {
	return (this1 & 16711680) >>> 16;
};
kha__$Color_Color_$Impl_$.get_Gb = function(this1) {
	return (this1 & 65280) >>> 8;
};
kha__$Color_Color_$Impl_$.get_Bb = function(this1) {
	return this1 & 255;
};
kha__$Color_Color_$Impl_$.get_Ab = function(this1) {
	return this1 >>> 24;
};
kha__$Color_Color_$Impl_$.set_Rb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | i << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.set_Gb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | i << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.set_Bb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | i;
	return i;
};
kha__$Color_Color_$Impl_$.set_Ab = function(this1,i) {
	this1 = i << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.get_R = function(this1) {
	return ((this1 & 16711680) >>> 16) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_G = function(this1) {
	return ((this1 & 65280) >>> 8) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_B = function(this1) {
	return (this1 & 255) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_A = function(this1) {
	return (this1 >>> 24) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.set_R = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (f * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
kha__$Color_Color_$Impl_$.set_G = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (f * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
kha__$Color_Color_$Impl_$.set_B = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | (f * 255 | 0);
	return f;
};
kha__$Color_Color_$Impl_$.set_A = function(this1,f) {
	this1 = (f * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
var kha_Display = function(num,isPrimary) {
	this.num = num;
	this.isPrimary = isPrimary;
};
$hxClasses["kha.Display"] = kha_Display;
kha_Display.__name__ = "kha.Display";
kha_Display.__properties__ = {get_all:"get_all",get_primary:"get_primary"};
kha_Display.init = function() {
	var _g = 0;
	var _g1 = Krom.displayCount();
	while(_g < _g1) {
		var i = _g++;
		kha_Display.displays.push(new kha_Display(i,Krom.displayIsPrimary(i)));
	}
};
kha_Display.get_primary = function() {
	kha_Display.init();
	var _g = 0;
	var _g1 = kha_Display.displays;
	while(_g < _g1.length) {
		var display = _g1[_g];
		++_g;
		if(display.isPrimary) {
			return display;
		}
	}
	return null;
};
kha_Display.get_all = function() {
	kha_Display.init();
	return kha_Display.displays;
};
kha_Display.prototype = {
	num: null
	,isPrimary: null
	,get_available: function() {
		return true;
	}
	,get_name: function() {
		return "Display";
	}
	,get_x: function() {
		return Krom.displayX(this.num);
	}
	,get_y: function() {
		return Krom.displayY(this.num);
	}
	,get_width: function() {
		return Krom.displayWidth(this.num);
	}
	,get_height: function() {
		return Krom.displayHeight(this.num);
	}
	,get_frequency: function() {
		return 60;
	}
	,get_pixelsPerInch: function() {
		return Krom.screenDpi();
	}
	,get_modes: function() {
		return [];
	}
	,__class__: kha_Display
	,__properties__: {get_modes:"get_modes",get_pixelsPerInch:"get_pixelsPerInch",get_frequency:"get_frequency",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x",get_name:"get_name",get_available:"get_available"}
};
var kha_DisplayMode = function(width,height,frequency,bitsPerPixel) {
	this.width = width;
	this.height = height;
	this.frequency = frequency;
	this.bitsPerPixel = bitsPerPixel;
};
$hxClasses["kha.DisplayMode"] = kha_DisplayMode;
kha_DisplayMode.__name__ = "kha.DisplayMode";
kha_DisplayMode.prototype = {
	width: null
	,height: null
	,frequency: null
	,bitsPerPixel: null
	,__class__: kha_DisplayMode
};
var kha_FontStyle = function(bold,italic,underlined) {
	this.bold = bold;
	this.italic = italic;
	this.underlined = underlined;
};
$hxClasses["kha.FontStyle"] = kha_FontStyle;
kha_FontStyle.__name__ = "kha.FontStyle";
kha_FontStyle.prototype = {
	bold: null
	,italic: null
	,underlined: null
	,getBold: function() {
		return this.bold;
	}
	,getItalic: function() {
		return this.italic;
	}
	,getUnderlined: function() {
		return this.underlined;
	}
	,__class__: kha_FontStyle
};
var kha_Framebuffer = function($window,g1,g2,g4) {
	this.window = $window;
	this.graphics1 = g1;
	this.graphics2 = g2;
	this.graphics4 = g4;
};
$hxClasses["kha.Framebuffer"] = kha_Framebuffer;
kha_Framebuffer.__name__ = "kha.Framebuffer";
kha_Framebuffer.__interfaces__ = [kha_Canvas];
kha_Framebuffer.prototype = {
	window: null
	,graphics1: null
	,graphics2: null
	,graphics4: null
	,init: function(g1,g2,g4) {
		this.graphics1 = g1;
		this.graphics2 = g2;
		this.graphics4 = g4;
	}
	,get_g1: function() {
		return this.graphics1;
	}
	,get_g2: function() {
		return this.graphics2;
	}
	,get_g4: function() {
		return this.graphics4;
	}
	,width: null
	,get_width: function() {
		return kha_System.windowWidth(this.window);
	}
	,height: null
	,get_height: function() {
		return kha_System.windowHeight(this.window);
	}
	,__class__: kha_Framebuffer
	,__properties__: {get_height:"get_height",get_width:"get_width",get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1"}
};
var kha_FramebufferOptions = function(frequency,verticalSync,colorBufferBits,depthBufferBits,stencilBufferBits,samplesPerPixel) {
	if(samplesPerPixel == null) {
		samplesPerPixel = 1;
	}
	if(stencilBufferBits == null) {
		stencilBufferBits = 8;
	}
	if(depthBufferBits == null) {
		depthBufferBits = 16;
	}
	if(colorBufferBits == null) {
		colorBufferBits = 32;
	}
	if(verticalSync == null) {
		verticalSync = true;
	}
	if(frequency == null) {
		frequency = 60;
	}
	this.samplesPerPixel = 1;
	this.stencilBufferBits = 8;
	this.depthBufferBits = 16;
	this.colorBufferBits = 32;
	this.verticalSync = true;
	this.frequency = 60;
	this.frequency = frequency;
	this.verticalSync = verticalSync;
	this.colorBufferBits = colorBufferBits;
	this.depthBufferBits = depthBufferBits;
	this.stencilBufferBits = stencilBufferBits;
	this.samplesPerPixel = samplesPerPixel;
};
$hxClasses["kha.FramebufferOptions"] = kha_FramebufferOptions;
kha_FramebufferOptions.__name__ = "kha.FramebufferOptions";
kha_FramebufferOptions.prototype = {
	frequency: null
	,verticalSync: null
	,colorBufferBits: null
	,depthBufferBits: null
	,stencilBufferBits: null
	,samplesPerPixel: null
	,__class__: kha_FramebufferOptions
};
var kha_Resource = function() { };
$hxClasses["kha.Resource"] = kha_Resource;
kha_Resource.__name__ = "kha.Resource";
kha_Resource.__isInterface__ = true;
kha_Resource.prototype = {
	unload: null
	,__class__: kha_Resource
};
var kha_Image = function(texture) {
	this.pixels = null;
	this.texture_ = texture;
};
$hxClasses["kha.Image"] = kha_Image;
kha_Image.__name__ = "kha.Image";
kha_Image.__interfaces__ = [kha_Resource,kha_Canvas];
kha_Image.__properties__ = {get_nonPow2Supported:"get_nonPow2Supported",get_maxSize:"get_maxSize"};
kha_Image.getRenderTargetFormat = function(format) {
	switch(format) {
	case 0:
		return 0;
	case 1:
		return 5;
	case 2:
		return 3;
	case 3:
		return 4;
	case 4:
		return 1;
	case 5:
		return 2;
	case 6:
		return 6;
	default:
		return 0;
	}
};
kha_Image.getDepthBufferBits = function(depthAndStencil) {
	switch(depthAndStencil) {
	case 0:
		return -1;
	case 1:
		return 24;
	case 2:
		return 24;
	case 3:
		return 24;
	case 4:
		return 32;
	case 5:
		return 16;
	}
};
kha_Image.getStencilBufferBits = function(depthAndStencil) {
	switch(depthAndStencil) {
	case 0:
		return -1;
	case 1:
		return -1;
	case 2:
		return 8;
	case 3:
		return 8;
	case 4:
		return 8;
	case 5:
		return 0;
	}
};
kha_Image.getTextureFormat = function(format) {
	switch(format) {
	case 0:
		return 0;
	case 2:
		return 3;
	case 4:
		return 4;
	case 5:
		return 5;
	case 6:
		return 7;
	default:
		return 1;
	}
};
kha_Image._fromTexture = function(texture) {
	return new kha_Image(texture);
};
kha_Image.fromBytes = function(bytes,width,height,format,usage) {
	if(format == null) {
		format = 0;
	}
	var readable = true;
	var image = new kha_Image(null);
	image.format = format;
	image.texture_ = Krom.createTextureFromBytes(bytes.b.bufferValue,width,height,kha_Image.getTextureFormat(format),readable);
	return image;
};
kha_Image.fromBytes3D = function(bytes,width,height,depth,format,usage) {
	if(format == null) {
		format = 0;
	}
	var readable = true;
	var image = new kha_Image(null);
	image.format = format;
	image.texture_ = Krom.createTextureFromBytes3D(bytes.b.bufferValue,width,height,depth,kha_Image.getTextureFormat(format),readable);
	return image;
};
kha_Image.fromEncodedBytes = function(bytes,format,doneCallback,errorCallback,readable) {
	if(readable == null) {
		readable = false;
	}
	var image = new kha_Image(null);
	image.texture_ = Krom.createTextureFromEncodedBytes(bytes.b.bufferValue,format,readable);
	doneCallback(image);
};
kha_Image.create = function(width,height,format,usage) {
	if(format == null) {
		format = 0;
	}
	var image = new kha_Image(null);
	image.format = format;
	image.texture_ = Krom.createTexture(width,height,kha_Image.getTextureFormat(format));
	return image;
};
kha_Image.create3D = function(width,height,depth,format,usage) {
	if(format == null) {
		format = 0;
	}
	var image = new kha_Image(null);
	image.format = format;
	image.texture_ = Krom.createTexture3D(width,height,depth,kha_Image.getTextureFormat(format));
	return image;
};
kha_Image.createRenderTarget = function(width,height,format,depthStencil,antiAliasingSamples,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(antiAliasingSamples == null) {
		antiAliasingSamples = 1;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	if(format == null) {
		format = 0;
	}
	var image = new kha_Image(null);
	image.format = format;
	image.renderTarget_ = Krom.createRenderTarget(width,height,kha_Image.getDepthBufferBits(depthStencil),kha_Image.getRenderTargetFormat(format),kha_Image.getStencilBufferBits(depthStencil),contextId);
	return image;
};
kha_Image.get_maxSize = function() {
	return 4096;
};
kha_Image.get_nonPow2Supported = function() {
	return true;
};
kha_Image.renderTargetsInvertedY = function() {
	return Krom.renderTargetsInvertedY();
};
kha_Image.formatByteSize = function(format) {
	switch(format) {
	case 0:
		return 4;
	case 1:
		return 1;
	case 2:
		return 16;
	case 3:
		return 2;
	case 4:
		return 8;
	case 5:
		return 4;
	case 6:
		return 2;
	default:
		return 4;
	}
};
kha_Image.prototype = {
	texture_: null
	,renderTarget_: null
	,format: null
	,readable: null
	,graphics1: null
	,graphics2: null
	,graphics4: null
	,isOpaque: function(x,y) {
		return false;
	}
	,at: function(x,y) {
		return -16777216;
	}
	,unload: function() {
		Krom.unloadImage(this);
		this.texture_ = null;
		this.renderTarget_ = null;
	}
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		return haxe_io_Bytes.ofData(Krom.lockTexture(this.texture_,level));
	}
	,unlock: function() {
		Krom.unlockTexture(this.texture_);
	}
	,pixels: null
	,getPixels: function() {
		if(this.renderTarget_ != null) {
			if(this.pixels == null) {
				this.pixels = new haxe_io_Bytes(new ArrayBuffer(kha_Image.formatByteSize(this.format) * this.get_width() * this.get_height()));
			}
			Krom.getRenderTargetPixels(this.renderTarget_,this.pixels.b.bufferValue);
			return this.pixels;
		} else {
			return haxe_io_Bytes.ofData(Krom.getTexturePixels(this.texture_));
		}
	}
	,generateMipmaps: function(levels) {
		if(this.texture_ == null) {
			Krom.generateRenderTargetMipmaps(this.renderTarget_,levels);
		} else {
			Krom.generateTextureMipmaps(this.texture_,levels);
		}
	}
	,setMipmaps: function(mipmaps) {
		Krom.setMipmaps(this.texture_,mipmaps);
	}
	,setDepthStencilFrom: function(image) {
		Krom.setDepthStencilFrom(this.renderTarget_,image.renderTarget_);
	}
	,clear: function(x,y,z,width,height,depth,color) {
		Krom.clearTexture(this.texture_,x,y,z,width,height,depth,color);
	}
	,width: null
	,get_width: function() {
		if(this.texture_ == null) {
			return this.renderTarget_.width;
		} else {
			return this.texture_.width;
		}
	}
	,height: null
	,get_height: function() {
		if(this.texture_ == null) {
			return this.renderTarget_.height;
		} else {
			return this.texture_.height;
		}
	}
	,depth: null
	,get_depth: function() {
		if(this.texture_ != null) {
			return this.texture_.depth;
		} else {
			return 1;
		}
	}
	,realWidth: null
	,get_realWidth: function() {
		if(this.texture_ == null) {
			return this.renderTarget_.width;
		} else {
			return this.texture_.realWidth;
		}
	}
	,realHeight: null
	,get_realHeight: function() {
		if(this.texture_ == null) {
			return this.renderTarget_.height;
		} else {
			return this.texture_.realHeight;
		}
	}
	,g1: null
	,get_g1: function() {
		if(this.graphics1 == null) {
			this.graphics1 = new kha_graphics2_Graphics1(this);
		}
		return this.graphics1;
	}
	,g2: null
	,get_g2: function() {
		if(this.graphics2 == null) {
			this.graphics2 = new kha_graphics4_Graphics2(this);
		}
		return this.graphics2;
	}
	,g4: null
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_krom_Graphics(this);
		}
		return this.graphics4;
	}
	,__class__: kha_Image
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_realHeight:"get_realHeight",get_realWidth:"get_realWidth",get_depth:"get_depth",get_height:"get_height",get_width:"get_width"}
};
var kha_AlignedQuad = function() {
};
$hxClasses["kha.AlignedQuad"] = kha_AlignedQuad;
kha_AlignedQuad.__name__ = "kha.AlignedQuad";
kha_AlignedQuad.prototype = {
	x0: null
	,y0: null
	,s0: null
	,t0: null
	,x1: null
	,y1: null
	,s1: null
	,t1: null
	,xadvance: null
	,__class__: kha_AlignedQuad
};
var kha_KravurImage = function(size,ascent,descent,lineGap,width,height,chars,pixels) {
	this.mySize = size;
	this.width = width;
	this.height = height;
	this.chars = chars;
	this.baseline = ascent;
	var _g = 0;
	while(_g < chars.length) {
		var char = chars[_g];
		++_g;
		char.yoff += this.baseline;
	}
	this.texture = kha_Image.fromBytes(pixels.toBytes(),width,height,1);
};
$hxClasses["kha.KravurImage"] = kha_KravurImage;
kha_KravurImage.__name__ = "kha.KravurImage";
kha_KravurImage.prototype = {
	mySize: null
	,chars: null
	,texture: null
	,width: null
	,height: null
	,baseline: null
	,getTexture: function() {
		return this.texture;
	}
	,getBakedQuad: function(q,char_index,xpos,ypos) {
		if(char_index >= this.chars.length) {
			return null;
		}
		var ipw = 1.0 / this.width;
		var iph = 1.0 / this.height;
		var b = this.chars[char_index];
		if(b == null) {
			return null;
		}
		var round_x = Math.round(xpos + b.xoff);
		var round_y = Math.round(ypos + b.yoff);
		q.x0 = round_x;
		q.y0 = round_y;
		q.x1 = round_x + b.x1 - b.x0;
		q.y1 = round_y + b.y1 - b.y0;
		q.s0 = b.x0 * ipw;
		q.t0 = b.y0 * iph;
		q.s1 = b.x1 * ipw;
		q.t1 = b.y1 * iph;
		q.xadvance = b.xadvance;
		return q;
	}
	,getCharWidth: function(charIndex) {
		if(this.chars.length == 0) {
			return 0;
		}
		var offset = kha_KravurImage.charBlocks[0];
		if(charIndex < offset) {
			return this.chars[0].xadvance;
		}
		var _g = 1;
		var _g1 = kha_KravurImage.charBlocks.length / 2 | 0;
		while(_g < _g1) {
			var i = _g++;
			var prevEnd = kha_KravurImage.charBlocks[i * 2 - 1];
			var start = kha_KravurImage.charBlocks[i * 2];
			if(charIndex > start - 1) {
				offset += start - 1 - prevEnd;
			}
		}
		if(charIndex - offset >= this.chars.length) {
			return this.chars[0].xadvance;
		}
		return this.chars[charIndex - offset].xadvance;
	}
	,getHeight: function() {
		return this.mySize;
	}
	,stringWidth: function(str) {
		var width = 0;
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) {
			var c = _g++;
			width += this.getCharWidth(HxOverrides.cca(str,c));
		}
		return width;
	}
	,charactersWidth: function(characters,start,length) {
		var width = 0;
		var _g = start;
		var _g1 = start + length;
		while(_g < _g1) {
			var i = _g++;
			width += this.getCharWidth(characters[i]);
		}
		return width;
	}
	,getBaselinePosition: function() {
		return this.baseline;
	}
	,__class__: kha_KravurImage
};
var kha_Kravur = function(blob) {
	this.images = new haxe_ds_IntMap();
	this.blob = blob;
};
$hxClasses["kha.Kravur"] = kha_Kravur;
kha_Kravur.__name__ = "kha.Kravur";
kha_Kravur.__interfaces__ = [kha_Resource];
kha_Kravur.fromBytes = function(bytes) {
	return new kha_Kravur(kha_internal_BytesBlob.fromBytes(bytes));
};
kha_Kravur.prototype = {
	oldGlyphs: null
	,blob: null
	,images: null
	,_get: function(fontSize) {
		var glyphs = kha_graphics2_Graphics.fontGlyphs;
		if(glyphs != this.oldGlyphs) {
			this.oldGlyphs = glyphs;
			kha_KravurImage.charBlocks = [glyphs[0]];
			var nextChar = kha_KravurImage.charBlocks[0] + 1;
			var _g = 1;
			var _g1 = glyphs.length;
			while(_g < _g1) {
				var i = _g++;
				if(glyphs[i] != nextChar) {
					kha_KravurImage.charBlocks.push(glyphs[i - 1]);
					kha_KravurImage.charBlocks.push(glyphs[i]);
					nextChar = glyphs[i] + 1;
				} else {
					++nextChar;
				}
			}
			kha_KravurImage.charBlocks.push(glyphs[glyphs.length - 1]);
		}
		var imageIndex = fontSize * 10000 + glyphs.length;
		if(!this.images.h.hasOwnProperty(imageIndex)) {
			var width = 64;
			var height = 32;
			var this1 = new Array(glyphs.length);
			var baked = this1;
			var _g2 = 0;
			var _g11 = baked.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				baked[i1] = new kha_graphics2_truetype_Stbtt_$bakedchar();
			}
			var pixels = null;
			var status = -1;
			while(status <= 0) {
				if(height < width) {
					height *= 2;
				} else {
					width *= 2;
				}
				pixels = kha_internal_BytesBlob.alloc(width * height);
				status = kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap(this.blob,0,fontSize,pixels,width,height,glyphs,baked);
			}
			var info = new kha_graphics2_truetype_Stbtt_$fontinfo();
			kha_graphics2_truetype_StbTruetype.stbtt_InitFont(info,this.blob,0);
			var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics(info);
			var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(info,fontSize);
			var ascent = Math.round(metrics.ascent * scale);
			var descent = Math.round(metrics.descent * scale);
			var lineGap = Math.round(metrics.lineGap * scale);
			var image = new kha_KravurImage(fontSize | 0,ascent,descent,lineGap,width,height,baked,pixels);
			this.images.h[imageIndex] = image;
			return image;
		}
		return this.images.h[imageIndex];
	}
	,height: function(fontSize) {
		return this._get(fontSize).getHeight();
	}
	,width: function(fontSize,str) {
		return this._get(fontSize).stringWidth(str);
	}
	,widthOfCharacters: function(fontSize,characters,start,length) {
		return this._get(fontSize).charactersWidth(characters,start,length);
	}
	,baseline: function(fontSize) {
		return this._get(fontSize).getBaselinePosition();
	}
	,unload: function() {
		this.blob = null;
		this.images = null;
	}
	,__class__: kha_Kravur
};
var kha_LoaderImpl = function() { };
$hxClasses["kha.LoaderImpl"] = kha_LoaderImpl;
kha_LoaderImpl.__name__ = "kha.LoaderImpl";
kha_LoaderImpl.getImageFormats = function() {
	return ["png","jpg"];
};
kha_LoaderImpl.loadImageFromDescription = function(desc,done,failed) {
	var readable = Object.prototype.hasOwnProperty.call(desc,"readable") && desc.readable;
	done(kha_Image._fromTexture(Krom.loadImage(desc.files[0],readable)));
};
kha_LoaderImpl.getSoundFormats = function() {
	return ["wav","ogg"];
};
kha_LoaderImpl.loadSoundFromDescription = function(desc,done,failed) {
	done(new kha_krom_Sound(haxe_io_Bytes.ofData(Krom.loadSound(desc.files[0]))));
};
kha_LoaderImpl.getVideoFormats = function() {
	return ["webm"];
};
kha_LoaderImpl.loadVideoFromDescription = function(desc,done,failed) {
};
kha_LoaderImpl.loadBlobFromDescription = function(desc,done,failed) {
	done(new kha_internal_BytesBlob(haxe_io_Bytes.ofData(Krom.loadBlob(desc.files[0]))));
};
kha_LoaderImpl.loadFontFromDescription = function(desc,done,failed) {
	kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
		done(new kha_Kravur(blob));
	},failed);
};
var kha_TimeTask = function() {
};
$hxClasses["kha.TimeTask"] = kha_TimeTask;
kha_TimeTask.__name__ = "kha.TimeTask";
kha_TimeTask.prototype = {
	task: null
	,start: null
	,period: null
	,duration: null
	,next: null
	,id: null
	,groupId: null
	,active: null
	,paused: null
	,__class__: kha_TimeTask
};
var kha_FrameTask = function(task,priority,id) {
	this.task = task;
	this.priority = priority;
	this.id = id;
	this.active = true;
	this.paused = false;
};
$hxClasses["kha.FrameTask"] = kha_FrameTask;
kha_FrameTask.__name__ = "kha.FrameTask";
kha_FrameTask.prototype = {
	task: null
	,priority: null
	,id: null
	,active: null
	,paused: null
	,__class__: kha_FrameTask
};
var kha_Scheduler = function() { };
$hxClasses["kha.Scheduler"] = kha_Scheduler;
kha_Scheduler.__name__ = "kha.Scheduler";
kha_Scheduler.init = function() {
	kha_Scheduler.deltas = [];
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) {
		var i = _g++;
		kha_Scheduler.deltas[i] = 0;
	}
	kha_Scheduler.stopped = true;
	kha_Scheduler.frame_tasks_sorted = true;
	kha_Scheduler.current = kha_Scheduler.lastTime = kha_Scheduler.realTime();
	kha_Scheduler.currentFrameTaskId = 0;
	kha_Scheduler.currentTimeTaskId = 0;
	kha_Scheduler.currentGroupId = 0;
	kha_Scheduler.timeTasks = [];
	kha_Scheduler.pausedTimeTasks = [];
	kha_Scheduler.outdatedTimeTasks = [];
	kha_Scheduler.timeTasksScratchpad = [];
	kha_Scheduler.frameTasks = [];
	kha_Scheduler.toDeleteFrame = [];
};
kha_Scheduler.start = function(restartTimers) {
	if(restartTimers == null) {
		restartTimers = false;
	}
	kha_Scheduler.vsync = kha_Window.get(0).get_vSynced();
	var hz = kha_Display.get_primary().get_frequency();
	if(hz >= 57 && hz <= 63) {
		hz = 60;
	}
	kha_Scheduler.onedifhz = 1.0 / hz;
	kha_Scheduler.stopped = false;
	kha_Scheduler.resetTime();
	kha_Scheduler.lastTime = kha_Scheduler.realTime() - kha_Scheduler.startTime;
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) {
		var i = _g++;
		kha_Scheduler.deltas[i] = 0;
	}
	if(restartTimers) {
		var _g2 = 0;
		var _g3 = kha_Scheduler.timeTasks;
		while(_g2 < _g3.length) {
			var timeTask = _g3[_g2];
			++_g2;
			timeTask.paused = false;
		}
		var _g4 = 0;
		var _g5 = kha_Scheduler.frameTasks;
		while(_g4 < _g5.length) {
			var frameTask = _g5[_g4];
			++_g4;
			frameTask.paused = false;
		}
	}
};
kha_Scheduler.stop = function() {
	kha_Scheduler.stopped = true;
};
kha_Scheduler.isStopped = function() {
	return kha_Scheduler.stopped;
};
kha_Scheduler.warpTimeTasksBack = function(time,tasks) {
	var _g = 0;
	while(_g < tasks.length) {
		var timeTask = tasks[_g];
		++_g;
		if(timeTask.start >= time) {
			timeTask.next = timeTask.start;
		} else if(timeTask.period > 0) {
			var sinceStart = time - timeTask.start;
			var times = Math.ceil(sinceStart / timeTask.period);
			timeTask.next = timeTask.start + times * timeTask.period;
		}
	}
};
kha_Scheduler.warp = function(time) {
	if(time < kha_Scheduler.lastTime) {
		kha_Scheduler.current = time;
		kha_Scheduler.lastTime = time;
		kha_Scheduler.warpTimeTasksBack(time,kha_Scheduler.outdatedTimeTasks);
		kha_Scheduler.warpTimeTasksBack(time,kha_Scheduler.timeTasks);
		var _g = 0;
		var _g1 = kha_Scheduler.outdatedTimeTasks;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			if(task.next >= time) {
				kha_Scheduler.timeTasksScratchpad.push(task);
			}
		}
		var _g2 = 0;
		var _g3 = kha_Scheduler.timeTasksScratchpad;
		while(_g2 < _g3.length) {
			var task1 = _g3[_g2];
			++_g2;
			HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,task1);
		}
		var _g4 = 0;
		var _g5 = kha_Scheduler.timeTasksScratchpad;
		while(_g4 < _g5.length) {
			var task2 = _g5[_g4];
			++_g4;
			kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,task2);
		}
		while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	} else if(time > kha_Scheduler.lastTime) {
		kha_Scheduler.startTime -= time - kha_Scheduler.lastTime;
		kha_Scheduler.current = time;
		kha_Scheduler.lastTime = time;
		kha_Scheduler.executeTimeTasks(time);
	}
};
kha_Scheduler.executeFrame = function() {
	var now = kha_Scheduler.realTime() - kha_Scheduler.startTime;
	var delta = now - kha_Scheduler.lastTime;
	var frameEnd = kha_Scheduler.current;
	if(delta >= 0) {
		if(kha_netsync_Session.the() == null) {
			if(delta > kha_Scheduler.maxframetime) {
				kha_Scheduler.startTime += delta - kha_Scheduler.maxframetime;
				delta = kha_Scheduler.maxframetime;
				frameEnd += delta;
			} else if(kha_Scheduler.vsync) {
				var realdif = kha_Scheduler.onedifhz;
				while(realdif < delta - kha_Scheduler.onedifhz) realdif += kha_Scheduler.onedifhz;
				delta = realdif;
				var _g = 0;
				var _g1 = kha_Scheduler.DIF_COUNT - 2;
				while(_g < _g1) {
					var i = _g++;
					delta += kha_Scheduler.deltas[i];
					kha_Scheduler.deltas[i] = kha_Scheduler.deltas[i + 1];
				}
				delta += kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2];
				delta /= kha_Scheduler.DIF_COUNT;
				kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2] = realdif;
				frameEnd += delta;
			} else {
				var _g2 = 0;
				var _g11 = kha_Scheduler.DIF_COUNT - 1;
				while(_g2 < _g11) {
					var i1 = _g2++;
					kha_Scheduler.deltas[i1] = kha_Scheduler.deltas[i1 + 1];
				}
				kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 1] = delta;
				var next = 0;
				var _g21 = 0;
				var _g3 = kha_Scheduler.DIF_COUNT;
				while(_g21 < _g3) {
					var i2 = _g21++;
					next += kha_Scheduler.deltas[i2];
				}
				next /= kha_Scheduler.DIF_COUNT;
				frameEnd += next;
			}
		} else {
			frameEnd += delta;
		}
		kha_Scheduler.lastTime = frameEnd;
		if(!kha_Scheduler.stopped) {
			kha_Scheduler.current = frameEnd;
		}
		var _g4 = 0;
		var _g12 = kha_Scheduler.pausedTimeTasks;
		while(_g4 < _g12.length) {
			var pausedTask = _g12[_g4];
			++_g4;
			pausedTask.next += delta;
		}
		if(kha_Scheduler.stopped) {
			var _g22 = 0;
			var _g31 = kha_Scheduler.timeTasks;
			while(_g22 < _g31.length) {
				var timeTask = _g31[_g22];
				++_g22;
				timeTask.next += delta;
			}
		}
		kha_Scheduler.executeTimeTasks(frameEnd);
		var _g23 = 0;
		var _g32 = kha_Scheduler.outdatedTimeTasks;
		while(_g23 < _g32.length) {
			var task = _g32[_g23];
			++_g23;
			if(task.next < frameEnd - 10.0) {
				kha_Scheduler.timeTasksScratchpad.push(task);
			}
		}
		var _g41 = 0;
		var _g5 = kha_Scheduler.timeTasksScratchpad;
		while(_g41 < _g5.length) {
			var task1 = _g5[_g41];
			++_g41;
			HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,task1);
		}
		while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	}
	kha_Scheduler.sortFrameTasks();
	var _g6 = 0;
	var _g13 = kha_Scheduler.frameTasks;
	while(_g6 < _g13.length) {
		var frameTask = _g13[_g6];
		++_g6;
		if(!kha_Scheduler.stopped && !frameTask.paused && frameTask.active) {
			if(!frameTask.task()) {
				frameTask.active = false;
			}
		}
	}
	var _g24 = 0;
	var _g33 = kha_Scheduler.frameTasks;
	while(_g24 < _g33.length) {
		var frameTask1 = _g33[_g24];
		++_g24;
		if(!frameTask1.active) {
			kha_Scheduler.toDeleteFrame.push(frameTask1);
		}
	}
	while(kha_Scheduler.toDeleteFrame.length > 0) HxOverrides.remove(kha_Scheduler.frameTasks,kha_Scheduler.toDeleteFrame.pop());
};
kha_Scheduler.executeTimeTasks = function(until) {
	while(kha_Scheduler.timeTasks.length > 0) {
		kha_Scheduler.activeTimeTask = kha_Scheduler.timeTasks[0];
		if(kha_Scheduler.activeTimeTask.next <= until) {
			kha_Scheduler.activeTimeTask.next += kha_Scheduler.activeTimeTask.period;
			HxOverrides.remove(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
			if(kha_Scheduler.activeTimeTask.active && kha_Scheduler.activeTimeTask.task()) {
				if(kha_Scheduler.activeTimeTask.period > 0 && (kha_Scheduler.activeTimeTask.duration == 0 || kha_Scheduler.activeTimeTask.duration >= kha_Scheduler.activeTimeTask.start + kha_Scheduler.activeTimeTask.next)) {
					kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
				} else {
					kha_Scheduler.archiveTimeTask(kha_Scheduler.activeTimeTask,until);
				}
			} else {
				kha_Scheduler.activeTimeTask.active = false;
				kha_Scheduler.archiveTimeTask(kha_Scheduler.activeTimeTask,until);
			}
		} else {
			break;
		}
	}
	kha_Scheduler.activeTimeTask = null;
};
kha_Scheduler.archiveTimeTask = function(timeTask,frameEnd) {
};
kha_Scheduler.time = function() {
	return kha_Scheduler.current;
};
kha_Scheduler.realTime = function() {
	return kha_System.get_time();
};
kha_Scheduler.resetTime = function() {
	var now = kha_System.get_time();
	var dif = now - kha_Scheduler.startTime;
	kha_Scheduler.startTime = now;
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		timeTask.start -= dif;
		timeTask.next -= dif;
	}
	var _g2 = 0;
	var _g3 = kha_Scheduler.DIF_COUNT;
	while(_g2 < _g3) {
		var i = _g2++;
		kha_Scheduler.deltas[i] = 0;
	}
	kha_Scheduler.current = 0;
	kha_Scheduler.lastTime = 0;
};
kha_Scheduler.addBreakableFrameTask = function(task,priority) {
	kha_Scheduler.frameTasks.push(new kha_FrameTask(task,priority,++kha_Scheduler.currentFrameTaskId));
	kha_Scheduler.frame_tasks_sorted = false;
	return kha_Scheduler.currentFrameTaskId;
};
kha_Scheduler.addFrameTask = function(task,priority) {
	return kha_Scheduler.addBreakableFrameTask(function() {
		task();
		return true;
	},priority);
};
kha_Scheduler.pauseFrameTask = function(id,paused) {
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(frameTask.id == id) {
			frameTask.paused = paused;
			break;
		}
	}
};
kha_Scheduler.removeFrameTask = function(id) {
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(frameTask.id == id) {
			frameTask.active = false;
			break;
		}
	}
};
kha_Scheduler.generateGroupId = function() {
	return ++kha_Scheduler.currentGroupId;
};
kha_Scheduler.addBreakableTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	var t = new kha_TimeTask();
	t.active = true;
	t.task = task;
	t.id = ++kha_Scheduler.currentTimeTaskId;
	t.groupId = groupId;
	t.start = kha_Scheduler.current + start;
	t.period = 0;
	if(period != 0) {
		t.period = period;
	}
	t.duration = 0;
	if(duration != 0) {
		t.duration = t.start + duration;
	}
	t.next = t.start;
	kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,t);
	return t.id;
};
kha_Scheduler.addTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(groupId,function() {
		task();
		return true;
	},start,period,duration);
};
kha_Scheduler.addBreakableTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.addTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.getTimeTask = function(id) {
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.id == id) {
		return kha_Scheduler.activeTimeTask;
	}
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.id == id) {
			return timeTask;
		}
	}
	var _g2 = 0;
	var _g3 = kha_Scheduler.pausedTimeTasks;
	while(_g2 < _g3.length) {
		var timeTask1 = _g3[_g2];
		++_g2;
		if(timeTask1.id == id) {
			return timeTask1;
		}
	}
	return null;
};
kha_Scheduler.pauseTimeTask = function(id,paused) {
	var timeTask = kha_Scheduler.getTimeTask(id);
	if(timeTask != null) {
		kha_Scheduler.pauseRunningTimeTask(timeTask,paused);
	}
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.id == id) {
		kha_Scheduler.activeTimeTask.paused = paused;
	}
};
kha_Scheduler.pauseRunningTimeTask = function(timeTask,paused) {
	timeTask.paused = paused;
	if(paused) {
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
		kha_Scheduler.pausedTimeTasks.push(timeTask);
	} else {
		kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,timeTask);
		HxOverrides.remove(kha_Scheduler.pausedTimeTasks,timeTask);
	}
};
kha_Scheduler.pauseTimeTasks = function(groupId,paused) {
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.groupId == groupId) {
			kha_Scheduler.pauseRunningTimeTask(timeTask,paused);
		}
	}
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.groupId == groupId) {
		kha_Scheduler.activeTimeTask.paused = paused;
	}
};
kha_Scheduler.removeTimeTask = function(id) {
	var timeTask = kha_Scheduler.getTimeTask(id);
	if(timeTask != null) {
		timeTask.active = false;
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
	}
};
kha_Scheduler.removeTimeTasks = function(groupId) {
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.groupId == groupId) {
			timeTask.active = false;
			kha_Scheduler.timeTasksScratchpad.push(timeTask);
		}
	}
	var _g2 = 0;
	var _g3 = kha_Scheduler.timeTasksScratchpad;
	while(_g2 < _g3.length) {
		var timeTask1 = _g3[_g2];
		++_g2;
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask1);
	}
	while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.groupId == groupId) {
		kha_Scheduler.activeTimeTask.active = false;
	}
};
kha_Scheduler.numTasksInSchedule = function() {
	return kha_Scheduler.timeTasks.length + kha_Scheduler.frameTasks.length;
};
kha_Scheduler.insertSorted = function(list,task) {
	var _g = 0;
	var _g1 = list.length;
	while(_g < _g1) {
		var i = _g++;
		if(list[i].next > task.next) {
			list.splice(i,0,task);
			return;
		}
	}
	list.push(task);
};
kha_Scheduler.sortFrameTasks = function() {
	if(kha_Scheduler.frame_tasks_sorted) {
		return;
	}
	kha_Scheduler.frameTasks.sort(function(a,b) {
		if(a.priority > b.priority) {
			return 1;
		} else if(a.priority < b.priority) {
			return -1;
		} else {
			return 0;
		}
	});
	kha_Scheduler.frame_tasks_sorted = true;
};
var kha_Shaders = function() { };
$hxClasses["kha.Shaders"] = kha_Shaders;
kha_Shaders.__name__ = "kha.Shaders";
kha_Shaders.init = function() {
	var blobs = [];
	var data = Reflect.field(kha_Shaders,"BLANK_mesh_fragData" + 0);
	var bytes = haxe_Unserializer.run(data);
	blobs.push(kha_internal_BytesBlob.fromBytes(bytes));
	kha_Shaders.BLANK_mesh_frag = new kha_graphics4_FragmentShader(blobs,["BLANK_mesh.frag.d3d11"]);
	var blobs1 = [];
	var data1 = Reflect.field(kha_Shaders,"BLANK_mesh_vertData" + 0);
	var bytes1 = haxe_Unserializer.run(data1);
	blobs1.push(kha_internal_BytesBlob.fromBytes(bytes1));
	kha_Shaders.BLANK_mesh_vert = new kha_graphics4_VertexShader(blobs1,["BLANK_mesh.vert.d3d11"]);
	var blobs2 = [];
	var data2 = Reflect.field(kha_Shaders,"BLANK_shadowmap_fragData" + 0);
	var bytes2 = haxe_Unserializer.run(data2);
	blobs2.push(kha_internal_BytesBlob.fromBytes(bytes2));
	kha_Shaders.BLANK_shadowmap_frag = new kha_graphics4_FragmentShader(blobs2,["BLANK_shadowmap.frag.d3d11"]);
	var blobs3 = [];
	var data3 = Reflect.field(kha_Shaders,"BLANK_shadowmap_vertData" + 0);
	var bytes3 = haxe_Unserializer.run(data3);
	blobs3.push(kha_internal_BytesBlob.fromBytes(bytes3));
	kha_Shaders.BLANK_shadowmap_vert = new kha_graphics4_VertexShader(blobs3,["BLANK_shadowmap.vert.d3d11"]);
	var blobs4 = [];
	var data4 = Reflect.field(kha_Shaders,"BLANK_translucent_fragData" + 0);
	var bytes4 = haxe_Unserializer.run(data4);
	blobs4.push(kha_internal_BytesBlob.fromBytes(bytes4));
	kha_Shaders.BLANK_translucent_frag = new kha_graphics4_FragmentShader(blobs4,["BLANK_translucent.frag.d3d11"]);
	var blobs5 = [];
	var data5 = Reflect.field(kha_Shaders,"BLANK_translucent_vertData" + 0);
	var bytes5 = haxe_Unserializer.run(data5);
	blobs5.push(kha_internal_BytesBlob.fromBytes(bytes5));
	kha_Shaders.BLANK_translucent_vert = new kha_graphics4_VertexShader(blobs5,["BLANK_translucent.vert.d3d11"]);
	var blobs6 = [];
	var data6 = Reflect.field(kha_Shaders,"blur_edge_pass_fragData" + 0);
	var bytes6 = haxe_Unserializer.run(data6);
	blobs6.push(kha_internal_BytesBlob.fromBytes(bytes6));
	kha_Shaders.blur_edge_pass_frag = new kha_graphics4_FragmentShader(blobs6,["blur_edge_pass.frag.d3d11"]);
	var blobs7 = [];
	var data7 = Reflect.field(kha_Shaders,"compositor_pass_fragData" + 0);
	var bytes7 = haxe_Unserializer.run(data7);
	blobs7.push(kha_internal_BytesBlob.fromBytes(bytes7));
	kha_Shaders.compositor_pass_frag = new kha_graphics4_FragmentShader(blobs7,["compositor_pass.frag.d3d11"]);
	var blobs8 = [];
	var data8 = Reflect.field(kha_Shaders,"compositor_pass_vertData" + 0);
	var bytes8 = haxe_Unserializer.run(data8);
	blobs8.push(kha_internal_BytesBlob.fromBytes(bytes8));
	kha_Shaders.compositor_pass_vert = new kha_graphics4_VertexShader(blobs8,["compositor_pass.vert.d3d11"]);
	var blobs9 = [];
	var data9 = Reflect.field(kha_Shaders,"deferred_light_fragData" + 0);
	var bytes9 = haxe_Unserializer.run(data9);
	blobs9.push(kha_internal_BytesBlob.fromBytes(bytes9));
	kha_Shaders.deferred_light_frag = new kha_graphics4_FragmentShader(blobs9,["deferred_light.frag.d3d11"]);
	var blobs10 = [];
	var data10 = Reflect.field(kha_Shaders,"line_deferred_fragData" + 0);
	var bytes10 = haxe_Unserializer.run(data10);
	blobs10.push(kha_internal_BytesBlob.fromBytes(bytes10));
	kha_Shaders.line_deferred_frag = new kha_graphics4_FragmentShader(blobs10,["line_deferred.frag.d3d11"]);
	var blobs11 = [];
	var data11 = Reflect.field(kha_Shaders,"line_fragData" + 0);
	var bytes11 = haxe_Unserializer.run(data11);
	blobs11.push(kha_internal_BytesBlob.fromBytes(bytes11));
	kha_Shaders.line_frag = new kha_graphics4_FragmentShader(blobs11,["line.frag.d3d11"]);
	var blobs12 = [];
	var data12 = Reflect.field(kha_Shaders,"line_vertData" + 0);
	var bytes12 = haxe_Unserializer.run(data12);
	blobs12.push(kha_internal_BytesBlob.fromBytes(bytes12));
	kha_Shaders.line_vert = new kha_graphics4_VertexShader(blobs12,["line.vert.d3d11"]);
	var blobs13 = [];
	var data13 = Reflect.field(kha_Shaders,"painter_colored_fragData" + 0);
	var bytes13 = haxe_Unserializer.run(data13);
	blobs13.push(kha_internal_BytesBlob.fromBytes(bytes13));
	kha_Shaders.painter_colored_frag = new kha_graphics4_FragmentShader(blobs13,["painter-colored.frag.d3d11"]);
	var blobs14 = [];
	var data14 = Reflect.field(kha_Shaders,"painter_colored_vertData" + 0);
	var bytes14 = haxe_Unserializer.run(data14);
	blobs14.push(kha_internal_BytesBlob.fromBytes(bytes14));
	kha_Shaders.painter_colored_vert = new kha_graphics4_VertexShader(blobs14,["painter-colored.vert.d3d11"]);
	var blobs15 = [];
	var data15 = Reflect.field(kha_Shaders,"painter_image_fragData" + 0);
	var bytes15 = haxe_Unserializer.run(data15);
	blobs15.push(kha_internal_BytesBlob.fromBytes(bytes15));
	kha_Shaders.painter_image_frag = new kha_graphics4_FragmentShader(blobs15,["painter-image.frag.d3d11"]);
	var blobs16 = [];
	var data16 = Reflect.field(kha_Shaders,"painter_image_vertData" + 0);
	var bytes16 = haxe_Unserializer.run(data16);
	blobs16.push(kha_internal_BytesBlob.fromBytes(bytes16));
	kha_Shaders.painter_image_vert = new kha_graphics4_VertexShader(blobs16,["painter-image.vert.d3d11"]);
	var blobs17 = [];
	var data17 = Reflect.field(kha_Shaders,"painter_text_fragData" + 0);
	var bytes17 = haxe_Unserializer.run(data17);
	blobs17.push(kha_internal_BytesBlob.fromBytes(bytes17));
	kha_Shaders.painter_text_frag = new kha_graphics4_FragmentShader(blobs17,["painter-text.frag.d3d11"]);
	var blobs18 = [];
	var data18 = Reflect.field(kha_Shaders,"painter_text_vertData" + 0);
	var bytes18 = haxe_Unserializer.run(data18);
	blobs18.push(kha_internal_BytesBlob.fromBytes(bytes18));
	kha_Shaders.painter_text_vert = new kha_graphics4_VertexShader(blobs18,["painter-text.vert.d3d11"]);
	var blobs19 = [];
	var data19 = Reflect.field(kha_Shaders,"painter_video_fragData" + 0);
	var bytes19 = haxe_Unserializer.run(data19);
	blobs19.push(kha_internal_BytesBlob.fromBytes(bytes19));
	kha_Shaders.painter_video_frag = new kha_graphics4_FragmentShader(blobs19,["painter-video.frag.d3d11"]);
	var blobs20 = [];
	var data20 = Reflect.field(kha_Shaders,"painter_video_vertData" + 0);
	var bytes20 = haxe_Unserializer.run(data20);
	blobs20.push(kha_internal_BytesBlob.fromBytes(bytes20));
	kha_Shaders.painter_video_vert = new kha_graphics4_VertexShader(blobs20,["painter-video.vert.d3d11"]);
	var blobs21 = [];
	var data21 = Reflect.field(kha_Shaders,"pass_vertData" + 0);
	var bytes21 = haxe_Unserializer.run(data21);
	blobs21.push(kha_internal_BytesBlob.fromBytes(bytes21));
	kha_Shaders.pass_vert = new kha_graphics4_VertexShader(blobs21,["pass.vert.d3d11"]);
	var blobs22 = [];
	var data22 = Reflect.field(kha_Shaders,"pass_viewray_vertData" + 0);
	var bytes22 = haxe_Unserializer.run(data22);
	blobs22.push(kha_internal_BytesBlob.fromBytes(bytes22));
	kha_Shaders.pass_viewray_vert = new kha_graphics4_VertexShader(blobs22,["pass_viewray.vert.d3d11"]);
	var blobs23 = [];
	var data23 = Reflect.field(kha_Shaders,"smaa_blend_weight_fragData" + 0);
	var bytes23 = haxe_Unserializer.run(data23);
	blobs23.push(kha_internal_BytesBlob.fromBytes(bytes23));
	kha_Shaders.smaa_blend_weight_frag = new kha_graphics4_FragmentShader(blobs23,["smaa_blend_weight.frag.d3d11"]);
	var blobs24 = [];
	var data24 = Reflect.field(kha_Shaders,"smaa_blend_weight_vertData" + 0);
	var bytes24 = haxe_Unserializer.run(data24);
	blobs24.push(kha_internal_BytesBlob.fromBytes(bytes24));
	kha_Shaders.smaa_blend_weight_vert = new kha_graphics4_VertexShader(blobs24,["smaa_blend_weight.vert.d3d11"]);
	var blobs25 = [];
	var data25 = Reflect.field(kha_Shaders,"smaa_edge_detect_fragData" + 0);
	var bytes25 = haxe_Unserializer.run(data25);
	blobs25.push(kha_internal_BytesBlob.fromBytes(bytes25));
	kha_Shaders.smaa_edge_detect_frag = new kha_graphics4_FragmentShader(blobs25,["smaa_edge_detect.frag.d3d11"]);
	var blobs26 = [];
	var data26 = Reflect.field(kha_Shaders,"smaa_edge_detect_vertData" + 0);
	var bytes26 = haxe_Unserializer.run(data26);
	blobs26.push(kha_internal_BytesBlob.fromBytes(bytes26));
	kha_Shaders.smaa_edge_detect_vert = new kha_graphics4_VertexShader(blobs26,["smaa_edge_detect.vert.d3d11"]);
	var blobs27 = [];
	var data27 = Reflect.field(kha_Shaders,"smaa_neighborhood_blend_fragData" + 0);
	var bytes27 = haxe_Unserializer.run(data27);
	blobs27.push(kha_internal_BytesBlob.fromBytes(bytes27));
	kha_Shaders.smaa_neighborhood_blend_frag = new kha_graphics4_FragmentShader(blobs27,["smaa_neighborhood_blend.frag.d3d11"]);
	var blobs28 = [];
	var data28 = Reflect.field(kha_Shaders,"smaa_neighborhood_blend_vertData" + 0);
	var bytes28 = haxe_Unserializer.run(data28);
	blobs28.push(kha_internal_BytesBlob.fromBytes(bytes28));
	kha_Shaders.smaa_neighborhood_blend_vert = new kha_graphics4_VertexShader(blobs28,["smaa_neighborhood_blend.vert.d3d11"]);
	var blobs29 = [];
	var data29 = Reflect.field(kha_Shaders,"ssao_pass_fragData" + 0);
	var bytes29 = haxe_Unserializer.run(data29);
	blobs29.push(kha_internal_BytesBlob.fromBytes(bytes29));
	kha_Shaders.ssao_pass_frag = new kha_graphics4_FragmentShader(blobs29,["ssao_pass.frag.d3d11"]);
	var blobs30 = [];
	var data30 = Reflect.field(kha_Shaders,"translucent_resolve_fragData" + 0);
	var bytes30 = haxe_Unserializer.run(data30);
	blobs30.push(kha_internal_BytesBlob.fromBytes(bytes30));
	kha_Shaders.translucent_resolve_frag = new kha_graphics4_FragmentShader(blobs30,["translucent_resolve.frag.d3d11"]);
	var blobs31 = [];
	var data31 = Reflect.field(kha_Shaders,"world_pass_fragData" + 0);
	var bytes31 = haxe_Unserializer.run(data31);
	blobs31.push(kha_internal_BytesBlob.fromBytes(bytes31));
	kha_Shaders.world_pass_frag = new kha_graphics4_FragmentShader(blobs31,["world_pass.frag.d3d11"]);
	var blobs32 = [];
	var data32 = Reflect.field(kha_Shaders,"world_pass_vertData" + 0);
	var bytes32 = haxe_Unserializer.run(data32);
	blobs32.push(kha_internal_BytesBlob.fromBytes(bytes32));
	kha_Shaders.world_pass_vert = new kha_graphics4_VertexShader(blobs32,["world_pass.vert.d3d11"]);
};
var kha_Sound = function() {
	this.sampleRate = 0;
	this.channels = 0;
	this.length = 0;
};
$hxClasses["kha.Sound"] = kha_Sound;
kha_Sound.__name__ = "kha.Sound";
kha_Sound.__interfaces__ = [kha_Resource];
kha_Sound.prototype = {
	compressedData: null
	,uncompressedData: null
	,length: null
	,channels: null
	,sampleRate: null
	,uncompress: function(done) {
		if(this.uncompressedData != null) {
			done();
			return;
		}
		var output = new haxe_io_BytesOutput();
		var header = kha_audio2_ogg_vorbis_Reader.readAll(this.compressedData,output,true);
		var soundBytes = output.getBytes();
		var count = soundBytes.length / 4 | 0;
		if(header.channel == 1) {
			this.length = count / kha_audio2_Audio.samplesPerSecond;
			var this1 = new Float32Array(count * 2);
			this.uncompressedData = this1;
			var _g = 0;
			var _g1 = count;
			while(_g < _g1) {
				var i = _g++;
				this.uncompressedData[i * 2] = soundBytes.getFloat(i * 4);
				this.uncompressedData[i * 2 + 1] = soundBytes.getFloat(i * 4);
			}
		} else {
			this.length = count / 2 / kha_audio2_Audio.samplesPerSecond;
			var this2 = new Float32Array(count);
			this.uncompressedData = this2;
			var _g2 = 0;
			var _g11 = count;
			while(_g2 < _g11) {
				var i1 = _g2++;
				this.uncompressedData[i1] = soundBytes.getFloat(i1 * 4);
			}
		}
		this.channels = header.channel;
		this.sampleRate = header.sampleRate;
		this.compressedData = null;
		done();
	}
	,unload: function() {
		this.compressedData = null;
		this.uncompressedData = null;
	}
	,__class__: kha_Sound
};
var kha_SystemOptions = function(title,width,height,$window,framebuffer) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(title == null) {
		title = "Kha";
	}
	this.framebuffer = null;
	this.window = null;
	this.height = -1;
	this.width = -1;
	this.title = "Kha";
	this.title = title;
	this.window = $window == null ? new kha_WindowOptions(null,null,null,null,null,null,null,null,null) : $window;
	if(width > 0) {
		this.window.width = width;
		this.width = width;
	} else {
		this.width = this.window.width;
	}
	if(height > 0) {
		this.window.height = height;
		this.height = height;
	} else {
		this.height = this.window.height;
	}
	if(this.window.title == null) {
		this.window.title = title;
	}
	this.framebuffer = framebuffer == null ? new kha_FramebufferOptions(null,null,null,null,null,null) : framebuffer;
};
$hxClasses["kha.SystemOptions"] = kha_SystemOptions;
kha_SystemOptions.__name__ = "kha.SystemOptions";
kha_SystemOptions.prototype = {
	title: null
	,width: null
	,height: null
	,window: null
	,framebuffer: null
	,__class__: kha_SystemOptions
};
var kha_System = function() { };
$hxClasses["kha.System"] = kha_System;
kha_System.__name__ = "kha.System";
kha_System.__properties__ = {get_refreshRate:"get_refreshRate",get_vsync:"get_vsync",get_language:"get_language",get_systemId:"get_systemId",get_screenRotation:"get_screenRotation",get_time:"get_time",get_title:"get_title"};
kha_System.init = function(options,callback) {
	var features = 0;
	if(options.resizable) {
		features = features | 1;
	}
	if(options.maximizable) {
		features = features | 4;
	}
	if(options.minimizable) {
		features = features | 2;
	}
	var newOptions = new kha_SystemOptions(options.title,options.width,options.height,new kha_WindowOptions(null,null,null,null,null,null,null,features,options.windowMode),new kha_FramebufferOptions(null,options.vSync,null,null,null,options.samplesPerPixel));
	kha_System.start(newOptions,function(_) {
		callback();
	});
};
kha_System.start = function(options,callback) {
	kha_System.theTitle = options.title;
	kha_SystemImpl.init(options,callback);
};
kha_System.get_title = function() {
	return kha_System.theTitle;
};
kha_System.notifyOnRender = function(listener,id) {
	if(id == null) {
		id = 0;
	}
	kha_System.renderListeners.push(function(framebuffers) {
		if(id < framebuffers.length) {
			listener(framebuffers[id]);
		}
	});
};
kha_System.notifyOnFrames = function(listener) {
	kha_System.renderListeners.push(listener);
};
kha_System.removeFramesListener = function(listener) {
	HxOverrides.remove(kha_System.renderListeners,listener);
};
kha_System.notifyOnApplicationState = function(foregroundListener,resumeListener,pauseListener,backgroundListener,shutdownListener) {
	if(foregroundListener != null) {
		kha_System.foregroundListeners.push(foregroundListener);
	}
	if(resumeListener != null) {
		kha_System.resumeListeners.push(resumeListener);
	}
	if(pauseListener != null) {
		kha_System.pauseListeners.push(pauseListener);
	}
	if(backgroundListener != null) {
		kha_System.backgroundListeners.push(backgroundListener);
	}
	if(shutdownListener != null) {
		kha_System.shutdownListeners.push(shutdownListener);
	}
};
kha_System.notifyOnDropFiles = function(dropFilesListener) {
	kha_System.dropFilesListeners.push(dropFilesListener);
};
kha_System.removeDropListener = function(listener) {
	HxOverrides.remove(kha_System.dropFilesListeners,listener);
};
kha_System.notifyOnCutCopyPaste = function(cutListener,copyListener,pasteListener) {
	kha_System.cutListener = cutListener;
	kha_System.copyListener = copyListener;
	kha_System.pasteListener = pasteListener;
};
kha_System.notifyOnLoginLogout = function(loginListener,logoutListener) {
	kha_System.loginListener = loginListener;
	kha_System.logoutListener = logoutListener;
};
kha_System.login = function() {
	kha_SystemImpl.login();
};
kha_System.waitingForLogin = function() {
	return kha_SystemImpl.waitingForLogin();
};
kha_System.allowUserChange = function() {
	kha_SystemImpl.allowUserChange();
};
kha_System.disallowUserChange = function() {
	kha_SystemImpl.disallowUserChange();
};
kha_System.render = function(framebuffers) {
	var _g = 0;
	var _g1 = kha_System.renderListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(framebuffers);
	}
};
kha_System.foreground = function() {
	var _g = 0;
	var _g1 = kha_System.foregroundListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.resume = function() {
	var _g = 0;
	var _g1 = kha_System.resumeListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.pause = function() {
	var _g = 0;
	var _g1 = kha_System.pauseListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.background = function() {
	var _g = 0;
	var _g1 = kha_System.backgroundListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.shutdown = function() {
	var _g = 0;
	var _g1 = kha_System.shutdownListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener();
	}
};
kha_System.dropFiles = function(filePath) {
	var _g = 0;
	var _g1 = kha_System.dropFilesListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(filePath);
	}
};
kha_System.get_time = function() {
	return kha_SystemImpl.getTime();
};
kha_System.windowWidth = function($window) {
	if($window == null) {
		$window = 0;
	}
	return kha_Window.get($window).get_width();
};
kha_System.windowHeight = function($window) {
	if($window == null) {
		$window = 0;
	}
	return kha_Window.get_all()[$window].get_height();
};
kha_System.get_screenRotation = function() {
	return 0;
};
kha_System.get_systemId = function() {
	return kha_SystemImpl.getSystemId();
};
kha_System.vibrate = function(ms) {
	kha_SystemImpl.vibrate(ms);
	return;
};
kha_System.get_language = function() {
	return kha_SystemImpl.getLanguage();
};
kha_System.stop = function() {
	return kha_SystemImpl.requestShutdown();
};
kha_System.loadUrl = function(url) {
	kha_SystemImpl.loadUrl(url);
};
kha_System.canSwitchFullscreen = function() {
	return true;
};
kha_System.isFullscreen = function() {
	if(kha_Window.get(0).get_mode() != 1) {
		return kha_Window.get(0).get_mode() == 2;
	} else {
		return true;
	}
};
kha_System.requestFullscreen = function() {
	kha_Window.get(0).set_mode(1);
};
kha_System.exitFullscreen = function() {
	kha_Window.get(0).set_mode(0);
};
kha_System.notifyOnFullscreenChange = function(func,error) {
};
kha_System.removeFullscreenListener = function(func,error) {
};
kha_System.changeResolution = function(width,height) {
};
kha_System.requestShutdown = function() {
	kha_System.stop();
};
kha_System.get_vsync = function() {
	return kha_Window.get(0).get_vSynced();
};
kha_System.get_refreshRate = function() {
	return kha_Display.get_primary().get_frequency();
};
kha_System.screenDpi = function() {
	return kha_Display.get_primary().get_pixelsPerInch();
};
kha_System.safeZone = function() {
	return kha_SystemImpl.safeZone();
};
kha_System.automaticSafeZone = function() {
	return kha_SystemImpl.automaticSafeZone();
};
kha_System.setSafeZone = function(value) {
	kha_SystemImpl.setSafeZone(value);
};
kha_System.unlockAchievement = function(id) {
	kha_SystemImpl.unlockAchievement(id);
};
var kha_SystemImpl = function() { };
$hxClasses["kha.SystemImpl"] = kha_SystemImpl;
kha_SystemImpl.__name__ = "kha.SystemImpl";
kha_SystemImpl.renderCallback = function() {
	kha_Scheduler.executeFrame();
	kha_System.render([kha_SystemImpl.framebuffer]);
};
kha_SystemImpl.dropFilesCallback = function(filePath) {
	kha_System.dropFiles(filePath);
};
kha_SystemImpl.copyCallback = function() {
	if(kha_System.copyListener != null) {
		return kha_System.copyListener();
	} else {
		return null;
	}
};
kha_SystemImpl.cutCallback = function() {
	if(kha_System.cutListener != null) {
		return kha_System.cutListener();
	} else {
		return null;
	}
};
kha_SystemImpl.pasteCallback = function(data) {
	if(kha_System.pasteListener != null) {
		kha_System.pasteListener(data);
	}
};
kha_SystemImpl.foregroundCallback = function() {
	kha_System.foreground();
};
kha_SystemImpl.resumeCallback = function() {
	kha_System.resume();
};
kha_SystemImpl.pauseCallback = function() {
	kha_System.pause();
};
kha_SystemImpl.backgroundCallback = function() {
	kha_System.background();
};
kha_SystemImpl.shutdownCallback = function() {
	kha_System.shutdown();
};
kha_SystemImpl.keyboardDownCallback = function(code) {
	kha_SystemImpl.keyboard.sendDownEvent(code);
};
kha_SystemImpl.keyboardUpCallback = function(code) {
	kha_SystemImpl.keyboard.sendUpEvent(code);
};
kha_SystemImpl.keyboardPressCallback = function(charCode) {
	kha_SystemImpl.keyboard.sendPressEvent(String.fromCodePoint(charCode));
};
kha_SystemImpl.mouseDownCallback = function(button,x,y) {
	kha_SystemImpl.mouse.sendDownEvent(0,button,x,y);
};
kha_SystemImpl.mouseUpCallback = function(button,x,y) {
	kha_SystemImpl.mouse.sendUpEvent(0,button,x,y);
};
kha_SystemImpl.mouseMoveCallback = function(x,y,mx,my) {
	kha_SystemImpl.mouse.sendMoveEvent(0,x,y,mx,my);
};
kha_SystemImpl.mouseWheelCallback = function(delta) {
	kha_SystemImpl.mouse.sendWheelEvent(0,delta);
};
kha_SystemImpl.penDownCallback = function(x,y,pressure) {
	kha_SystemImpl.pen.sendDownEvent(0,x,y,pressure);
};
kha_SystemImpl.penUpCallback = function(x,y,pressure) {
	kha_SystemImpl.pen.sendUpEvent(0,x,y,pressure);
};
kha_SystemImpl.penMoveCallback = function(x,y,pressure) {
	kha_SystemImpl.pen.sendMoveEvent(0,x,y,pressure);
};
kha_SystemImpl.gamepadAxisCallback = function(gamepad,axis,value) {
	kha_SystemImpl.gamepads[gamepad].sendAxisEvent(axis,value);
};
kha_SystemImpl.gamepadButtonCallback = function(gamepad,button,value) {
	kha_SystemImpl.gamepads[gamepad].sendButtonEvent(button,value);
};
kha_SystemImpl.audioCallback = function(samples) {
	kha_audio2_Audio._callCallback(samples);
	var buffer = kha_audio2_Audio.buffer;
	Krom.writeAudioBuffer(buffer.data.buffer,samples);
};
kha_SystemImpl.init = function(options,callback) {
	Krom.init(options.title,options.width,options.height,options.framebuffer.samplesPerPixel,options.framebuffer.verticalSync,options.window.mode,options.window.windowFeatures,3);
	kha_SystemImpl.start = Krom.getTime();
	haxe_Log.trace = function(v,infos) {
		var message = infos != null ? infos.className + ":" + infos.lineNumber + ": " + Std.string(v) : Std.string(v);
		Krom.log(HxOverrides.substr(message,0,511));
	};
	new kha_Window(0);
	kha_Scheduler.init();
	kha_Shaders.init();
	var g4 = new kha_krom_Graphics();
	kha_SystemImpl.framebuffer = new kha_Framebuffer(0,null,null,g4);
	kha_SystemImpl.framebuffer.init(new kha_graphics2_Graphics1(kha_SystemImpl.framebuffer),new kha_graphics4_Graphics2(kha_SystemImpl.framebuffer),g4);
	Krom.setCallback(kha_SystemImpl.renderCallback);
	Krom.setDropFilesCallback(kha_SystemImpl.dropFilesCallback);
	Krom.setCutCopyPasteCallback(kha_SystemImpl.cutCallback,kha_SystemImpl.copyCallback,kha_SystemImpl.pasteCallback);
	Krom.setApplicationStateCallback(kha_SystemImpl.foregroundCallback,kha_SystemImpl.resumeCallback,kha_SystemImpl.pauseCallback,kha_SystemImpl.backgroundCallback,kha_SystemImpl.shutdownCallback);
	kha_SystemImpl.keyboard = new kha_input_Keyboard();
	kha_SystemImpl.mouse = new kha_input_MouseImpl();
	kha_SystemImpl.pen = new kha_input_Pen();
	kha_SystemImpl.gamepads = [];
	var _g = 0;
	var _g1 = kha_SystemImpl.maxGamepads;
	while(_g < _g1) {
		var i = _g++;
		kha_SystemImpl.gamepads[i] = new kha_input_Gamepad(i);
	}
	Krom.setKeyboardDownCallback(kha_SystemImpl.keyboardDownCallback);
	Krom.setKeyboardUpCallback(kha_SystemImpl.keyboardUpCallback);
	Krom.setKeyboardPressCallback(kha_SystemImpl.keyboardPressCallback);
	Krom.setMouseDownCallback(kha_SystemImpl.mouseDownCallback);
	Krom.setMouseUpCallback(kha_SystemImpl.mouseUpCallback);
	Krom.setMouseMoveCallback(kha_SystemImpl.mouseMoveCallback);
	Krom.setMouseWheelCallback(kha_SystemImpl.mouseWheelCallback);
	Krom.setPenDownCallback(kha_SystemImpl.penDownCallback);
	Krom.setPenUpCallback(kha_SystemImpl.penUpCallback);
	Krom.setPenMoveCallback(kha_SystemImpl.penMoveCallback);
	Krom.setGamepadAxisCallback(kha_SystemImpl.gamepadAxisCallback);
	Krom.setGamepadButtonCallback(kha_SystemImpl.gamepadButtonCallback);
	kha_audio2_Audio._init();
	kha_audio2_Audio1._init();
	Krom.setAudioCallback(kha_SystemImpl.audioCallback);
	kha_Scheduler.start();
	callback(kha_Window.get(0));
};
kha_SystemImpl.initEx = function(title,options,windowCallback,callback) {
};
kha_SystemImpl.translateWindowMode = function(value) {
	if(value == null) {
		return 0;
	}
	switch(value) {
	case 0:
		return 0;
	case 1:
		return 1;
	case 2:
		return 2;
	}
};
kha_SystemImpl.getScreenRotation = function() {
	return 0;
};
kha_SystemImpl.getTime = function() {
	return Krom.getTime() - kha_SystemImpl.start;
};
kha_SystemImpl.getVsync = function() {
	return true;
};
kha_SystemImpl.getRefreshRate = function() {
	return 60;
};
kha_SystemImpl.getSystemId = function() {
	return Krom.systemId();
};
kha_SystemImpl.vibrate = function(ms) {
};
kha_SystemImpl.getLanguage = function() {
	return "en";
};
kha_SystemImpl.requestShutdown = function() {
	Krom.requestShutdown();
	return true;
};
kha_SystemImpl.getMouse = function(num) {
	return kha_SystemImpl.mouse;
};
kha_SystemImpl.getPen = function(num) {
	return kha_SystemImpl.pen;
};
kha_SystemImpl.getKeyboard = function(num) {
	return kha_SystemImpl.keyboard;
};
kha_SystemImpl.lockMouse = function() {
	if(!kha_SystemImpl.isMouseLocked()) {
		Krom.lockMouse();
		var _g = 0;
		var _g1 = kha_SystemImpl.mouseLockListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener();
		}
	}
};
kha_SystemImpl.unlockMouse = function() {
	if(kha_SystemImpl.isMouseLocked()) {
		Krom.unlockMouse();
		var _g = 0;
		var _g1 = kha_SystemImpl.mouseLockListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener();
		}
	}
};
kha_SystemImpl.canLockMouse = function() {
	return Krom.canLockMouse();
};
kha_SystemImpl.isMouseLocked = function() {
	return Krom.isMouseLocked();
};
kha_SystemImpl.notifyOfMouseLockChange = function(func,error) {
	if(kha_SystemImpl.canLockMouse() && func != null) {
		kha_SystemImpl.mouseLockListeners.push(func);
	}
};
kha_SystemImpl.removeFromMouseLockChange = function(func,error) {
	if(kha_SystemImpl.canLockMouse() && func != null) {
		HxOverrides.remove(kha_SystemImpl.mouseLockListeners,func);
	}
};
kha_SystemImpl.hideSystemCursor = function() {
	Krom.showMouse(false);
};
kha_SystemImpl.showSystemCursor = function() {
	Krom.showMouse(true);
};
kha_SystemImpl.unload = function() {
};
kha_SystemImpl.canSwitchFullscreen = function() {
	return false;
};
kha_SystemImpl.isFullscreen = function() {
	return false;
};
kha_SystemImpl.requestFullscreen = function() {
};
kha_SystemImpl.exitFullscreen = function() {
};
kha_SystemImpl.notifyOfFullscreenChange = function(func,error) {
};
kha_SystemImpl.removeFromFullscreenChange = function(func,error) {
};
kha_SystemImpl.changeResolution = function(width,height) {
};
kha_SystemImpl.setKeepScreenOn = function(on) {
};
kha_SystemImpl.loadUrl = function(url) {
};
kha_SystemImpl.getGamepadId = function(index) {
	return "unknown";
};
kha_SystemImpl.getGamepadVendor = function(index) {
	return "unknown";
};
kha_SystemImpl.safeZone = function() {
	return 1.0;
};
kha_SystemImpl.login = function() {
};
kha_SystemImpl.automaticSafeZone = function() {
	return true;
};
kha_SystemImpl.setSafeZone = function(value) {
};
kha_SystemImpl.unlockAchievement = function(id) {
};
kha_SystemImpl.waitingForLogin = function() {
	return false;
};
kha_SystemImpl.disallowUserChange = function() {
};
kha_SystemImpl.allowUserChange = function() {
};
var kha_Video = function() {
};
$hxClasses["kha.Video"] = kha_Video;
kha_Video.__name__ = "kha.Video";
kha_Video.__interfaces__ = [kha_Resource];
kha_Video.prototype = {
	width: function() {
		return 100;
	}
	,height: function() {
		return 100;
	}
	,play: function(loop) {
		if(loop == null) {
			loop = false;
		}
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,getLength: function() {
		return 0;
	}
	,getCurrentPos: function() {
		return 0;
	}
	,get_position: function() {
		return 0;
	}
	,set_position: function(value) {
		return 0;
	}
	,getVolume: function() {
		return 1;
	}
	,setVolume: function(volume) {
	}
	,isFinished: function() {
		return this.getCurrentPos() >= this.getLength();
	}
	,unload: function() {
	}
	,__class__: kha_Video
	,__properties__: {set_position:"set_position",get_position:"get_position"}
};
var kha_Window = function(num) {
	this.num = num;
	kha_Window.windows.push(this);
};
$hxClasses["kha.Window"] = kha_Window;
kha_Window.__name__ = "kha.Window";
kha_Window.__properties__ = {get_all:"get_all"};
kha_Window.create = function(win,frame) {
	return null;
};
kha_Window.destroy = function($window) {
};
kha_Window.get = function(index) {
	return kha_Window.windows[index];
};
kha_Window.get_all = function() {
	return kha_Window.windows;
};
kha_Window.prototype = {
	num: null
	,windowTitle: null
	,resize: function(width,height) {
	}
	,move: function(x,y) {
	}
	,changeWindowFeatures: function(features) {
	}
	,changeFramebuffer: function(frame) {
	}
	,get_x: function() {
		return 0;
	}
	,set_x: function(value) {
		return 0;
	}
	,get_y: function() {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,get_width: function() {
		return Krom.windowWidth(this.num);
	}
	,set_width: function(value) {
		return 800;
	}
	,get_height: function() {
		return Krom.windowHeight(this.num);
	}
	,set_height: function(value) {
		return 600;
	}
	,get_mode: function() {
		return 0;
	}
	,set_mode: function(mode) {
		return 0;
	}
	,get_visible: function() {
		return true;
	}
	,set_visible: function(value) {
		return true;
	}
	,get_title: function() {
		return this.windowTitle;
	}
	,set_title: function(value) {
		Krom.setWindowTitle(this.num,value);
		this.windowTitle = value;
		return this.windowTitle;
	}
	,notifyOnResize: function(callback) {
	}
	,get_vSynced: function() {
		return true;
	}
	,__class__: kha_Window
	,__properties__: {get_vSynced:"get_vSynced",set_title:"set_title",get_title:"get_title",set_visible:"set_visible",get_visible:"get_visible",set_mode:"set_mode",get_mode:"get_mode",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var kha__$WindowOptions_WindowFeatures_$Impl_$ = {};
$hxClasses["kha._WindowOptions.WindowFeatures_Impl_"] = kha__$WindowOptions_WindowFeatures_$Impl_$;
kha__$WindowOptions_WindowFeatures_$Impl_$.__name__ = "kha._WindowOptions.WindowFeatures_Impl_";
kha__$WindowOptions_WindowFeatures_$Impl_$._new = function(value) {
	var this1 = value;
	return this1;
};
var kha_WindowOptions = function(title,x,y,width,height,display,visible,windowFeatures,mode) {
	if(mode == null) {
		mode = 0;
	}
	if(visible == null) {
		visible = true;
	}
	if(display == null) {
		display = -1;
	}
	if(height == null) {
		height = 600;
	}
	if(width == null) {
		width = 800;
	}
	if(y == null) {
		y = -1;
	}
	if(x == null) {
		x = -1;
	}
	this.mode = 0;
	this.windowFeatures = 1 | 4 | 2;
	this.visible = true;
	this.display = -1;
	this.height = 600;
	this.width = 800;
	this.y = -1;
	this.x = -1;
	this.title = null;
	this.title = title;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.display = display;
	this.visible = visible;
	this.windowFeatures = windowFeatures == null ? 1 | 4 | 2 : windowFeatures;
	this.mode = mode;
};
$hxClasses["kha.WindowOptions"] = kha_WindowOptions;
kha_WindowOptions.__name__ = "kha.WindowOptions";
kha_WindowOptions.prototype = {
	title: null
	,x: null
	,y: null
	,width: null
	,height: null
	,display: null
	,visible: null
	,windowFeatures: null
	,mode: null
	,__class__: kha_WindowOptions
};
var kha_arrays__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["kha.arrays._Float32Array.Float32Array_Impl_"] = kha_arrays__$Float32Array_Float32Array_$Impl_$;
kha_arrays__$Float32Array_Float32Array_$Impl_$.__name__ = "kha.arrays._Float32Array.Float32Array_Impl_";
kha_arrays__$Float32Array_Float32Array_$Impl_$.__properties__ = {get_length:"get_length",get_buffer:"get_buffer"};
kha_arrays__$Float32Array_Float32Array_$Impl_$._new = function(elements) {
	var this1 = new Float32Array(elements);
	return this1;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.get_buffer = function(this1) {
	return this1.buffer;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_arrays__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["kha.arrays._Int16Array.Int16Array_Impl_"] = kha_arrays__$Int16Array_Int16Array_$Impl_$;
kha_arrays__$Int16Array_Int16Array_$Impl_$.__name__ = "kha.arrays._Int16Array.Int16Array_Impl_";
kha_arrays__$Int16Array_Int16Array_$Impl_$.__properties__ = {get_length:"get_length"};
kha_arrays__$Int16Array_Int16Array_$Impl_$._new = function(elements) {
	var this1 = new Int16Array(elements);
	return this1;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.arrayRead = function(this1,index) {
	return this1[index];
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.arrayWrite = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_arrays__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["kha.arrays._Int32Array.Int32Array_Impl_"] = kha_arrays__$Int32Array_Int32Array_$Impl_$;
kha_arrays__$Int32Array_Int32Array_$Impl_$.__name__ = "kha.arrays._Int32Array.Int32Array_Impl_";
kha_arrays__$Int32Array_Int32Array_$Impl_$.__properties__ = {get_length:"get_length"};
kha_arrays__$Int32Array_Int32Array_$Impl_$._new = function(elements) {
	var this1 = new Int32Array(elements);
	return this1;
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.arrayRead = function(this1,index) {
	return this1[index];
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.arrayWrite = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_arrays__$Uint32Array_Uint32Array_$Impl_$ = {};
$hxClasses["kha.arrays._Uint32Array.Uint32Array_Impl_"] = kha_arrays__$Uint32Array_Uint32Array_$Impl_$;
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.__name__ = "kha.arrays._Uint32Array.Uint32Array_Impl_";
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.__properties__ = {get_length:"get_length"};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$._new = function(elements) {
	var this1 = new Uint32Array(elements);
	return this1;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.arrayRead = function(this1,index) {
	return this1[index];
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.arrayWrite = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_audio1_AudioChannel = function() { };
$hxClasses["kha.audio1.AudioChannel"] = kha_audio1_AudioChannel;
kha_audio1_AudioChannel.__name__ = "kha.audio1.AudioChannel";
kha_audio1_AudioChannel.__isInterface__ = true;
kha_audio1_AudioChannel.prototype = {
	play: null
	,pause: null
	,stop: null
	,length: null
	,get_length: null
	,get_position: null
	,set_position: null
	,get_volume: null
	,set_volume: null
	,finished: null
	,get_finished: null
	,__class__: kha_audio1_AudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_internal_IntBox = function(value) {
	this.value = value;
};
$hxClasses["kha.internal.IntBox"] = kha_internal_IntBox;
kha_internal_IntBox.__name__ = "kha.internal.IntBox";
kha_internal_IntBox.prototype = {
	value: null
	,__class__: kha_internal_IntBox
};
var kha_audio2_Audio = function() { };
$hxClasses["kha.audio2.Audio"] = kha_audio2_Audio;
kha_audio2_Audio.__name__ = "kha.audio2.Audio";
kha_audio2_Audio._init = function() {
	var bufferSize = 2048;
	kha_audio2_Audio.buffer = new kha_audio2_Buffer(bufferSize * 4,2,44100);
	kha_audio2_Audio.samplesPerSecond = 44100;
};
kha_audio2_Audio._callCallback = function(samples) {
	if(kha_audio2_Audio.buffer == null) {
		return;
	}
	if(kha_audio2_Audio.audioCallback != null) {
		kha_audio2_Audio.intBox.value = samples;
		kha_audio2_Audio.audioCallback(kha_audio2_Audio.intBox,kha_audio2_Audio.buffer);
	} else {
		var _g = 0;
		var _g1 = samples;
		while(_g < _g1) {
			var i = _g++;
			kha_audio2_Audio.buffer.data[kha_audio2_Audio.buffer.writeLocation] = 0;
			kha_audio2_Audio.buffer.writeLocation += 1;
			if(kha_audio2_Audio.buffer.writeLocation >= kha_audio2_Audio.buffer.size) {
				kha_audio2_Audio.buffer.writeLocation = 0;
			}
		}
	}
};
kha_audio2_Audio._readSample = function() {
	if(kha_audio2_Audio.buffer == null) {
		return 0;
	}
	var value = kha_audio2_Audio.buffer.data[kha_audio2_Audio.buffer.readLocation];
	kha_audio2_Audio.buffer.readLocation += 1;
	if(kha_audio2_Audio.buffer.readLocation >= kha_audio2_Audio.buffer.size) {
		kha_audio2_Audio.buffer.readLocation = 0;
	}
	return value;
};
kha_audio2_Audio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return null;
};
kha_audio2_Audio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return null;
};
var kha_audio2_Audio1 = function() { };
$hxClasses["kha.audio2.Audio1"] = kha_audio2_Audio1;
kha_audio2_Audio1.__name__ = "kha.audio2.Audio1";
kha_audio2_Audio1._init = function() {
	var this1 = new Array(32);
	kha_audio2_Audio1.soundChannels = this1;
	var this2 = new Array(32);
	kha_audio2_Audio1.streamChannels = this2;
	var this3 = new Array(32);
	kha_audio2_Audio1.internalSoundChannels = this3;
	var this4 = new Array(32);
	kha_audio2_Audio1.internalStreamChannels = this4;
	var this5 = new Float32Array(512);
	kha_audio2_Audio1.sampleCache1 = this5;
	var this6 = new Float32Array(512);
	kha_audio2_Audio1.sampleCache2 = this6;
	kha_audio2_Audio1.lastAllocationCount = 0;
	kha_audio2_Audio.audioCallback = kha_audio2_Audio1.mix;
};
kha_audio2_Audio1.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_Audio1.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_Audio1.mix = function(samplesBox,buffer) {
	var samples = samplesBox.value;
	if(kha_audio2_Audio1.sampleCache1.length < samples) {
		if(kha_audio2_Audio.disableGcInteractions) {
			haxe_Log.trace("Unexpected allocation request in audio thread.",{ fileName : "kha/audio2/Audio1.hx", lineNumber : 50, className : "kha.audio2.Audio1", methodName : "mix"});
			var _g = 0;
			var _g1 = samples;
			while(_g < _g1) {
				var i = _g++;
				buffer.data[buffer.writeLocation] = 0;
				buffer.writeLocation += 1;
				if(buffer.writeLocation >= buffer.size) {
					buffer.writeLocation = 0;
				}
			}
			kha_audio2_Audio1.lastAllocationCount = 0;
			kha_audio2_Audio.disableGcInteractions = false;
			return;
		}
		var this1 = new Float32Array(samples * 2);
		kha_audio2_Audio1.sampleCache1 = this1;
		var this2 = new Float32Array(samples * 2);
		kha_audio2_Audio1.sampleCache2 = this2;
		kha_audio2_Audio1.lastAllocationCount = 0;
	} else if(kha_audio2_Audio1.lastAllocationCount > 100) {
		kha_audio2_Audio.disableGcInteractions = true;
	} else {
		kha_audio2_Audio1.lastAllocationCount += 1;
	}
	var _g2 = 0;
	var _g11 = samples;
	while(_g2 < _g11) {
		var i1 = _g2++;
		kha_audio2_Audio1.sampleCache2[i1] = 0;
	}
	var _g21 = 0;
	while(_g21 < 32) {
		var i2 = _g21++;
		kha_audio2_Audio1.internalSoundChannels[i2] = kha_audio2_Audio1.soundChannels[i2];
	}
	var _g3 = 0;
	while(_g3 < 32) {
		var i3 = _g3++;
		kha_audio2_Audio1.internalStreamChannels[i3] = kha_audio2_Audio1.streamChannels[i3];
	}
	var _g4 = 0;
	var _g5 = kha_audio2_Audio1.internalSoundChannels;
	while(_g4 < _g5.length) {
		var channel = _g5[_g4];
		++_g4;
		if(channel == null || channel.get_finished()) {
			continue;
		}
		channel.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g51 = 0;
		var _g6 = samples;
		while(_g51 < _g6) {
			var i4 = _g51++;
			kha_audio2_Audio1.sampleCache2[i4] += kha_audio2_Audio1.sampleCache1[i4] * channel.get_volume();
		}
	}
	var _g61 = 0;
	var _g7 = kha_audio2_Audio1.internalStreamChannels;
	while(_g61 < _g7.length) {
		var channel1 = _g7[_g61];
		++_g61;
		if(channel1 == null || channel1.get_finished()) {
			continue;
		}
		channel1.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g71 = 0;
		var _g8 = samples;
		while(_g71 < _g8) {
			var i5 = _g71++;
			kha_audio2_Audio1.sampleCache2[i5] += kha_audio2_Audio1.sampleCache1[i5] * channel1.get_volume();
		}
	}
	var _g81 = 0;
	var _g9 = samples;
	while(_g81 < _g9) {
		var i6 = _g81++;
		var a = kha_audio2_Audio1.sampleCache2[i6];
		var a1 = a < 1.0 ? a : 1.0;
		buffer.data[buffer.writeLocation] = a1 > -1.0 ? a1 : -1.0;
		buffer.writeLocation += 1;
		if(buffer.writeLocation >= buffer.size) {
			buffer.writeLocation = 0;
		}
	}
};
kha_audio2_Audio1.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var channel = null;
	if(kha_audio2_Audio.samplesPerSecond != sound.sampleRate) {
		channel = new kha_audio2_ResamplingAudioChannel(loop,sound.sampleRate);
	} else {
		channel = new kha_audio2_AudioChannel(loop);
	}
	channel.data = sound.uncompressedData;
	var foundChannel = false;
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == null || kha_audio2_Audio1.soundChannels[i].get_finished()) {
			kha_audio2_Audio1.soundChannels[i] = channel;
			foundChannel = true;
			break;
		}
	}
	if(foundChannel) {
		return channel;
	} else {
		return null;
	}
};
kha_audio2_Audio1._playAgain = function(channel) {
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == channel) {
			kha_audio2_Audio1.soundChannels[i] = null;
		}
	}
	var _g1 = 0;
	while(_g1 < 32) {
		var i1 = _g1++;
		if(kha_audio2_Audio1.soundChannels[i1] == null || kha_audio2_Audio1.soundChannels[i1].get_finished() || kha_audio2_Audio1.soundChannels[i1] == channel) {
			kha_audio2_Audio1.soundChannels[i1] = channel;
			break;
		}
	}
};
kha_audio2_Audio1.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var hardwareChannel = kha_audio2_Audio.stream(sound,loop);
	if(hardwareChannel != null) {
		return hardwareChannel;
	}
	var channel = new kha_audio2_StreamChannel(sound.compressedData,loop);
	var foundChannel = false;
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.streamChannels[i] == null || kha_audio2_Audio1.streamChannels[i].get_finished()) {
			kha_audio2_Audio1.streamChannels[i] = channel;
			foundChannel = true;
			break;
		}
	}
	if(foundChannel) {
		return channel;
	} else {
		return null;
	}
};
var kha_audio2_AudioChannel = function(looping) {
	this.looping = false;
	this.stopped = false;
	this.paused = false;
	this.myPosition = 0;
	this.myVolume = 1;
	this.data = null;
	this.looping = looping;
};
$hxClasses["kha.audio2.AudioChannel"] = kha_audio2_AudioChannel;
kha_audio2_AudioChannel.__name__ = "kha.audio2.AudioChannel";
kha_audio2_AudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_AudioChannel.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_AudioChannel.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_AudioChannel.prototype = {
	data: null
	,myVolume: null
	,myPosition: null
	,paused: null
	,stopped: null
	,looping: null
	,nextSamples: function(requestedSamples,requestedLength,sampleRate) {
		if(this.paused || this.stopped) {
			var _g = 0;
			var _g1 = requestedLength;
			while(_g < _g1) {
				var i = _g++;
				requestedSamples[i] = 0;
			}
			return;
		}
		var requestedSamplesIndex = 0;
		while(requestedSamplesIndex < requestedLength) {
			var _g2 = 0;
			var a = this.data.length - this.myPosition;
			var b = requestedLength - requestedSamplesIndex;
			var _g11 = a < b ? a : b;
			while(_g2 < _g11) {
				var i1 = _g2++;
				requestedSamples[requestedSamplesIndex++] = this.data[this.myPosition++];
			}
			if(this.myPosition >= this.data.length) {
				this.myPosition = 0;
				if(!this.looping) {
					this.stopped = true;
					break;
				}
			}
		}
		while(requestedSamplesIndex < requestedLength) requestedSamples[requestedSamplesIndex++] = 0;
	}
	,play: function() {
		this.paused = false;
		this.stopped = false;
		kha_audio2_Audio1._playAgain(this);
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.myPosition = 0;
		this.stopped = true;
	}
	,length: null
	,get_length: function() {
		return this.data.length / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,get_position: function() {
		return this.myPosition / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,set_position: function(value) {
		this.myPosition = Math.round(value * kha_audio2_Audio.samplesPerSecond * 2);
		var a = this.myPosition;
		var b = this.data.length;
		var a1 = a < b ? a : b;
		this.myPosition = a1 > 0 ? a1 : 0;
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,finished: null
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_audio2_AudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_Buffer = function(size,channels,samplesPerSecond) {
	this.size = size;
	var this1 = new Float32Array(size);
	this.data = this1;
	this.channels = channels;
	this.samplesPerSecond = samplesPerSecond;
	this.readLocation = 0;
	this.writeLocation = 0;
};
$hxClasses["kha.audio2.Buffer"] = kha_audio2_Buffer;
kha_audio2_Buffer.__name__ = "kha.audio2.Buffer";
kha_audio2_Buffer.prototype = {
	channels: null
	,samplesPerSecond: null
	,data: null
	,size: null
	,readLocation: null
	,writeLocation: null
	,__class__: kha_audio2_Buffer
};
var kha_audio2_ResamplingAudioChannel = function(looping,sampleRate) {
	kha_audio2_AudioChannel.call(this,looping);
	this.sampleRate = sampleRate;
};
$hxClasses["kha.audio2.ResamplingAudioChannel"] = kha_audio2_ResamplingAudioChannel;
kha_audio2_ResamplingAudioChannel.__name__ = "kha.audio2.ResamplingAudioChannel";
kha_audio2_ResamplingAudioChannel.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_ResamplingAudioChannel.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_ResamplingAudioChannel.__super__ = kha_audio2_AudioChannel;
kha_audio2_ResamplingAudioChannel.prototype = $extend(kha_audio2_AudioChannel.prototype,{
	sampleRate: null
	,nextSamples: function(requestedSamples,requestedLength,sampleRate) {
		if(this.paused || this.stopped) {
			var _g = 0;
			var _g1 = requestedLength;
			while(_g < _g1) {
				var i = _g++;
				requestedSamples[i] = 0;
			}
			return;
		}
		var requestedSamplesIndex = 0;
		while(requestedSamplesIndex < requestedLength) {
			var _g2 = 0;
			var value = Math.ceil(this.data.length * (sampleRate / this.sampleRate));
			var a = (value % 2 == 0 ? value : value + 1) - this.myPosition;
			var b = requestedLength - requestedSamplesIndex;
			var _g11 = a < b ? a : b;
			while(_g2 < _g11) {
				var i1 = _g2++;
				var index = requestedSamplesIndex++;
				var position = this.myPosition++;
				var even = position % 2 == 0;
				var factor = this.sampleRate / sampleRate;
				var value1;
				if(even) {
					position = position / 2 | 0;
					var pos = factor * position;
					var pos1 = Math.floor(pos);
					var pos2 = Math.floor(pos + 1);
					pos1 *= 2;
					pos2 *= 2;
					var minimum = 0;
					var maximum = this.data.length - 1;
					if(maximum % 2 == 0) {
						maximum = maximum;
					} else {
						--maximum;
					}
					var a1 = pos1 < minimum || pos1 > maximum ? 0 : this.data[pos1];
					var b1 = pos2 < minimum || pos2 > maximum ? 0 : this.data[pos2];
					var t = pos - Math.floor(pos);
					value1 = (1 - t) * a1 + t * b1;
				} else {
					position = position / 2 | 0;
					var pos3 = factor * position;
					var pos11 = Math.floor(pos3);
					var pos21 = Math.floor(pos3 + 1);
					pos11 = pos11 * 2 + 1;
					pos21 = pos21 * 2 + 1;
					var minimum1 = 1;
					var maximum1 = this.data.length - 1;
					if(maximum1 % 2 != 0) {
						maximum1 = maximum1;
					} else {
						--maximum1;
					}
					var a2 = pos11 < minimum1 || pos11 > maximum1 ? 0 : this.data[pos11];
					var b2 = pos21 < minimum1 || pos21 > maximum1 ? 0 : this.data[pos21];
					var t1 = pos3 - Math.floor(pos3);
					value1 = (1 - t1) * a2 + t1 * b2;
				}
				requestedSamples[index] = value1;
			}
			var value2 = Math.ceil(this.data.length * (sampleRate / this.sampleRate));
			if(this.myPosition >= (value2 % 2 == 0 ? value2 : value2 + 1)) {
				this.myPosition = 0;
				if(!this.looping) {
					this.stopped = true;
					break;
				}
			}
		}
		while(requestedSamplesIndex < requestedLength) requestedSamples[requestedSamplesIndex++] = 0;
	}
	,sample: function(position,sampleRate) {
		var even = position % 2 == 0;
		var factor = this.sampleRate / sampleRate;
		if(even) {
			position = position / 2 | 0;
			var pos = factor * position;
			var pos1 = Math.floor(pos);
			var pos2 = Math.floor(pos + 1);
			pos1 *= 2;
			pos2 *= 2;
			var minimum = 0;
			var maximum = this.data.length - 1;
			if(maximum % 2 == 0) {
				maximum = maximum;
			} else {
				--maximum;
			}
			var a = pos1 < minimum || pos1 > maximum ? 0 : this.data[pos1];
			var b = pos2 < minimum || pos2 > maximum ? 0 : this.data[pos2];
			var t = pos - Math.floor(pos);
			return (1 - t) * a + t * b;
		} else {
			position = position / 2 | 0;
			var pos3 = factor * position;
			var pos11 = Math.floor(pos3);
			var pos21 = Math.floor(pos3 + 1);
			pos11 = pos11 * 2 + 1;
			pos21 = pos21 * 2 + 1;
			var minimum1 = 1;
			var maximum1 = this.data.length - 1;
			if(maximum1 % 2 != 0) {
				maximum1 = maximum1;
			} else {
				--maximum1;
			}
			var a1 = pos11 < minimum1 || pos11 > maximum1 ? 0 : this.data[pos11];
			var b1 = pos21 < minimum1 || pos21 > maximum1 ? 0 : this.data[pos21];
			var t1 = pos3 - Math.floor(pos3);
			return (1 - t1) * a1 + t1 * b1;
		}
	}
	,lerp: function(v0,v1,t) {
		return (1 - t) * v0 + t * v1;
	}
	,sampleLength: function(sampleRate) {
		var value = Math.ceil(this.data.length * (sampleRate / this.sampleRate));
		if(value % 2 == 0) {
			return value;
		} else {
			return value + 1;
		}
	}
	,play: function() {
		this.paused = false;
		this.stopped = false;
		kha_audio2_Audio1._playAgain(this);
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.myPosition = 0;
		this.stopped = true;
	}
	,get_length: function() {
		return this.data.length / this.sampleRate / 2;
	}
	,get_position: function() {
		return this.myPosition / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,set_position: function(value) {
		var pos = Math.round(value * kha_audio2_Audio.samplesPerSecond * 2.0);
		if(pos % 2 == 0) {
			pos = pos;
		} else {
			++pos;
		}
		var value1 = Math.ceil(this.data.length * (kha_audio2_Audio.samplesPerSecond / this.sampleRate));
		var b = value1 % 2 == 0 ? value1 : value1 + 1;
		var a = pos < b ? pos : b;
		this.myPosition = a > 0 ? a : 0;
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_audio2_ResamplingAudioChannel
});
var kha_audio2_StreamChannel = function(data,loop) {
	this.paused = false;
	this.atend = false;
	this.myVolume = 1;
	this.loop = loop;
	this.reader = kha_audio2_ogg_vorbis_Reader.openFromBytes(data);
};
$hxClasses["kha.audio2.StreamChannel"] = kha_audio2_StreamChannel;
kha_audio2_StreamChannel.__name__ = "kha.audio2.StreamChannel";
kha_audio2_StreamChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_StreamChannel.prototype = {
	reader: null
	,atend: null
	,loop: null
	,myVolume: null
	,paused: null
	,nextSamples: function(samples,length,sampleRate) {
		if(this.paused) {
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				samples[i] = 0;
			}
			return;
		}
		var count = this.reader.read(samples,length / 2 | 0,2,sampleRate,true) * 2;
		if(count < length) {
			if(this.loop) {
				this.reader.set_currentMillisecond(0);
			} else {
				this.atend = true;
			}
			var _g2 = count;
			var _g11 = length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				samples[i1] = 0;
			}
		}
	}
	,play: function() {
		this.paused = false;
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.atend = true;
	}
	,length: null
	,get_length: function() {
		return this.reader.get_totalMillisecond() / 1000.0;
	}
	,get_position: function() {
		return this.reader.get_currentMillisecond() / 1000.0;
	}
	,set_position: function(value) {
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,finished: null
	,get_finished: function() {
		return this.atend;
	}
	,__class__: kha_audio2_StreamChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_ogg_tools_Crc32 = function() { };
$hxClasses["kha.audio2.ogg.tools.Crc32"] = kha_audio2_ogg_tools_Crc32;
kha_audio2_ogg_tools_Crc32.__name__ = "kha.audio2.ogg.tools.Crc32";
kha_audio2_ogg_tools_Crc32.init = function() {
	if(kha_audio2_ogg_tools_Crc32.table != null) {
		return;
	}
	var this1 = new Array(256);
	kha_audio2_ogg_tools_Crc32.table = this1;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		var s = i << 24;
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		kha_audio2_ogg_tools_Crc32.table[i] = s;
	}
};
kha_audio2_ogg_tools_Crc32.update = function(crc,byte) {
	return crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[byte ^ crc >>> 24];
};
var kha_audio2_ogg_tools_MathTools = function() { };
$hxClasses["kha.audio2.ogg.tools.MathTools"] = kha_audio2_ogg_tools_MathTools;
kha_audio2_ogg_tools_MathTools.__name__ = "kha.audio2.ogg.tools.MathTools";
kha_audio2_ogg_tools_MathTools.ilog = function(n) {
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	if(n < 16384) {
		if(n < 16) {
			return log2_4[n];
		} else if(n < 512) {
			return 5 + log2_4[n >> 5];
		} else {
			return 10 + log2_4[n >> 10];
		}
	} else if(n < 16777216) {
		if(n < 524288) {
			return 15 + log2_4[n >> 15];
		} else {
			return 20 + log2_4[n >> 20];
		}
	} else if(n < 536870912) {
		return 25 + log2_4[n >> 25];
	} else if(n < -2147483648) {
		return 30 + log2_4[n >> 30];
	} else {
		return 0;
	}
};
var kha_audio2_ogg_tools_Mdct = function() { };
$hxClasses["kha.audio2.ogg.tools.Mdct"] = kha_audio2_ogg_tools_Mdct;
kha_audio2_ogg_tools_Mdct.__name__ = "kha.audio2.ogg.tools.Mdct";
kha_audio2_ogg_tools_Mdct.inverseTransform = function(buffer,n,a,b,c,bitReverse) {
	var n2 = n >> 1;
	var n4 = n >> 2;
	var n8 = n >> 3;
	var this1 = new Array(n2);
	var buf2 = this1;
	var dOffset = n2 - 2;
	var aaOffset = 0;
	var eOffset = 0;
	var eStopOffset = n2;
	while(eOffset != eStopOffset) {
		buf2[dOffset + 1] = buffer[eOffset] * a[aaOffset] - buffer[eOffset + 2] * a[aaOffset + 1];
		buf2[dOffset] = buffer[eOffset] * a[aaOffset + 1] + buffer[eOffset + 2] * a[aaOffset];
		dOffset -= 2;
		aaOffset += 2;
		eOffset += 4;
	}
	eOffset = n2 - 3;
	while(dOffset >= 0) {
		buf2[dOffset + 1] = -buffer[eOffset + 2] * a[aaOffset] - -buffer[eOffset] * a[aaOffset + 1];
		buf2[dOffset] = -buffer[eOffset + 2] * a[aaOffset + 1] + -buffer[eOffset] * a[aaOffset];
		dOffset -= 2;
		aaOffset += 2;
		eOffset -= 4;
	}
	var u = buffer;
	var v = buf2;
	var aaOffset1 = n2 - 8;
	var eOffset0 = n4;
	var eOffset1 = 0;
	var dOffset0 = n4;
	var dOffset1 = 0;
	while(aaOffset1 >= 0) {
		var v41_21 = v[eOffset0 + 1] - v[eOffset1 + 1];
		var v40_20 = v[eOffset0] - v[eOffset1];
		u[dOffset0 + 1] = v[eOffset0 + 1] + v[eOffset1 + 1];
		u[dOffset0] = v[eOffset0] + v[eOffset1];
		u[dOffset1 + 1] = v41_21 * a[aaOffset1 + 4] - v40_20 * a[aaOffset1 + 5];
		u[dOffset1] = v40_20 * a[aaOffset1 + 4] + v41_21 * a[aaOffset1 + 5];
		v41_21 = v[eOffset0 + 3] - v[eOffset1 + 3];
		v40_20 = v[eOffset0 + 2] - v[eOffset1 + 2];
		u[dOffset0 + 3] = v[eOffset0 + 3] + v[eOffset1 + 3];
		u[dOffset0 + 2] = v[eOffset0 + 2] + v[eOffset1 + 2];
		u[dOffset1 + 3] = v41_21 * a[aaOffset1] - v40_20 * a[aaOffset1 + 1];
		u[dOffset1 + 2] = v40_20 * a[aaOffset1] + v41_21 * a[aaOffset1 + 1];
		aaOffset1 -= 8;
		dOffset0 += 4;
		dOffset1 += 4;
		eOffset0 += 4;
		eOffset1 += 4;
	}
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
	var i_off = n2 - 1 - n4 * 0;
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + -(n >> 3);
	var aOffset = 0;
	var i = (n >> 4 >> 2) + 1;
	while(--i > 0) {
		var k00_20 = u[eeOffset0] - u[eeOffset2];
		var k01_21 = u[eeOffset0 + (-1)] - u[eeOffset2 + (-1)];
		var _g = eeOffset0;
		var _g1 = u;
		_g1[_g] = _g1[_g] + u[eeOffset2];
		var _g2 = eeOffset0 + (-1);
		var _g11 = u;
		_g11[_g2] = _g11[_g2] + u[eeOffset2 + (-1)];
		u[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + (-2)] - u[eeOffset2 + (-2)];
		k01_21 = u[eeOffset0 + (-3)] - u[eeOffset2 + (-3)];
		var _g3 = eeOffset0 + (-2);
		var _g12 = u;
		_g12[_g3] = _g12[_g3] + u[eeOffset2 + (-2)];
		var _g4 = eeOffset0 + (-3);
		var _g13 = u;
		_g13[_g4] = _g13[_g4] + u[eeOffset2 + (-3)];
		u[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + (-4)] - u[eeOffset2 + (-4)];
		k01_21 = u[eeOffset0 + (-5)] - u[eeOffset2 + (-5)];
		var _g5 = eeOffset0 + (-4);
		var _g14 = u;
		_g14[_g5] = _g14[_g5] + u[eeOffset2 + (-4)];
		var _g6 = eeOffset0 + (-5);
		var _g15 = u;
		_g15[_g6] = _g15[_g6] + u[eeOffset2 + (-5)];
		u[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = u[eeOffset0 + (-6)] - u[eeOffset2 + (-6)];
		k01_21 = u[eeOffset0 + (-7)] - u[eeOffset2 + (-7)];
		var _g7 = eeOffset0 + (-6);
		var _g16 = u;
		_g16[_g7] = _g16[_g7] + u[eeOffset2 + (-6)];
		var _g8 = eeOffset0 + (-7);
		var _g17 = u;
		_g17[_g8] = _g17[_g8] + u[eeOffset2 + (-7)];
		u[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		u[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		eeOffset0 -= 8;
		eeOffset2 -= 8;
	}
	var i_off1 = n2 - 1 - n4;
	var eeOffset01 = i_off1;
	var eeOffset21 = i_off1 + -(n >> 3);
	var aOffset1 = 0;
	var i1 = (n >> 4 >> 2) + 1;
	while(--i1 > 0) {
		var k00_201 = u[eeOffset01] - u[eeOffset21];
		var k01_211 = u[eeOffset01 + (-1)] - u[eeOffset21 + (-1)];
		var _g9 = eeOffset01;
		var _g18 = u;
		_g18[_g9] = _g18[_g9] + u[eeOffset21];
		var _g10 = eeOffset01 + (-1);
		var _g19 = u;
		_g19[_g10] = _g19[_g10] + u[eeOffset21 + (-1)];
		u[eeOffset21] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		u[eeOffset21 + (-1)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		k00_201 = u[eeOffset01 + (-2)] - u[eeOffset21 + (-2)];
		k01_211 = u[eeOffset01 + (-3)] - u[eeOffset21 + (-3)];
		var _g20 = eeOffset01 + (-2);
		var _g110 = u;
		_g110[_g20] = _g110[_g20] + u[eeOffset21 + (-2)];
		var _g21 = eeOffset01 + (-3);
		var _g111 = u;
		_g111[_g21] = _g111[_g21] + u[eeOffset21 + (-3)];
		u[eeOffset21 + (-2)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		u[eeOffset21 + (-3)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		k00_201 = u[eeOffset01 + (-4)] - u[eeOffset21 + (-4)];
		k01_211 = u[eeOffset01 + (-5)] - u[eeOffset21 + (-5)];
		var _g22 = eeOffset01 + (-4);
		var _g112 = u;
		_g112[_g22] = _g112[_g22] + u[eeOffset21 + (-4)];
		var _g23 = eeOffset01 + (-5);
		var _g113 = u;
		_g113[_g23] = _g113[_g23] + u[eeOffset21 + (-5)];
		u[eeOffset21 + (-4)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		u[eeOffset21 + (-5)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		k00_201 = u[eeOffset01 + (-6)] - u[eeOffset21 + (-6)];
		k01_211 = u[eeOffset01 + (-7)] - u[eeOffset21 + (-7)];
		var _g24 = eeOffset01 + (-6);
		var _g114 = u;
		_g114[_g24] = _g114[_g24] + u[eeOffset21 + (-6)];
		var _g25 = eeOffset01 + (-7);
		var _g115 = u;
		_g115[_g25] = _g115[_g25] + u[eeOffset21 + (-7)];
		u[eeOffset21 + (-6)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		u[eeOffset21 + (-7)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		eeOffset01 -= 8;
		eeOffset21 -= 8;
	}
	var d0 = n2 - 1 - n8 * 0;
	var aOffset2 = 0;
	var eOffset01 = d0;
	var eOffset2 = d0 + -(n >> 4);
	var i2 = (n >> 5 >> 2) + 1;
	while(--i2 > 0) {
		var k00_202 = u[eOffset01] - u[eOffset2];
		var k01_212 = u[eOffset01 + (-1)] - u[eOffset2 + (-1)];
		var _g26 = eOffset01;
		var _g116 = u;
		_g116[_g26] = _g116[_g26] + u[eOffset2];
		var _g27 = eOffset01 + (-1);
		var _g117 = u;
		_g117[_g27] = _g117[_g27] + u[eOffset2 + (-1)];
		u[eOffset2] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		u[eOffset2 + (-1)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		aOffset2 += 16;
		k00_202 = u[eOffset01 + (-2)] - u[eOffset2 + (-2)];
		k01_212 = u[eOffset01 + (-3)] - u[eOffset2 + (-3)];
		var _g28 = eOffset01 + (-2);
		var _g118 = u;
		_g118[_g28] = _g118[_g28] + u[eOffset2 + (-2)];
		var _g29 = eOffset01 + (-3);
		var _g119 = u;
		_g119[_g29] = _g119[_g29] + u[eOffset2 + (-3)];
		u[eOffset2 + (-2)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		u[eOffset2 + (-3)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		aOffset2 += 16;
		k00_202 = u[eOffset01 + (-4)] - u[eOffset2 + (-4)];
		k01_212 = u[eOffset01 + (-5)] - u[eOffset2 + (-5)];
		var _g30 = eOffset01 + (-4);
		var _g120 = u;
		_g120[_g30] = _g120[_g30] + u[eOffset2 + (-4)];
		var _g31 = eOffset01 + (-5);
		var _g121 = u;
		_g121[_g31] = _g121[_g31] + u[eOffset2 + (-5)];
		u[eOffset2 + (-4)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		u[eOffset2 + (-5)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		aOffset2 += 16;
		k00_202 = u[eOffset01 + (-6)] - u[eOffset2 + (-6)];
		k01_212 = u[eOffset01 + (-7)] - u[eOffset2 + (-7)];
		var _g32 = eOffset01 + (-6);
		var _g122 = u;
		_g122[_g32] = _g122[_g32] + u[eOffset2 + (-6)];
		var _g33 = eOffset01 + (-7);
		var _g123 = u;
		_g123[_g33] = _g123[_g33] + u[eOffset2 + (-7)];
		u[eOffset2 + (-6)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		u[eOffset2 + (-7)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		eOffset01 -= 8;
		eOffset2 -= 8;
		aOffset2 += 16;
	}
	var d01 = n2 - 1 - n8;
	var aOffset3 = 0;
	var eOffset02 = d01;
	var eOffset21 = d01 + -(n >> 4);
	var i3 = (n >> 5 >> 2) + 1;
	while(--i3 > 0) {
		var k00_203 = u[eOffset02] - u[eOffset21];
		var k01_213 = u[eOffset02 + (-1)] - u[eOffset21 + (-1)];
		var _g34 = eOffset02;
		var _g124 = u;
		_g124[_g34] = _g124[_g34] + u[eOffset21];
		var _g35 = eOffset02 + (-1);
		var _g125 = u;
		_g125[_g35] = _g125[_g35] + u[eOffset21 + (-1)];
		u[eOffset21] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		u[eOffset21 + (-1)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		aOffset3 += 16;
		k00_203 = u[eOffset02 + (-2)] - u[eOffset21 + (-2)];
		k01_213 = u[eOffset02 + (-3)] - u[eOffset21 + (-3)];
		var _g36 = eOffset02 + (-2);
		var _g126 = u;
		_g126[_g36] = _g126[_g36] + u[eOffset21 + (-2)];
		var _g37 = eOffset02 + (-3);
		var _g127 = u;
		_g127[_g37] = _g127[_g37] + u[eOffset21 + (-3)];
		u[eOffset21 + (-2)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		u[eOffset21 + (-3)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		aOffset3 += 16;
		k00_203 = u[eOffset02 + (-4)] - u[eOffset21 + (-4)];
		k01_213 = u[eOffset02 + (-5)] - u[eOffset21 + (-5)];
		var _g38 = eOffset02 + (-4);
		var _g128 = u;
		_g128[_g38] = _g128[_g38] + u[eOffset21 + (-4)];
		var _g39 = eOffset02 + (-5);
		var _g129 = u;
		_g129[_g39] = _g129[_g39] + u[eOffset21 + (-5)];
		u[eOffset21 + (-4)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		u[eOffset21 + (-5)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		aOffset3 += 16;
		k00_203 = u[eOffset02 + (-6)] - u[eOffset21 + (-6)];
		k01_213 = u[eOffset02 + (-7)] - u[eOffset21 + (-7)];
		var _g40 = eOffset02 + (-6);
		var _g130 = u;
		_g130[_g40] = _g130[_g40] + u[eOffset21 + (-6)];
		var _g41 = eOffset02 + (-7);
		var _g131 = u;
		_g131[_g41] = _g131[_g41] + u[eOffset21 + (-7)];
		u[eOffset21 + (-6)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		u[eOffset21 + (-7)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		eOffset02 -= 8;
		eOffset21 -= 8;
		aOffset3 += 16;
	}
	var d02 = n2 - 1 - n8 * 2;
	var aOffset4 = 0;
	var eOffset03 = d02;
	var eOffset22 = d02 + -(n >> 4);
	var i4 = (n >> 5 >> 2) + 1;
	while(--i4 > 0) {
		var k00_204 = u[eOffset03] - u[eOffset22];
		var k01_214 = u[eOffset03 + (-1)] - u[eOffset22 + (-1)];
		var _g42 = eOffset03;
		var _g132 = u;
		_g132[_g42] = _g132[_g42] + u[eOffset22];
		var _g43 = eOffset03 + (-1);
		var _g133 = u;
		_g133[_g43] = _g133[_g43] + u[eOffset22 + (-1)];
		u[eOffset22] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		u[eOffset22 + (-1)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		aOffset4 += 16;
		k00_204 = u[eOffset03 + (-2)] - u[eOffset22 + (-2)];
		k01_214 = u[eOffset03 + (-3)] - u[eOffset22 + (-3)];
		var _g44 = eOffset03 + (-2);
		var _g134 = u;
		_g134[_g44] = _g134[_g44] + u[eOffset22 + (-2)];
		var _g45 = eOffset03 + (-3);
		var _g135 = u;
		_g135[_g45] = _g135[_g45] + u[eOffset22 + (-3)];
		u[eOffset22 + (-2)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		u[eOffset22 + (-3)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		aOffset4 += 16;
		k00_204 = u[eOffset03 + (-4)] - u[eOffset22 + (-4)];
		k01_214 = u[eOffset03 + (-5)] - u[eOffset22 + (-5)];
		var _g46 = eOffset03 + (-4);
		var _g136 = u;
		_g136[_g46] = _g136[_g46] + u[eOffset22 + (-4)];
		var _g47 = eOffset03 + (-5);
		var _g137 = u;
		_g137[_g47] = _g137[_g47] + u[eOffset22 + (-5)];
		u[eOffset22 + (-4)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		u[eOffset22 + (-5)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		aOffset4 += 16;
		k00_204 = u[eOffset03 + (-6)] - u[eOffset22 + (-6)];
		k01_214 = u[eOffset03 + (-7)] - u[eOffset22 + (-7)];
		var _g48 = eOffset03 + (-6);
		var _g138 = u;
		_g138[_g48] = _g138[_g48] + u[eOffset22 + (-6)];
		var _g49 = eOffset03 + (-7);
		var _g139 = u;
		_g139[_g49] = _g139[_g49] + u[eOffset22 + (-7)];
		u[eOffset22 + (-6)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		u[eOffset22 + (-7)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		eOffset03 -= 8;
		eOffset22 -= 8;
		aOffset4 += 16;
	}
	var d03 = n2 - 1 - n8 * 3;
	var aOffset5 = 0;
	var eOffset04 = d03;
	var eOffset23 = d03 + -(n >> 4);
	var i5 = (n >> 5 >> 2) + 1;
	while(--i5 > 0) {
		var k00_205 = u[eOffset04] - u[eOffset23];
		var k01_215 = u[eOffset04 + (-1)] - u[eOffset23 + (-1)];
		var _g50 = eOffset04;
		var _g140 = u;
		_g140[_g50] = _g140[_g50] + u[eOffset23];
		var _g51 = eOffset04 + (-1);
		var _g141 = u;
		_g141[_g51] = _g141[_g51] + u[eOffset23 + (-1)];
		u[eOffset23] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		u[eOffset23 + (-1)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		aOffset5 += 16;
		k00_205 = u[eOffset04 + (-2)] - u[eOffset23 + (-2)];
		k01_215 = u[eOffset04 + (-3)] - u[eOffset23 + (-3)];
		var _g52 = eOffset04 + (-2);
		var _g142 = u;
		_g142[_g52] = _g142[_g52] + u[eOffset23 + (-2)];
		var _g53 = eOffset04 + (-3);
		var _g143 = u;
		_g143[_g53] = _g143[_g53] + u[eOffset23 + (-3)];
		u[eOffset23 + (-2)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		u[eOffset23 + (-3)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		aOffset5 += 16;
		k00_205 = u[eOffset04 + (-4)] - u[eOffset23 + (-4)];
		k01_215 = u[eOffset04 + (-5)] - u[eOffset23 + (-5)];
		var _g54 = eOffset04 + (-4);
		var _g144 = u;
		_g144[_g54] = _g144[_g54] + u[eOffset23 + (-4)];
		var _g55 = eOffset04 + (-5);
		var _g145 = u;
		_g145[_g55] = _g145[_g55] + u[eOffset23 + (-5)];
		u[eOffset23 + (-4)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		u[eOffset23 + (-5)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		aOffset5 += 16;
		k00_205 = u[eOffset04 + (-6)] - u[eOffset23 + (-6)];
		k01_215 = u[eOffset04 + (-7)] - u[eOffset23 + (-7)];
		var _g56 = eOffset04 + (-6);
		var _g146 = u;
		_g146[_g56] = _g146[_g56] + u[eOffset23 + (-6)];
		var _g57 = eOffset04 + (-7);
		var _g147 = u;
		_g147[_g57] = _g147[_g57] + u[eOffset23 + (-7)];
		u[eOffset23 + (-6)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		u[eOffset23 + (-7)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		eOffset04 -= 8;
		eOffset23 -= 8;
		aOffset5 += 16;
	}
	var _g58 = 2;
	var _g148 = ld - 3 >> 1;
	while(_g58 < _g148) {
		var l = _g58++;
		var k0 = n >> l + 2;
		var k0_2 = k0 >> 1;
		var lim = 1 << l + 1;
		var _g59 = 0;
		var _g149 = lim;
		while(_g59 < _g149) {
			var i6 = _g59++;
			var d04 = n2 - 1 - k0 * i6;
			var k1 = 1 << l + 3;
			var aOffset6 = 0;
			var eOffset05 = d04;
			var eOffset24 = d04 + -k0_2;
			var i7 = (n >> l + 4 >> 2) + 1;
			while(--i7 > 0) {
				var k00_206 = u[eOffset05] - u[eOffset24];
				var k01_216 = u[eOffset05 + (-1)] - u[eOffset24 + (-1)];
				var _g60 = eOffset05;
				var _g150 = u;
				_g150[_g60] = _g150[_g60] + u[eOffset24];
				var _g61 = eOffset05 + (-1);
				var _g151 = u;
				_g151[_g61] = _g151[_g61] + u[eOffset24 + (-1)];
				u[eOffset24] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				u[eOffset24 + (-1)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				aOffset6 += k1;
				k00_206 = u[eOffset05 + (-2)] - u[eOffset24 + (-2)];
				k01_216 = u[eOffset05 + (-3)] - u[eOffset24 + (-3)];
				var _g62 = eOffset05 + (-2);
				var _g152 = u;
				_g152[_g62] = _g152[_g62] + u[eOffset24 + (-2)];
				var _g63 = eOffset05 + (-3);
				var _g153 = u;
				_g153[_g63] = _g153[_g63] + u[eOffset24 + (-3)];
				u[eOffset24 + (-2)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				u[eOffset24 + (-3)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				aOffset6 += k1;
				k00_206 = u[eOffset05 + (-4)] - u[eOffset24 + (-4)];
				k01_216 = u[eOffset05 + (-5)] - u[eOffset24 + (-5)];
				var _g64 = eOffset05 + (-4);
				var _g154 = u;
				_g154[_g64] = _g154[_g64] + u[eOffset24 + (-4)];
				var _g65 = eOffset05 + (-5);
				var _g155 = u;
				_g155[_g65] = _g155[_g65] + u[eOffset24 + (-5)];
				u[eOffset24 + (-4)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				u[eOffset24 + (-5)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				aOffset6 += k1;
				k00_206 = u[eOffset05 + (-6)] - u[eOffset24 + (-6)];
				k01_216 = u[eOffset05 + (-7)] - u[eOffset24 + (-7)];
				var _g66 = eOffset05 + (-6);
				var _g156 = u;
				_g156[_g66] = _g156[_g66] + u[eOffset24 + (-6)];
				var _g67 = eOffset05 + (-7);
				var _g157 = u;
				_g157[_g67] = _g157[_g67] + u[eOffset24 + (-7)];
				u[eOffset24 + (-6)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				u[eOffset24 + (-7)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				eOffset05 -= 8;
				eOffset24 -= 8;
				aOffset6 += k1;
			}
		}
	}
	var _g210 = ld - 3 >> 1;
	var _g310 = ld - 6;
	while(_g210 < _g310) {
		var l1 = _g210++;
		var k01 = n >> l1 + 2;
		var k11 = 1 << l1 + 3;
		var k0_21 = k01 >> 1;
		var rlim = n >> l1 + 6;
		var lim1 = 1 << l1 + 1;
		var aOffset7 = 0;
		var i_off2 = n2 - 1;
		var r = rlim + 1;
		while(--r > 0) {
			var A0 = a[aOffset7];
			var A1 = a[aOffset7 + 1];
			var A2 = a[aOffset7 + k11];
			var A3 = a[aOffset7 + k11 + 1];
			var A4 = a[aOffset7 + k11 * 2];
			var A5 = a[aOffset7 + k11 * 2 + 1];
			var A6 = a[aOffset7 + k11 * 3];
			var A7 = a[aOffset7 + k11 * 3 + 1];
			var eeOffset02 = i_off2;
			var eeOffset22 = i_off2 + -k0_21;
			var i8 = lim1 + 1;
			while(--i8 > 0) {
				var k00 = u[eeOffset02] - u[eeOffset22];
				var k111 = u[eeOffset02 + (-1)] - u[eeOffset22 + (-1)];
				u[eeOffset02] = u[eeOffset02] + u[eeOffset22];
				u[eeOffset02 + (-1)] = u[eeOffset02 + (-1)] + u[eeOffset22 + (-1)];
				u[eeOffset22] = k00 * A0 - k111 * A1;
				u[eeOffset22 + (-1)] = k111 * A0 + k00 * A1;
				k00 = u[eeOffset02 + (-2)] - u[eeOffset22 + (-2)];
				k111 = u[eeOffset02 + (-3)] - u[eeOffset22 + (-3)];
				u[eeOffset02 + (-2)] = u[eeOffset02 + (-2)] + u[eeOffset22 + (-2)];
				u[eeOffset02 + (-3)] = u[eeOffset02 + (-3)] + u[eeOffset22 + (-3)];
				u[eeOffset22 + (-2)] = k00 * A2 - k111 * A3;
				u[eeOffset22 + (-3)] = k111 * A2 + k00 * A3;
				k00 = u[eeOffset02 + (-4)] - u[eeOffset22 + (-4)];
				k111 = u[eeOffset02 + (-5)] - u[eeOffset22 + (-5)];
				u[eeOffset02 + (-4)] = u[eeOffset02 + (-4)] + u[eeOffset22 + (-4)];
				u[eeOffset02 + (-5)] = u[eeOffset02 + (-5)] + u[eeOffset22 + (-5)];
				u[eeOffset22 + (-4)] = k00 * A4 - k111 * A5;
				u[eeOffset22 + (-5)] = k111 * A4 + k00 * A5;
				k00 = u[eeOffset02 + (-6)] - u[eeOffset22 + (-6)];
				k111 = u[eeOffset02 + (-7)] - u[eeOffset22 + (-7)];
				u[eeOffset02 + (-6)] = u[eeOffset02 + (-6)] + u[eeOffset22 + (-6)];
				u[eeOffset02 + (-7)] = u[eeOffset02 + (-7)] + u[eeOffset22 + (-7)];
				u[eeOffset22 + (-6)] = k00 * A6 - k111 * A7;
				u[eeOffset22 + (-7)] = k111 * A6 + k00 * A7;
				eeOffset02 -= k01;
				eeOffset22 -= k01;
			}
			aOffset7 += k11 * 4;
			i_off2 -= 8;
		}
	}
	var i_off3 = n2 - 1;
	var A21 = a[n >> 3];
	var zOffset = i_off3;
	var baseOffset = i_off3 - 16 * (n >> 5);
	while(zOffset > baseOffset) {
		var t0 = u[zOffset];
		var t1 = u[zOffset + (-8)];
		u[zOffset + (-8)] = t0 - t1;
		u[zOffset] = t0 + t1;
		t0 = u[zOffset + (-1)];
		t1 = u[zOffset + (-9)];
		u[zOffset + (-9)] = t0 - t1;
		u[zOffset + (-1)] = t0 + t1;
		t0 = u[zOffset + (-2)];
		t1 = u[zOffset + (-10)];
		var k001 = t0 - t1;
		u[zOffset + (-2)] = t0 + t1;
		t0 = u[zOffset + (-3)];
		t1 = u[zOffset + (-11)];
		var k112 = t0 - t1;
		u[zOffset + (-3)] = t0 + t1;
		u[zOffset + (-10)] = (k001 + k112) * A21;
		u[zOffset + (-11)] = (k112 - k001) * A21;
		t0 = u[zOffset + (-4)];
		t1 = u[zOffset + (-12)];
		k001 = t1 - t0;
		u[zOffset + (-4)] = t0 + t1;
		t0 = u[zOffset + (-5)];
		t1 = u[zOffset + (-13)];
		k112 = t0 - t1;
		u[zOffset + (-5)] = t0 + t1;
		u[zOffset + (-12)] = k112;
		u[zOffset + (-13)] = k001;
		t0 = u[zOffset + (-6)];
		t1 = u[zOffset + (-14)];
		k001 = t1 - t0;
		u[zOffset + (-6)] = t0 + t1;
		t0 = u[zOffset + (-7)];
		t1 = u[zOffset + (-15)];
		k112 = t0 - t1;
		u[zOffset + (-7)] = t0 + t1;
		u[zOffset + (-14)] = (k001 + k112) * A21;
		u[zOffset + (-15)] = (k001 - k112) * A21;
		var t01 = u[zOffset];
		var t11 = u[zOffset + (-4)];
		var k002 = t01 - t11;
		var y0 = t01 + t11;
		t01 = u[zOffset + (-2)];
		t11 = u[zOffset + (-6)];
		var y2 = t01 + t11;
		var k22 = t01 - t11;
		u[zOffset] = y0 + y2;
		u[zOffset + (-2)] = y0 - y2;
		var k33 = u[zOffset + (-3)] - u[zOffset + (-7)];
		u[zOffset + (-4)] = k002 + k33;
		u[zOffset + (-6)] = k002 - k33;
		t01 = u[zOffset + (-1)];
		t11 = u[zOffset + (-5)];
		var k113 = t01 - t11;
		var y1 = t01 + t11;
		var y3 = u[zOffset + (-3)] + u[zOffset + (-7)];
		u[zOffset + (-1)] = y1 + y3;
		u[zOffset + (-3)] = y1 - y3;
		u[zOffset + (-5)] = k113 - k22;
		u[zOffset + (-7)] = k113 + k22;
		var zOffset1 = zOffset - 8;
		var t02 = u[zOffset1];
		var t12 = u[zOffset1 + (-4)];
		var k003 = t02 - t12;
		var y01 = t02 + t12;
		t02 = u[zOffset1 + (-2)];
		t12 = u[zOffset1 + (-6)];
		var y21 = t02 + t12;
		var k221 = t02 - t12;
		u[zOffset1] = y01 + y21;
		u[zOffset1 + (-2)] = y01 - y21;
		var k331 = u[zOffset1 + (-3)] - u[zOffset1 + (-7)];
		u[zOffset1 + (-4)] = k003 + k331;
		u[zOffset1 + (-6)] = k003 - k331;
		t02 = u[zOffset1 + (-1)];
		t12 = u[zOffset1 + (-5)];
		var k114 = t02 - t12;
		var y11 = t02 + t12;
		var y31 = u[zOffset1 + (-3)] + u[zOffset1 + (-7)];
		u[zOffset1 + (-1)] = y11 + y31;
		u[zOffset1 + (-3)] = y11 - y31;
		u[zOffset1 + (-5)] = k114 - k221;
		u[zOffset1 + (-7)] = k114 + k221;
		zOffset -= 16;
	}
	var brOffset = 0;
	var dOffset01 = n4 - 4;
	var dOffset11 = n2 - 4;
	while(dOffset01 >= 0) {
		var k4 = bitReverse[brOffset];
		v[dOffset11 + 3] = u[k4];
		v[dOffset11 + 2] = u[k4 + 1];
		v[dOffset01 + 3] = u[k4 + 2];
		v[dOffset01 + 2] = u[k4 + 3];
		k4 = bitReverse[brOffset + 1];
		v[dOffset11 + 1] = u[k4];
		v[dOffset11] = u[k4 + 1];
		v[dOffset01 + 1] = u[k4 + 2];
		v[dOffset01] = u[k4 + 3];
		dOffset01 -= 4;
		dOffset11 -= 4;
		brOffset += 2;
	}
	var cOffset = 0;
	var dOffset2 = 0;
	var eOffset3 = n2 - 4;
	while(dOffset2 < eOffset3) {
		var a02 = v[dOffset2] - v[eOffset3 + 2];
		var a11 = v[dOffset2 + 1] + v[eOffset3 + 3];
		var b0 = c[cOffset + 1] * a02 + c[cOffset] * a11;
		var b1 = c[cOffset + 1] * a11 - c[cOffset] * a02;
		var b2 = v[dOffset2] + v[eOffset3 + 2];
		var b3 = v[dOffset2 + 1] - v[eOffset3 + 3];
		v[dOffset2] = b2 + b0;
		v[dOffset2 + 1] = b3 + b1;
		v[eOffset3 + 2] = b2 - b0;
		v[eOffset3 + 3] = b1 - b3;
		a02 = v[dOffset2 + 2] - v[eOffset3];
		a11 = v[dOffset2 + 3] + v[eOffset3 + 1];
		b0 = c[cOffset + 3] * a02 + c[cOffset + 2] * a11;
		b1 = c[cOffset + 3] * a11 - c[cOffset + 2] * a02;
		b2 = v[dOffset2 + 2] + v[eOffset3];
		b3 = v[dOffset2 + 3] - v[eOffset3 + 1];
		v[dOffset2 + 2] = b2 + b0;
		v[dOffset2 + 3] = b3 + b1;
		v[eOffset3] = b2 - b0;
		v[eOffset3 + 1] = b1 - b3;
		cOffset += 4;
		dOffset2 += 4;
		eOffset3 -= 4;
	}
	var bOffset = n2 - 8;
	var eOffset4 = n2 - 8;
	var dOffset02 = 0;
	var dOffset12 = n2 - 4;
	var dOffset21 = n2;
	var dOffset3 = n - 4;
	while(eOffset4 >= 0) {
		var p3 = buf2[eOffset4 + 6] * b[bOffset + 7] - buf2[eOffset4 + 7] * b[bOffset + 6];
		var p2 = -buf2[eOffset4 + 6] * b[bOffset + 6] - buf2[eOffset4 + 7] * b[bOffset + 7];
		buffer[dOffset02] = p3;
		buffer[dOffset12 + 3] = -p3;
		buffer[dOffset21] = p2;
		buffer[dOffset3 + 3] = p2;
		var p1 = buf2[eOffset4 + 4] * b[bOffset + 5] - buf2[eOffset4 + 5] * b[bOffset + 4];
		var p0 = -buf2[eOffset4 + 4] * b[bOffset + 4] - buf2[eOffset4 + 5] * b[bOffset + 5];
		buffer[dOffset02 + 1] = p1;
		buffer[dOffset12 + 2] = -p1;
		buffer[dOffset21 + 1] = p0;
		buffer[dOffset3 + 2] = p0;
		p3 = buf2[eOffset4 + 2] * b[bOffset + 3] - buf2[eOffset4 + 3] * b[bOffset + 2];
		p2 = -buf2[eOffset4 + 2] * b[bOffset + 2] - buf2[eOffset4 + 3] * b[bOffset + 3];
		buffer[dOffset02 + 2] = p3;
		buffer[dOffset12 + 1] = -p3;
		buffer[dOffset21 + 2] = p2;
		buffer[dOffset3 + 1] = p2;
		p1 = buf2[eOffset4] * b[bOffset + 1] - buf2[eOffset4 + 1] * b[bOffset];
		p0 = -buf2[eOffset4] * b[bOffset] - buf2[eOffset4 + 1] * b[bOffset + 1];
		buffer[dOffset02 + 3] = p1;
		buffer[dOffset12] = -p1;
		buffer[dOffset21 + 3] = p0;
		buffer[dOffset3] = p0;
		bOffset -= 8;
		eOffset4 -= 8;
		dOffset02 += 4;
		dOffset21 += 4;
		dOffset12 -= 4;
		dOffset3 -= 4;
	}
};
kha_audio2_ogg_tools_Mdct.step3Iter0Loop = function(n,e,i_off,k_off,a) {
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + k_off;
	var aOffset = 0;
	var i = (n >> 2) + 1;
	while(--i > 0) {
		var k00_20 = e[eeOffset0] - e[eeOffset2];
		var k01_21 = e[eeOffset0 + (-1)] - e[eeOffset2 + (-1)];
		var _g = eeOffset0;
		var _g1 = e;
		_g1[_g] = _g1[_g] + e[eeOffset2];
		var _g2 = eeOffset0 + (-1);
		var _g11 = e;
		_g11[_g2] = _g11[_g2] + e[eeOffset2 + (-1)];
		e[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + (-2)] - e[eeOffset2 + (-2)];
		k01_21 = e[eeOffset0 + (-3)] - e[eeOffset2 + (-3)];
		var _g3 = eeOffset0 + (-2);
		var _g12 = e;
		_g12[_g3] = _g12[_g3] + e[eeOffset2 + (-2)];
		var _g4 = eeOffset0 + (-3);
		var _g13 = e;
		_g13[_g4] = _g13[_g4] + e[eeOffset2 + (-3)];
		e[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + (-4)] - e[eeOffset2 + (-4)];
		k01_21 = e[eeOffset0 + (-5)] - e[eeOffset2 + (-5)];
		var _g5 = eeOffset0 + (-4);
		var _g14 = e;
		_g14[_g5] = _g14[_g5] + e[eeOffset2 + (-4)];
		var _g6 = eeOffset0 + (-5);
		var _g15 = e;
		_g15[_g6] = _g15[_g6] + e[eeOffset2 + (-5)];
		e[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + (-6)] - e[eeOffset2 + (-6)];
		k01_21 = e[eeOffset0 + (-7)] - e[eeOffset2 + (-7)];
		var _g7 = eeOffset0 + (-6);
		var _g16 = e;
		_g16[_g7] = _g16[_g7] + e[eeOffset2 + (-6)];
		var _g8 = eeOffset0 + (-7);
		var _g17 = e;
		_g17[_g8] = _g17[_g8] + e[eeOffset2 + (-7)];
		e[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		eeOffset0 -= 8;
		eeOffset2 -= 8;
	}
};
kha_audio2_ogg_tools_Mdct.step3InnerRLoop = function(lim,e,d0,k_off,a,k1) {
	var aOffset = 0;
	var eOffset0 = d0;
	var eOffset2 = d0 + k_off;
	var i = (lim >> 2) + 1;
	while(--i > 0) {
		var k00_20 = e[eOffset0] - e[eOffset2];
		var k01_21 = e[eOffset0 + (-1)] - e[eOffset2 + (-1)];
		var _g = eOffset0;
		var _g1 = e;
		_g1[_g] = _g1[_g] + e[eOffset2];
		var _g2 = eOffset0 + (-1);
		var _g11 = e;
		_g11[_g2] = _g11[_g2] + e[eOffset2 + (-1)];
		e[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + (-2)] - e[eOffset2 + (-2)];
		k01_21 = e[eOffset0 + (-3)] - e[eOffset2 + (-3)];
		var _g3 = eOffset0 + (-2);
		var _g12 = e;
		_g12[_g3] = _g12[_g3] + e[eOffset2 + (-2)];
		var _g4 = eOffset0 + (-3);
		var _g13 = e;
		_g13[_g4] = _g13[_g4] + e[eOffset2 + (-3)];
		e[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + (-4)] - e[eOffset2 + (-4)];
		k01_21 = e[eOffset0 + (-5)] - e[eOffset2 + (-5)];
		var _g5 = eOffset0 + (-4);
		var _g14 = e;
		_g14[_g5] = _g14[_g5] + e[eOffset2 + (-4)];
		var _g6 = eOffset0 + (-5);
		var _g15 = e;
		_g15[_g6] = _g15[_g6] + e[eOffset2 + (-5)];
		e[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + (-6)] - e[eOffset2 + (-6)];
		k01_21 = e[eOffset0 + (-7)] - e[eOffset2 + (-7)];
		var _g7 = eOffset0 + (-6);
		var _g16 = e;
		_g16[_g7] = _g16[_g7] + e[eOffset2 + (-6)];
		var _g8 = eOffset0 + (-7);
		var _g17 = e;
		_g17[_g8] = _g17[_g8] + e[eOffset2 + (-7)];
		e[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		eOffset0 -= 8;
		eOffset2 -= 8;
		aOffset += k1;
	}
};
kha_audio2_ogg_tools_Mdct.step3InnerSLoop = function(n,e,i_off,k_off,a,aOffset0,aOffset1,k0) {
	var A0 = a[aOffset0];
	var A1 = a[aOffset0 + 1];
	var A2 = a[aOffset0 + aOffset1];
	var A3 = a[aOffset0 + aOffset1 + 1];
	var A4 = a[aOffset0 + aOffset1 * 2];
	var A5 = a[aOffset0 + aOffset1 * 2 + 1];
	var A6 = a[aOffset0 + aOffset1 * 3];
	var A7 = a[aOffset0 + aOffset1 * 3 + 1];
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + k_off;
	var i = n + 1;
	while(--i > 0) {
		var k00 = e[eeOffset0] - e[eeOffset2];
		var k11 = e[eeOffset0 + (-1)] - e[eeOffset2 + (-1)];
		e[eeOffset0] = e[eeOffset0] + e[eeOffset2];
		e[eeOffset0 + (-1)] = e[eeOffset0 + (-1)] + e[eeOffset2 + (-1)];
		e[eeOffset2] = k00 * A0 - k11 * A1;
		e[eeOffset2 + (-1)] = k11 * A0 + k00 * A1;
		k00 = e[eeOffset0 + (-2)] - e[eeOffset2 + (-2)];
		k11 = e[eeOffset0 + (-3)] - e[eeOffset2 + (-3)];
		e[eeOffset0 + (-2)] = e[eeOffset0 + (-2)] + e[eeOffset2 + (-2)];
		e[eeOffset0 + (-3)] = e[eeOffset0 + (-3)] + e[eeOffset2 + (-3)];
		e[eeOffset2 + (-2)] = k00 * A2 - k11 * A3;
		e[eeOffset2 + (-3)] = k11 * A2 + k00 * A3;
		k00 = e[eeOffset0 + (-4)] - e[eeOffset2 + (-4)];
		k11 = e[eeOffset0 + (-5)] - e[eeOffset2 + (-5)];
		e[eeOffset0 + (-4)] = e[eeOffset0 + (-4)] + e[eeOffset2 + (-4)];
		e[eeOffset0 + (-5)] = e[eeOffset0 + (-5)] + e[eeOffset2 + (-5)];
		e[eeOffset2 + (-4)] = k00 * A4 - k11 * A5;
		e[eeOffset2 + (-5)] = k11 * A4 + k00 * A5;
		k00 = e[eeOffset0 + (-6)] - e[eeOffset2 + (-6)];
		k11 = e[eeOffset0 + (-7)] - e[eeOffset2 + (-7)];
		e[eeOffset0 + (-6)] = e[eeOffset0 + (-6)] + e[eeOffset2 + (-6)];
		e[eeOffset0 + (-7)] = e[eeOffset0 + (-7)] + e[eeOffset2 + (-7)];
		e[eeOffset2 + (-6)] = k00 * A6 - k11 * A7;
		e[eeOffset2 + (-7)] = k11 * A6 + k00 * A7;
		eeOffset0 -= k0;
		eeOffset2 -= k0;
	}
};
kha_audio2_ogg_tools_Mdct.iter54 = function(e,zOffset) {
	var t0 = e[zOffset];
	var t1 = e[zOffset + (-4)];
	var k00 = t0 - t1;
	var y0 = t0 + t1;
	t0 = e[zOffset + (-2)];
	t1 = e[zOffset + (-6)];
	var y2 = t0 + t1;
	var k22 = t0 - t1;
	e[zOffset] = y0 + y2;
	e[zOffset + (-2)] = y0 - y2;
	var k33 = e[zOffset + (-3)] - e[zOffset + (-7)];
	e[zOffset + (-4)] = k00 + k33;
	e[zOffset + (-6)] = k00 - k33;
	t0 = e[zOffset + (-1)];
	t1 = e[zOffset + (-5)];
	var k11 = t0 - t1;
	var y1 = t0 + t1;
	var y3 = e[zOffset + (-3)] + e[zOffset + (-7)];
	e[zOffset + (-1)] = y1 + y3;
	e[zOffset + (-3)] = y1 - y3;
	e[zOffset + (-5)] = k11 - k22;
	e[zOffset + (-7)] = k11 + k22;
};
kha_audio2_ogg_tools_Mdct.step3InnerSLoopLd654 = function(n,e,i_off,a,baseN) {
	var A2 = a[baseN >> 3];
	var zOffset = i_off;
	var baseOffset = i_off - 16 * n;
	while(zOffset > baseOffset) {
		var t0 = e[zOffset];
		var t1 = e[zOffset + (-8)];
		e[zOffset + (-8)] = t0 - t1;
		e[zOffset] = t0 + t1;
		t0 = e[zOffset + (-1)];
		t1 = e[zOffset + (-9)];
		e[zOffset + (-9)] = t0 - t1;
		e[zOffset + (-1)] = t0 + t1;
		t0 = e[zOffset + (-2)];
		t1 = e[zOffset + (-10)];
		var k00 = t0 - t1;
		e[zOffset + (-2)] = t0 + t1;
		t0 = e[zOffset + (-3)];
		t1 = e[zOffset + (-11)];
		var k11 = t0 - t1;
		e[zOffset + (-3)] = t0 + t1;
		e[zOffset + (-10)] = (k00 + k11) * A2;
		e[zOffset + (-11)] = (k11 - k00) * A2;
		t0 = e[zOffset + (-4)];
		t1 = e[zOffset + (-12)];
		k00 = t1 - t0;
		e[zOffset + (-4)] = t0 + t1;
		t0 = e[zOffset + (-5)];
		t1 = e[zOffset + (-13)];
		k11 = t0 - t1;
		e[zOffset + (-5)] = t0 + t1;
		e[zOffset + (-12)] = k11;
		e[zOffset + (-13)] = k00;
		t0 = e[zOffset + (-6)];
		t1 = e[zOffset + (-14)];
		k00 = t1 - t0;
		e[zOffset + (-6)] = t0 + t1;
		t0 = e[zOffset + (-7)];
		t1 = e[zOffset + (-15)];
		k11 = t0 - t1;
		e[zOffset + (-7)] = t0 + t1;
		e[zOffset + (-14)] = (k00 + k11) * A2;
		e[zOffset + (-15)] = (k00 - k11) * A2;
		var t01 = e[zOffset];
		var t11 = e[zOffset + (-4)];
		var k001 = t01 - t11;
		var y0 = t01 + t11;
		t01 = e[zOffset + (-2)];
		t11 = e[zOffset + (-6)];
		var y2 = t01 + t11;
		var k22 = t01 - t11;
		e[zOffset] = y0 + y2;
		e[zOffset + (-2)] = y0 - y2;
		var k33 = e[zOffset + (-3)] - e[zOffset + (-7)];
		e[zOffset + (-4)] = k001 + k33;
		e[zOffset + (-6)] = k001 - k33;
		t01 = e[zOffset + (-1)];
		t11 = e[zOffset + (-5)];
		var k111 = t01 - t11;
		var y1 = t01 + t11;
		var y3 = e[zOffset + (-3)] + e[zOffset + (-7)];
		e[zOffset + (-1)] = y1 + y3;
		e[zOffset + (-3)] = y1 - y3;
		e[zOffset + (-5)] = k111 - k22;
		e[zOffset + (-7)] = k111 + k22;
		var zOffset1 = zOffset - 8;
		var t02 = e[zOffset1];
		var t12 = e[zOffset1 + (-4)];
		var k002 = t02 - t12;
		var y01 = t02 + t12;
		t02 = e[zOffset1 + (-2)];
		t12 = e[zOffset1 + (-6)];
		var y21 = t02 + t12;
		var k221 = t02 - t12;
		e[zOffset1] = y01 + y21;
		e[zOffset1 + (-2)] = y01 - y21;
		var k331 = e[zOffset1 + (-3)] - e[zOffset1 + (-7)];
		e[zOffset1 + (-4)] = k002 + k331;
		e[zOffset1 + (-6)] = k002 - k331;
		t02 = e[zOffset1 + (-1)];
		t12 = e[zOffset1 + (-5)];
		var k112 = t02 - t12;
		var y11 = t02 + t12;
		var y31 = e[zOffset1 + (-3)] + e[zOffset1 + (-7)];
		e[zOffset1 + (-1)] = y11 + y31;
		e[zOffset1 + (-3)] = y11 - y31;
		e[zOffset1 + (-5)] = k112 - k221;
		e[zOffset1 + (-7)] = k112 + k221;
		zOffset -= 16;
	}
};
var kha_audio2_ogg_vorbis_Reader = function(input,seekFunc,inputLength) {
	this.seekFunc = seekFunc;
	this.inputLength = inputLength;
	this.decoder = kha_audio2_ogg_vorbis_VorbisDecoder.start(input);
	this.decoder.setupSampleNumber(seekFunc,inputLength);
	this.loopStart = this.get_header().comment.get_loopStart();
	this.loopLength = this.get_header().comment.get_loopLength();
};
$hxClasses["kha.audio2.ogg.vorbis.Reader"] = kha_audio2_ogg_vorbis_Reader;
kha_audio2_ogg_vorbis_Reader.__name__ = "kha.audio2.ogg.vorbis.Reader";
kha_audio2_ogg_vorbis_Reader.openFromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	var bytes1 = input;
	return new kha_audio2_ogg_vorbis_Reader(input,function(pos) {
		kha_audio2_ogg_vorbis_Reader.seekBytes(bytes1,pos);
	},bytes.length);
};
kha_audio2_ogg_vorbis_Reader.seekBytes = function(bytes,pos) {
	bytes.set_position(pos);
};
kha_audio2_ogg_vorbis_Reader.readAll = function(bytes,output,useFloat) {
	if(useFloat == null) {
		useFloat = false;
	}
	var input = new haxe_io_BytesInput(bytes);
	var decoder = kha_audio2_ogg_vorbis_VorbisDecoder.start(input);
	var bytes1 = input;
	decoder.setupSampleNumber(function(pos) {
		kha_audio2_ogg_vorbis_Reader.seekBytes(bytes1,pos);
	},bytes.length);
	var header = decoder.header;
	var count = 0;
	var bufferSize = 4096;
	var this1 = new Float32Array(bufferSize * header.channel);
	var buffer = this1;
	while(true) {
		var n = decoder.read(buffer,bufferSize,header.channel,header.sampleRate,useFloat);
		var _g = 0;
		var _g1 = n * header.channel;
		while(_g < _g1) {
			var i = _g++;
			output.writeFloat(buffer[i]);
		}
		if(n == 0) {
			break;
		}
		count += n;
	}
	return decoder.header;
};
kha_audio2_ogg_vorbis_Reader.prototype = {
	decoder: null
	,get_header: function() {
		return this.decoder.header;
	}
	,get_totalSample: function() {
		return this.decoder.totalSample;
	}
	,get_totalMillisecond: function() {
		var samples = this.decoder.totalSample;
		var b = this.get_header().sampleRate;
		return _$UInt_UInt_$Impl_$.toFloat(samples) / _$UInt_UInt_$Impl_$.toFloat(b) * 1000;
	}
	,get_currentSample: function() {
		return this.decoder.currentSample;
	}
	,set_currentSample: function(value) {
		this.decoder.seek(this.seekFunc,this.inputLength,value);
		return this.decoder.currentSample;
	}
	,get_currentMillisecond: function() {
		var samples = this.get_currentSample();
		var b = this.get_header().sampleRate;
		return _$UInt_UInt_$Impl_$.toFloat(samples) / _$UInt_UInt_$Impl_$.toFloat(b) * 1000;
	}
	,set_currentMillisecond: function(value) {
		this.set_currentSample(Math.floor(_$UInt_UInt_$Impl_$.toFloat(this.get_header().sampleRate) * (value / 1000)));
		return this.get_currentMillisecond();
	}
	,loopStart: null
	,loopLength: null
	,seekFunc: null
	,inputLength: null
	,read: function(output,samples,channels,sampleRate,useFloat) {
		if(useFloat == null) {
			useFloat = false;
		}
		this.decoder.ensurePosition(this.seekFunc);
		if(samples == null) {
			samples = this.decoder.totalSample;
		}
		if(channels == null) {
			channels = this.get_header().channel;
		}
		if(sampleRate == null) {
			sampleRate = this.get_header().sampleRate;
		}
		return this.decoder.read(output,samples,channels,sampleRate,useFloat);
	}
	,clone: function() {
		var reader = Object.create(kha_audio2_ogg_vorbis_Reader.prototype);
		reader.seekFunc = this.seekFunc;
		reader.inputLength = this.inputLength;
		reader.decoder = this.decoder.clone(this.seekFunc);
		reader.loopStart = this.loopStart;
		reader.loopLength = this.loopLength;
		return reader;
	}
	,sampleToMillisecond: function(samples) {
		var b = this.get_header().sampleRate;
		return _$UInt_UInt_$Impl_$.toFloat(samples) / _$UInt_UInt_$Impl_$.toFloat(b) * 1000;
	}
	,millisecondToSample: function(millseconds) {
		return Math.floor(_$UInt_UInt_$Impl_$.toFloat(this.get_header().sampleRate) * (millseconds / 1000));
	}
	,__class__: kha_audio2_ogg_vorbis_Reader
	,__properties__: {set_currentMillisecond:"set_currentMillisecond",get_currentMillisecond:"get_currentMillisecond",set_currentSample:"set_currentSample",get_currentSample:"get_currentSample",get_totalMillisecond:"get_totalMillisecond",get_totalSample:"get_totalSample",get_header:"get_header"}
};
var kha_audio2_ogg_vorbis_VorbisDecodeState = function(input) {
	this.nextSeg = 0;
	this.firstDecode = false;
	this.bytesInSeg = 0;
	this.validBits = 0;
	this.input = input;
	this.inputPosition = 0;
	this.page = new kha_audio2_ogg_vorbis_data_Page();
	kha_audio2_ogg_tools_Crc32.init();
};
$hxClasses["kha.audio2.ogg.vorbis.VorbisDecodeState"] = kha_audio2_ogg_vorbis_VorbisDecodeState;
kha_audio2_ogg_vorbis_VorbisDecodeState.__name__ = "kha.audio2.ogg.vorbis.VorbisDecodeState";
kha_audio2_ogg_vorbis_VorbisDecodeState.prototype = {
	page: null
	,eof: null
	,pFirst: null
	,pLast: null
	,validBits: null
	,inputPosition: null
	,input: null
	,discardSamplesDeferred: null
	,segments: null
	,bytesInSeg: null
	,channelBuffers: null
	,channelBufferStart: null
	,channelBufferEnd: null
	,currentSample: null
	,previousWindow: null
	,previousLength: null
	,finalY: null
	,firstDecode: null
	,nextSeg: null
	,acc: null
	,lastSeg: null
	,lastSegWhich: null
	,endSegWithKnownLoc: null
	,knownLocForPacket: null
	,error: null
	,currentLoc: null
	,currentLocValid: null
	,firstAudioPageOffset: null
	,setup: function(loc0,loc1) {
		this.inputPosition += 1;
		var segmentCount = this.input.readByte();
		this.inputPosition += segmentCount;
		var this1 = new Array(segmentCount);
		var vec = this1;
		var _g = 0;
		var _g1 = segmentCount;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		this.segments = vec;
		this.endSegWithKnownLoc = -2;
		if(loc0 != -1 || loc1 != -1) {
			var i1 = segmentCount - 1;
			while(i1 >= 0) {
				if(this.segments[i1] < 255) {
					break;
				}
				if(i1 >= 0) {
					this.endSegWithKnownLoc = i1;
					this.knownLocForPacket = loc0;
				}
				--i1;
			}
		}
		if(this.firstDecode) {
			var i2 = 0;
			var len = 0;
			var p = new kha_audio2_ogg_vorbis_data_ProbedPage();
			var _g2 = 0;
			var _g11 = segmentCount;
			while(_g2 < _g11) {
				var i3 = _g2++;
				len += this.segments[i3];
			}
			len += 27 + segmentCount;
			p.pageStart = this.firstAudioPageOffset;
			p.pageEnd = p.pageStart + len;
			p.firstDecodedSample = 0;
			p.lastDecodedSample = loc0;
			this.pFirst = p;
		}
		this.nextSeg = 0;
	}
	,clone: function(seekFunc) {
		var state = Object.create(kha_audio2_ogg_vorbis_VorbisDecodeState.prototype);
		seekFunc(this.inputPosition);
		state.input = this.input;
		state.eof = this.eof;
		state.validBits = this.validBits;
		state.discardSamplesDeferred = this.discardSamplesDeferred;
		state.firstDecode = this.firstDecode;
		state.nextSeg = this.nextSeg;
		state.bytesInSeg = this.bytesInSeg;
		state.acc = state.acc;
		state.lastSeg = this.lastSeg;
		state.lastSegWhich = this.lastSegWhich;
		state.currentLoc = this.currentLoc;
		state.currentLocValid = this.currentLocValid;
		state.inputPosition = this.inputPosition;
		state.firstAudioPageOffset = this.firstAudioPageOffset;
		state.error = this.error;
		state.segments = this.segments;
		state.pFirst = this.pFirst;
		state.pLast = this.pLast;
		state.page = this.page.clone();
		return state;
	}
	,next: function() {
		if(this.lastSeg) {
			return 0;
		}
		if(this.nextSeg == -1) {
			this.lastSegWhich = this.segments.length - 1;
			try {
				this.page.start(this);
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				if(((e1) instanceof kha_audio2_ogg_vorbis_data_ReaderError)) {
					this.lastSeg = true;
					this.error = e1;
					return 0;
				} else {
					throw e;
				}
			}
			if((this.page.flag & 1) == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 171, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "next"}));
			}
		}
		var len = this.segments[this.nextSeg++];
		if(len < 255) {
			this.lastSeg = true;
			this.lastSegWhich = this.nextSeg - 1;
		}
		if(this.nextSeg >= this.segments.length) {
			this.nextSeg = -1;
		}
		this.bytesInSeg = len;
		return len;
	}
	,startPacket: function() {
		while(this.nextSeg == -1) {
			this.page.start(this);
			if((this.page.flag & 1) != 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 193, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "startPacket"}));
			}
		}
		this.lastSeg = false;
		this.validBits = 0;
		this.bytesInSeg = 0;
	}
	,maybeStartPacket: function() {
		if(this.nextSeg == -1) {
			var eof = false;
			var x;
			try {
				this.inputPosition += 1;
				x = this.input.readByte();
			} catch( e ) {
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				if(((e1) instanceof haxe_io_Eof)) {
					var e2 = e1;
					eof = true;
					x = 0;
				} else {
					throw e;
				}
			}
			if(eof) {
				return false;
			}
			var tmp;
			var tmp1;
			var tmp2;
			if(x == 79) {
				this.inputPosition += 1;
				tmp2 = this.input.readByte() != 103;
			} else {
				tmp2 = true;
			}
			if(!tmp2) {
				this.inputPosition += 1;
				tmp1 = this.input.readByte() != 103;
			} else {
				tmp1 = true;
			}
			if(!tmp1) {
				this.inputPosition += 1;
				tmp = this.input.readByte() != 83;
			} else {
				tmp = true;
			}
			if(tmp) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 218, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "maybeStartPacket"}));
			}
			this.page.startWithoutCapturePattern(this);
		}
		this.startPacket();
		return true;
	}
	,readBits: function(n) {
		if(this.validBits < 0) {
			return 0;
		} else if(this.validBits < n) {
			if(n > 24) {
				return this.readBits(24) + (this.readBits(n - 24) << 24);
			} else {
				if(this.validBits == 0) {
					this.acc = 0;
				}
				while(true) {
					if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
						this.validBits = -1;
						break;
					} else {
						this.bytesInSeg--;
						this.inputPosition += 1;
						this.acc = this.acc + (this.input.readByte() << this.validBits);
						this.validBits += 8;
					}
					if(!(this.validBits < n)) {
						break;
					}
				}
				if(this.validBits < 0) {
					return 0;
				} else {
					var z = this.acc & (1 << n) - 1;
					this.acc = this.acc >>> n;
					this.validBits -= n;
					return z;
				}
			}
		} else {
			var z1 = this.acc & (1 << n) - 1;
			this.acc = this.acc >>> n;
			this.validBits -= n;
			return z1;
		}
	}
	,readPacketRaw: function() {
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			return -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			return this.input.readByte();
		}
	}
	,readPacket: function() {
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		return x;
	}
	,flushPacket: function() {
		while(this.bytesInSeg != 0 || !this.lastSeg && this.next() != 0) {
			this.bytesInSeg--;
			this.inputPosition += 1;
			this.input.readByte();
		}
	}
	,vorbisValidate: function() {
		var header = new haxe_io_Bytes(new ArrayBuffer(6));
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		header.b[0] = x;
		var x1;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x1 = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x1 = this.input.readByte();
		}
		this.validBits = 0;
		header.b[1] = x1;
		var x2;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x2 = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x2 = this.input.readByte();
		}
		this.validBits = 0;
		header.b[2] = x2;
		var x3;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x3 = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x3 = this.input.readByte();
		}
		this.validBits = 0;
		header.b[3] = x3;
		var x4;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x4 = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x4 = this.input.readByte();
		}
		this.validBits = 0;
		header.b[4] = x4;
		var x5;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x5 = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x5 = this.input.readByte();
		}
		this.validBits = 0;
		header.b[5] = x5;
		if(header.toString() != "vorbis") {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 301, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
		}
	}
	,firstPageValidate: function() {
		if(this.segments.length != 1) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"segmentCount",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 308, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
		if(this.segments[0] != 30) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 311, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
	}
	,startFirstDecode: function() {
		this.firstAudioPageOffset = this.inputPosition;
		this.firstDecode = true;
	}
	,capturePattern: function() {
		var tmp;
		var tmp1;
		var tmp2;
		this.inputPosition += 1;
		if(this.input.readByte() == 79) {
			this.inputPosition += 1;
			tmp2 = this.input.readByte() != 103;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			this.inputPosition += 1;
			tmp1 = this.input.readByte() != 103;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			this.inputPosition += 1;
			tmp = this.input.readByte() != 83;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 324, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "capturePattern"}));
		}
	}
	,skip: function(len) {
		this.inputPosition += len;
		var this1 = new Array(len);
		var vec = this1;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
	}
	,prepHuffman: function() {
		if(this.validBits <= 24) {
			if(this.validBits == 0) {
				this.acc = 0;
			}
			while(true) {
				if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
					return;
				} else {
					this.bytesInSeg--;
					this.inputPosition += 1;
					this.acc = this.acc + (this.input.readByte() << this.validBits);
					this.validBits += 8;
				}
				if(!(this.validBits <= 24)) {
					break;
				}
			}
		}
	}
	,decode: function(c) {
		if(this.validBits < 10) {
			this.prepHuffman();
		}
		var i = c.fastHuffman[this.acc & 1023];
		var val;
		if(i >= 0) {
			var l = c.codewordLengths[i];
			this.acc = this.acc >>> l;
			this.validBits -= l;
			if(this.validBits < 0) {
				this.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = this.decodeScalarRaw(c);
		}
		if(c.sparse) {
			val = c.sortedValues[val];
		}
		return val;
	}
	,decodeRaw: function(c) {
		if(this.validBits < 10) {
			this.prepHuffman();
		}
		var i = c.fastHuffman[this.acc & 1023];
		if(i >= 0) {
			var l = c.codewordLengths[i];
			this.acc = this.acc >>> l;
			this.validBits -= l;
			if(this.validBits < 0) {
				this.validBits = 0;
				return -1;
			} else {
				return i;
			}
		} else {
			return this.decodeScalarRaw(c);
		}
	}
	,isLastByte: function() {
		if(this.bytesInSeg == 0) {
			return this.lastSeg;
		} else {
			return false;
		}
	}
	,finishDecodePacket: function(previousLength,n,r) {
		var left = r.left.start;
		var currentLocValid = false;
		var n2 = n >> 1;
		if(this.firstDecode) {
			this.currentLoc = -n2;
			this.discardSamplesDeferred = n - r.right.end;
			currentLocValid = true;
			this.firstDecode = false;
		} else if(this.discardSamplesDeferred != 0) {
			r.left.start += this.discardSamplesDeferred;
			left = r.left.start;
			this.discardSamplesDeferred = 0;
		} else {
			var tmp = previousLength == 0 && currentLocValid;
		}
		if(this.lastSegWhich == this.endSegWithKnownLoc) {
			if(currentLocValid && (this.page.flag & 4) != 0) {
				var currentEnd = this.knownLocForPacket - (n - r.right.end);
				if(currentEnd < this.currentLoc + r.right.end) {
					var len = currentEnd < this.currentLoc ? 0 : currentEnd - this.currentLoc;
					len += r.left.start;
					this.currentLoc += len;
					return { len : len, left : left, right : r.right.start};
				}
			}
			this.currentLoc = this.knownLocForPacket - (n2 - r.left.start);
			currentLocValid = true;
		}
		if(currentLocValid) {
			this.currentLoc += r.right.start - r.left.start;
		}
		return { len : r.right.end, left : left, right : r.right.start};
	}
	,readInt32: function() {
		this.inputPosition += 4;
		return this.input.readInt32();
	}
	,readByte: function() {
		this.inputPosition += 1;
		return this.input.readByte();
	}
	,read: function(n) {
		this.inputPosition += n;
		var this1 = new Array(n);
		var vec = this1;
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		return vec;
	}
	,readBytes: function(n) {
		this.inputPosition += n;
		return this.input.read(n);
	}
	,readString: function(n) {
		this.inputPosition += n;
		return this.input.readString(n);
	}
	,getSampleNumber: function(seekFunc,inputLength) {
		var restoreOffset = this.inputPosition;
		var previousSafe = _$UInt_UInt_$Impl_$.gte(inputLength,65536) && _$UInt_UInt_$Impl_$.gte(inputLength - 65536,this.firstAudioPageOffset) ? inputLength - 65536 : this.firstAudioPageOffset;
		seekFunc(this.inputPosition = previousSafe);
		var end = 0;
		var last = false;
		var _g = this.findPage(seekFunc,inputLength);
		switch(_g._hx_index) {
		case 0:
			var l = _g.last;
			var e = _g.end;
			end = e;
			last = l;
			break;
		case 1:
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 519, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		var lastPageLoc = this.inputPosition;
		_hx_loop1: while(!last) {
			seekFunc(this.inputPosition = end);
			var _g3 = this.findPage(seekFunc,inputLength);
			switch(_g3._hx_index) {
			case 0:
				var l1 = _g3.last;
				var e1 = _g3.end;
				end = e1;
				last = l1;
				break;
			case 1:
				break _hx_loop1;
			}
			previousSafe = lastPageLoc + 1;
			lastPageLoc = this.inputPosition;
		}
		seekFunc(this.inputPosition = lastPageLoc);
		this.inputPosition += 6;
		var this1 = new Array(6);
		var vec = this1;
		var _g1 = 0;
		var _g11 = 6;
		while(_g1 < _g11) {
			var i = _g1++;
			vec[i] = this.input.readByte();
		}
		var vorbisHeader = vec;
		this.inputPosition += 4;
		var lo = this.input.readInt32();
		this.inputPosition += 4;
		var hi = this.input.readInt32();
		if(lo == -1 && hi == -1 || hi > 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 553, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		this.pLast = new kha_audio2_ogg_vorbis_data_ProbedPage();
		this.pLast.pageStart = lastPageLoc;
		this.pLast.pageEnd = end;
		this.pLast.lastDecodedSample = lo;
		this.pLast.firstDecodedSample = null;
		this.pLast.afterPreviousPageStart = previousSafe;
		seekFunc(this.inputPosition = restoreOffset);
		return lo;
	}
	,forcePageResync: function() {
		this.nextSeg = -1;
	}
	,setInputOffset: function(seekFunc,n) {
		seekFunc(this.inputPosition = n);
	}
	,findPage: function(seekFunc,inputLength) {
		try {
			while(true) {
				this.inputPosition += 1;
				var n = this.input.readByte();
				if(n == 79) {
					var retryLoc = this.inputPosition;
					if(retryLoc - 25 > inputLength) {
						return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
					}
					var tmp;
					var tmp1;
					this.inputPosition += 1;
					if(this.input.readByte() == 103) {
						this.inputPosition += 1;
						tmp1 = this.input.readByte() != 103;
					} else {
						tmp1 = true;
					}
					if(!tmp1) {
						this.inputPosition += 1;
						tmp = this.input.readByte() != 83;
					} else {
						tmp = true;
					}
					if(tmp) {
						continue;
					}
					var this1 = new Array(27);
					var header = this1;
					header[0] = 79;
					header[1] = 103;
					header[2] = 103;
					header[3] = 83;
					this.inputPosition += 1;
					header[4] = this.input.readByte();
					this.inputPosition += 1;
					header[5] = this.input.readByte();
					this.inputPosition += 1;
					header[6] = this.input.readByte();
					this.inputPosition += 1;
					header[7] = this.input.readByte();
					this.inputPosition += 1;
					header[8] = this.input.readByte();
					this.inputPosition += 1;
					header[9] = this.input.readByte();
					this.inputPosition += 1;
					header[10] = this.input.readByte();
					this.inputPosition += 1;
					header[11] = this.input.readByte();
					this.inputPosition += 1;
					header[12] = this.input.readByte();
					this.inputPosition += 1;
					header[13] = this.input.readByte();
					this.inputPosition += 1;
					header[14] = this.input.readByte();
					this.inputPosition += 1;
					header[15] = this.input.readByte();
					this.inputPosition += 1;
					header[16] = this.input.readByte();
					this.inputPosition += 1;
					header[17] = this.input.readByte();
					this.inputPosition += 1;
					header[18] = this.input.readByte();
					this.inputPosition += 1;
					header[19] = this.input.readByte();
					this.inputPosition += 1;
					header[20] = this.input.readByte();
					this.inputPosition += 1;
					header[21] = this.input.readByte();
					this.inputPosition += 1;
					header[22] = this.input.readByte();
					this.inputPosition += 1;
					header[23] = this.input.readByte();
					this.inputPosition += 1;
					header[24] = this.input.readByte();
					this.inputPosition += 1;
					header[25] = this.input.readByte();
					this.inputPosition += 1;
					header[26] = this.input.readByte();
					if(header[4] != 0) {
						seekFunc(this.inputPosition = retryLoc);
						continue;
					}
					var goal = header[22] + (header[23] << 8) + (header[24] << 16) + (header[25] << 24);
					header[22] = 0;
					header[23] = 0;
					header[24] = 0;
					header[25] = 0;
					var crc = 0;
					var _g = 0;
					while(_g < 27) {
						var i = _g++;
						crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[header[i] ^ crc >>> 24];
					}
					var len = 0;
					try {
						var _g1 = 0;
						var _g2 = header[26];
						while(_g1 < _g2) {
							var i1 = _g1++;
							this.inputPosition += 1;
							var s = this.input.readByte();
							crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[s ^ crc >>> 24];
							len += s;
						}
						var _g3 = 0;
						var _g4 = len;
						while(_g3 < _g4) {
							var i2 = _g3++;
							this.inputPosition += 1;
							var byte = this.input.readByte();
							crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[byte ^ crc >>> 24];
						}
					} catch( e ) {
						var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
						if(((e1) instanceof haxe_io_Eof)) {
							var e2 = e1;
							return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
						} else {
							throw e;
						}
					}
					if(crc == goal) {
						var end = this.inputPosition;
						seekFunc(this.inputPosition = retryLoc - 1);
						return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.Found(end,(header[5] & 4) != 0);
					}
				}
			}
		} catch( e3 ) {
			var e4 = ((e3) instanceof js__$Boot_HaxeError) ? e3.val : e3;
			if(((e4) instanceof haxe_io_Eof)) {
				var e5 = e4;
				return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
			} else {
				throw e3;
			}
		}
	}
	,analyzePage: function(seekFunc,h) {
		var z = new kha_audio2_ogg_vorbis_data_ProbedPage();
		var this1 = new Array(255);
		var packetType = this1;
		z.pageStart = this.inputPosition;
		this.inputPosition += 27;
		var this2 = new Array(27);
		var vec = this2;
		var _g = 0;
		var _g1 = 27;
		while(_g < _g1) {
			var i = _g++;
			vec[i] = this.input.readByte();
		}
		var pageHeader = vec;
		var n = pageHeader[26];
		this.inputPosition += n;
		var this3 = new Array(n);
		var vec1 = this3;
		var _g2 = 0;
		var _g11 = n;
		while(_g2 < _g11) {
			var i1 = _g2++;
			vec1[i1] = this.input.readByte();
		}
		var lacing = vec1;
		var len = 0;
		var _g3 = 0;
		var _g12 = pageHeader[26];
		while(_g3 < _g12) {
			var i2 = _g3++;
			len += lacing[i2];
		}
		z.pageEnd = z.pageStart + 27 + pageHeader[26] + len;
		z.lastDecodedSample = pageHeader[6] + (pageHeader[7] << 8) + (pageHeader[8] << 16) + (pageHeader[9] << 16);
		if((pageHeader[5] & 4) != 0) {
			z.firstDecodedSample = null;
			seekFunc(this.inputPosition = z.pageStart);
			return z;
		}
		var numPacket = 0;
		var packetStart = (pageHeader[5] & 1) == 0;
		var modeCount = h.modes.length;
		var _g21 = 0;
		var _g31 = pageHeader[26];
		while(_g21 < _g31) {
			var i3 = _g21++;
			if(packetStart) {
				if(lacing[i3] == 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				this.inputPosition += 1;
				var n1 = this.input.readByte();
				if((n1 & 1) != 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				n1 >>= 1;
				var n2 = modeCount - 1;
				var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
				var b = n2 < 16384 ? n2 < 16 ? log2_4[n2] : n2 < 512 ? 5 + log2_4[n2 >> 5] : 10 + log2_4[n2 >> 10] : n2 < 16777216 ? n2 < 524288 ? 15 + log2_4[n2 >> 15] : 20 + log2_4[n2 >> 20] : n2 < 536870912 ? 25 + log2_4[n2 >> 25] : n2 < -2147483648 ? 30 + log2_4[n2 >> 30] : 0;
				n1 &= (1 << b) - 1;
				if(n1 >= modeCount) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				packetType[numPacket++] = h.modes[n1].blockflag;
				var len1 = lacing[i3] - 1;
				this.inputPosition += len1;
				var this4 = new Array(len1);
				var vec2 = this4;
				var _g4 = 0;
				var _g13 = len1;
				while(_g4 < _g13) {
					var i4 = _g4++;
					vec2[i4] = this.input.readByte();
				}
			} else {
				var len2 = lacing[i3];
				this.inputPosition += len2;
				var this5 = new Array(len2);
				var vec3 = this5;
				var _g5 = 0;
				var _g14 = len2;
				while(_g5 < _g14) {
					var i5 = _g5++;
					vec3[i5] = this.input.readByte();
				}
			}
			packetStart = lacing[i3] < 255;
		}
		var samples = 0;
		if(numPacket > 1) {
			samples += packetType[numPacket - 1] ? h.blocksize1 : h.blocksize0;
		}
		var i6 = numPacket - 2;
		while(i6 >= 1) {
			--i6;
			if(packetType[i6]) {
				if(packetType[i6 + 1]) {
					samples += h.blocksize1 >> 1;
				} else {
					samples += (h.blocksize1 - h.blocksize0 >> 2) + (h.blocksize0 >> 1);
				}
			} else {
				samples += h.blocksize0 >> 1;
			}
			--i6;
		}
		z.firstDecodedSample = z.lastDecodedSample - samples;
		seekFunc(this.inputPosition = z.pageStart);
		return z;
	}
	,decodeScalarRaw: function(c) {
		this.prepHuffman();
		var codewordLengths = c.codewordLengths;
		var codewords = c.codewords;
		var sortedCodewords = c.sortedCodewords;
		if(c.entries > 8 ? sortedCodewords != null : codewords != null) {
			var n = this.acc;
			n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
			n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
			n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
			n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
			var code = n >>> 16 | n << 16;
			var x = 0;
			var n1 = c.sortedEntries;
			while(n1 > 1) {
				var m = x + (n1 >> 1);
				if(_$UInt_UInt_$Impl_$.gte(code,sortedCodewords[m])) {
					x = m;
					n1 -= n1 >> 1;
				} else {
					n1 >>= 1;
				}
			}
			if(!c.sparse) {
				x = c.sortedValues[x];
			}
			var len = codewordLengths[x];
			if(this.validBits >= len) {
				this.acc = this.acc >>> len;
				this.validBits -= len;
				return x;
			}
			this.validBits = 0;
			return -1;
		}
		var _g = 0;
		var _g1 = c.entries;
		while(_g < _g1) {
			var i = _g++;
			var cl = codewordLengths[i];
			if(cl == 255) {
				continue;
			}
			if(codewords[i] == (this.acc & (1 << cl) - 1)) {
				if(this.validBits >= cl) {
					this.acc = this.acc >>> cl;
					this.validBits -= cl;
					return i;
				}
				this.validBits = 0;
				return -1;
			}
		}
		this.error = new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 847, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"});
		this.validBits = 0;
		return -1;
	}
	,__class__: kha_audio2_ogg_vorbis_VorbisDecodeState
};
var kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult = $hxEnums["kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult"] = { __ename__ : true, __constructs__ : ["Found","NotFound"]
	,Found: ($_=function(end,last) { return {_hx_index:0,end:end,last:last,__enum__:"kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult",toString:$estr}; },$_.__params__ = ["end","last"],$_)
	,NotFound: {_hx_index:1,__enum__:"kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult",toString:$estr}
};
var kha_audio2_ogg_vorbis_VorbisDecoder = function(header,decodeState) {
	this.header = header;
	this.decodeState = decodeState;
	this.totalSample = null;
	this.currentSample = 0;
	this.previousLength = 0;
	var this1 = new Array(header.channel);
	this.channelBuffers = this1;
	var this2 = new Array(header.channel);
	this.previousWindow = this2;
	var this3 = new Array(header.channel);
	this.finalY = this3;
	var _g = 0;
	var _g1 = header.channel;
	while(_g < _g1) {
		var i = _g++;
		var this4 = this.channelBuffers;
		var this5 = new Array(header.blocksize1);
		var vec = this5;
		this4[i] = vec;
		var this6 = this.previousWindow;
		var this7 = new Array(header.blocksize1 / 2 | 0);
		var vec1 = this7;
		this6[i] = vec1;
		this.finalY[i] = [];
	}
	var this8 = new Array(2);
	this.a = this8;
	var this9 = new Array(2);
	this.b = this9;
	var this10 = new Array(2);
	this.c = this10;
	var this11 = new Array(2);
	this.window = this11;
	var this12 = new Array(2);
	this.bitReverseData = this12;
	this.initBlocksize(0,header.blocksize0);
	this.initBlocksize(1,header.blocksize1);
};
$hxClasses["kha.audio2.ogg.vorbis.VorbisDecoder"] = kha_audio2_ogg_vorbis_VorbisDecoder;
kha_audio2_ogg_vorbis_VorbisDecoder.__name__ = "kha.audio2.ogg.vorbis.VorbisDecoder";
kha_audio2_ogg_vorbis_VorbisDecoder.start = function(input) {
	var decodeState = new kha_audio2_ogg_vorbis_VorbisDecodeState(input);
	var header = kha_audio2_ogg_vorbis_data_Header.read(decodeState);
	var decoder = new kha_audio2_ogg_vorbis_VorbisDecoder(header,decodeState);
	decodeState.startFirstDecode();
	decoder.pumpFirstFrame();
	return decoder;
};
kha_audio2_ogg_vorbis_VorbisDecoder.prototype = {
	previousWindow: null
	,previousLength: null
	,finalY: null
	,a: null
	,b: null
	,c: null
	,window: null
	,bitReverseData: null
	,channelBuffers: null
	,channelBufferStart: null
	,channelBufferEnd: null
	,header: null
	,currentSample: null
	,totalSample: null
	,decodeState: null
	,read: function(output,samples,channels,sampleRate,useFloat) {
		var b = this.header.sampleRate;
		if((_$UInt_UInt_$Impl_$.toFloat(sampleRate) % _$UInt_UInt_$Impl_$.toFloat(b) | 0) != 0) {
			var this1 = this.header.sampleRate;
			throw new js__$Boot_HaxeError("Unsupported sampleRate : can't convert " + Std.string(this1 == null ? null : _$UInt_UInt_$Impl_$.toFloat(this1)) + " to " + sampleRate);
		}
		if(channels % this.header.channel != 0) {
			throw new js__$Boot_HaxeError("Unsupported channels : can't convert " + this.header.channel + " to " + channels);
		}
		var b1 = this.header.sampleRate;
		var sampleRepeat = _$UInt_UInt_$Impl_$.toFloat(sampleRate) / _$UInt_UInt_$Impl_$.toFloat(b1) | 0;
		var channelRepeat = channels / this.header.channel | 0;
		var n = 0;
		var len = Math.floor(samples / sampleRepeat);
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		var index = 0;
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			var _g = this.channelBufferStart;
			var _g1 = this.channelBufferStart + k;
			while(_g < _g1) {
				var j = _g++;
				var _g2 = 0;
				var _g11 = sampleRepeat;
				while(_g2 < _g11) {
					var sr = _g2++;
					var _g3 = 0;
					var _g12 = this.header.channel;
					while(_g3 < _g12) {
						var i = _g3++;
						var _g4 = 0;
						var _g13 = channelRepeat;
						while(_g4 < _g13) {
							var cr = _g4++;
							var value = this.channelBuffers[i][j];
							if(value > 1) {
								value = 1;
							} else if(value < -1) {
								value = -1;
							}
							if(useFloat) {
								output[index] = value;
								++index;
							}
						}
					}
				}
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		var _g5 = n;
		var _g14 = len;
		while(_g5 < _g14) {
			var j1 = _g5++;
			var _g6 = 0;
			var _g15 = sampleRepeat;
			while(_g6 < _g15) {
				var sr1 = _g6++;
				var _g7 = 0;
				var _g16 = this.header.channel;
				while(_g7 < _g16) {
					var i1 = _g7++;
					var _g8 = 0;
					var _g17 = channelRepeat;
					while(_g8 < _g17) {
						var cr1 = _g8++;
						if(useFloat) {
							output[index] = 0;
							++index;
						}
					}
				}
			}
		}
		this.currentSample += len;
		return len * sampleRepeat;
	}
	,skipSamples: function(len) {
		var n = 0;
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		this.currentSample += len;
		return len;
	}
	,setupSampleNumber: function(seekFunc,inputLength) {
		if(this.totalSample == null) {
			this.totalSample = this.decodeState.getSampleNumber(seekFunc,inputLength);
		}
	}
	,seek: function(seekFunc,inputLength,sampleNumber) {
		if(this.currentSample == sampleNumber) {
			return;
		}
		if(this.totalSample == null) {
			this.setupSampleNumber(seekFunc,inputLength);
			if(this.totalSample == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 187, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
		if(sampleNumber < 0) {
			sampleNumber = 0;
		}
		var p0 = this.decodeState.pFirst;
		var p1 = this.decodeState.pLast;
		if(sampleNumber >= p1.lastDecodedSample) {
			sampleNumber = p1.lastDecodedSample - 1;
		}
		if(sampleNumber < p0.lastDecodedSample) {
			this.seekFrameFromPage(seekFunc,p0.pageStart,0,sampleNumber);
		} else {
			var attempts = 0;
			while(p0.pageEnd < p1.pageStart) {
				var startOffset = p0.pageEnd;
				var endOffset = p1.afterPreviousPageStart;
				var startSample = p0.lastDecodedSample;
				var endSample = p1.lastDecodedSample;
				if(startSample == null || endSample == null) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 219, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				if(_$UInt_UInt_$Impl_$.gt(endOffset,startOffset + 4000)) {
					endOffset = endOffset - 4000;
				}
				var probe = startOffset + Math.floor(_$UInt_UInt_$Impl_$.toFloat(endOffset - startOffset) / _$UInt_UInt_$Impl_$.toFloat(endSample - startSample) * (sampleNumber - startSample));
				if(attempts >= 4) {
					var probe2 = startOffset + (endOffset - startOffset >>> 1);
					probe = attempts >= 8 ? probe2 : _$UInt_UInt_$Impl_$.gt(probe2,probe) ? probe + (probe2 - probe >>> 1) : probe2 + (probe - probe2 >>> 1);
				}
				++attempts;
				seekFunc(this.decodeState.inputPosition = probe);
				var _g = this.decodeState.findPage(seekFunc,inputLength);
				switch(_g._hx_index) {
				case 0:
					var _g2 = _g.last;
					var _g1 = _g.end;
					break;
				case 1:
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 249, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				var q = this.decodeState.analyzePage(seekFunc,this.header);
				if(q == null) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 255, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				q.afterPreviousPageStart = probe;
				if(q.pageStart == p1.pageStart) {
					p1 = q;
					continue;
				}
				if(sampleNumber < q.lastDecodedSample) {
					p1 = q;
				} else {
					p0 = q;
				}
			}
			if(p0.lastDecodedSample <= sampleNumber && sampleNumber < p1.lastDecodedSample) {
				this.seekFrameFromPage(seekFunc,p1.pageStart,p0.lastDecodedSample,sampleNumber);
			} else {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 275, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
	}
	,seekFrameFromPage: function(seekFunc,pageStart,firstSample,targetSample) {
		var frame = 0;
		var frameStart = firstSample;
		seekFunc(this.decodeState.inputPosition = pageStart);
		this.decodeState.nextSeg = -1;
		var leftEnd = 0;
		var leftStart = 0;
		var prevState = null;
		var lastState = null;
		while(true) {
			prevState = lastState;
			lastState = this.decodeState.clone(seekFunc);
			var initialResult = this.decodeInitial();
			if(initialResult == null) {
				lastState = prevState;
				break;
			}
			leftStart = initialResult.left.start;
			leftEnd = initialResult.left.end;
			var start = frame == 0 ? leftEnd : leftStart;
			if(targetSample < frameStart + initialResult.right.start - start) {
				break;
			}
			var _this = this.decodeState;
			while(_this.bytesInSeg != 0 || !_this.lastSeg && _this.next() != 0) {
				_this.bytesInSeg--;
				_this.inputPosition += 1;
				_this.input.readByte();
			}
			frameStart += initialResult.right.start - start;
			++frame;
		}
		this.decodeState = lastState;
		seekFunc(this.decodeState.inputPosition);
		this.previousLength = 0;
		this.pumpFirstFrame();
		this.currentSample = frameStart;
		this.skipSamples(targetSample - frameStart);
	}
	,clone: function(seekFunc) {
		var decoder = Object.create(kha_audio2_ogg_vorbis_VorbisDecoder.prototype);
		decoder.currentSample = this.currentSample;
		decoder.totalSample = this.totalSample;
		decoder.previousLength = this.previousLength;
		decoder.channelBufferStart = this.channelBufferStart;
		decoder.channelBufferEnd = this.channelBufferEnd;
		decoder.a = this.a;
		decoder.b = this.b;
		decoder.c = this.c;
		decoder.window = this.window;
		decoder.bitReverseData = this.bitReverseData;
		decoder.header = this.header;
		decoder.decodeState = this.decodeState.clone(seekFunc);
		var this1 = new Array(this.header.channel);
		decoder.channelBuffers = this1;
		var this2 = new Array(this.header.channel);
		decoder.previousWindow = this2;
		var this3 = new Array(this.header.channel);
		decoder.finalY = this3;
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			decoder.channelBuffers[i] = kha_audio2_ogg_vorbis_VorbisTools.copyVector(this.channelBuffers[i]);
			decoder.previousWindow[i] = kha_audio2_ogg_vorbis_VorbisTools.copyVector(this.previousWindow[i]);
			decoder.finalY[i] = Lambda.array(this.finalY[i]);
		}
		return decoder;
	}
	,ensurePosition: function(seekFunc) {
		seekFunc(this.decodeState.inputPosition);
	}
	,getFrameFloat: function() {
		var result = this.decodePacket();
		if(result == null) {
			this.channelBufferStart = this.channelBufferEnd = 0;
			return 0;
		}
		var len = this.finishFrame(result);
		this.channelBufferStart = result.left;
		this.channelBufferEnd = result.left + len;
		return len;
	}
	,pumpFirstFrame: function() {
		this.finishFrame(this.decodePacket());
	}
	,finishFrame: function(r) {
		var len = r.len;
		var right = r.right;
		var left = r.left;
		if(this.previousLength != 0) {
			var n = this.previousLength;
			var w = this.getWindow(n);
			var _g = 0;
			var _g1 = this.header.channel;
			while(_g < _g1) {
				var i = _g++;
				var cb = this.channelBuffers[i];
				var pw = this.previousWindow[i];
				var _g2 = 0;
				var _g11 = n;
				while(_g2 < _g11) {
					var j = _g2++;
					cb[left + j] = cb[left + j] * w[j] + pw[j] * w[n - 1 - j];
				}
			}
		}
		var prev = this.previousLength;
		this.previousLength = len - right;
		var _g3 = 0;
		var _g12 = this.header.channel;
		while(_g3 < _g12) {
			var i1 = _g3++;
			var pw1 = this.previousWindow[i1];
			var cb1 = this.channelBuffers[i1];
			var _g4 = 0;
			var _g13 = len - right;
			while(_g4 < _g13) {
				var j1 = _g4++;
				pw1[j1] = cb1[right + j1];
			}
		}
		if(prev == 0) {
			return 0;
		}
		if(len < right) {
			right = len;
		}
		return right - left;
	}
	,getWindow: function(len) {
		len <<= 1;
		if(len == this.header.blocksize0) {
			return this.window[0];
		} else if(len == this.header.blocksize1) {
			return this.window[1];
		} else {
			return null;
		}
	}
	,initBlocksize: function(bs,n) {
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var this1 = this.a;
		var this2 = new Array(n2);
		this1[bs] = this2;
		var this3 = this.b;
		var this4 = new Array(n2);
		this3[bs] = this4;
		var this5 = this.c;
		var this6 = new Array(n4);
		this5[bs] = this6;
		var this7 = this.window;
		var this8 = new Array(n2);
		this7[bs] = this8;
		var this9 = this.bitReverseData;
		var this10 = new Array(n8);
		this9[bs] = this10;
		kha_audio2_ogg_vorbis_VorbisTools.computeTwiddleFactors(n,this.a[bs],this.b[bs],this.c[bs]);
		kha_audio2_ogg_vorbis_VorbisTools.computeWindow(n,this.window[bs]);
		kha_audio2_ogg_vorbis_VorbisTools.computeBitReverse(n,this.bitReverseData[bs]);
	}
	,inverseMdct: function(buffer,n,blocktype) {
		var bt = blocktype ? 1 : 0;
		var a = this.a[bt];
		var b = this.b[bt];
		var c = this.c[bt];
		var bitReverse = this.bitReverseData[bt];
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var this1 = new Array(n2);
		var buf2 = this1;
		var dOffset = n2 - 2;
		var aaOffset = 0;
		var eOffset = 0;
		var eStopOffset = n2;
		while(eOffset != eStopOffset) {
			buf2[dOffset + 1] = buffer[eOffset] * a[aaOffset] - buffer[eOffset + 2] * a[aaOffset + 1];
			buf2[dOffset] = buffer[eOffset] * a[aaOffset + 1] + buffer[eOffset + 2] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset += 4;
		}
		eOffset = n2 - 3;
		while(dOffset >= 0) {
			buf2[dOffset + 1] = -buffer[eOffset + 2] * a[aaOffset] - -buffer[eOffset] * a[aaOffset + 1];
			buf2[dOffset] = -buffer[eOffset + 2] * a[aaOffset + 1] + -buffer[eOffset] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset -= 4;
		}
		var u = buffer;
		var v = buf2;
		var aaOffset1 = n2 - 8;
		var eOffset0 = n4;
		var eOffset1 = 0;
		var dOffset0 = n4;
		var dOffset1 = 0;
		while(aaOffset1 >= 0) {
			var v41_21 = v[eOffset0 + 1] - v[eOffset1 + 1];
			var v40_20 = v[eOffset0] - v[eOffset1];
			u[dOffset0 + 1] = v[eOffset0 + 1] + v[eOffset1 + 1];
			u[dOffset0] = v[eOffset0] + v[eOffset1];
			u[dOffset1 + 1] = v41_21 * a[aaOffset1 + 4] - v40_20 * a[aaOffset1 + 5];
			u[dOffset1] = v40_20 * a[aaOffset1 + 4] + v41_21 * a[aaOffset1 + 5];
			v41_21 = v[eOffset0 + 3] - v[eOffset1 + 3];
			v40_20 = v[eOffset0 + 2] - v[eOffset1 + 2];
			u[dOffset0 + 3] = v[eOffset0 + 3] + v[eOffset1 + 3];
			u[dOffset0 + 2] = v[eOffset0 + 2] + v[eOffset1 + 2];
			u[dOffset1 + 3] = v41_21 * a[aaOffset1] - v40_20 * a[aaOffset1 + 1];
			u[dOffset1 + 2] = v40_20 * a[aaOffset1] + v41_21 * a[aaOffset1 + 1];
			aaOffset1 -= 8;
			dOffset0 += 4;
			dOffset1 += 4;
			eOffset0 += 4;
			eOffset1 += 4;
		}
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
		var i_off = n2 - 1 - n4 * 0;
		var eeOffset0 = i_off;
		var eeOffset2 = i_off + -(n >> 3);
		var aOffset = 0;
		var i = (n >> 4 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = u[eeOffset0] - u[eeOffset2];
			var k01_21 = u[eeOffset0 + (-1)] - u[eeOffset2 + (-1)];
			var _g = eeOffset0;
			var _g1 = u;
			_g1[_g] = _g1[_g] + u[eeOffset2];
			var _g2 = eeOffset0 + (-1);
			var _g11 = u;
			_g11[_g2] = _g11[_g2] + u[eeOffset2 + (-1)];
			u[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-2)] - u[eeOffset2 + (-2)];
			k01_21 = u[eeOffset0 + (-3)] - u[eeOffset2 + (-3)];
			var _g3 = eeOffset0 + (-2);
			var _g12 = u;
			_g12[_g3] = _g12[_g3] + u[eeOffset2 + (-2)];
			var _g4 = eeOffset0 + (-3);
			var _g13 = u;
			_g13[_g4] = _g13[_g4] + u[eeOffset2 + (-3)];
			u[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-4)] - u[eeOffset2 + (-4)];
			k01_21 = u[eeOffset0 + (-5)] - u[eeOffset2 + (-5)];
			var _g5 = eeOffset0 + (-4);
			var _g14 = u;
			_g14[_g5] = _g14[_g5] + u[eeOffset2 + (-4)];
			var _g6 = eeOffset0 + (-5);
			var _g15 = u;
			_g15[_g6] = _g15[_g6] + u[eeOffset2 + (-5)];
			u[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = u[eeOffset0 + (-6)] - u[eeOffset2 + (-6)];
			k01_21 = u[eeOffset0 + (-7)] - u[eeOffset2 + (-7)];
			var _g7 = eeOffset0 + (-6);
			var _g16 = u;
			_g16[_g7] = _g16[_g7] + u[eeOffset2 + (-6)];
			var _g8 = eeOffset0 + (-7);
			var _g17 = u;
			_g17[_g8] = _g17[_g8] + u[eeOffset2 + (-7)];
			u[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			u[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			eeOffset0 -= 8;
			eeOffset2 -= 8;
		}
		var i_off1 = n2 - 1 - n4;
		var eeOffset01 = i_off1;
		var eeOffset21 = i_off1 + -(n >> 3);
		var aOffset1 = 0;
		var i1 = (n >> 4 >> 2) + 1;
		while(--i1 > 0) {
			var k00_201 = u[eeOffset01] - u[eeOffset21];
			var k01_211 = u[eeOffset01 + (-1)] - u[eeOffset21 + (-1)];
			var _g9 = eeOffset01;
			var _g18 = u;
			_g18[_g9] = _g18[_g9] + u[eeOffset21];
			var _g10 = eeOffset01 + (-1);
			var _g19 = u;
			_g19[_g10] = _g19[_g10] + u[eeOffset21 + (-1)];
			u[eeOffset21] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + (-1)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = u[eeOffset01 + (-2)] - u[eeOffset21 + (-2)];
			k01_211 = u[eeOffset01 + (-3)] - u[eeOffset21 + (-3)];
			var _g20 = eeOffset01 + (-2);
			var _g110 = u;
			_g110[_g20] = _g110[_g20] + u[eeOffset21 + (-2)];
			var _g21 = eeOffset01 + (-3);
			var _g111 = u;
			_g111[_g21] = _g111[_g21] + u[eeOffset21 + (-3)];
			u[eeOffset21 + (-2)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + (-3)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = u[eeOffset01 + (-4)] - u[eeOffset21 + (-4)];
			k01_211 = u[eeOffset01 + (-5)] - u[eeOffset21 + (-5)];
			var _g22 = eeOffset01 + (-4);
			var _g112 = u;
			_g112[_g22] = _g112[_g22] + u[eeOffset21 + (-4)];
			var _g23 = eeOffset01 + (-5);
			var _g113 = u;
			_g113[_g23] = _g113[_g23] + u[eeOffset21 + (-5)];
			u[eeOffset21 + (-4)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + (-5)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = u[eeOffset01 + (-6)] - u[eeOffset21 + (-6)];
			k01_211 = u[eeOffset01 + (-7)] - u[eeOffset21 + (-7)];
			var _g24 = eeOffset01 + (-6);
			var _g114 = u;
			_g114[_g24] = _g114[_g24] + u[eeOffset21 + (-6)];
			var _g25 = eeOffset01 + (-7);
			var _g115 = u;
			_g115[_g25] = _g115[_g25] + u[eeOffset21 + (-7)];
			u[eeOffset21 + (-6)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			u[eeOffset21 + (-7)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			eeOffset01 -= 8;
			eeOffset21 -= 8;
		}
		var d0 = n2 - 1 - n8 * 0;
		var aOffset2 = 0;
		var eOffset01 = d0;
		var eOffset2 = d0 + -(n >> 4);
		var i2 = (n >> 5 >> 2) + 1;
		while(--i2 > 0) {
			var k00_202 = u[eOffset01] - u[eOffset2];
			var k01_212 = u[eOffset01 + (-1)] - u[eOffset2 + (-1)];
			var _g26 = eOffset01;
			var _g116 = u;
			_g116[_g26] = _g116[_g26] + u[eOffset2];
			var _g27 = eOffset01 + (-1);
			var _g117 = u;
			_g117[_g27] = _g117[_g27] + u[eOffset2 + (-1)];
			u[eOffset2] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + (-1)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = u[eOffset01 + (-2)] - u[eOffset2 + (-2)];
			k01_212 = u[eOffset01 + (-3)] - u[eOffset2 + (-3)];
			var _g28 = eOffset01 + (-2);
			var _g118 = u;
			_g118[_g28] = _g118[_g28] + u[eOffset2 + (-2)];
			var _g29 = eOffset01 + (-3);
			var _g119 = u;
			_g119[_g29] = _g119[_g29] + u[eOffset2 + (-3)];
			u[eOffset2 + (-2)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + (-3)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = u[eOffset01 + (-4)] - u[eOffset2 + (-4)];
			k01_212 = u[eOffset01 + (-5)] - u[eOffset2 + (-5)];
			var _g30 = eOffset01 + (-4);
			var _g120 = u;
			_g120[_g30] = _g120[_g30] + u[eOffset2 + (-4)];
			var _g31 = eOffset01 + (-5);
			var _g121 = u;
			_g121[_g31] = _g121[_g31] + u[eOffset2 + (-5)];
			u[eOffset2 + (-4)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + (-5)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = u[eOffset01 + (-6)] - u[eOffset2 + (-6)];
			k01_212 = u[eOffset01 + (-7)] - u[eOffset2 + (-7)];
			var _g32 = eOffset01 + (-6);
			var _g122 = u;
			_g122[_g32] = _g122[_g32] + u[eOffset2 + (-6)];
			var _g33 = eOffset01 + (-7);
			var _g123 = u;
			_g123[_g33] = _g123[_g33] + u[eOffset2 + (-7)];
			u[eOffset2 + (-6)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			u[eOffset2 + (-7)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			eOffset01 -= 8;
			eOffset2 -= 8;
			aOffset2 += 16;
		}
		var d01 = n2 - 1 - n8;
		var aOffset3 = 0;
		var eOffset02 = d01;
		var eOffset21 = d01 + -(n >> 4);
		var i3 = (n >> 5 >> 2) + 1;
		while(--i3 > 0) {
			var k00_203 = u[eOffset02] - u[eOffset21];
			var k01_213 = u[eOffset02 + (-1)] - u[eOffset21 + (-1)];
			var _g34 = eOffset02;
			var _g124 = u;
			_g124[_g34] = _g124[_g34] + u[eOffset21];
			var _g35 = eOffset02 + (-1);
			var _g125 = u;
			_g125[_g35] = _g125[_g35] + u[eOffset21 + (-1)];
			u[eOffset21] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + (-1)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = u[eOffset02 + (-2)] - u[eOffset21 + (-2)];
			k01_213 = u[eOffset02 + (-3)] - u[eOffset21 + (-3)];
			var _g36 = eOffset02 + (-2);
			var _g126 = u;
			_g126[_g36] = _g126[_g36] + u[eOffset21 + (-2)];
			var _g37 = eOffset02 + (-3);
			var _g127 = u;
			_g127[_g37] = _g127[_g37] + u[eOffset21 + (-3)];
			u[eOffset21 + (-2)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + (-3)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = u[eOffset02 + (-4)] - u[eOffset21 + (-4)];
			k01_213 = u[eOffset02 + (-5)] - u[eOffset21 + (-5)];
			var _g38 = eOffset02 + (-4);
			var _g128 = u;
			_g128[_g38] = _g128[_g38] + u[eOffset21 + (-4)];
			var _g39 = eOffset02 + (-5);
			var _g129 = u;
			_g129[_g39] = _g129[_g39] + u[eOffset21 + (-5)];
			u[eOffset21 + (-4)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + (-5)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = u[eOffset02 + (-6)] - u[eOffset21 + (-6)];
			k01_213 = u[eOffset02 + (-7)] - u[eOffset21 + (-7)];
			var _g40 = eOffset02 + (-6);
			var _g130 = u;
			_g130[_g40] = _g130[_g40] + u[eOffset21 + (-6)];
			var _g41 = eOffset02 + (-7);
			var _g131 = u;
			_g131[_g41] = _g131[_g41] + u[eOffset21 + (-7)];
			u[eOffset21 + (-6)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			u[eOffset21 + (-7)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			eOffset02 -= 8;
			eOffset21 -= 8;
			aOffset3 += 16;
		}
		var d02 = n2 - 1 - n8 * 2;
		var aOffset4 = 0;
		var eOffset03 = d02;
		var eOffset22 = d02 + -(n >> 4);
		var i4 = (n >> 5 >> 2) + 1;
		while(--i4 > 0) {
			var k00_204 = u[eOffset03] - u[eOffset22];
			var k01_214 = u[eOffset03 + (-1)] - u[eOffset22 + (-1)];
			var _g42 = eOffset03;
			var _g132 = u;
			_g132[_g42] = _g132[_g42] + u[eOffset22];
			var _g43 = eOffset03 + (-1);
			var _g133 = u;
			_g133[_g43] = _g133[_g43] + u[eOffset22 + (-1)];
			u[eOffset22] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + (-1)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = u[eOffset03 + (-2)] - u[eOffset22 + (-2)];
			k01_214 = u[eOffset03 + (-3)] - u[eOffset22 + (-3)];
			var _g44 = eOffset03 + (-2);
			var _g134 = u;
			_g134[_g44] = _g134[_g44] + u[eOffset22 + (-2)];
			var _g45 = eOffset03 + (-3);
			var _g135 = u;
			_g135[_g45] = _g135[_g45] + u[eOffset22 + (-3)];
			u[eOffset22 + (-2)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + (-3)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = u[eOffset03 + (-4)] - u[eOffset22 + (-4)];
			k01_214 = u[eOffset03 + (-5)] - u[eOffset22 + (-5)];
			var _g46 = eOffset03 + (-4);
			var _g136 = u;
			_g136[_g46] = _g136[_g46] + u[eOffset22 + (-4)];
			var _g47 = eOffset03 + (-5);
			var _g137 = u;
			_g137[_g47] = _g137[_g47] + u[eOffset22 + (-5)];
			u[eOffset22 + (-4)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + (-5)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = u[eOffset03 + (-6)] - u[eOffset22 + (-6)];
			k01_214 = u[eOffset03 + (-7)] - u[eOffset22 + (-7)];
			var _g48 = eOffset03 + (-6);
			var _g138 = u;
			_g138[_g48] = _g138[_g48] + u[eOffset22 + (-6)];
			var _g49 = eOffset03 + (-7);
			var _g139 = u;
			_g139[_g49] = _g139[_g49] + u[eOffset22 + (-7)];
			u[eOffset22 + (-6)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			u[eOffset22 + (-7)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			eOffset03 -= 8;
			eOffset22 -= 8;
			aOffset4 += 16;
		}
		var d03 = n2 - 1 - n8 * 3;
		var aOffset5 = 0;
		var eOffset04 = d03;
		var eOffset23 = d03 + -(n >> 4);
		var i5 = (n >> 5 >> 2) + 1;
		while(--i5 > 0) {
			var k00_205 = u[eOffset04] - u[eOffset23];
			var k01_215 = u[eOffset04 + (-1)] - u[eOffset23 + (-1)];
			var _g50 = eOffset04;
			var _g140 = u;
			_g140[_g50] = _g140[_g50] + u[eOffset23];
			var _g51 = eOffset04 + (-1);
			var _g141 = u;
			_g141[_g51] = _g141[_g51] + u[eOffset23 + (-1)];
			u[eOffset23] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + (-1)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = u[eOffset04 + (-2)] - u[eOffset23 + (-2)];
			k01_215 = u[eOffset04 + (-3)] - u[eOffset23 + (-3)];
			var _g52 = eOffset04 + (-2);
			var _g142 = u;
			_g142[_g52] = _g142[_g52] + u[eOffset23 + (-2)];
			var _g53 = eOffset04 + (-3);
			var _g143 = u;
			_g143[_g53] = _g143[_g53] + u[eOffset23 + (-3)];
			u[eOffset23 + (-2)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + (-3)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = u[eOffset04 + (-4)] - u[eOffset23 + (-4)];
			k01_215 = u[eOffset04 + (-5)] - u[eOffset23 + (-5)];
			var _g54 = eOffset04 + (-4);
			var _g144 = u;
			_g144[_g54] = _g144[_g54] + u[eOffset23 + (-4)];
			var _g55 = eOffset04 + (-5);
			var _g145 = u;
			_g145[_g55] = _g145[_g55] + u[eOffset23 + (-5)];
			u[eOffset23 + (-4)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + (-5)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = u[eOffset04 + (-6)] - u[eOffset23 + (-6)];
			k01_215 = u[eOffset04 + (-7)] - u[eOffset23 + (-7)];
			var _g56 = eOffset04 + (-6);
			var _g146 = u;
			_g146[_g56] = _g146[_g56] + u[eOffset23 + (-6)];
			var _g57 = eOffset04 + (-7);
			var _g147 = u;
			_g147[_g57] = _g147[_g57] + u[eOffset23 + (-7)];
			u[eOffset23 + (-6)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			u[eOffset23 + (-7)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			eOffset04 -= 8;
			eOffset23 -= 8;
			aOffset5 += 16;
		}
		var _g58 = 2;
		var _g148 = ld - 3 >> 1;
		while(_g58 < _g148) {
			var l = _g58++;
			var k0 = n >> l + 2;
			var k0_2 = k0 >> 1;
			var lim = 1 << l + 1;
			var _g59 = 0;
			var _g149 = lim;
			while(_g59 < _g149) {
				var i6 = _g59++;
				var d04 = n2 - 1 - k0 * i6;
				var k1 = 1 << l + 3;
				var aOffset6 = 0;
				var eOffset05 = d04;
				var eOffset24 = d04 + -k0_2;
				var i7 = (n >> l + 4 >> 2) + 1;
				while(--i7 > 0) {
					var k00_206 = u[eOffset05] - u[eOffset24];
					var k01_216 = u[eOffset05 + (-1)] - u[eOffset24 + (-1)];
					var _g60 = eOffset05;
					var _g150 = u;
					_g150[_g60] = _g150[_g60] + u[eOffset24];
					var _g61 = eOffset05 + (-1);
					var _g151 = u;
					_g151[_g61] = _g151[_g61] + u[eOffset24 + (-1)];
					u[eOffset24] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + (-1)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = u[eOffset05 + (-2)] - u[eOffset24 + (-2)];
					k01_216 = u[eOffset05 + (-3)] - u[eOffset24 + (-3)];
					var _g62 = eOffset05 + (-2);
					var _g152 = u;
					_g152[_g62] = _g152[_g62] + u[eOffset24 + (-2)];
					var _g63 = eOffset05 + (-3);
					var _g153 = u;
					_g153[_g63] = _g153[_g63] + u[eOffset24 + (-3)];
					u[eOffset24 + (-2)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + (-3)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = u[eOffset05 + (-4)] - u[eOffset24 + (-4)];
					k01_216 = u[eOffset05 + (-5)] - u[eOffset24 + (-5)];
					var _g64 = eOffset05 + (-4);
					var _g154 = u;
					_g154[_g64] = _g154[_g64] + u[eOffset24 + (-4)];
					var _g65 = eOffset05 + (-5);
					var _g155 = u;
					_g155[_g65] = _g155[_g65] + u[eOffset24 + (-5)];
					u[eOffset24 + (-4)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + (-5)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = u[eOffset05 + (-6)] - u[eOffset24 + (-6)];
					k01_216 = u[eOffset05 + (-7)] - u[eOffset24 + (-7)];
					var _g66 = eOffset05 + (-6);
					var _g156 = u;
					_g156[_g66] = _g156[_g66] + u[eOffset24 + (-6)];
					var _g67 = eOffset05 + (-7);
					var _g157 = u;
					_g157[_g67] = _g157[_g67] + u[eOffset24 + (-7)];
					u[eOffset24 + (-6)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					u[eOffset24 + (-7)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					eOffset05 -= 8;
					eOffset24 -= 8;
					aOffset6 += k1;
				}
			}
		}
		var _g210 = ld - 3 >> 1;
		var _g310 = ld - 6;
		while(_g210 < _g310) {
			var l1 = _g210++;
			var k01 = n >> l1 + 2;
			var k11 = 1 << l1 + 3;
			var k0_21 = k01 >> 1;
			var rlim = n >> l1 + 6;
			var lim1 = 1 << l1 + 1;
			var aOffset7 = 0;
			var i_off2 = n2 - 1;
			var r = rlim + 1;
			while(--r > 0) {
				var A0 = a[aOffset7];
				var A1 = a[aOffset7 + 1];
				var A2 = a[aOffset7 + k11];
				var A3 = a[aOffset7 + k11 + 1];
				var A4 = a[aOffset7 + k11 * 2];
				var A5 = a[aOffset7 + k11 * 2 + 1];
				var A6 = a[aOffset7 + k11 * 3];
				var A7 = a[aOffset7 + k11 * 3 + 1];
				var eeOffset02 = i_off2;
				var eeOffset22 = i_off2 + -k0_21;
				var i8 = lim1 + 1;
				while(--i8 > 0) {
					var k00 = u[eeOffset02] - u[eeOffset22];
					var k111 = u[eeOffset02 + (-1)] - u[eeOffset22 + (-1)];
					u[eeOffset02] = u[eeOffset02] + u[eeOffset22];
					u[eeOffset02 + (-1)] = u[eeOffset02 + (-1)] + u[eeOffset22 + (-1)];
					u[eeOffset22] = k00 * A0 - k111 * A1;
					u[eeOffset22 + (-1)] = k111 * A0 + k00 * A1;
					k00 = u[eeOffset02 + (-2)] - u[eeOffset22 + (-2)];
					k111 = u[eeOffset02 + (-3)] - u[eeOffset22 + (-3)];
					u[eeOffset02 + (-2)] = u[eeOffset02 + (-2)] + u[eeOffset22 + (-2)];
					u[eeOffset02 + (-3)] = u[eeOffset02 + (-3)] + u[eeOffset22 + (-3)];
					u[eeOffset22 + (-2)] = k00 * A2 - k111 * A3;
					u[eeOffset22 + (-3)] = k111 * A2 + k00 * A3;
					k00 = u[eeOffset02 + (-4)] - u[eeOffset22 + (-4)];
					k111 = u[eeOffset02 + (-5)] - u[eeOffset22 + (-5)];
					u[eeOffset02 + (-4)] = u[eeOffset02 + (-4)] + u[eeOffset22 + (-4)];
					u[eeOffset02 + (-5)] = u[eeOffset02 + (-5)] + u[eeOffset22 + (-5)];
					u[eeOffset22 + (-4)] = k00 * A4 - k111 * A5;
					u[eeOffset22 + (-5)] = k111 * A4 + k00 * A5;
					k00 = u[eeOffset02 + (-6)] - u[eeOffset22 + (-6)];
					k111 = u[eeOffset02 + (-7)] - u[eeOffset22 + (-7)];
					u[eeOffset02 + (-6)] = u[eeOffset02 + (-6)] + u[eeOffset22 + (-6)];
					u[eeOffset02 + (-7)] = u[eeOffset02 + (-7)] + u[eeOffset22 + (-7)];
					u[eeOffset22 + (-6)] = k00 * A6 - k111 * A7;
					u[eeOffset22 + (-7)] = k111 * A6 + k00 * A7;
					eeOffset02 -= k01;
					eeOffset22 -= k01;
				}
				aOffset7 += k11 * 4;
				i_off2 -= 8;
			}
		}
		var i_off3 = n2 - 1;
		var A21 = a[n >> 3];
		var zOffset = i_off3;
		var baseOffset = i_off3 - 16 * (n >> 5);
		while(zOffset > baseOffset) {
			var t0 = u[zOffset];
			var t1 = u[zOffset + (-8)];
			u[zOffset + (-8)] = t0 - t1;
			u[zOffset] = t0 + t1;
			t0 = u[zOffset + (-1)];
			t1 = u[zOffset + (-9)];
			u[zOffset + (-9)] = t0 - t1;
			u[zOffset + (-1)] = t0 + t1;
			t0 = u[zOffset + (-2)];
			t1 = u[zOffset + (-10)];
			var k001 = t0 - t1;
			u[zOffset + (-2)] = t0 + t1;
			t0 = u[zOffset + (-3)];
			t1 = u[zOffset + (-11)];
			var k112 = t0 - t1;
			u[zOffset + (-3)] = t0 + t1;
			u[zOffset + (-10)] = (k001 + k112) * A21;
			u[zOffset + (-11)] = (k112 - k001) * A21;
			t0 = u[zOffset + (-4)];
			t1 = u[zOffset + (-12)];
			k001 = t1 - t0;
			u[zOffset + (-4)] = t0 + t1;
			t0 = u[zOffset + (-5)];
			t1 = u[zOffset + (-13)];
			k112 = t0 - t1;
			u[zOffset + (-5)] = t0 + t1;
			u[zOffset + (-12)] = k112;
			u[zOffset + (-13)] = k001;
			t0 = u[zOffset + (-6)];
			t1 = u[zOffset + (-14)];
			k001 = t1 - t0;
			u[zOffset + (-6)] = t0 + t1;
			t0 = u[zOffset + (-7)];
			t1 = u[zOffset + (-15)];
			k112 = t0 - t1;
			u[zOffset + (-7)] = t0 + t1;
			u[zOffset + (-14)] = (k001 + k112) * A21;
			u[zOffset + (-15)] = (k001 - k112) * A21;
			var t01 = u[zOffset];
			var t11 = u[zOffset + (-4)];
			var k002 = t01 - t11;
			var y0 = t01 + t11;
			t01 = u[zOffset + (-2)];
			t11 = u[zOffset + (-6)];
			var y2 = t01 + t11;
			var k22 = t01 - t11;
			u[zOffset] = y0 + y2;
			u[zOffset + (-2)] = y0 - y2;
			var k33 = u[zOffset + (-3)] - u[zOffset + (-7)];
			u[zOffset + (-4)] = k002 + k33;
			u[zOffset + (-6)] = k002 - k33;
			t01 = u[zOffset + (-1)];
			t11 = u[zOffset + (-5)];
			var k113 = t01 - t11;
			var y1 = t01 + t11;
			var y3 = u[zOffset + (-3)] + u[zOffset + (-7)];
			u[zOffset + (-1)] = y1 + y3;
			u[zOffset + (-3)] = y1 - y3;
			u[zOffset + (-5)] = k113 - k22;
			u[zOffset + (-7)] = k113 + k22;
			var zOffset1 = zOffset - 8;
			var t02 = u[zOffset1];
			var t12 = u[zOffset1 + (-4)];
			var k003 = t02 - t12;
			var y01 = t02 + t12;
			t02 = u[zOffset1 + (-2)];
			t12 = u[zOffset1 + (-6)];
			var y21 = t02 + t12;
			var k221 = t02 - t12;
			u[zOffset1] = y01 + y21;
			u[zOffset1 + (-2)] = y01 - y21;
			var k331 = u[zOffset1 + (-3)] - u[zOffset1 + (-7)];
			u[zOffset1 + (-4)] = k003 + k331;
			u[zOffset1 + (-6)] = k003 - k331;
			t02 = u[zOffset1 + (-1)];
			t12 = u[zOffset1 + (-5)];
			var k114 = t02 - t12;
			var y11 = t02 + t12;
			var y31 = u[zOffset1 + (-3)] + u[zOffset1 + (-7)];
			u[zOffset1 + (-1)] = y11 + y31;
			u[zOffset1 + (-3)] = y11 - y31;
			u[zOffset1 + (-5)] = k114 - k221;
			u[zOffset1 + (-7)] = k114 + k221;
			zOffset -= 16;
		}
		var brOffset = 0;
		var dOffset01 = n4 - 4;
		var dOffset11 = n2 - 4;
		while(dOffset01 >= 0) {
			var k4 = bitReverse[brOffset];
			v[dOffset11 + 3] = u[k4];
			v[dOffset11 + 2] = u[k4 + 1];
			v[dOffset01 + 3] = u[k4 + 2];
			v[dOffset01 + 2] = u[k4 + 3];
			k4 = bitReverse[brOffset + 1];
			v[dOffset11 + 1] = u[k4];
			v[dOffset11] = u[k4 + 1];
			v[dOffset01 + 1] = u[k4 + 2];
			v[dOffset01] = u[k4 + 3];
			dOffset01 -= 4;
			dOffset11 -= 4;
			brOffset += 2;
		}
		var cOffset = 0;
		var dOffset2 = 0;
		var eOffset3 = n2 - 4;
		while(dOffset2 < eOffset3) {
			var a02 = v[dOffset2] - v[eOffset3 + 2];
			var a11 = v[dOffset2 + 1] + v[eOffset3 + 3];
			var b0 = c[cOffset + 1] * a02 + c[cOffset] * a11;
			var b1 = c[cOffset + 1] * a11 - c[cOffset] * a02;
			var b2 = v[dOffset2] + v[eOffset3 + 2];
			var b3 = v[dOffset2 + 1] - v[eOffset3 + 3];
			v[dOffset2] = b2 + b0;
			v[dOffset2 + 1] = b3 + b1;
			v[eOffset3 + 2] = b2 - b0;
			v[eOffset3 + 3] = b1 - b3;
			a02 = v[dOffset2 + 2] - v[eOffset3];
			a11 = v[dOffset2 + 3] + v[eOffset3 + 1];
			b0 = c[cOffset + 3] * a02 + c[cOffset + 2] * a11;
			b1 = c[cOffset + 3] * a11 - c[cOffset + 2] * a02;
			b2 = v[dOffset2 + 2] + v[eOffset3];
			b3 = v[dOffset2 + 3] - v[eOffset3 + 1];
			v[dOffset2 + 2] = b2 + b0;
			v[dOffset2 + 3] = b3 + b1;
			v[eOffset3] = b2 - b0;
			v[eOffset3 + 1] = b1 - b3;
			cOffset += 4;
			dOffset2 += 4;
			eOffset3 -= 4;
		}
		var bOffset = n2 - 8;
		var eOffset4 = n2 - 8;
		var dOffset02 = 0;
		var dOffset12 = n2 - 4;
		var dOffset21 = n2;
		var dOffset3 = n - 4;
		while(eOffset4 >= 0) {
			var p3 = buf2[eOffset4 + 6] * b[bOffset + 7] - buf2[eOffset4 + 7] * b[bOffset + 6];
			var p2 = -buf2[eOffset4 + 6] * b[bOffset + 6] - buf2[eOffset4 + 7] * b[bOffset + 7];
			buffer[dOffset02] = p3;
			buffer[dOffset12 + 3] = -p3;
			buffer[dOffset21] = p2;
			buffer[dOffset3 + 3] = p2;
			var p1 = buf2[eOffset4 + 4] * b[bOffset + 5] - buf2[eOffset4 + 5] * b[bOffset + 4];
			var p0 = -buf2[eOffset4 + 4] * b[bOffset + 4] - buf2[eOffset4 + 5] * b[bOffset + 5];
			buffer[dOffset02 + 1] = p1;
			buffer[dOffset12 + 2] = -p1;
			buffer[dOffset21 + 1] = p0;
			buffer[dOffset3 + 2] = p0;
			p3 = buf2[eOffset4 + 2] * b[bOffset + 3] - buf2[eOffset4 + 3] * b[bOffset + 2];
			p2 = -buf2[eOffset4 + 2] * b[bOffset + 2] - buf2[eOffset4 + 3] * b[bOffset + 3];
			buffer[dOffset02 + 2] = p3;
			buffer[dOffset12 + 1] = -p3;
			buffer[dOffset21 + 2] = p2;
			buffer[dOffset3 + 1] = p2;
			p1 = buf2[eOffset4] * b[bOffset + 1] - buf2[eOffset4 + 1] * b[bOffset];
			p0 = -buf2[eOffset4] * b[bOffset] - buf2[eOffset4 + 1] * b[bOffset + 1];
			buffer[dOffset02 + 3] = p1;
			buffer[dOffset12] = -p1;
			buffer[dOffset21 + 3] = p0;
			buffer[dOffset3] = p0;
			bOffset -= 8;
			eOffset4 -= 8;
			dOffset02 += 4;
			dOffset21 += 4;
			dOffset12 -= 4;
			dOffset3 -= 4;
		}
	}
	,decodePacket: function() {
		var result = this.decodeInitial();
		if(result == null) {
			return null;
		}
		var rest = this.decodePacketRest(result);
		return rest;
	}
	,decodeInitial: function() {
		this.channelBufferStart = this.channelBufferEnd = 0;
		while(true) {
			if(!this.decodeState.maybeStartPacket()) {
				return null;
			}
			if(this.decodeState.readBits(1) != 0) {
				while(true) {
					var _this = this.decodeState;
					var x;
					if(_this.bytesInSeg == 0 && (_this.lastSeg || _this.next() == 0)) {
						x = -1;
					} else {
						_this.bytesInSeg--;
						_this.inputPosition += 1;
						x = _this.input.readByte();
					}
					_this.validBits = 0;
					if(!(-1 != x)) {
						break;
					}
				}
				continue;
			}
			break;
		}
		var n = this.header.modes.length - 1;
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var i = this.decodeState.readBits(n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0);
		if(i == -1 || i >= this.header.modes.length) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 519, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "decodeInitial"}));
		}
		var m = this.header.modes[i];
		var n1;
		var prev;
		var next;
		if(m.blockflag) {
			n1 = this.header.blocksize1;
			prev = this.decodeState.readBits(1);
			next = this.decodeState.readBits(1);
		} else {
			next = 0;
			prev = next;
			n1 = this.header.blocksize0;
		}
		var windowCenter = n1 >> 1;
		return { mode : i, left : m.blockflag && prev == 0 ? { start : n1 - this.header.blocksize0 >> 2, end : n1 + this.header.blocksize0 >> 2} : { start : 0, end : windowCenter}, right : m.blockflag && next == 0 ? { start : n1 * 3 - this.header.blocksize0 >> 2, end : n1 * 3 + this.header.blocksize0 >> 2} : { start : windowCenter, end : n1}};
	}
	,decodePacketRest: function(r) {
		var len = 0;
		var m = this.header.modes[r.mode];
		var this1 = new Array(256);
		var zeroChannel = this1;
		var this2 = new Array(256);
		var reallyZeroChannel = this2;
		var n = m.blockflag ? this.header.blocksize1 : this.header.blocksize0;
		var map = this.header.mapping[m.mapping];
		var n2 = n >> 1;
		var rangeList = [256,128,86,64];
		var codebooks = this.header.codebooks;
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			var s = map.chan[i].mux;
			zeroChannel[i] = false;
			var floor = this.header.floorConfig[map.submapFloor[s]];
			if(floor.type == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 581, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "decodePacketRest"}));
			} else {
				var g = floor.floor1;
				if(this.decodeState.readBits(1) != 0) {
					var fy = [];
					var this3 = new Array(256);
					var step2Flag = this3;
					var range = rangeList[g.floor1Multiplier - 1];
					var offset = 2;
					fy = this.finalY[i];
					var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					fy[0] = this.decodeState.readBits((range < 16384 ? range < 16 ? log2_4[range] : range < 512 ? 5 + log2_4[range >> 5] : 10 + log2_4[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_4[range >> 15] : 20 + log2_4[range >> 20] : range < 536870912 ? 25 + log2_4[range >> 25] : range < -2147483648 ? 30 + log2_4[range >> 30] : 0) - 1);
					var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					fy[1] = this.decodeState.readBits((range < 16384 ? range < 16 ? log2_41[range] : range < 512 ? 5 + log2_41[range >> 5] : 10 + log2_41[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_41[range >> 15] : 20 + log2_41[range >> 20] : range < 536870912 ? 25 + log2_41[range >> 25] : range < -2147483648 ? 30 + log2_41[range >> 30] : 0) - 1);
					var _g2 = 0;
					var _g11 = g.partitions;
					while(_g2 < _g11) {
						var j = _g2++;
						var pclass = g.partitionClassList[j];
						var cdim = g.classDimensions[pclass];
						var cbits = g.classSubclasses[pclass];
						var csub = (1 << cbits) - 1;
						var cval = 0;
						if(cbits != 0) {
							var c = codebooks[g.classMasterbooks[pclass]];
							var _this = this.decodeState;
							if(_this.validBits < 10) {
								_this.prepHuffman();
							}
							var i1 = c.fastHuffman[_this.acc & 1023];
							var val;
							if(i1 >= 0) {
								var l = c.codewordLengths[i1];
								_this.acc = _this.acc >>> l;
								_this.validBits -= l;
								if(_this.validBits < 0) {
									_this.validBits = 0;
									val = -1;
								} else {
									val = i1;
								}
							} else {
								val = _this.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							cval = val;
						}
						var books = g.subclassBooks[pclass];
						var _g3 = 0;
						var _g12 = cdim;
						while(_g3 < _g12) {
							var k = _g3++;
							var book = books[cval & csub];
							cval >>= cbits;
							var tmp = offset++;
							var tmp1;
							if(book >= 0) {
								var _this1 = this.decodeState;
								var c1 = codebooks[book];
								if(_this1.validBits < 10) {
									_this1.prepHuffman();
								}
								var i2 = c1.fastHuffman[_this1.acc & 1023];
								var val1;
								if(i2 >= 0) {
									var l1 = c1.codewordLengths[i2];
									_this1.acc = _this1.acc >>> l1;
									_this1.validBits -= l1;
									if(_this1.validBits < 0) {
										_this1.validBits = 0;
										val1 = -1;
									} else {
										val1 = i2;
									}
								} else {
									val1 = _this1.decodeScalarRaw(c1);
								}
								if(c1.sparse) {
									val1 = c1.sortedValues[val1];
								}
								tmp1 = val1;
							} else {
								tmp1 = 0;
							}
							fy[tmp] = tmp1;
						}
					}
					if(this.decodeState.validBits == -1) {
						zeroChannel[i] = true;
						continue;
					}
					step2Flag[0] = step2Flag[1] = true;
					var naighbors = g.neighbors;
					var xlist = g.xlist;
					var _g21 = 2;
					var _g31 = g.values;
					while(_g21 < _g31) {
						var j1 = _g21++;
						var low = naighbors[j1][0];
						var high = naighbors[j1][1];
						var x0 = xlist[low];
						var y0 = fy[low];
						var dy = fy[high] - y0;
						var adx = xlist[high] - x0;
						var err = Math.abs(dy) * (xlist[j1] - x0);
						var off = err / adx | 0;
						var lowroom = dy < 0 ? y0 - off : y0 + off;
						var val2 = fy[j1];
						var highroom = range - lowroom;
						var room = highroom < lowroom ? highroom * 2 : lowroom * 2;
						if(val2 != 0) {
							step2Flag[low] = step2Flag[high] = true;
							step2Flag[j1] = true;
							if(val2 >= room) {
								if(highroom > lowroom) {
									fy[j1] = val2 - lowroom + lowroom;
								} else {
									fy[j1] = lowroom - val2 + highroom - 1;
								}
							} else if((val2 & 1) != 0) {
								fy[j1] = lowroom - (val2 + 1 >> 1);
							} else {
								fy[j1] = lowroom + (val2 >> 1);
							}
						} else {
							step2Flag[j1] = false;
							fy[j1] = lowroom;
						}
					}
					var _g4 = 0;
					var _g5 = g.values;
					while(_g4 < _g5) {
						var j2 = _g4++;
						if(!step2Flag[j2]) {
							fy[j2] = -1;
						}
					}
				} else {
					zeroChannel[i] = true;
				}
			}
		}
		var _g22 = 0;
		var _g32 = this.header.channel;
		while(_g22 < _g32) {
			var i3 = _g22++;
			reallyZeroChannel[i3] = zeroChannel[i3];
		}
		var _g41 = 0;
		var _g51 = map.couplingSteps;
		while(_g41 < _g51) {
			var i4 = _g41++;
			if(!zeroChannel[map.chan[i4].magnitude] || !zeroChannel[map.chan[i4].angle]) {
				zeroChannel[map.chan[i4].magnitude] = zeroChannel[map.chan[i4].angle] = false;
			}
		}
		var _g6 = 0;
		var _g7 = map.submaps;
		while(_g6 < _g7) {
			var i5 = _g6++;
			var this4 = new Array(this.header.channel);
			var residueBuffers = this4;
			var this5 = new Array(256);
			var doNotDecode = this5;
			var ch = 0;
			var _g61 = 0;
			var _g71 = this.header.channel;
			while(_g61 < _g71) {
				var j3 = _g61++;
				if(map.chan[j3].mux == i5) {
					if(zeroChannel[j3]) {
						doNotDecode[ch] = true;
						residueBuffers[ch] = null;
					} else {
						doNotDecode[ch] = false;
						residueBuffers[ch] = this.channelBuffers[j3];
					}
					++ch;
				}
			}
			var r1 = map.submapResidue[i5];
			var residue = this.header.residueConfig[r1];
			residue.decode(this.decodeState,this.header,residueBuffers,ch,n2,doNotDecode,this.channelBuffers);
		}
		var i6 = map.couplingSteps;
		var n21 = n >> 1;
		while(--i6 >= 0) {
			var m1 = this.channelBuffers[map.chan[i6].magnitude];
			var a = this.channelBuffers[map.chan[i6].angle];
			var _g8 = 0;
			var _g9 = n21;
			while(_g8 < _g9) {
				var j4 = _g8++;
				var a2;
				var m2;
				if(m1[j4] > 0) {
					if(a[j4] > 0) {
						m2 = m1[j4];
						a2 = m1[j4] - a[j4];
					} else {
						a2 = m1[j4];
						m2 = m1[j4] + a[j4];
					}
				} else if(a[j4] > 0) {
					m2 = m1[j4];
					a2 = m1[j4] + a[j4];
				} else {
					a2 = m1[j4];
					m2 = m1[j4] - a[j4];
				}
				m1[j4] = m2;
				a[j4] = a2;
			}
		}
		var _g81 = 0;
		var _g91 = this.header.channel;
		while(_g81 < _g91) {
			var i7 = _g81++;
			if(reallyZeroChannel[i7]) {
				var _g82 = 0;
				var _g92 = n21;
				while(_g82 < _g92) {
					var j5 = _g82++;
					this.channelBuffers[i7][j5] = 0;
				}
			} else {
				map.doFloor(this.header.floorConfig,i7,n,this.channelBuffers[i7],this.finalY[i7],null);
			}
		}
		var _g10 = 0;
		var _g111 = this.header.channel;
		while(_g10 < _g111) {
			var i8 = _g10++;
			this.inverseMdct(this.channelBuffers[i8],n,m.blockflag);
		}
		var _this2 = this.decodeState;
		while(_this2.bytesInSeg != 0 || !_this2.lastSeg && _this2.next() != 0) {
			_this2.bytesInSeg--;
			_this2.inputPosition += 1;
			_this2.input.readByte();
		}
		return this.decodeState.finishDecodePacket(this.previousLength,n,r);
	}
	,__class__: kha_audio2_ogg_vorbis_VorbisDecoder
};
var kha_audio2_ogg_vorbis_VorbisTools = function() { };
$hxClasses["kha.audio2.ogg.vorbis.VorbisTools"] = kha_audio2_ogg_vorbis_VorbisTools;
kha_audio2_ogg_vorbis_VorbisTools.__name__ = "kha.audio2.ogg.vorbis.VorbisTools";
kha_audio2_ogg_vorbis_VorbisTools.assert = function(b,p) {
};
kha_audio2_ogg_vorbis_VorbisTools.neighbors = function(x,n) {
	var low = -1;
	var high = 65536;
	var plow = 0;
	var phigh = 0;
	var _g = 0;
	var _g1 = n;
	while(_g < _g1) {
		var i = _g++;
		if(x[i] > low && x[i] < x[n]) {
			plow = i;
			low = x[i];
		}
		if(x[i] < high && x[i] > x[n]) {
			phigh = i;
			high = x[i];
		}
	}
	return { low : plow, high : phigh};
};
kha_audio2_ogg_vorbis_VorbisTools.floatUnpack = function(x) {
	var mantissa = _$UInt_UInt_$Impl_$.toFloat(x & 2097151);
	var sign = x & -2147483648;
	var exp = (x & 2145386496) >>> 21;
	var res = sign != 0 ? -mantissa : mantissa;
	return res * Math.pow(2,exp - 788);
};
kha_audio2_ogg_vorbis_VorbisTools.bitReverse = function(n) {
	n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
	n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
	n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
	n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
	return n >>> 16 | n << 16;
};
kha_audio2_ogg_vorbis_VorbisTools.pointCompare = function(a,b) {
	if(a.x < b.x) {
		return -1;
	} else if(a.x > b.x) {
		return 1;
	} else {
		return 0;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.uintAsc = function(a,b) {
	if(_$UInt_UInt_$Impl_$.gt(b,a)) {
		return -1;
	} else if(a == b) {
		return 0;
	} else {
		return 1;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.lookup1Values = function(entries,dim) {
	var r = Math.exp(Math.log(entries) / dim) | 0;
	if((Math.pow(r + 1,dim) | 0) <= entries) {
		++r;
	}
	return r;
};
kha_audio2_ogg_vorbis_VorbisTools.computeWindow = function(n,$window) {
	var n2 = n >> 1;
	var _g = 0;
	var _g1 = n2;
	while(_g < _g1) {
		var i = _g++;
		$window[i] = Math.sin(1.5707963267948966 * kha_audio2_ogg_vorbis_VorbisTools.square(Math.sin((i + 0.5) / n2 * 0.5 * 3.14159265358979323846264)));
	}
};
kha_audio2_ogg_vorbis_VorbisTools.square = function(f) {
	return f * f;
};
kha_audio2_ogg_vorbis_VorbisTools.computeBitReverse = function(n,rev) {
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
	var n8 = n >> 3;
	var _g = 0;
	var _g1 = n8;
	while(_g < _g1) {
		var i = _g++;
		var n1 = i;
		n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
		n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
		n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
		n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
		rev[i] = (n1 >>> 16 | n1 << 16) >>> 32 - ld + 3 << 2;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.computeTwiddleFactors = function(n,af,bf,cf) {
	var n4 = n >> 2;
	var n8 = n >> 3;
	var k2 = 0;
	var _g = 0;
	var _g1 = n4;
	while(_g < _g1) {
		var k = _g++;
		af[k2] = Math.cos(4 * k * 3.14159265358979323846264 / n);
		af[k2 + 1] = -Math.sin(4 * k * 3.14159265358979323846264 / n);
		bf[k2] = Math.cos((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		bf[k2 + 1] = Math.sin((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		k2 += 2;
	}
	var k21 = 0;
	var _g2 = 0;
	var _g3 = n8;
	while(_g2 < _g3) {
		var k1 = _g2++;
		cf[k21] = Math.cos(2 * (k21 + 1) * 3.14159265358979323846264 / n);
		cf[k21 + 1] = -Math.sin(2 * (k21 + 1) * 3.14159265358979323846264 / n);
		k21 += 2;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.drawLine = function(output,x0,y0,x1,y1,n) {
	if(kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable == null) {
		var this1 = new Array(32);
		kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable = this1;
		var _g = 0;
		while(_g < 32) {
			var i = _g++;
			var this2 = kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable;
			var this3 = new Array(64);
			this2[i] = this3;
			var _g1 = 1;
			while(_g1 < 64) {
				var j = _g1++;
				kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[i][j] = i / j | 0;
			}
		}
	}
	var dy = y1 - y0;
	var adx = x1 - x0;
	var ady = dy < 0 ? -dy : dy;
	var base;
	var x = x0;
	var y = y0;
	var err = 0;
	var sy;
	if(adx < 64 && ady < 32) {
		if(dy < 0) {
			base = -kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base - 1;
		} else {
			base = kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base + 1;
		}
	} else {
		base = dy / adx | 0;
		sy = dy < 0 ? base - 1 : base + 1;
	}
	ady -= (base < 0 ? -base : base) * adx;
	if(x1 > n) {
		x1 = n;
	}
	var _g2 = x;
	var _g11 = output;
	_g11[_g2] = _g11[_g2] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	var _g3 = x + 1;
	var _g12 = x1;
	while(_g3 < _g12) {
		var i1 = _g3++;
		err += ady;
		if(err >= adx) {
			err -= adx;
			y += sy;
		} else {
			y += base;
		}
		var _g4 = i1;
		var _g13 = output;
		_g13[_g4] = _g13[_g4] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	}
};
kha_audio2_ogg_vorbis_VorbisTools.predictPoint = function(x,x0,x1,y0,y1) {
	var dy = y1 - y0;
	var adx = x1 - x0;
	var err = Math.abs(dy) * (x - x0);
	var off = err / adx | 0;
	if(dy < 0) {
		return y0 - off;
	} else {
		return y0 + off;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.emptyFloatVector = function(len) {
	var this1 = new Array(len);
	var vec = this1;
	return vec;
};
kha_audio2_ogg_vorbis_VorbisTools.copyVector = function(source) {
	var this1 = new Array(source.length);
	var dest = this1;
	var _g = 0;
	var _g1 = source.length;
	while(_g < _g1) {
		var i = _g++;
		dest[i] = source[i];
	}
	return dest;
};
var kha_audio2_ogg_vorbis_data_Codebook = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Codebook"] = kha_audio2_ogg_vorbis_data_Codebook;
kha_audio2_ogg_vorbis_data_Codebook.__name__ = "kha.audio2.ogg.vorbis.data.Codebook";
kha_audio2_ogg_vorbis_data_Codebook.read = function(decodeState) {
	var c = new kha_audio2_ogg_vorbis_data_Codebook();
	if(decodeState.readBits(8) != 66 || decodeState.readBits(8) != 67 || decodeState.readBits(8) != 86) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 40, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	var x = decodeState.readBits(8);
	c.dimensions = (decodeState.readBits(8) << 8) + x;
	var x1 = decodeState.readBits(8);
	var y = decodeState.readBits(8);
	c.entries = (decodeState.readBits(8) << 16) + (y << 8) + x1;
	var ordered = decodeState.readBits(1);
	c.sparse = ordered != 0 ? false : decodeState.readBits(1) != 0;
	var this1 = new Array(c.entries);
	var lengths = this1;
	if(!c.sparse) {
		c.codewordLengths = lengths;
	}
	var total = 0;
	if(ordered != 0) {
		var currentEntry = 0;
		var currentLength = decodeState.readBits(5) + 1;
		while(currentEntry < c.entries) {
			var limit = c.entries - currentEntry;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			var n = decodeState.readBits(limit < 16384 ? limit < 16 ? log2_4[limit] : limit < 512 ? 5 + log2_4[limit >> 5] : 10 + log2_4[limit >> 10] : limit < 16777216 ? limit < 524288 ? 15 + log2_4[limit >> 15] : 20 + log2_4[limit >> 20] : limit < 536870912 ? 25 + log2_4[limit >> 25] : limit < -2147483648 ? 30 + log2_4[limit >> 30] : 0);
			if(currentEntry + n > c.entries) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook entrys",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 67, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
			}
			var _g = 0;
			var _g1 = n;
			while(_g < _g1) {
				var i = _g++;
				lengths[currentEntry + i] = currentLength;
			}
			currentEntry += n;
			++currentLength;
		}
	} else {
		var _g2 = 0;
		var _g11 = c.entries;
		while(_g2 < _g11) {
			var j = _g2++;
			var present = c.sparse ? decodeState.readBits(1) : 1;
			if(present != 0) {
				lengths[j] = decodeState.readBits(5) + 1;
				++total;
			} else {
				lengths[j] = 255;
			}
		}
	}
	if(c.sparse && total >= c.entries >> 2) {
		c.codewordLengths = lengths;
		c.sparse = false;
	}
	var tmp;
	if(c.sparse) {
		tmp = total;
	} else {
		var sortedCount = 0;
		var _g3 = 0;
		var _g12 = c.entries;
		while(_g3 < _g12) {
			var j1 = _g3++;
			var l = lengths[j1];
			if(l > 10 && l != 255) {
				++sortedCount;
			}
		}
		tmp = sortedCount;
	}
	c.sortedEntries = tmp;
	var values = null;
	if(!c.sparse) {
		var this2 = new Array(c.entries);
		c.codewords = this2;
	} else {
		if(c.sortedEntries != 0) {
			var this3 = new Array(c.sortedEntries);
			c.codewordLengths = this3;
			var this4 = new Array(c.entries);
			c.codewords = this4;
			var this5 = new Array(c.entries);
			values = this5;
		}
		var size = c.entries + 64 * c.sortedEntries;
	}
	if(!c.computeCodewords(lengths,c.entries,values)) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"compute codewords",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 120, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.sortedEntries != 0) {
		c.sortedCodewords = [];
		var this6 = new Array(c.sortedEntries);
		c.sortedValues = this6;
		c.computeSortedHuffman(lengths,values);
	}
	if(c.sparse) {
		values = null;
		c.codewords = null;
		lengths = null;
	}
	c.computeAcceleratedHuffman();
	c.lookupType = decodeState.readBits(4);
	if(c.lookupType > 2) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook lookup type",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 143, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.lookupType > 0) {
		var x2 = decodeState.readBits(32);
		var mantissa = _$UInt_UInt_$Impl_$.toFloat(x2 & 2097151);
		var sign = x2 & -2147483648;
		var exp = (x2 & 2145386496) >>> 21;
		var res = sign != 0 ? -mantissa : mantissa;
		c.minimumValue = res * Math.pow(2,exp - 788);
		var x3 = decodeState.readBits(32);
		var mantissa1 = _$UInt_UInt_$Impl_$.toFloat(x3 & 2097151);
		var sign1 = x3 & -2147483648;
		var exp1 = (x3 & 2145386496) >>> 21;
		var res1 = sign1 != 0 ? -mantissa1 : mantissa1;
		c.deltaValue = res1 * Math.pow(2,exp1 - 788);
		c.valueBits = decodeState.readBits(4) + 1;
		c.sequenceP = decodeState.readBits(1) != 0;
		if(c.lookupType == 1) {
			c.lookupValues = kha_audio2_ogg_vorbis_VorbisTools.lookup1Values(c.entries,c.dimensions);
		} else {
			c.lookupValues = c.entries * c.dimensions;
		}
		var this7 = new Array(c.lookupValues);
		var mults = this7;
		var _g4 = 0;
		var _g13 = c.lookupValues;
		while(_g4 < _g13) {
			var j2 = _g4++;
			var q = decodeState.readBits(c.valueBits);
			if(q == -1) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"fail lookup",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 161, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
			}
			mults[j2] = q;
		}
		var this8 = new Array(c.lookupValues);
		c.multiplicands = this8;
		var _g21 = 0;
		var _g31 = c.lookupValues;
		while(_g21 < _g31) {
			var j3 = _g21++;
			c.multiplicands[j3] = mults[j3] * c.deltaValue + c.minimumValue;
		}
		if(c.lookupType == 2 && c.sequenceP) {
			var _g22 = 1;
			var _g32 = c.lookupValues;
			while(_g22 < _g32) {
				var j4 = _g22++;
				c.multiplicands[j4] = c.multiplicands[j4 - 1];
			}
			c.sequenceP = false;
		}
	}
	return c;
};
kha_audio2_ogg_vorbis_data_Codebook.prototype = {
	dimensions: null
	,entries: null
	,codewordLengths: null
	,minimumValue: null
	,deltaValue: null
	,valueBits: null
	,lookupType: null
	,sequenceP: null
	,sparse: null
	,lookupValues: null
	,multiplicands: null
	,codewords: null
	,fastHuffman: null
	,sortedCodewords: null
	,sortedValues: null
	,sortedEntries: null
	,addEntry: function(huffCode,symbol,count,len,values) {
		if(!this.sparse) {
			this.codewords[symbol] = huffCode;
		} else {
			this.codewords[count] = huffCode;
			this.codewordLengths[count] = len;
			values[count] = symbol;
		}
	}
	,includeInSort: function(len) {
		if(this.sparse) {
			return true;
		} else if(len == 255) {
			return false;
		} else if(len > 10) {
			return true;
		} else {
			return false;
		}
	}
	,computeCodewords: function(len,n,values) {
		var this1 = new Array(32);
		var available = this1;
		available[0] = 0;
		available[1] = 0;
		available[2] = 0;
		available[3] = 0;
		available[4] = 0;
		available[5] = 0;
		available[6] = 0;
		available[7] = 0;
		available[8] = 0;
		available[9] = 0;
		available[10] = 0;
		available[11] = 0;
		available[12] = 0;
		available[13] = 0;
		available[14] = 0;
		available[15] = 0;
		available[16] = 0;
		available[17] = 0;
		available[18] = 0;
		available[19] = 0;
		available[20] = 0;
		available[21] = 0;
		available[22] = 0;
		available[23] = 0;
		available[24] = 0;
		available[25] = 0;
		available[26] = 0;
		available[27] = 0;
		available[28] = 0;
		available[29] = 0;
		available[30] = 0;
		available[31] = 0;
		var k = 0;
		while(k < n) {
			if(len[k] < 255) {
				break;
			}
			++k;
		}
		if(k == n) {
			return true;
		}
		var m = 0;
		var count = m++;
		if(!this.sparse) {
			this.codewords[k] = 0;
		} else {
			this.codewords[count] = 0;
			this.codewordLengths[count] = len[k];
			values[count] = k;
		}
		var i = 0;
		while(++i <= len[k]) available[i] = 1 << 32 - i;
		i = k;
		while(++i < n) {
			var z = len[i];
			if(z == 255) {
				continue;
			}
			while(z > 0 && available[z] == 0) --z;
			if(z == 0) {
				return false;
			}
			var res = available[z];
			available[z] = 0;
			var n1 = res;
			n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
			n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
			n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
			n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
			var huffCode = n1 >>> 16 | n1 << 16;
			var count1 = m++;
			if(!this.sparse) {
				this.codewords[i] = huffCode;
			} else {
				this.codewords[count1] = huffCode;
				this.codewordLengths[count1] = len[i];
				values[count1] = i;
			}
			if(z != len[i]) {
				var y = len[i];
				while(y > z) {
					available[y] = res + (1 << 32 - y);
					--y;
				}
			}
		}
		return true;
	}
	,computeSortedHuffman: function(lengths,values) {
		if(!this.sparse) {
			var k = 0;
			var _g = 0;
			var _g1 = this.entries;
			while(_g < _g1) {
				var i = _g++;
				var len = lengths[i];
				if(this.sparse ? true : len == 255 ? false : len > 10) {
					var n = this.codewords[i];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					this.sortedCodewords[k++] = n >>> 16 | n << 16;
				}
			}
		} else {
			var _g2 = 0;
			var _g11 = this.sortedEntries;
			while(_g2 < _g11) {
				var i1 = _g2++;
				var n1 = this.codewords[i1];
				n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
				n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
				n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
				n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
				this.sortedCodewords[i1] = n1 >>> 16 | n1 << 16;
			}
		}
		this.sortedCodewords[this.sortedEntries] = -1;
		this.sortedCodewords.sort(kha_audio2_ogg_vorbis_VorbisTools.uintAsc);
		var len1 = this.sparse ? this.sortedEntries : this.entries;
		var _g3 = 0;
		var _g12 = len1;
		while(_g3 < _g12) {
			var i2 = _g3++;
			var huffLen = this.sparse ? lengths[values[i2]] : lengths[i2];
			if(this.sparse ? true : huffLen == 255 ? false : huffLen > 10) {
				var n2 = this.codewords[i2];
				n2 = (n2 & -1431655766) >>> 1 | (n2 & 1431655765) << 1;
				n2 = (n2 & -858993460) >>> 2 | (n2 & 858993459) << 2;
				n2 = (n2 & -252645136) >>> 4 | (n2 & 252645135) << 4;
				n2 = (n2 & -16711936) >>> 8 | (n2 & 16711935) << 8;
				var code = n2 >>> 16 | n2 << 16;
				var x = 0;
				var n3 = this.sortedEntries;
				while(n3 > 1) {
					var m = x + (n3 >> 1);
					if(_$UInt_UInt_$Impl_$.gte(code,this.sortedCodewords[m])) {
						x = m;
						n3 -= n3 >> 1;
					} else {
						n3 >>= 1;
					}
				}
				if(this.sparse) {
					this.sortedValues[x] = values[i2];
					this.codewordLengths[x] = huffLen;
				} else {
					this.sortedValues[x] = i2;
				}
			}
		}
	}
	,computeAcceleratedHuffman: function() {
		var this1 = new Array(1024);
		this.fastHuffman = this1;
		this.fastHuffman[0] = -1;
		var _g = 0;
		var _g1 = 1024;
		while(_g < _g1) {
			var i = _g++;
			this.fastHuffman[i] = -1;
		}
		var len = this.sparse ? this.sortedEntries : this.entries;
		var _g2 = 0;
		var _g3 = len;
		while(_g2 < _g3) {
			var i1 = _g2++;
			if(this.codewordLengths[i1] <= 10) {
				var z;
				if(this.sparse) {
					var n = this.sortedCodewords[i1];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					z = n >>> 16 | n << 16;
				} else {
					z = this.codewords[i1];
				}
				while(z < 1024) {
					this.fastHuffman[z] = i1;
					z += 1 << this.codewordLengths[i1];
				}
			}
		}
	}
	,codebookDecode: function(decodeState,output,offset,len) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		var minimumValue = this.minimumValue;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		if(this.lookupType == 1) {
			var div = 1;
			var last = 0.0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i1 = _g++;
				var off = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
				var val1 = multiplicands[off] + last;
				var _g2 = offset + i1;
				var _g11 = output;
				_g11[_g2] = _g11[_g2] + val1;
				if(sequenceP) {
					last = val1 + minimumValue;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		if(sequenceP) {
			var last1 = 0.0;
			var _g3 = 0;
			var _g12 = len;
			while(_g3 < _g12) {
				var i2 = _g3++;
				var val2 = multiplicands[z + i2] + last1;
				var _g4 = offset + i2;
				var _g13 = output;
				_g13[_g4] = _g13[_g4] + val2;
				last1 = val2 + minimumValue;
			}
		} else {
			var last2 = 0.0;
			var _g5 = 0;
			var _g14 = len;
			while(_g5 < _g14) {
				var i3 = _g5++;
				var _g6 = offset + i3;
				var _g15 = output;
				_g15[_g6] = _g15[_g6] + (multiplicands[z + i3] + last2);
			}
		}
		return true;
	}
	,codebookDecodeStep: function(decodeState,output,offset,len,step) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var last = 0.0;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		if(this.lookupType == 1) {
			var div = 1;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i1 = _g++;
				var off = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
				var val1 = multiplicands[off] + last;
				var _g2 = offset + i1 * step;
				var _g11 = output;
				_g11[_g2] = _g11[_g2] + val1;
				if(sequenceP) {
					last = val1;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		var _g3 = 0;
		var _g12 = len;
		while(_g3 < _g12) {
			var i2 = _g3++;
			var val2 = multiplicands[z + i2] + last;
			var _g4 = offset + i2 * step;
			var _g13 = output;
			_g13[_g4] = _g13[_g4] + val2;
			if(sequenceP) {
				last = val2;
			}
		}
		return true;
	}
	,decodeStart: function(decodeState) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		return val;
	}
	,decodeDeinterleaveRepeat: function(decodeState,residueBuffers,ch,cInter,pInter,len,totalDecode) {
		var effective = this.dimensions;
		if(this.lookupType == 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 488, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
		}
		var multiplicands = this.multiplicands;
		var sequenceP = this.sequenceP;
		var lookupValues = this.lookupValues;
		while(totalDecode > 0) {
			var last = 0.0;
			if(decodeState.validBits < 10) {
				decodeState.prepHuffman();
			}
			var i = this.fastHuffman[decodeState.acc & 1023];
			var val;
			if(i >= 0) {
				var l = this.codewordLengths[i];
				decodeState.acc = decodeState.acc >>> l;
				decodeState.validBits -= l;
				if(decodeState.validBits < 0) {
					decodeState.validBits = 0;
					val = -1;
				} else {
					val = i;
				}
			} else {
				val = decodeState.decodeScalarRaw(this);
			}
			if(this.sparse) {
				val = this.sortedValues[val];
			}
			var z = val;
			if(z < 0) {
				if(decodeState.bytesInSeg == 0 && decodeState.lastSeg) {
					return null;
				}
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 503, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
			}
			if(cInter + pInter * ch + effective > len * ch) {
				effective = len * ch - (pInter * ch - cInter);
			}
			if(this.lookupType == 1) {
				var div = 1;
				if(sequenceP) {
					var _g = 0;
					var _g1 = effective;
					while(_g < _g1) {
						var i1 = _g++;
						var off = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
						var val1 = multiplicands[off] + last;
						var _g2 = pInter;
						var _g11 = residueBuffers[cInter];
						_g11[_g2] = _g11[_g2] + val1;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val1;
						div = div * lookupValues;
					}
				} else {
					var _g3 = 0;
					var _g12 = effective;
					while(_g3 < _g12) {
						var i2 = _g3++;
						var off1 = _$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0;
						var val2 = multiplicands[off1] + last;
						var _g4 = pInter;
						var _g13 = residueBuffers[cInter];
						_g13[_g4] = _g13[_g4] + val2;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						div = div * lookupValues;
					}
				}
			} else {
				z *= this.dimensions;
				if(sequenceP) {
					var _g5 = 0;
					var _g14 = effective;
					while(_g5 < _g14) {
						var i3 = _g5++;
						var val3 = multiplicands[z + i3] + last;
						var _g6 = pInter;
						var _g15 = residueBuffers[cInter];
						_g15[_g6] = _g15[_g6] + val3;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val3;
					}
				} else {
					var _g7 = 0;
					var _g16 = effective;
					while(_g7 < _g16) {
						var i4 = _g7++;
						var val4 = multiplicands[z + i4] + last;
						var _g8 = pInter;
						var _g17 = residueBuffers[cInter];
						_g17[_g8] = _g17[_g8] + val4;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
					}
				}
			}
			totalDecode -= effective;
		}
		return { cInter : cInter, pInter : pInter};
	}
	,residueDecode: function(decodeState,target,offset,n,rtype) {
		if(rtype == 0) {
			var step = n / this.dimensions | 0;
			var _g = 0;
			var _g1 = step;
			while(_g < _g1) {
				var k = _g++;
				if(!this.codebookDecodeStep(decodeState,target,offset + k,n - offset - k,step)) {
					return false;
				}
			}
		} else {
			var k1 = 0;
			while(k1 < n) {
				if(!this.codebookDecode(decodeState,target,offset,n - k1)) {
					return false;
				}
				k1 += this.dimensions;
				offset += this.dimensions;
			}
		}
		return true;
	}
	,__class__: kha_audio2_ogg_vorbis_data_Codebook
};
var kha_audio2_ogg_vorbis_data_Comment = function() {
	this.data = new haxe_ds_StringMap();
};
$hxClasses["kha.audio2.ogg.vorbis.data.Comment"] = kha_audio2_ogg_vorbis_data_Comment;
kha_audio2_ogg_vorbis_data_Comment.__name__ = "kha.audio2.ogg.vorbis.data.Comment";
kha_audio2_ogg_vorbis_data_Comment.prototype = {
	data: null
	,get_title: function() {
		return this.getString("title");
	}
	,get_loopStart: function() {
		return Std.parseInt(this.getString("loopstart"));
	}
	,get_loopLength: function() {
		return Std.parseInt(this.getString("looplength"));
	}
	,get_version: function() {
		return this.getString("version");
	}
	,get_album: function() {
		return this.getString("album");
	}
	,get_organization: function() {
		return this.getString("organization");
	}
	,get_tracknumber: function() {
		return this.getString("tracknumber");
	}
	,get_performer: function() {
		return this.getString("performer");
	}
	,get_copyright: function() {
		return this.getString("copyright");
	}
	,get_license: function() {
		return this.getString("license");
	}
	,get_artist: function() {
		return this.getString("artist");
	}
	,get_description: function() {
		return this.getString("description");
	}
	,get_genre: function() {
		return this.getString("genre");
	}
	,get_date: function() {
		return this.getString("date");
	}
	,get_location: function() {
		return this.getString("location");
	}
	,get_contact: function() {
		return this.getString("contact");
	}
	,get_isrc: function() {
		return this.getString("isrc");
	}
	,get_artists: function() {
		return this.getArray("artist");
	}
	,add: function(key,value) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			(__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]).push(value);
		} else {
			var v = [value];
			var _this2 = this.data;
			if(__map_reserved[key] != null) {
				_this2.setReserved(key,v);
			} else {
				_this2.h[key] = v;
			}
		}
	}
	,getString: function(key) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			return (__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key])[0];
		} else {
			return null;
		}
	}
	,getArray: function(key) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			if(__map_reserved[key] != null) {
				return _this1.getReserved(key);
			} else {
				return _this1.h[key];
			}
		} else {
			return null;
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Comment
	,__properties__: {get_artists:"get_artists",get_isrc:"get_isrc",get_contact:"get_contact",get_location:"get_location",get_date:"get_date",get_genre:"get_genre",get_description:"get_description",get_artist:"get_artist",get_license:"get_license",get_copyright:"get_copyright",get_performer:"get_performer",get_tracknumber:"get_tracknumber",get_organization:"get_organization",get_album:"get_album",get_version:"get_version",get_loopLength:"get_loopLength",get_loopStart:"get_loopStart",get_title:"get_title"}
};
var kha_audio2_ogg_vorbis_data_Floor = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor"] = kha_audio2_ogg_vorbis_data_Floor;
kha_audio2_ogg_vorbis_data_Floor.__name__ = "kha.audio2.ogg.vorbis.data.Floor";
kha_audio2_ogg_vorbis_data_Floor.read = function(decodeState,codebooks) {
	var floor = new kha_audio2_ogg_vorbis_data_Floor();
	floor.type = decodeState.readBits(16);
	if(floor.type > 1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 28, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
	}
	if(floor.type == 0) {
		var g = floor.floor0 = new kha_audio2_ogg_vorbis_data_Floor0();
		g.order = decodeState.readBits(8);
		g.rate = decodeState.readBits(16);
		g.barkMapSize = decodeState.readBits(16);
		g.amplitudeBits = decodeState.readBits(6);
		g.amplitudeOffset = decodeState.readBits(8);
		g.numberOfBooks = decodeState.readBits(4) + 1;
		var _g = 0;
		var _g1 = g.numberOfBooks;
		while(_g < _g1) {
			var j = _g++;
			g.bookList[j] = decodeState.readBits(8);
		}
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 41, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
	} else {
		var p = [];
		var g1 = floor.floor1 = new kha_audio2_ogg_vorbis_data_Floor1();
		var maxClass = -1;
		g1.partitions = decodeState.readBits(5);
		var this1 = new Array(g1.partitions);
		g1.partitionClassList = this1;
		var _g2 = 0;
		var _g11 = g1.partitions;
		while(_g2 < _g11) {
			var j1 = _g2++;
			g1.partitionClassList[j1] = decodeState.readBits(4);
			if(g1.partitionClassList[j1] > maxClass) {
				maxClass = g1.partitionClassList[j1];
			}
		}
		var this2 = new Array(maxClass + 1);
		g1.classDimensions = this2;
		var this3 = new Array(maxClass + 1);
		g1.classMasterbooks = this3;
		var this4 = new Array(maxClass + 1);
		g1.classSubclasses = this4;
		var this5 = new Array(maxClass + 1);
		g1.subclassBooks = this5;
		var _g21 = 0;
		var _g3 = maxClass + 1;
		while(_g21 < _g3) {
			var j2 = _g21++;
			g1.classDimensions[j2] = decodeState.readBits(3) + 1;
			g1.classSubclasses[j2] = decodeState.readBits(2);
			if(g1.classSubclasses[j2] != 0) {
				g1.classMasterbooks[j2] = decodeState.readBits(8);
				if(g1.classMasterbooks[j2] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 64, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
				}
			}
			var kl = 1 << g1.classSubclasses[j2];
			var this6 = g1.subclassBooks;
			var this7 = new Array(kl);
			this6[j2] = this7;
			var _g22 = 0;
			var _g31 = kl;
			while(_g22 < _g31) {
				var k = _g22++;
				g1.subclassBooks[j2][k] = decodeState.readBits(8) - 1;
				if(g1.subclassBooks[j2][k] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 73, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
				}
			}
		}
		g1.floor1Multiplier = decodeState.readBits(2) + 1;
		g1.rangebits = decodeState.readBits(4);
		var this8 = new Array(250);
		g1.xlist = this8;
		g1.xlist[0] = 0;
		g1.xlist[1] = 1 << g1.rangebits;
		g1.values = 2;
		var _g4 = 0;
		var _g5 = g1.partitions;
		while(_g4 < _g5) {
			var j3 = _g4++;
			var c = g1.partitionClassList[j3];
			var _g41 = 0;
			var _g51 = g1.classDimensions[c];
			while(_g41 < _g51) {
				var k1 = _g41++;
				g1.xlist[g1.values] = decodeState.readBits(g1.rangebits);
				g1.values++;
			}
		}
		var _g6 = 0;
		var _g7 = g1.values;
		while(_g6 < _g7) {
			var j4 = _g6++;
			p.push(new kha_audio2_ogg_vorbis_data_IntPoint());
			p[j4].x = g1.xlist[j4];
			p[j4].y = j4;
		}
		p.sort(kha_audio2_ogg_vorbis_VorbisTools.pointCompare);
		var this9 = new Array(g1.values);
		g1.sortedOrder = this9;
		var _g8 = 0;
		var _g9 = g1.values;
		while(_g8 < _g9) {
			var j5 = _g8++;
			g1.sortedOrder[j5] = p[j5].y;
		}
		var this10 = new Array(g1.values);
		g1.neighbors = this10;
		var _g10 = 2;
		var _g111 = g1.values;
		while(_g10 < _g111) {
			var j6 = _g10++;
			var x = g1.xlist;
			var low = -1;
			var high = 65536;
			var plow = 0;
			var phigh = 0;
			var _g12 = 0;
			var _g13 = j6;
			while(_g12 < _g13) {
				var i = _g12++;
				if(x[i] > low && x[i] < x[j6]) {
					plow = i;
					low = x[i];
				}
				if(x[i] < high && x[i] > x[j6]) {
					phigh = i;
					high = x[i];
				}
			}
			var ne_low = plow;
			var ne_high = phigh;
			var this11 = g1.neighbors;
			var this12 = new Array(g1.values);
			this11[j6] = this12;
			g1.neighbors[j6][0] = ne_low;
			g1.neighbors[j6][1] = ne_high;
		}
	}
	return floor;
};
kha_audio2_ogg_vorbis_data_Floor.prototype = {
	floor0: null
	,floor1: null
	,type: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor
};
var kha_audio2_ogg_vorbis_data_Floor0 = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor0"] = kha_audio2_ogg_vorbis_data_Floor0;
kha_audio2_ogg_vorbis_data_Floor0.__name__ = "kha.audio2.ogg.vorbis.data.Floor0";
kha_audio2_ogg_vorbis_data_Floor0.prototype = {
	order: null
	,rate: null
	,barkMapSize: null
	,amplitudeBits: null
	,amplitudeOffset: null
	,numberOfBooks: null
	,bookList: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor0
};
var kha_audio2_ogg_vorbis_data_Floor1 = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor1"] = kha_audio2_ogg_vorbis_data_Floor1;
kha_audio2_ogg_vorbis_data_Floor1.__name__ = "kha.audio2.ogg.vorbis.data.Floor1";
kha_audio2_ogg_vorbis_data_Floor1.prototype = {
	partitions: null
	,partitionClassList: null
	,classDimensions: null
	,classSubclasses: null
	,classMasterbooks: null
	,subclassBooks: null
	,xlist: null
	,sortedOrder: null
	,neighbors: null
	,floor1Multiplier: null
	,rangebits: null
	,values: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor1
};
var kha_audio2_ogg_vorbis_data_Header = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Header"] = kha_audio2_ogg_vorbis_data_Header;
kha_audio2_ogg_vorbis_data_Header.__name__ = "kha.audio2.ogg.vorbis.data.Header";
kha_audio2_ogg_vorbis_data_Header.read = function(decodeState) {
	var page = decodeState.page;
	page.start(decodeState);
	if((page.flag & 2) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"not firstPage",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 46, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 4) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"lastPage",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 49, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 1) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"continuedPacket",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 52, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.firstPageValidate();
	decodeState.inputPosition += 1;
	if(decodeState.input.readByte() != 1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 57, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header = new haxe_io_Bytes(new ArrayBuffer(6));
	var x;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[0] = x;
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[1] = x1;
	var x2;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x2 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x2 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[2] = x2;
	var x3;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x3 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x3 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[3] = x3;
	var x4;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x4 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x4 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[4] = x4;
	var x5;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x5 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x5 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[5] = x5;
	if(header.toString() != "vorbis") {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 301, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	decodeState.inputPosition += 4;
	var version = decodeState.input.readInt32();
	if(version != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"vorbis version : " + version,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 66, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header1 = new kha_audio2_ogg_vorbis_data_Header();
	decodeState.inputPosition += 1;
	header1.channel = decodeState.input.readByte();
	if(header1.channel == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no channel",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 73, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	} else if(header1.channel > 16) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS,"too many channels",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 75, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header1.sampleRate = decodeState.input.readInt32();
	if(header1.sampleRate == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no sampling rate",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 80, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header1.maximumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header1.nominalBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header1.minimumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 1;
	var x6 = decodeState.input.readByte();
	var log0 = x6 & 15;
	var log1 = x6 >> 4;
	header1.blocksize0 = 1 << log0;
	header1.blocksize1 = 1 << log1;
	if(log0 < 6 || log0 > 13) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 93, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if(log1 < 6 || log1 > 13) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 96, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if(log0 > log1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 99, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 1;
	var x7 = decodeState.input.readByte();
	if((x7 & 1) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 105, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.page.start(decodeState);
	decodeState.startPacket();
	var len = 0;
	var output = new haxe_io_BytesOutput();
	while(true) {
		len = decodeState.next();
		if(!(len != 0)) {
			break;
		}
		decodeState.inputPosition += len;
		output.write(decodeState.input.read(len));
		decodeState.bytesInSeg = 0;
	}
	var packetInput = new haxe_io_BytesInput(output.getBytes());
	packetInput.readByte();
	packetInput.read(6);
	var vendorLength = packetInput.readInt32();
	header1.vendor = packetInput.readString(vendorLength);
	header1.comment = new kha_audio2_ogg_vorbis_data_Comment();
	var commentCount = packetInput.readInt32();
	var _g = 0;
	var _g1 = commentCount;
	while(_g < _g1) {
		var i = _g++;
		var n = packetInput.readInt32();
		var str = packetInput.readString(n);
		var splitter = str.indexOf("=");
		if(splitter != -1) {
			header1.comment.add(str.substring(0,splitter),str.substring(splitter + 1));
		}
	}
	var x8 = packetInput.readByte();
	if((x8 & 1) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 141, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.startPacket();
	var x9;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x9 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x9 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	if(x9 != 5) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"setup packet",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 149, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header2 = new haxe_io_Bytes(new ArrayBuffer(6));
	var x10;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x10 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x10 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[0] = x10;
	var x11;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x11 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x11 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[1] = x11;
	var x12;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x12 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x12 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[2] = x12;
	var x13;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x13 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x13 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[3] = x13;
	var x14;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x14 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x14 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[4] = x14;
	var x15;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x15 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x15 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[5] = x15;
	if(header2.toString() != "vorbis") {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 301, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	var codebookCount = decodeState.readBits(8) + 1;
	var this1 = new Array(codebookCount);
	header1.codebooks = this1;
	var _g2 = 0;
	var _g11 = codebookCount;
	while(_g2 < _g11) {
		var i1 = _g2++;
		header1.codebooks[i1] = kha_audio2_ogg_vorbis_data_Codebook.read(decodeState);
	}
	x7 = decodeState.readBits(6) + 1;
	var _g21 = 0;
	var _g3 = x7;
	while(_g21 < _g3) {
		var i2 = _g21++;
		if(decodeState.readBits(16) != 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 165, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
		}
	}
	var floorCount = decodeState.readBits(6) + 1;
	var this2 = new Array(floorCount);
	header1.floorConfig = this2;
	var _g4 = 0;
	var _g5 = floorCount;
	while(_g4 < _g5) {
		var i3 = _g4++;
		header1.floorConfig[i3] = kha_audio2_ogg_vorbis_data_Floor.read(decodeState,header1.codebooks);
	}
	var residueCount = decodeState.readBits(6) + 1;
	var this3 = new Array(residueCount);
	header1.residueConfig = this3;
	var _g6 = 0;
	var _g7 = residueCount;
	while(_g6 < _g7) {
		var i4 = _g6++;
		header1.residueConfig[i4] = kha_audio2_ogg_vorbis_data_Residue.read(decodeState,header1.codebooks);
	}
	var mappingCount = decodeState.readBits(6) + 1;
	var this4 = new Array(mappingCount);
	header1.mapping = this4;
	var _g8 = 0;
	var _g9 = mappingCount;
	while(_g8 < _g9) {
		var i5 = _g8++;
		var map = kha_audio2_ogg_vorbis_data_Mapping.read(decodeState,header1.channel);
		header1.mapping[i5] = map;
		var _g81 = 0;
		var _g91 = map.submaps;
		while(_g81 < _g91) {
			var j = _g81++;
			if(map.submapFloor[j] >= header1.floorConfig.length) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 191, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
			}
			if(map.submapResidue[j] >= header1.residueConfig.length) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 194, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
			}
		}
	}
	var modeCount = decodeState.readBits(6) + 1;
	var this5 = new Array(modeCount);
	header1.modes = this5;
	var _g10 = 0;
	var _g111 = modeCount;
	while(_g10 < _g111) {
		var i6 = _g10++;
		var mode = kha_audio2_ogg_vorbis_data_Mode.read(decodeState);
		header1.modes[i6] = mode;
		if(mode.mapping >= header1.mapping.length) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 205, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
		}
	}
	while(decodeState.bytesInSeg != 0 || !decodeState.lastSeg && decodeState.next() != 0) {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		decodeState.input.readByte();
	}
	return header1;
};
kha_audio2_ogg_vorbis_data_Header.prototype = {
	maximumBitRate: null
	,nominalBitRate: null
	,minimumBitRate: null
	,sampleRate: null
	,channel: null
	,blocksize0: null
	,blocksize1: null
	,codebooks: null
	,floorConfig: null
	,residueConfig: null
	,mapping: null
	,modes: null
	,comment: null
	,vendor: null
	,__class__: kha_audio2_ogg_vorbis_data_Header
};
var kha_audio2_ogg_vorbis_data_IntPoint = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.IntPoint"] = kha_audio2_ogg_vorbis_data_IntPoint;
kha_audio2_ogg_vorbis_data_IntPoint.__name__ = "kha.audio2.ogg.vorbis.data.IntPoint";
kha_audio2_ogg_vorbis_data_IntPoint.prototype = {
	x: null
	,y: null
	,__class__: kha_audio2_ogg_vorbis_data_IntPoint
};
var kha_audio2_ogg_vorbis_data_Mapping = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Mapping"] = kha_audio2_ogg_vorbis_data_Mapping;
kha_audio2_ogg_vorbis_data_Mapping.__name__ = "kha.audio2.ogg.vorbis.data.Mapping";
kha_audio2_ogg_vorbis_data_Mapping.read = function(decodeState,channels) {
	var m = new kha_audio2_ogg_vorbis_data_Mapping();
	var mappingType = decodeState.readBits(16);
	if(mappingType != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"mapping type " + mappingType,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 22, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
	}
	var this1 = new Array(channels);
	m.chan = this1;
	var _g = 0;
	var _g1 = channels;
	while(_g < _g1) {
		var j = _g++;
		m.chan[j] = new kha_audio2_ogg_vorbis_data_MappingChannel();
	}
	if(decodeState.readBits(1) != 0) {
		m.submaps = decodeState.readBits(4) + 1;
	} else {
		m.submaps = 1;
	}
	if(decodeState.readBits(1) != 0) {
		m.couplingSteps = decodeState.readBits(8) + 1;
		var _g2 = 0;
		var _g3 = m.couplingSteps;
		while(_g2 < _g3) {
			var k = _g2++;
			var n = channels - 1;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			m.chan[k].magnitude = decodeState.readBits(n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0);
			var n1 = channels - 1;
			var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			m.chan[k].angle = decodeState.readBits(n1 < 16384 ? n1 < 16 ? log2_41[n1] : n1 < 512 ? 5 + log2_41[n1 >> 5] : 10 + log2_41[n1 >> 10] : n1 < 16777216 ? n1 < 524288 ? 15 + log2_41[n1 >> 15] : 20 + log2_41[n1 >> 20] : n1 < 536870912 ? 25 + log2_41[n1 >> 25] : n1 < -2147483648 ? 30 + log2_41[n1 >> 30] : 0);
			if(m.chan[k].magnitude >= channels) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 46, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].angle >= channels) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 49, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].magnitude == m.chan[k].angle) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 52, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		m.couplingSteps = 0;
	}
	if(decodeState.readBits(2) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 61, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
	}
	if(m.submaps > 1) {
		var _g21 = 0;
		var _g31 = channels;
		while(_g21 < _g31) {
			var j1 = _g21++;
			m.chan[j1].mux = decodeState.readBits(4);
			if(m.chan[j1].mux >= m.submaps) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 67, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		var _g22 = 0;
		var _g32 = channels;
		while(_g22 < _g32) {
			var j2 = _g22++;
			m.chan[j2].mux = 0;
		}
	}
	var this2 = new Array(m.submaps);
	m.submapFloor = this2;
	var this3 = new Array(m.submaps);
	m.submapResidue = this3;
	var _g23 = 0;
	var _g33 = m.submaps;
	while(_g23 < _g33) {
		var j3 = _g23++;
		decodeState.readBits(8);
		m.submapFloor[j3] = decodeState.readBits(8);
		m.submapResidue[j3] = decodeState.readBits(8);
	}
	return m;
};
kha_audio2_ogg_vorbis_data_Mapping.prototype = {
	couplingSteps: null
	,chan: null
	,submaps: null
	,submapFloor: null
	,submapResidue: null
	,doFloor: function(floors,i,n,target,finalY,step2Flag) {
		var n2 = n >> 1;
		var s = this.chan[i].mux;
		var floor;
		var floor1 = floors[this.submapFloor[s]];
		if(floor1.type == 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 94, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "doFloor"}));
		} else {
			var g = floor1.floor1;
			var lx = 0;
			var ly = finalY[0] * g.floor1Multiplier;
			var _g = 1;
			var _g1 = g.values;
			while(_g < _g1) {
				var q = _g++;
				var j = g.sortedOrder[q];
				if(finalY[j] >= 0) {
					var hy = finalY[j] * g.floor1Multiplier;
					var hx = g.xlist[j];
					kha_audio2_ogg_vorbis_VorbisTools.drawLine(target,lx,ly,hx,hy,n2);
					lx = hx;
					ly = hy;
				}
			}
			if(lx < n2) {
				var _g2 = lx;
				var _g3 = n2;
				while(_g2 < _g3) {
					var j1 = _g2++;
					var _g21 = j1;
					var _g31 = target;
					_g31[_g21] = _g31[_g21] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[ly];
				}
			}
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Mapping
};
var kha_audio2_ogg_vorbis_data_MappingChannel = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.MappingChannel"] = kha_audio2_ogg_vorbis_data_MappingChannel;
kha_audio2_ogg_vorbis_data_MappingChannel.__name__ = "kha.audio2.ogg.vorbis.data.MappingChannel";
kha_audio2_ogg_vorbis_data_MappingChannel.prototype = {
	magnitude: null
	,angle: null
	,mux: null
	,__class__: kha_audio2_ogg_vorbis_data_MappingChannel
};
var kha_audio2_ogg_vorbis_data_Mode = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Mode"] = kha_audio2_ogg_vorbis_data_Mode;
kha_audio2_ogg_vorbis_data_Mode.__name__ = "kha.audio2.ogg.vorbis.data.Mode";
kha_audio2_ogg_vorbis_data_Mode.read = function(decodeState) {
	var m = new kha_audio2_ogg_vorbis_data_Mode();
	m.blockflag = decodeState.readBits(1) != 0;
	m.windowtype = decodeState.readBits(16);
	m.transformtype = decodeState.readBits(16);
	m.mapping = decodeState.readBits(8);
	if(m.windowtype != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mode.hx", lineNumber : 22, className : "kha.audio2.ogg.vorbis.data.Mode", methodName : "read"}));
	}
	if(m.transformtype != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mode.hx", lineNumber : 25, className : "kha.audio2.ogg.vorbis.data.Mode", methodName : "read"}));
	}
	return m;
};
kha_audio2_ogg_vorbis_data_Mode.prototype = {
	blockflag: null
	,mapping: null
	,windowtype: null
	,transformtype: null
	,__class__: kha_audio2_ogg_vorbis_data_Mode
};
var kha_audio2_ogg_vorbis_data_Page = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Page"] = kha_audio2_ogg_vorbis_data_Page;
kha_audio2_ogg_vorbis_data_Page.__name__ = "kha.audio2.ogg.vorbis.data.Page";
kha_audio2_ogg_vorbis_data_Page.prototype = {
	flag: null
	,clone: function() {
		var page = new kha_audio2_ogg_vorbis_data_Page();
		page.flag = this.flag;
		return page;
	}
	,start: function(decodeState) {
		var tmp;
		var tmp1;
		var tmp2;
		decodeState.inputPosition += 1;
		if(decodeState.input.readByte() == 79) {
			decodeState.inputPosition += 1;
			tmp2 = decodeState.input.readByte() != 103;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			decodeState.inputPosition += 1;
			tmp1 = decodeState.input.readByte() != 103;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			decodeState.inputPosition += 1;
			tmp = decodeState.input.readByte() != 83;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 324, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "capturePattern"}));
		}
		this.startWithoutCapturePattern(decodeState);
	}
	,startWithoutCapturePattern: function(decodeState) {
		decodeState.inputPosition += 1;
		var version = decodeState.input.readByte();
		if(version != 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION,"" + version,{ fileName : "kha/audio2/ogg/vorbis/data/Page.hx", lineNumber : 34, className : "kha.audio2.ogg.vorbis.data.Page", methodName : "startWithoutCapturePattern"}));
		}
		decodeState.inputPosition += 1;
		this.flag = decodeState.input.readByte();
		decodeState.inputPosition += 4;
		var loc0 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		var loc1 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.setup(loc0,loc1);
	}
	,__class__: kha_audio2_ogg_vorbis_data_Page
};
var kha_audio2_ogg_vorbis_data_PageFlag = function() { };
$hxClasses["kha.audio2.ogg.vorbis.data.PageFlag"] = kha_audio2_ogg_vorbis_data_PageFlag;
kha_audio2_ogg_vorbis_data_PageFlag.__name__ = "kha.audio2.ogg.vorbis.data.PageFlag";
var kha_audio2_ogg_vorbis_data_ProbedPage = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.ProbedPage"] = kha_audio2_ogg_vorbis_data_ProbedPage;
kha_audio2_ogg_vorbis_data_ProbedPage.__name__ = "kha.audio2.ogg.vorbis.data.ProbedPage";
kha_audio2_ogg_vorbis_data_ProbedPage.prototype = {
	pageStart: null
	,pageEnd: null
	,afterPreviousPageStart: null
	,firstDecodedSample: null
	,lastDecodedSample: null
	,__class__: kha_audio2_ogg_vorbis_data_ProbedPage
};
var kha_audio2_ogg_vorbis_data_ReaderError = function(type,message,posInfos) {
	if(message == null) {
		message = "";
	}
	this.type = type;
	this.message = message;
	this.posInfos = posInfos;
};
$hxClasses["kha.audio2.ogg.vorbis.data.ReaderError"] = kha_audio2_ogg_vorbis_data_ReaderError;
kha_audio2_ogg_vorbis_data_ReaderError.__name__ = "kha.audio2.ogg.vorbis.data.ReaderError";
kha_audio2_ogg_vorbis_data_ReaderError.prototype = {
	type: null
	,message: null
	,posInfos: null
	,__class__: kha_audio2_ogg_vorbis_data_ReaderError
};
var kha_audio2_ogg_vorbis_data_ReaderErrorType = $hxEnums["kha.audio2.ogg.vorbis.data.ReaderErrorType"] = { __ename__ : true, __constructs__ : ["NEED_MORE_DATA","INVALID_API_MIXING","OUTOFMEM","FEATURE_NOT_SUPPORTED","TOO_MANY_CHANNELS","FILE_OPEN_FAILURE","SEEK_WITHOUT_LENGTH","UNEXPECTED_EOF","SEEK_INVALID","INVALID_SETUP","INVALID_STREAM","MISSING_CAPTURE_PATTERN","INVALID_STREAM_STRUCTURE_VERSION","CONTINUED_PACKET_FLAG_INVALID","INCORRECT_STREAM_SERIAL_NUMBER","INVALID_FIRST_PAGE","BAD_PACKET_TYPE","CANT_FIND_LAST_PAGE","SEEK_FAILED","OTHER"]
	,NEED_MORE_DATA: {_hx_index:0,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_API_MIXING: {_hx_index:1,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,OUTOFMEM: {_hx_index:2,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,FEATURE_NOT_SUPPORTED: {_hx_index:3,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,TOO_MANY_CHANNELS: {_hx_index:4,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,FILE_OPEN_FAILURE: {_hx_index:5,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_WITHOUT_LENGTH: {_hx_index:6,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,UNEXPECTED_EOF: {_hx_index:7,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_INVALID: {_hx_index:8,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_SETUP: {_hx_index:9,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_STREAM: {_hx_index:10,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,MISSING_CAPTURE_PATTERN: {_hx_index:11,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_STREAM_STRUCTURE_VERSION: {_hx_index:12,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,CONTINUED_PACKET_FLAG_INVALID: {_hx_index:13,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INCORRECT_STREAM_SERIAL_NUMBER: {_hx_index:14,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_FIRST_PAGE: {_hx_index:15,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,BAD_PACKET_TYPE: {_hx_index:16,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,CANT_FIND_LAST_PAGE: {_hx_index:17,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_FAILED: {_hx_index:18,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,OTHER: {_hx_index:19,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
};
var kha_audio2_ogg_vorbis_data_Residue = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Residue"] = kha_audio2_ogg_vorbis_data_Residue;
kha_audio2_ogg_vorbis_data_Residue.__name__ = "kha.audio2.ogg.vorbis.data.Residue";
kha_audio2_ogg_vorbis_data_Residue.read = function(decodeState,codebooks) {
	var r = new kha_audio2_ogg_vorbis_data_Residue();
	r.type = decodeState.readBits(16);
	if(r.type > 2) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Residue.hx", lineNumber : 29, className : "kha.audio2.ogg.vorbis.data.Residue", methodName : "read"}));
	}
	var this1 = new Array(64);
	var residueCascade = this1;
	r.begin = decodeState.readBits(24);
	r.end = decodeState.readBits(24);
	r.partSize = decodeState.readBits(24) + 1;
	var classifications = r.classifications = decodeState.readBits(6) + 1;
	r.classbook = decodeState.readBits(8);
	var _g = 0;
	var _g1 = r.classifications;
	while(_g < _g1) {
		var j = _g++;
		var highBits = 0;
		var lowBits = decodeState.readBits(3);
		if(decodeState.readBits(1) != 0) {
			highBits = decodeState.readBits(5);
		}
		residueCascade[j] = highBits * 8 + lowBits;
	}
	var this2 = new Array(r.classifications);
	r.residueBooks = this2;
	var _g2 = 0;
	var _g3 = r.classifications;
	while(_g2 < _g3) {
		var j1 = _g2++;
		var this3 = r.residueBooks;
		var this4 = new Array(8);
		this3[j1] = this4;
		var _g21 = 0;
		while(_g21 < 8) {
			var k = _g21++;
			if((residueCascade[j1] & 1 << k) != 0) {
				r.residueBooks[j1][k] = decodeState.readBits(8);
				if(r.residueBooks[j1][k] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Residue.hx", lineNumber : 55, className : "kha.audio2.ogg.vorbis.data.Residue", methodName : "read"}));
				}
			} else {
				r.residueBooks[j1][k] = -1;
			}
		}
	}
	var el = codebooks[r.classbook].entries;
	var classwords = codebooks[r.classbook].dimensions;
	var this5 = new Array(el);
	r.classdata = this5;
	var _g4 = 0;
	var _g5 = el;
	while(_g4 < _g5) {
		var j2 = _g4++;
		var temp = j2;
		var k1 = classwords;
		var this6 = r.classdata;
		var this7 = new Array(classwords);
		var cd = this6[j2] = this7;
		while(--k1 >= 0) {
			cd[k1] = temp % classifications;
			temp = temp / classifications | 0;
		}
	}
	return r;
};
kha_audio2_ogg_vorbis_data_Residue.prototype = {
	begin: null
	,end: null
	,partSize: null
	,classifications: null
	,classbook: null
	,classdata: null
	,residueBooks: null
	,type: null
	,decode: function(decodeState,header,residueBuffers,ch,n,doNotDecode,channelBuffers) {
		var codebooks = header.codebooks;
		var classwords = codebooks[this.classbook].dimensions;
		var nRead = this.end - this.begin;
		var partSize = this.partSize;
		var partRead = _$UInt_UInt_$Impl_$.toFloat(nRead) / _$UInt_UInt_$Impl_$.toFloat(partSize) | 0;
		var this1 = new Array(header.channel * partRead + 1);
		var classifications = this1;
		var _g = 0;
		var _g1 = ch;
		while(_g < _g1) {
			var i = _g++;
			if(!doNotDecode[i]) {
				var buffer = residueBuffers[i];
				var _g2 = 0;
				var _g11 = buffer.length;
				while(_g2 < _g11) {
					var j = _g2++;
					buffer[j] = 0;
				}
			}
		}
		if(this.type == 2 && ch != 1) {
			var _g21 = 0;
			var _g3 = ch;
			while(_g21 < _g3) {
				var j1 = _g21++;
				if(!doNotDecode[j1]) {
					break;
				} else if(j1 == ch - 1) {
					return;
				}
			}
			var _g4 = 0;
			while(_g4 < 8) {
				var pass = _g4++;
				var pcount = 0;
				var classSet = 0;
				if(ch == 2) {
					while(pcount < partRead) {
						var z = this.begin + pcount * partSize;
						var cInter = z & 1;
						var pInter = z >>> 1;
						if(pass == 0) {
							var c = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i1 = c.fastHuffman[decodeState.acc & 1023];
							var val;
							if(i1 >= 0) {
								var l = c.codewordLengths[i1];
								decodeState.acc = decodeState.acc >>> l;
								decodeState.validBits -= l;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val = -1;
								} else {
									val = i1;
								}
							} else {
								val = decodeState.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							var q = val;
							if(q == -1) {
								return;
							}
							var i2 = classwords;
							while(--i2 >= 0) {
								classifications[i2 + pcount] = q % this.classifications;
								q = q / this.classifications | 0;
							}
						}
						var _g41 = 0;
						var _g5 = classwords;
						while(_g41 < _g5) {
							var i3 = _g41++;
							if(pcount >= partRead) {
								break;
							}
							var z1 = this.begin + pcount * partSize;
							var c1 = classifications[pcount];
							var b = this.residueBooks[c1][pass];
							if(b >= 0) {
								var book = codebooks[b];
								var result = book.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter,pInter,n,partSize);
								if(result == null) {
									return;
								} else {
									cInter = result.cInter;
									pInter = result.pInter;
								}
							} else {
								z1 = z1 + partSize;
								cInter = z1 & 1;
								pInter = z1 >>> 1;
							}
							++pcount;
						}
					}
				} else if(ch == 1) {
					while(pcount < partRead) {
						var z2 = this.begin + pcount * partSize;
						var cInter1 = 0;
						var pInter1 = z2;
						if(pass == 0) {
							var c2 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i4 = c2.fastHuffman[decodeState.acc & 1023];
							var val1;
							if(i4 >= 0) {
								var l1 = c2.codewordLengths[i4];
								decodeState.acc = decodeState.acc >>> l1;
								decodeState.validBits -= l1;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val1 = -1;
								} else {
									val1 = i4;
								}
							} else {
								val1 = decodeState.decodeScalarRaw(c2);
							}
							if(c2.sparse) {
								val1 = c2.sortedValues[val1];
							}
							var q1 = val1;
							if(q1 == -1) {
								return;
							}
							var i5 = classwords;
							while(--i5 >= 0) {
								classifications[i5 + pcount] = q1 % this.classifications;
								q1 = q1 / this.classifications | 0;
							}
						}
						var _g42 = 0;
						var _g51 = classwords;
						while(_g42 < _g51) {
							var i6 = _g42++;
							if(pcount >= partRead) {
								break;
							}
							var z3 = this.begin + pcount * partSize;
							var b1 = this.residueBooks[classifications[pcount]][pass];
							if(b1 >= 0) {
								var book1 = codebooks[b1];
								var result1 = book1.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter1,pInter1,n,partSize);
								if(result1 == null) {
									return;
								} else {
									cInter1 = result1.cInter;
									pInter1 = result1.pInter;
								}
							} else {
								z3 = z3 + partSize;
								cInter1 = 0;
								pInter1 = z3;
							}
							++pcount;
						}
					}
				} else {
					while(pcount < partRead) {
						var z4 = this.begin + pcount * partSize;
						var cInter2 = _$UInt_UInt_$Impl_$.toFloat(z4) % _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
						var pInter2 = _$UInt_UInt_$Impl_$.toFloat(z4) / _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
						if(pass == 0) {
							var c3 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i7 = c3.fastHuffman[decodeState.acc & 1023];
							var val2;
							if(i7 >= 0) {
								var l2 = c3.codewordLengths[i7];
								decodeState.acc = decodeState.acc >>> l2;
								decodeState.validBits -= l2;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val2 = -1;
								} else {
									val2 = i7;
								}
							} else {
								val2 = decodeState.decodeScalarRaw(c3);
							}
							if(c3.sparse) {
								val2 = c3.sortedValues[val2];
							}
							var q2 = val2;
							if(q2 == -1) {
								return;
							}
							var i8 = classwords;
							while(--i8 >= 0) {
								classifications[i8 + pcount] = q2 % this.classifications;
								q2 = q2 / this.classifications | 0;
							}
						}
						var _g43 = 0;
						var _g52 = classwords;
						while(_g43 < _g52) {
							var i9 = _g43++;
							if(pcount >= partRead) {
								break;
							}
							var z5 = this.begin + pcount * partSize;
							var b2 = this.residueBooks[classifications[pcount]][pass];
							if(b2 >= 0) {
								var book2 = codebooks[b2];
								var result2 = book2.decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter2,pInter2,n,partSize);
								if(result2 == null) {
									return;
								} else {
									cInter2 = result2.cInter;
									pInter2 = result2.pInter;
								}
							} else {
								z5 = z5 + partSize;
								cInter2 = _$UInt_UInt_$Impl_$.toFloat(z5) % _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
								pInter2 = _$UInt_UInt_$Impl_$.toFloat(z5) / _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
							}
							++pcount;
						}
					}
				}
			}
			return;
		}
		var _g22 = 0;
		while(_g22 < 8) {
			var pass1 = _g22++;
			var pcount1 = 0;
			var classSet1 = 0;
			while(pcount1 < partRead) {
				if(pass1 == 0) {
					var _g23 = 0;
					var _g31 = ch;
					while(_g23 < _g31) {
						var j2 = _g23++;
						if(!doNotDecode[j2]) {
							var c4 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i10 = c4.fastHuffman[decodeState.acc & 1023];
							var val3;
							if(i10 >= 0) {
								var l3 = c4.codewordLengths[i10];
								decodeState.acc = decodeState.acc >>> l3;
								decodeState.validBits -= l3;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val3 = -1;
								} else {
									val3 = i10;
								}
							} else {
								val3 = decodeState.decodeScalarRaw(c4);
							}
							if(c4.sparse) {
								val3 = c4.sortedValues[val3];
							}
							var temp = val3;
							if(temp == -1) {
								return;
							}
							var i11 = classwords;
							while(--i11 >= 0) {
								classifications[j2 * partRead + i11 + pcount1] = temp % this.classifications;
								temp = temp / this.classifications | 0;
							}
						}
					}
				}
				var _g24 = 0;
				var _g32 = classwords;
				while(_g24 < _g32) {
					var i12 = _g24++;
					if(pcount1 >= partRead) {
						break;
					}
					var _g25 = 0;
					var _g33 = ch;
					while(_g25 < _g33) {
						var j3 = _g25++;
						if(!doNotDecode[j3]) {
							var c5 = classifications[j3 * partRead + pcount1];
							var b3 = this.residueBooks[c5][pass1];
							if(b3 >= 0) {
								var target = residueBuffers[j3];
								var offset = this.begin + pcount1 * partSize;
								var n1 = partSize;
								var book3 = codebooks[b3];
								if(!book3.residueDecode(decodeState,target,offset,n1,this.type)) {
									return;
								}
							}
						}
					}
					++pcount1;
				}
			}
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Residue
};
var kha_audio2_ogg_vorbis_data_Setting = function() { };
$hxClasses["kha.audio2.ogg.vorbis.data.Setting"] = kha_audio2_ogg_vorbis_data_Setting;
kha_audio2_ogg_vorbis_data_Setting.__name__ = "kha.audio2.ogg.vorbis.data.Setting";
var kha_compute_ConstantLocation = function() {
};
$hxClasses["kha.compute.ConstantLocation"] = kha_compute_ConstantLocation;
kha_compute_ConstantLocation.__name__ = "kha.compute.ConstantLocation";
kha_compute_ConstantLocation.prototype = {
	__class__: kha_compute_ConstantLocation
};
var kha_compute_Shader = function(sources,files) {
	this.shader_ = Krom.createShaderCompute(sources[0].toBytes().b.bufferValue);
};
$hxClasses["kha.compute.Shader"] = kha_compute_Shader;
kha_compute_Shader.__name__ = "kha.compute.Shader";
kha_compute_Shader.prototype = {
	shader_: null
	,'delete': function() {
		Krom.deleteShaderCompute(this.shader_);
		this.shader_ = null;
	}
	,getConstantLocation: function(name) {
		return Krom.getConstantLocationCompute(this.shader_,name);
	}
	,getTextureUnit: function(name) {
		return Krom.getTextureUnitCompute(this.shader_,name);
	}
	,__class__: kha_compute_Shader
};
var kha_compute_TextureUnit = function() {
};
$hxClasses["kha.compute.TextureUnit"] = kha_compute_TextureUnit;
kha_compute_TextureUnit.__name__ = "kha.compute.TextureUnit";
kha_compute_TextureUnit.prototype = {
	__class__: kha_compute_TextureUnit
};
var kha_graphics1_Graphics = function() { };
$hxClasses["kha.graphics1.Graphics"] = kha_graphics1_Graphics;
kha_graphics1_Graphics.__name__ = "kha.graphics1.Graphics";
kha_graphics1_Graphics.__isInterface__ = true;
kha_graphics1_Graphics.prototype = {
	begin: null
	,end: null
	,setPixel: null
	,__class__: kha_graphics1_Graphics
};
var kha_graphics2_Graphics = function() {
	this.transformations = [new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1)];
	this.transformationIndex = 0;
	this.opacities = [1];
	this.myFontSize = 12;
	this.pipe = null;
};
$hxClasses["kha.graphics2.Graphics"] = kha_graphics2_Graphics;
kha_graphics2_Graphics.__name__ = "kha.graphics2.Graphics";
kha_graphics2_Graphics.prototype = {
	begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
	}
	,end: function() {
	}
	,flush: function() {
	}
	,clear: function(color) {
	}
	,drawImage: function(img,x,y) {
		this.drawSubImage(img,x,y,0,0,img.get_width(),img.get_height());
	}
	,drawSubImage: function(img,x,y,sx,sy,sw,sh) {
		this.drawScaledSubImage(img,sx,sy,sw,sh,x,y,sw,sh);
	}
	,drawScaledImage: function(img,dx,dy,dw,dh) {
		this.drawScaledSubImage(img,0,0,img.get_width(),img.get_height(),dx,dy,dw,dh);
	}
	,drawScaledSubImage: function(image,sx,sy,sw,sh,dx,dy,dw,dh) {
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,fillRect: function(x,y,width,height) {
	}
	,drawString: function(text,x,y) {
	}
	,drawCharacters: function(text,start,length,x,y) {
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,drawVideo: function(video,x,y,width,height) {
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
	}
	,get_imageScaleQuality: function() {
		return 0;
	}
	,set_imageScaleQuality: function(value) {
		return 1;
	}
	,get_mipmapScaleQuality: function() {
		return 0;
	}
	,set_mipmapScaleQuality: function(value) {
		return 1;
	}
	,get_color: function() {
		return -16777216;
	}
	,set_color: function(color) {
		return -16777216;
	}
	,get_font: function() {
		return null;
	}
	,set_font: function(font) {
		return null;
	}
	,get_fontSize: function() {
		return this.myFontSize;
	}
	,set_fontSize: function(value) {
		return this.myFontSize = value;
	}
	,get_transformation: function() {
		return this.transformations[this.transformationIndex];
	}
	,set_transformation: function(transformation) {
		this.setTransformation(transformation);
		var _this = this.transformations[this.transformationIndex];
		_this._00 = transformation._00;
		_this._10 = transformation._10;
		_this._20 = transformation._20;
		_this._01 = transformation._01;
		_this._11 = transformation._11;
		_this._21 = transformation._21;
		_this._02 = transformation._02;
		_this._12 = transformation._12;
		_this._22 = transformation._22;
		return transformation;
	}
	,pushTransformation: function(trans) {
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = trans._00;
		_this._10 = trans._10;
		_this._20 = trans._20;
		_this._01 = trans._01;
		_this._11 = trans._11;
		_this._21 = trans._21;
		_this._02 = trans._02;
		_this._12 = trans._12;
		_this._22 = trans._22;
		this.setTransformation(this.transformations[this.transformationIndex]);
	}
	,popTransformation: function() {
		this.transformationIndex--;
		this.setTransformation(this.transformations[this.transformationIndex]);
		return this.transformations[this.transformationIndex + 1];
	}
	,scale: function(x,y) {
		var _this = this.transformations[this.transformationIndex];
		var _this__00 = x;
		var _this__10 = 0;
		var _this__20 = 0;
		var _this__01 = 0;
		var _this__11 = y;
		var _this__21 = 0;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		var m__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		var m__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		var m__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		var m__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		var m__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		var m__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		var m__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var m__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var m__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		_this._00 = m__00;
		_this._10 = m__10;
		_this._20 = m__20;
		_this._01 = m__01;
		_this._11 = m__11;
		_this._21 = m__21;
		_this._02 = m__02;
		_this._12 = m__12;
		_this._22 = m__22;
	}
	,translation: function(tx,ty) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = tx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = ty;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		return new kha_math_FastMatrix3(_this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02,_this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12,_this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22,_this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02,_this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12,_this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22,_this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02,_this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12,_this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22);
	}
	,translate: function(tx,ty) {
		var _this = this.transformations[this.transformationIndex];
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = tx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = ty;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		var m__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		var m__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		var m__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		var m__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		var m__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		var m__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		var m__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var m__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var m__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		_this._00 = m__00;
		_this._10 = m__10;
		_this._20 = m__20;
		_this._01 = m__01;
		_this._11 = m__11;
		_this._21 = m__21;
		_this._02 = m__02;
		_this._12 = m__12;
		_this._22 = m__22;
	}
	,pushTranslation: function(tx,ty) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = tx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = ty;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		var trans__00 = _this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02;
		var trans__10 = _this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12;
		var trans__20 = _this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22;
		var trans__01 = _this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02;
		var trans__11 = _this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12;
		var trans__21 = _this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22;
		var trans__02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var trans__12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var trans__22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = trans__00;
		_this._10 = trans__10;
		_this._20 = trans__20;
		_this._01 = trans__01;
		_this._11 = trans__11;
		_this._21 = trans__21;
		_this._02 = trans__02;
		_this._12 = trans__12;
		_this._22 = trans__22;
		this.setTransformation(this.transformations[this.transformationIndex]);
	}
	,rotation: function(angle,centerx,centery) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = centerx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = centery;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = Math.cos(angle);
		var m__10 = -Math.sin(angle);
		var m__20 = 0;
		var m__01 = Math.sin(angle);
		var m__11 = Math.cos(angle);
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__001 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var _this__101 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var _this__201 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var _this__011 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var _this__111 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var _this__211 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var _this__021 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var _this__121 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var _this__221 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__001 = 1;
		var m__101 = 0;
		var m__201 = -centerx;
		var m__011 = 0;
		var m__111 = 1;
		var m__211 = -centery;
		var m__021 = 0;
		var m__121 = 0;
		var m__221 = 1;
		var _this__002 = _this__001 * m__001 + _this__101 * m__011 + _this__201 * m__021;
		var _this__102 = _this__001 * m__101 + _this__101 * m__111 + _this__201 * m__121;
		var _this__202 = _this__001 * m__201 + _this__101 * m__211 + _this__201 * m__221;
		var _this__012 = _this__011 * m__001 + _this__111 * m__011 + _this__211 * m__021;
		var _this__112 = _this__011 * m__101 + _this__111 * m__111 + _this__211 * m__121;
		var _this__212 = _this__011 * m__201 + _this__111 * m__211 + _this__211 * m__221;
		var _this__022 = _this__021 * m__001 + _this__121 * m__011 + _this__221 * m__021;
		var _this__122 = _this__021 * m__101 + _this__121 * m__111 + _this__221 * m__121;
		var _this__222 = _this__021 * m__201 + _this__121 * m__211 + _this__221 * m__221;
		var m = this.transformations[this.transformationIndex];
		return new kha_math_FastMatrix3(_this__002 * m._00 + _this__102 * m._01 + _this__202 * m._02,_this__002 * m._10 + _this__102 * m._11 + _this__202 * m._12,_this__002 * m._20 + _this__102 * m._21 + _this__202 * m._22,_this__012 * m._00 + _this__112 * m._01 + _this__212 * m._02,_this__012 * m._10 + _this__112 * m._11 + _this__212 * m._12,_this__012 * m._20 + _this__112 * m._21 + _this__212 * m._22,_this__022 * m._00 + _this__122 * m._01 + _this__222 * m._02,_this__022 * m._10 + _this__122 * m._11 + _this__222 * m._12,_this__022 * m._20 + _this__122 * m._21 + _this__222 * m._22);
	}
	,rotate: function(angle,centerx,centery) {
		var _this = this.transformations[this.transformationIndex];
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = centerx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = centery;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = Math.cos(angle);
		var m__10 = -Math.sin(angle);
		var m__20 = 0;
		var m__01 = Math.sin(angle);
		var m__11 = Math.cos(angle);
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__001 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var _this__101 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var _this__201 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var _this__011 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var _this__111 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var _this__211 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var _this__021 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var _this__121 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var _this__221 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__001 = 1;
		var m__101 = 0;
		var m__201 = -centerx;
		var m__011 = 0;
		var m__111 = 1;
		var m__211 = -centery;
		var m__021 = 0;
		var m__121 = 0;
		var m__221 = 1;
		var _this__002 = _this__001 * m__001 + _this__101 * m__011 + _this__201 * m__021;
		var _this__102 = _this__001 * m__101 + _this__101 * m__111 + _this__201 * m__121;
		var _this__202 = _this__001 * m__201 + _this__101 * m__211 + _this__201 * m__221;
		var _this__012 = _this__011 * m__001 + _this__111 * m__011 + _this__211 * m__021;
		var _this__112 = _this__011 * m__101 + _this__111 * m__111 + _this__211 * m__121;
		var _this__212 = _this__011 * m__201 + _this__111 * m__211 + _this__211 * m__221;
		var _this__022 = _this__021 * m__001 + _this__121 * m__011 + _this__221 * m__021;
		var _this__122 = _this__021 * m__101 + _this__121 * m__111 + _this__221 * m__121;
		var _this__222 = _this__021 * m__201 + _this__121 * m__211 + _this__221 * m__221;
		var m = this.transformations[this.transformationIndex];
		var m__002 = _this__002 * m._00 + _this__102 * m._01 + _this__202 * m._02;
		var m__102 = _this__002 * m._10 + _this__102 * m._11 + _this__202 * m._12;
		var m__202 = _this__002 * m._20 + _this__102 * m._21 + _this__202 * m._22;
		var m__012 = _this__012 * m._00 + _this__112 * m._01 + _this__212 * m._02;
		var m__112 = _this__012 * m._10 + _this__112 * m._11 + _this__212 * m._12;
		var m__212 = _this__012 * m._20 + _this__112 * m._21 + _this__212 * m._22;
		var m__022 = _this__022 * m._00 + _this__122 * m._01 + _this__222 * m._02;
		var m__122 = _this__022 * m._10 + _this__122 * m._11 + _this__222 * m._12;
		var m__222 = _this__022 * m._20 + _this__122 * m._21 + _this__222 * m._22;
		_this._00 = m__002;
		_this._10 = m__102;
		_this._20 = m__202;
		_this._01 = m__012;
		_this._11 = m__112;
		_this._21 = m__212;
		_this._02 = m__022;
		_this._12 = m__122;
		_this._22 = m__222;
	}
	,pushRotation: function(angle,centerx,centery) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = centerx;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = centery;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m__00 = Math.cos(angle);
		var m__10 = -Math.sin(angle);
		var m__20 = 0;
		var m__01 = Math.sin(angle);
		var m__11 = Math.cos(angle);
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _this__001 = _this__00 * m__00 + _this__10 * m__01 + _this__20 * m__02;
		var _this__101 = _this__00 * m__10 + _this__10 * m__11 + _this__20 * m__12;
		var _this__201 = _this__00 * m__20 + _this__10 * m__21 + _this__20 * m__22;
		var _this__011 = _this__01 * m__00 + _this__11 * m__01 + _this__21 * m__02;
		var _this__111 = _this__01 * m__10 + _this__11 * m__11 + _this__21 * m__12;
		var _this__211 = _this__01 * m__20 + _this__11 * m__21 + _this__21 * m__22;
		var _this__021 = _this__02 * m__00 + _this__12 * m__01 + _this__22 * m__02;
		var _this__121 = _this__02 * m__10 + _this__12 * m__11 + _this__22 * m__12;
		var _this__221 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__001 = 1;
		var m__101 = 0;
		var m__201 = -centerx;
		var m__011 = 0;
		var m__111 = 1;
		var m__211 = -centery;
		var m__021 = 0;
		var m__121 = 0;
		var m__221 = 1;
		var _this__002 = _this__001 * m__001 + _this__101 * m__011 + _this__201 * m__021;
		var _this__102 = _this__001 * m__101 + _this__101 * m__111 + _this__201 * m__121;
		var _this__202 = _this__001 * m__201 + _this__101 * m__211 + _this__201 * m__221;
		var _this__012 = _this__011 * m__001 + _this__111 * m__011 + _this__211 * m__021;
		var _this__112 = _this__011 * m__101 + _this__111 * m__111 + _this__211 * m__121;
		var _this__212 = _this__011 * m__201 + _this__111 * m__211 + _this__211 * m__221;
		var _this__022 = _this__021 * m__001 + _this__121 * m__011 + _this__221 * m__021;
		var _this__122 = _this__021 * m__101 + _this__121 * m__111 + _this__221 * m__121;
		var _this__222 = _this__021 * m__201 + _this__121 * m__211 + _this__221 * m__221;
		var m = this.transformations[this.transformationIndex];
		var trans__00 = _this__002 * m._00 + _this__102 * m._01 + _this__202 * m._02;
		var trans__10 = _this__002 * m._10 + _this__102 * m._11 + _this__202 * m._12;
		var trans__20 = _this__002 * m._20 + _this__102 * m._21 + _this__202 * m._22;
		var trans__01 = _this__012 * m._00 + _this__112 * m._01 + _this__212 * m._02;
		var trans__11 = _this__012 * m._10 + _this__112 * m._11 + _this__212 * m._12;
		var trans__21 = _this__012 * m._20 + _this__112 * m._21 + _this__212 * m._22;
		var trans__02 = _this__022 * m._00 + _this__122 * m._01 + _this__222 * m._02;
		var trans__12 = _this__022 * m._10 + _this__122 * m._11 + _this__222 * m._12;
		var trans__22 = _this__022 * m._20 + _this__122 * m._21 + _this__222 * m._22;
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = trans__00;
		_this._10 = trans__10;
		_this._20 = trans__20;
		_this._01 = trans__01;
		_this._11 = trans__11;
		_this._21 = trans__21;
		_this._02 = trans__02;
		_this._12 = trans__12;
		_this._22 = trans__22;
		this.setTransformation(this.transformations[this.transformationIndex]);
	}
	,pushOpacity: function(opacity) {
		this.setOpacity(opacity);
		this.opacities.push(opacity);
	}
	,popOpacity: function() {
		var ret = this.opacities.pop();
		this.setOpacity(this.get_opacity());
		return ret;
	}
	,get_opacity: function() {
		return this.opacities[this.opacities.length - 1];
	}
	,set_opacity: function(opacity) {
		this.setOpacity(opacity);
		return this.opacities[this.opacities.length - 1] = opacity;
	}
	,scissor: function(x,y,width,height) {
	}
	,disableScissor: function() {
	}
	,pipe: null
	,get_pipeline: function() {
		return this.pipe;
	}
	,set_pipeline: function(pipeline) {
		this.setPipeline(pipeline);
		return this.pipe = pipeline;
	}
	,transformations: null
	,transformationIndex: null
	,opacities: null
	,myFontSize: null
	,setTransformation: function(transformation) {
	}
	,setOpacity: function(opacity) {
	}
	,setPipeline: function(pipeline) {
	}
	,__class__: kha_graphics2_Graphics
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline",set_opacity:"set_opacity",get_opacity:"get_opacity",set_transformation:"set_transformation",get_transformation:"get_transformation",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_font:"set_font",get_font:"get_font",set_color:"set_color",get_color:"get_color",set_mipmapScaleQuality:"set_mipmapScaleQuality",get_mipmapScaleQuality:"get_mipmapScaleQuality",set_imageScaleQuality:"set_imageScaleQuality",get_imageScaleQuality:"get_imageScaleQuality"}
};
var kha_graphics2_Graphics1 = function(canvas) {
	this.canvas = canvas;
};
$hxClasses["kha.graphics2.Graphics1"] = kha_graphics2_Graphics1;
kha_graphics2_Graphics1.__name__ = "kha.graphics2.Graphics1";
kha_graphics2_Graphics1.__interfaces__ = [kha_graphics1_Graphics];
kha_graphics2_Graphics1.prototype = {
	canvas: null
	,texture: null
	,pixels: null
	,begin: function() {
		if(this.texture == null || (this.texture.get_realWidth() != this.canvas.get_width() || this.texture.get_realHeight() != this.canvas.get_height())) {
			this.texture = kha_Image.create(this.canvas.get_width(),this.canvas.get_height(),0,2);
		}
		this.pixels = this.texture.lock();
	}
	,end: function() {
		this.texture.unlock();
		this.canvas.get_g2().begin(false);
		this.canvas.get_g2().drawImage(this.texture,0,0);
		this.canvas.get_g2().end();
	}
	,setPixel: function(x,y,color) {
		this.pixels.setInt32(y * this.texture.get_realWidth() * 4 + x * 4,kha__$Color_Color_$Impl_$.fromBytes(color & 255,(color & 65280) >>> 8,(color & 16711680) >>> 16,color >>> 24));
	}
	,__class__: kha_graphics2_Graphics1
};
var kha_graphics2_GraphicsExtension = function() { };
$hxClasses["kha.graphics2.GraphicsExtension"] = kha_graphics2_GraphicsExtension;
kha_graphics2_GraphicsExtension.__name__ = "kha.graphics2.GraphicsExtension";
kha_graphics2_GraphicsExtension.drawArc = function(g2,cx,cy,radius,sAngle,eAngle,strength,ccw,segments) {
	if(segments == null) {
		segments = 0;
	}
	if(ccw == null) {
		ccw = false;
	}
	if(strength == null) {
		strength = 1;
	}
	sAngle %= Math.PI * 2;
	eAngle %= Math.PI * 2;
	if(ccw) {
		if(eAngle > sAngle) {
			eAngle -= Math.PI * 2;
		}
	} else if(eAngle < sAngle) {
		eAngle += Math.PI * 2;
	}
	radius += strength / 2;
	if(segments <= 0) {
		segments = Math.floor(10 * Math.sqrt(radius));
	}
	var theta = (eAngle - sAngle) / segments;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var x = Math.cos(sAngle) * radius;
	var y = Math.sin(sAngle) * radius;
	var _g = 0;
	var _g1 = segments;
	while(_g < _g1) {
		var n = _g++;
		var px = x + cx;
		var py = y + cy;
		var t = x;
		x = c * x - s * y;
		y = c * y + s * t;
		kha_graphics2_GraphicsExtension.drawInnerLine(g2,x + cx,y + cy,px,py,strength);
	}
};
kha_graphics2_GraphicsExtension.fillArc = function(g2,cx,cy,radius,sAngle,eAngle,ccw,segments) {
	if(segments == null) {
		segments = 0;
	}
	if(ccw == null) {
		ccw = false;
	}
	sAngle %= Math.PI * 2;
	eAngle %= Math.PI * 2;
	if(ccw) {
		if(eAngle > sAngle) {
			eAngle -= Math.PI * 2;
		}
	} else if(eAngle < sAngle) {
		eAngle += Math.PI * 2;
	}
	if(segments <= 0) {
		segments = Math.floor(10 * Math.sqrt(radius));
	}
	var theta = (eAngle - sAngle) / segments;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var x = Math.cos(sAngle) * radius;
	var y = Math.sin(sAngle) * radius;
	var sx = x + cx;
	var sy = y + cy;
	var _g = 0;
	var _g1 = segments;
	while(_g < _g1) {
		var n = _g++;
		var px = x + cx;
		var py = y + cy;
		var t = x;
		x = c * x - s * y;
		y = c * y + s * t;
		g2.fillTriangle(px,py,x + cx,y + cy,sx,sy);
	}
};
kha_graphics2_GraphicsExtension.drawCircle = function(g2,cx,cy,radius,strength,segments) {
	if(segments == null) {
		segments = 0;
	}
	if(strength == null) {
		strength = 1;
	}
	radius += strength / 2;
	if(segments <= 0) {
		segments = Math.floor(10 * Math.sqrt(radius));
	}
	var theta = 2 * Math.PI / segments;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var x = radius;
	var y = 0.0;
	var _g = 0;
	var _g1 = segments;
	while(_g < _g1) {
		var n = _g++;
		var px = x + cx;
		var py = y + cy;
		var t = x;
		x = c * x - s * y;
		y = c * y + s * t;
		kha_graphics2_GraphicsExtension.drawInnerLine(g2,x + cx,y + cy,px,py,strength);
	}
};
kha_graphics2_GraphicsExtension.drawInnerLine = function(g2,x1,y1,x2,y2,strength) {
	var side = y2 > y1 ? 1 : 0;
	if(y2 == y1) {
		side = x2 - x1 > 0 ? 1 : 0;
	}
	var vec_x = 0;
	var vec_y = 0;
	if(y2 == y1) {
		var x = 0;
		var y = -1;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var v_x = x;
		var v_y = y;
		vec_x = v_x;
		vec_y = v_y;
	} else {
		var x3 = 1;
		var y3 = -(x2 - x1) / (y2 - y1);
		if(y3 == null) {
			y3 = 0;
		}
		if(x3 == null) {
			x3 = 0;
		}
		var v_x1 = x3;
		var v_y1 = y3;
		vec_x = v_x1;
		vec_y = v_y1;
	}
	var currentLength = Math.sqrt(vec_x * vec_x + vec_y * vec_y);
	if(currentLength != 0) {
		var mul = strength / currentLength;
		vec_x *= mul;
		vec_y *= mul;
	}
	var x4 = x1 + side * vec_x;
	var y4 = y1 + side * vec_y;
	if(y4 == null) {
		y4 = 0;
	}
	if(x4 == null) {
		x4 = 0;
	}
	var p1_x = x4;
	var p1_y = y4;
	var x5 = x2 + side * vec_x;
	var y5 = y2 + side * vec_y;
	if(y5 == null) {
		y5 = 0;
	}
	if(x5 == null) {
		x5 = 0;
	}
	var p2_x = x5;
	var p2_y = y5;
	var x6 = p1_x - vec_x;
	var y6 = p1_y - vec_y;
	if(y6 == null) {
		y6 = 0;
	}
	if(x6 == null) {
		x6 = 0;
	}
	var p3_x = x6;
	var p3_y = y6;
	var x7 = p2_x - vec_x;
	var y7 = p2_y - vec_y;
	if(y7 == null) {
		y7 = 0;
	}
	if(x7 == null) {
		x7 = 0;
	}
	var p4_x = x7;
	var p4_y = y7;
	g2.fillTriangle(p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
	g2.fillTriangle(p3_x,p3_y,p2_x,p2_y,p4_x,p4_y);
};
kha_graphics2_GraphicsExtension.fillCircle = function(g2,cx,cy,radius,segments) {
	if(segments == null) {
		segments = 0;
	}
	if(segments <= 0) {
		segments = Math.floor(10 * Math.sqrt(radius));
	}
	var theta = 2 * Math.PI / segments;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var x = radius;
	var y = 0.0;
	var _g = 0;
	var _g1 = segments;
	while(_g < _g1) {
		var n = _g++;
		var px = x + cx;
		var py = y + cy;
		var t = x;
		x = c * x - s * y;
		y = c * y + s * t;
		g2.fillTriangle(px,py,x + cx,y + cy,cx,cy);
	}
};
kha_graphics2_GraphicsExtension.drawPolygon = function(g2,x,y,vertices,strength) {
	if(strength == null) {
		strength = 1;
	}
	var iterator = HxOverrides.iter(vertices);
	var v0 = iterator.next();
	var v1 = v0;
	while(iterator.hasNext()) {
		var v2 = iterator.next();
		g2.drawLine(v1.x + x,v1.y + y,v2.x + x,v2.y + y,strength);
		v1 = v2;
	}
	g2.drawLine(v1.x + x,v1.y + y,v0.x + x,v0.y + y,strength);
};
kha_graphics2_GraphicsExtension.fillPolygon = function(g2,x,y,vertices) {
	var iterator = HxOverrides.iter(vertices);
	if(!iterator.hasNext()) {
		return;
	}
	var v0 = iterator.next();
	if(!iterator.hasNext()) {
		return;
	}
	var v1 = iterator.next();
	while(iterator.hasNext()) {
		var v2 = iterator.next();
		g2.fillTriangle(v0.x + x,v0.y + y,v1.x + x,v1.y + y,v2.x + x,v2.y + y);
		v1 = v2;
	}
};
kha_graphics2_GraphicsExtension.drawCubicBezier = function(g2,x,y,segments,strength) {
	if(strength == null) {
		strength = 1.0;
	}
	if(segments == null) {
		segments = 20;
	}
	var t;
	var q0 = kha_graphics2_GraphicsExtension.calculateCubicBezierPoint(0,x,y);
	var q1;
	var _g = 1;
	var _g1 = segments + 1;
	while(_g < _g1) {
		var i = _g++;
		t = i / segments;
		q1 = kha_graphics2_GraphicsExtension.calculateCubicBezierPoint(t,x,y);
		g2.drawLine(q0[0],q0[1],q1[0],q1[1],strength);
		q0 = q1;
	}
};
kha_graphics2_GraphicsExtension.drawCubicBezierPath = function(g2,x,y,segments,strength) {
	if(strength == null) {
		strength = 1.0;
	}
	if(segments == null) {
		segments = 20;
	}
	var i = 0;
	var t;
	var q0 = null;
	var q1 = null;
	while(i < x.length - 3) {
		if(i == 0) {
			q0 = kha_graphics2_GraphicsExtension.calculateCubicBezierPoint(0,[x[i],x[i + 1],x[i + 2],x[i + 3]],[y[i],y[i + 1],y[i + 2],y[i + 3]]);
		}
		var _g = 1;
		var _g1 = segments + 1;
		while(_g < _g1) {
			var j = _g++;
			t = j / segments;
			q1 = kha_graphics2_GraphicsExtension.calculateCubicBezierPoint(t,[x[i],x[i + 1],x[i + 2],x[i + 3]],[y[i],y[i + 1],y[i + 2],y[i + 3]]);
			g2.drawLine(q0[0],q0[1],q1[0],q1[1],strength);
			q0 = q1;
		}
		i += 3;
	}
};
kha_graphics2_GraphicsExtension.calculateCubicBezierPoint = function(t,x,y) {
	var u = 1 - t;
	var tt = t * t;
	var uu = u * u;
	var uuu = uu * u;
	var ttt = tt * t;
	var p = [uuu * x[0],uuu * y[0]];
	p[0] += 3 * uu * t * x[1];
	p[1] += 3 * uu * t * y[1];
	p[0] += 3 * u * tt * x[2];
	p[1] += 3 * u * tt * y[2];
	p[0] += ttt * x[3];
	p[1] += ttt * y[3];
	return p;
};
kha_graphics2_GraphicsExtension.drawAlignedString = function(g2,text,x,y,horAlign,verAlign) {
	var xoffset = 0.0;
	if(horAlign == 1 || horAlign == 2) {
		var width = g2.get_font().width(g2.get_fontSize(),text);
		if(horAlign == 1) {
			xoffset = -width * 0.5;
		} else {
			xoffset = -width;
		}
	}
	var yoffset = 0.0;
	if(verAlign == 1 || verAlign == 2) {
		var height = g2.get_font().height(g2.get_fontSize());
		if(verAlign == 1) {
			yoffset = -height * 0.5;
		} else {
			yoffset = -height;
		}
	}
	g2.drawString(text,x + xoffset,y + yoffset);
};
kha_graphics2_GraphicsExtension.drawAlignedCharacters = function(g2,text,start,length,x,y,horAlign,verAlign) {
	var xoffset = 0.0;
	if(horAlign == 1 || horAlign == 2) {
		var width = g2.get_font().widthOfCharacters(g2.get_fontSize(),text,start,length);
		if(horAlign == 1) {
			xoffset = -width * 0.5;
		} else {
			xoffset = -width;
		}
	}
	var yoffset = 0.0;
	if(verAlign == 1 || verAlign == 2) {
		var height = g2.get_font().height(g2.get_fontSize());
		if(verAlign == 1) {
			yoffset = -height * 0.5;
		} else {
			yoffset = -height;
		}
	}
	g2.drawCharacters(text,start,length,x + xoffset,y + yoffset);
};
var kha_graphics2_truetype_VectorOfIntPointer = function() {
};
$hxClasses["kha.graphics2.truetype.VectorOfIntPointer"] = kha_graphics2_truetype_VectorOfIntPointer;
kha_graphics2_truetype_VectorOfIntPointer.__name__ = "kha.graphics2.truetype.VectorOfIntPointer";
kha_graphics2_truetype_VectorOfIntPointer.prototype = {
	value: null
	,__class__: kha_graphics2_truetype_VectorOfIntPointer
};
var kha_graphics2_truetype_Stbtt_$temp_$rect = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_rect"] = kha_graphics2_truetype_Stbtt_$temp_$rect;
kha_graphics2_truetype_Stbtt_$temp_$rect.__name__ = "kha.graphics2.truetype.Stbtt_temp_rect";
kha_graphics2_truetype_Stbtt_$temp_$rect.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$rect
};
var kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.__name__ = "kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics";
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.prototype = {
	advanceWidth: null
	,leftSideBearing: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_font_v_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.__name__ = "kha.graphics2.truetype.Stbtt_temp_font_v_metrics";
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.prototype = {
	ascent: null
	,descent: null
	,lineGap: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$region = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_region"] = kha_graphics2_truetype_Stbtt_$temp_$region;
kha_graphics2_truetype_Stbtt_$temp_$region.__name__ = "kha.graphics2.truetype.Stbtt_temp_region";
kha_graphics2_truetype_Stbtt_$temp_$region.prototype = {
	width: null
	,height: null
	,xoff: null
	,yoff: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$region
};
var kha_graphics2_truetype_Stbtt_$bakedchar = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_bakedchar"] = kha_graphics2_truetype_Stbtt_$bakedchar;
kha_graphics2_truetype_Stbtt_$bakedchar.__name__ = "kha.graphics2.truetype.Stbtt_bakedchar";
kha_graphics2_truetype_Stbtt_$bakedchar.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,xoff: null
	,yoff: null
	,xadvance: null
	,__class__: kha_graphics2_truetype_Stbtt_$bakedchar
};
var kha_graphics2_truetype_Stbtt_$aligned_$quad = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_aligned_quad"] = kha_graphics2_truetype_Stbtt_$aligned_$quad;
kha_graphics2_truetype_Stbtt_$aligned_$quad.__name__ = "kha.graphics2.truetype.Stbtt_aligned_quad";
kha_graphics2_truetype_Stbtt_$aligned_$quad.prototype = {
	x0: null
	,y0: null
	,s0: null
	,t0: null
	,x1: null
	,y1: null
	,s1: null
	,t1: null
	,__class__: kha_graphics2_truetype_Stbtt_$aligned_$quad
};
var kha_graphics2_truetype_Stbtt_$packedchar = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_packedchar"] = kha_graphics2_truetype_Stbtt_$packedchar;
kha_graphics2_truetype_Stbtt_$packedchar.__name__ = "kha.graphics2.truetype.Stbtt_packedchar";
kha_graphics2_truetype_Stbtt_$packedchar.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,xoff: null
	,yoff: null
	,xadvance: null
	,xoff2: null
	,yoff2: null
	,__class__: kha_graphics2_truetype_Stbtt_$packedchar
};
var kha_graphics2_truetype_Stbtt_$pack_$range = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_pack_range"] = kha_graphics2_truetype_Stbtt_$pack_$range;
kha_graphics2_truetype_Stbtt_$pack_$range.__name__ = "kha.graphics2.truetype.Stbtt_pack_range";
kha_graphics2_truetype_Stbtt_$pack_$range.prototype = {
	font_size: null
	,first_unicode_codepoint_in_range: null
	,array_of_unicode_codepoints: null
	,num_chars: null
	,chardata_for_range: null
	,h_oversample: null
	,v_oversample: null
	,__class__: kha_graphics2_truetype_Stbtt_$pack_$range
};
var kha_graphics2_truetype_Stbtt_$pack_$context = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_pack_context"] = kha_graphics2_truetype_Stbtt_$pack_$context;
kha_graphics2_truetype_Stbtt_$pack_$context.__name__ = "kha.graphics2.truetype.Stbtt_pack_context";
kha_graphics2_truetype_Stbtt_$pack_$context.prototype = {
	width: null
	,height: null
	,stride_in_bytes: null
	,padding: null
	,h_oversample: null
	,v_oversample: null
	,pixels: null
	,__class__: kha_graphics2_truetype_Stbtt_$pack_$context
};
var kha_graphics2_truetype_Stbtt_$fontinfo = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_fontinfo"] = kha_graphics2_truetype_Stbtt_$fontinfo;
kha_graphics2_truetype_Stbtt_$fontinfo.__name__ = "kha.graphics2.truetype.Stbtt_fontinfo";
kha_graphics2_truetype_Stbtt_$fontinfo.prototype = {
	data: null
	,fontstart: null
	,numGlyphs: null
	,loca: null
	,head: null
	,glyf: null
	,hhea: null
	,hmtx: null
	,kern: null
	,index_map: null
	,indexToLocFormat: null
	,__class__: kha_graphics2_truetype_Stbtt_$fontinfo
};
var kha_graphics2_truetype_Stbtt_$vertex = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_vertex"] = kha_graphics2_truetype_Stbtt_$vertex;
kha_graphics2_truetype_Stbtt_$vertex.__name__ = "kha.graphics2.truetype.Stbtt_vertex";
kha_graphics2_truetype_Stbtt_$vertex.prototype = {
	x: null
	,y: null
	,cx: null
	,cy: null
	,type: null
	,padding: null
	,__class__: kha_graphics2_truetype_Stbtt_$vertex
};
var kha_graphics2_truetype_Stbtt_$_$bitmap = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__bitmap"] = kha_graphics2_truetype_Stbtt_$_$bitmap;
kha_graphics2_truetype_Stbtt_$_$bitmap.__name__ = "kha.graphics2.truetype.Stbtt__bitmap";
kha_graphics2_truetype_Stbtt_$_$bitmap.prototype = {
	w: null
	,h: null
	,stride: null
	,pixels: null
	,pixels_offset: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$bitmap
};
var kha_graphics2_truetype_Stbtt_$_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__edge"] = kha_graphics2_truetype_Stbtt_$_$edge;
kha_graphics2_truetype_Stbtt_$_$edge.__name__ = "kha.graphics2.truetype.Stbtt__edge";
kha_graphics2_truetype_Stbtt_$_$edge.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,invert: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$edge
};
var kha_graphics2_truetype_Stbtt_$_$active_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__active_edge"] = kha_graphics2_truetype_Stbtt_$_$active_$edge;
kha_graphics2_truetype_Stbtt_$_$active_$edge.__name__ = "kha.graphics2.truetype.Stbtt__active_edge";
kha_graphics2_truetype_Stbtt_$_$active_$edge.prototype = {
	next: null
	,fx: null
	,fdx: null
	,fdy: null
	,direction: null
	,sy: null
	,ey: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$active_$edge
};
var kha_graphics2_truetype_Stbtt_$_$point = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__point"] = kha_graphics2_truetype_Stbtt_$_$point;
kha_graphics2_truetype_Stbtt_$_$point.__name__ = "kha.graphics2.truetype.Stbtt__point";
kha_graphics2_truetype_Stbtt_$_$point.prototype = {
	x: null
	,y: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$point
};
var kha_graphics2_truetype_StbTruetype = function() { };
$hxClasses["kha.graphics2.truetype.StbTruetype"] = kha_graphics2_truetype_StbTruetype;
kha_graphics2_truetype_StbTruetype.__name__ = "kha.graphics2.truetype.StbTruetype";
kha_graphics2_truetype_StbTruetype.STBTT_assert = function(value) {
	if(!value) {
		throw new js__$Boot_HaxeError("Error");
	}
};
kha_graphics2_truetype_StbTruetype.STBTT_POINT_SIZE = function(x) {
	return -x;
};
kha_graphics2_truetype_StbTruetype.ttBYTE = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	return p.readU8(pos);
};
kha_graphics2_truetype_StbTruetype.ttCHAR = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var n = p.readU8(pos);
	if(n >= 128) {
		return n - 256;
	}
	return n;
};
kha_graphics2_truetype_StbTruetype.ttUSHORT = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	return ch2 | ch1 << 8;
};
kha_graphics2_truetype_StbTruetype.ttSHORT = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	if((n & 32768) != 0) {
		return n - 65536;
	}
	return n;
};
kha_graphics2_truetype_StbTruetype.ttULONG = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var pos1 = pos;
	if(pos1 == null) {
		pos1 = 0;
	}
	var ch1 = p.readU8(pos1);
	var ch2 = p.readU8(pos1 + 1);
	var ch3 = p.readU8(pos1 + 2);
	var ch4 = p.readU8(pos1 + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.ttLONG = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var ch3 = p.readU8(pos + 2);
	var ch4 = p.readU8(pos + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.to_stbtt_uint16 = function(value) {
	return value & 65535;
};
kha_graphics2_truetype_StbTruetype.ttFixed = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var pos1 = pos;
	if(pos1 == null) {
		pos1 = 0;
	}
	var ch1 = p.readU8(pos1);
	var ch2 = p.readU8(pos1 + 1);
	var ch3 = p.readU8(pos1 + 2);
	var ch4 = p.readU8(pos1 + 3);
	return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
};
kha_graphics2_truetype_StbTruetype.stbtt_tag4 = function(p,pos,c0,c1,c2,c3) {
	if(p.readU8(pos) == c0 && p.readU8(pos + 1) == c1 && p.readU8(pos + 2) == c2) {
		return p.readU8(pos + 3) == c3;
	} else {
		return false;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_tag = function(p,pos,str) {
	var c0 = HxOverrides.cca(str,0);
	var c1 = HxOverrides.cca(str,1);
	var c2 = HxOverrides.cca(str,2);
	var c3 = HxOverrides.cca(str,3);
	if(p.readU8(pos) == c0 && p.readU8(pos + 1) == c1 && p.readU8(pos + 2) == c2) {
		return p.readU8(pos + 3) == c3;
	} else {
		return false;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__isfont = function(font) {
	var c0 = HxOverrides.cca("1",0);
	if(font.readU8(0) == c0 && font.readU8(1) == 0 && font.readU8(2) == 0 && font.readU8(3) == 0) {
		return true;
	}
	var c01 = HxOverrides.cca("typ1",0);
	var c1 = HxOverrides.cca("typ1",1);
	var c2 = HxOverrides.cca("typ1",2);
	var c3 = HxOverrides.cca("typ1",3);
	if(font.readU8(0) == c01 && font.readU8(1) == c1 && font.readU8(2) == c2 && font.readU8(3) == c3) {
		return true;
	}
	var c02 = HxOverrides.cca("OTTO",0);
	var c11 = HxOverrides.cca("OTTO",1);
	var c21 = HxOverrides.cca("OTTO",2);
	var c31 = HxOverrides.cca("OTTO",3);
	if(font.readU8(0) == c02 && font.readU8(1) == c11 && font.readU8(2) == c21 && font.readU8(3) == c31) {
		return true;
	}
	if(font.readU8(0) == 0 && font.readU8(1) == 1 && font.readU8(2) == 0 && font.readU8(3) == 0) {
		return true;
	}
	return false;
};
kha_graphics2_truetype_StbTruetype.stbtt__find_table = function(data,fontstart,tag) {
	var pos = fontstart + 4;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var num_tables = ch2 | ch1 << 8;
	var tabledir = fontstart + 12;
	var _g = 0;
	var _g1 = num_tables;
	while(_g < _g1) {
		var i = _g++;
		var loc = tabledir + 16 * i;
		var c0 = HxOverrides.cca(tag,0);
		var c1 = HxOverrides.cca(tag,1);
		var c2 = HxOverrides.cca(tag,2);
		var c3 = HxOverrides.cca(tag,3);
		if(data.readU8(loc) == c0 && data.readU8(loc + 1) == c1 && data.readU8(loc + 2) == c2 && data.readU8(loc + 3) == c3) {
			var pos1 = loc + 8;
			if(pos1 == null) {
				pos1 = 0;
			}
			var pos2 = pos1;
			if(pos2 == null) {
				pos2 = 0;
			}
			var ch11 = data.readU8(pos2);
			var ch21 = data.readU8(pos2 + 1);
			var ch3 = data.readU8(pos2 + 2);
			var ch4 = data.readU8(pos2 + 3);
			return ch4 | ch3 << 8 | ch21 << 16 | ch11 << 24;
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontOffsetForIndex = function(font_collection,index) {
	if(kha_graphics2_truetype_StbTruetype.stbtt__isfont(font_collection)) {
		if(index == 0) {
			return 0;
		} else {
			return -1;
		}
	}
	var c0 = HxOverrides.cca("ttcf",0);
	var c1 = HxOverrides.cca("ttcf",1);
	var c2 = HxOverrides.cca("ttcf",2);
	var c3 = HxOverrides.cca("ttcf",3);
	if(font_collection.readU8(0) == c0 && font_collection.readU8(1) == c1 && font_collection.readU8(2) == c2 && font_collection.readU8(3) == c3) {
		var tmp;
		var pos = 4;
		if(pos == null) {
			pos = 0;
		}
		var pos1 = pos;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch1 = font_collection.readU8(pos1);
		var ch2 = font_collection.readU8(pos1 + 1);
		var ch3 = font_collection.readU8(pos1 + 2);
		var ch4 = font_collection.readU8(pos1 + 3);
		if((ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24) != 65536) {
			var pos2 = 4;
			if(pos2 == null) {
				pos2 = 0;
			}
			var pos3 = pos2;
			if(pos3 == null) {
				pos3 = 0;
			}
			var ch11 = font_collection.readU8(pos3);
			var ch21 = font_collection.readU8(pos3 + 1);
			var ch31 = font_collection.readU8(pos3 + 2);
			var ch41 = font_collection.readU8(pos3 + 3);
			tmp = (ch41 | ch31 << 8 | ch21 << 16 | ch11 << 24) == 131072;
		} else {
			tmp = true;
		}
		if(tmp) {
			var pos4 = 8;
			if(pos4 == null) {
				pos4 = 0;
			}
			var ch12 = font_collection.readU8(pos4);
			var ch22 = font_collection.readU8(pos4 + 1);
			var ch32 = font_collection.readU8(pos4 + 2);
			var ch42 = font_collection.readU8(pos4 + 3);
			var n = ch42 | ch32 << 8 | ch22 << 16 | ch12 << 24;
			if(index >= n) {
				return -1;
			}
			var pos5 = 12 + index * 4;
			if(pos5 == null) {
				pos5 = 0;
			}
			var pos6 = pos5;
			if(pos6 == null) {
				pos6 = 0;
			}
			var ch13 = font_collection.readU8(pos6);
			var ch23 = font_collection.readU8(pos6 + 1);
			var ch33 = font_collection.readU8(pos6 + 2);
			var ch43 = font_collection.readU8(pos6 + 3);
			return ch43 | ch33 << 8 | ch23 << 16 | ch13 << 24;
		}
	}
	return -1;
};
kha_graphics2_truetype_StbTruetype.stbtt_InitFont = function(info,data,fontstart) {
	info.data = data;
	info.fontstart = fontstart;
	var cmap = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"cmap");
	info.loca = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"loca");
	info.head = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"head");
	info.glyf = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"glyf");
	info.hhea = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hhea");
	info.hmtx = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hmtx");
	info.kern = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"kern");
	if(cmap == 0 || info.loca == 0 || info.head == 0 || info.glyf == 0 || info.hhea == 0 || info.hmtx == 0) {
		return false;
	}
	var t = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"maxp");
	if(t != 0) {
		var pos = t + 4;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = data.readU8(pos);
		var ch2 = data.readU8(pos + 1);
		info.numGlyphs = ch2 | ch1 << 8;
	} else {
		info.numGlyphs = 65535;
	}
	var pos1 = cmap + 2;
	if(pos1 == null) {
		pos1 = 0;
	}
	var ch11 = data.readU8(pos1);
	var ch21 = data.readU8(pos1 + 1);
	var numTables = ch21 | ch11 << 8;
	info.index_map = 0;
	var _g = 0;
	var _g1 = numTables;
	while(_g < _g1) {
		var i = _g++;
		var encoding_record = cmap + 4 + 8 * i;
		var pos2 = encoding_record;
		if(pos2 == null) {
			pos2 = 0;
		}
		var ch12 = data.readU8(pos2);
		var ch22 = data.readU8(pos2 + 1);
		switch(ch22 | ch12 << 8) {
		case 0:
			var pos3 = encoding_record + 4;
			if(pos3 == null) {
				pos3 = 0;
			}
			var pos4 = pos3;
			if(pos4 == null) {
				pos4 = 0;
			}
			var ch13 = data.readU8(pos4);
			var ch23 = data.readU8(pos4 + 1);
			var ch3 = data.readU8(pos4 + 2);
			var ch4 = data.readU8(pos4 + 3);
			info.index_map = cmap + (ch4 | ch3 << 8 | ch23 << 16 | ch13 << 24);
			break;
		case 3:
			var pos5 = encoding_record + 2;
			if(pos5 == null) {
				pos5 = 0;
			}
			var ch14 = data.readU8(pos5);
			var ch24 = data.readU8(pos5 + 1);
			switch(ch24 | ch14 << 8) {
			case 1:case 10:
				var pos6 = encoding_record + 4;
				if(pos6 == null) {
					pos6 = 0;
				}
				var pos7 = pos6;
				if(pos7 == null) {
					pos7 = 0;
				}
				var ch15 = data.readU8(pos7);
				var ch25 = data.readU8(pos7 + 1);
				var ch31 = data.readU8(pos7 + 2);
				var ch41 = data.readU8(pos7 + 3);
				info.index_map = cmap + (ch41 | ch31 << 8 | ch25 << 16 | ch15 << 24);
				break;
			}
			break;
		}
	}
	if(info.index_map == 0) {
		return false;
	}
	var pos8 = info.head + 50;
	if(pos8 == null) {
		pos8 = 0;
	}
	var ch16 = data.readU8(pos8);
	var ch26 = data.readU8(pos8 + 1);
	info.indexToLocFormat = ch26 | ch16 << 8;
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex = function(info,unicode_codepoint) {
	var data = info.data;
	var index_map = info.index_map;
	var pos = index_map;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var format = ch2 | ch1 << 8;
	if(format == 0) {
		var pos1 = index_map + 2;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch11 = data.readU8(pos1);
		var ch21 = data.readU8(pos1 + 1);
		var bytes = ch21 | ch11 << 8;
		if(unicode_codepoint < bytes - 6) {
			var pos2 = index_map + 6 + unicode_codepoint;
			if(pos2 == null) {
				pos2 = 0;
			}
			return data.readU8(pos2);
		}
		return 0;
	} else if(format == 6) {
		var pos3 = index_map + 6;
		if(pos3 == null) {
			pos3 = 0;
		}
		var ch12 = data.readU8(pos3);
		var ch22 = data.readU8(pos3 + 1);
		var first = ch22 | ch12 << 8;
		var pos4 = index_map + 8;
		if(pos4 == null) {
			pos4 = 0;
		}
		var ch13 = data.readU8(pos4);
		var ch23 = data.readU8(pos4 + 1);
		var count = ch23 | ch13 << 8;
		if(unicode_codepoint >= first && unicode_codepoint < first + count) {
			var pos5 = index_map + 10 + (unicode_codepoint - first) * 2;
			if(pos5 == null) {
				pos5 = 0;
			}
			var ch14 = data.readU8(pos5);
			var ch24 = data.readU8(pos5 + 1);
			return ch24 | ch14 << 8;
		}
		return 0;
	} else if(format == 2) {
		throw new js__$Boot_HaxeError("Error");
	} else if(format == 4) {
		var pos6 = index_map + 6;
		if(pos6 == null) {
			pos6 = 0;
		}
		var ch15 = data.readU8(pos6);
		var ch25 = data.readU8(pos6 + 1);
		var segcount = (ch25 | ch15 << 8) >> 1;
		var pos7 = index_map + 8;
		if(pos7 == null) {
			pos7 = 0;
		}
		var ch16 = data.readU8(pos7);
		var ch26 = data.readU8(pos7 + 1);
		var searchRange = (ch26 | ch16 << 8) >> 1;
		var pos8 = index_map + 10;
		if(pos8 == null) {
			pos8 = 0;
		}
		var ch17 = data.readU8(pos8);
		var ch27 = data.readU8(pos8 + 1);
		var entrySelector = ch27 | ch17 << 8;
		var pos9 = index_map + 12;
		if(pos9 == null) {
			pos9 = 0;
		}
		var ch18 = data.readU8(pos9);
		var ch28 = data.readU8(pos9 + 1);
		var rangeShift = (ch28 | ch18 << 8) >> 1;
		var endCount = index_map + 14;
		var search = endCount;
		if(unicode_codepoint > 65535) {
			return 0;
		}
		var pos10 = search + rangeShift * 2;
		if(pos10 == null) {
			pos10 = 0;
		}
		var ch19 = data.readU8(pos10);
		var ch29 = data.readU8(pos10 + 1);
		if(unicode_codepoint >= (ch29 | ch19 << 8)) {
			search += rangeShift * 2;
		}
		search -= 2;
		while(entrySelector != 0) {
			searchRange >>= 1;
			var pos11 = search + searchRange * 2;
			if(pos11 == null) {
				pos11 = 0;
			}
			var ch110 = data.readU8(pos11);
			var ch210 = data.readU8(pos11 + 1);
			var end = ch210 | ch110 << 8;
			if(unicode_codepoint > end) {
				search += searchRange * 2;
			}
			--entrySelector;
		}
		search += 2;
		var item = search - endCount >> 1 & 65535;
		var pos12 = endCount + 2 * item;
		if(pos12 == null) {
			pos12 = 0;
		}
		var ch111 = data.readU8(pos12);
		var ch211 = data.readU8(pos12 + 1);
		if(unicode_codepoint > (ch211 | ch111 << 8)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var pos13 = index_map + 14 + segcount * 2 + 2 + 2 * item;
		if(pos13 == null) {
			pos13 = 0;
		}
		var ch112 = data.readU8(pos13);
		var ch212 = data.readU8(pos13 + 1);
		var start = ch212 | ch112 << 8;
		if(unicode_codepoint < start) {
			return 0;
		}
		var pos14 = index_map + 14 + segcount * 6 + 2 + 2 * item;
		if(pos14 == null) {
			pos14 = 0;
		}
		var ch113 = data.readU8(pos14);
		var ch213 = data.readU8(pos14 + 1);
		var offset = ch213 | ch113 << 8;
		if(offset == 0) {
			var pos15 = index_map + 14 + segcount * 4 + 2 + 2 * item;
			if(pos15 == null) {
				pos15 = 0;
			}
			var ch114 = data.readU8(pos15);
			var ch214 = data.readU8(pos15 + 1);
			var n = ch214 | ch114 << 8;
			return unicode_codepoint + ((n & 32768) != 0 ? n - 65536 : n) & 65535;
		}
		var pos16 = offset + (unicode_codepoint - start) * 2 + index_map + 14 + segcount * 6 + 2 + 2 * item;
		if(pos16 == null) {
			pos16 = 0;
		}
		var ch115 = data.readU8(pos16);
		var ch215 = data.readU8(pos16 + 1);
		return ch215 | ch115 << 8;
	} else if(format == 12 || format == 13) {
		var pos17 = index_map + 12;
		if(pos17 == null) {
			pos17 = 0;
		}
		var pos18 = pos17;
		if(pos18 == null) {
			pos18 = 0;
		}
		var ch116 = data.readU8(pos18);
		var ch216 = data.readU8(pos18 + 1);
		var ch3 = data.readU8(pos18 + 2);
		var ch4 = data.readU8(pos18 + 3);
		var ngroups = ch4 | ch3 << 8 | ch216 << 16 | ch116 << 24;
		var low = 0;
		var high = ngroups;
		while(low < high) {
			var mid = low + (high - low >> 1);
			var pos19 = index_map + 16 + mid * 12;
			if(pos19 == null) {
				pos19 = 0;
			}
			var pos20 = pos19;
			if(pos20 == null) {
				pos20 = 0;
			}
			var ch117 = data.readU8(pos20);
			var ch217 = data.readU8(pos20 + 1);
			var ch31 = data.readU8(pos20 + 2);
			var ch41 = data.readU8(pos20 + 3);
			var start_char = ch41 | ch31 << 8 | ch217 << 16 | ch117 << 24;
			var pos21 = index_map + 16 + mid * 12 + 4;
			if(pos21 == null) {
				pos21 = 0;
			}
			var pos22 = pos21;
			if(pos22 == null) {
				pos22 = 0;
			}
			var ch118 = data.readU8(pos22);
			var ch218 = data.readU8(pos22 + 1);
			var ch32 = data.readU8(pos22 + 2);
			var ch42 = data.readU8(pos22 + 3);
			var end_char = ch42 | ch32 << 8 | ch218 << 16 | ch118 << 24;
			if(unicode_codepoint < start_char) {
				high = mid;
			} else if(unicode_codepoint > end_char) {
				low = mid + 1;
			} else {
				var pos23 = index_map + 16 + mid * 12 + 8;
				if(pos23 == null) {
					pos23 = 0;
				}
				var pos24 = pos23;
				if(pos24 == null) {
					pos24 = 0;
				}
				var ch119 = data.readU8(pos24);
				var ch219 = data.readU8(pos24 + 1);
				var ch33 = data.readU8(pos24 + 2);
				var ch43 = data.readU8(pos24 + 3);
				var start_glyph = ch43 | ch33 << 8 | ch219 << 16 | ch119 << 24;
				if(format == 12) {
					return start_glyph + unicode_codepoint - start_char;
				} else {
					return start_glyph;
				}
			}
		}
		return 0;
	}
	throw new js__$Boot_HaxeError("Error");
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointShape = function(info,unicode_codepoint) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,unicode_codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_setvertex = function(v,type,x,y,cx,cy) {
	v.type = type;
	v.x = x;
	v.y = y;
	v.cx = cx;
	v.cy = cy;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset = function(info,glyph_index) {
	var g1;
	var g2;
	if(glyph_index >= info.numGlyphs) {
		return -1;
	}
	if(info.indexToLocFormat >= 2) {
		return -1;
	}
	if(info.indexToLocFormat == 0) {
		var info1 = info.glyf;
		var p = info.data;
		var pos = info.loca + glyph_index * 2;
		if(pos == null) {
			pos = 0;
		}
		var ch1 = p.readU8(pos);
		var ch2 = p.readU8(pos + 1);
		g1 = info1 + (ch2 | ch1 << 8) * 2;
		var info2 = info.glyf;
		var p1 = info.data;
		var pos1 = info.loca + glyph_index * 2 + 2;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch11 = p1.readU8(pos1);
		var ch21 = p1.readU8(pos1 + 1);
		g2 = info2 + (ch21 | ch11 << 8) * 2;
	} else {
		var info3 = info.glyf;
		var p2 = info.data;
		var pos2 = info.loca + glyph_index * 4;
		if(pos2 == null) {
			pos2 = 0;
		}
		var pos3 = pos2;
		if(pos3 == null) {
			pos3 = 0;
		}
		var ch12 = p2.readU8(pos3);
		var ch22 = p2.readU8(pos3 + 1);
		var ch3 = p2.readU8(pos3 + 2);
		var ch4 = p2.readU8(pos3 + 3);
		g1 = info3 + (ch4 | ch3 << 8 | ch22 << 16 | ch12 << 24);
		var info4 = info.glyf;
		var p3 = info.data;
		var pos4 = info.loca + glyph_index * 4 + 4;
		if(pos4 == null) {
			pos4 = 0;
		}
		var pos5 = pos4;
		if(pos5 == null) {
			pos5 = 0;
		}
		var ch13 = p3.readU8(pos5);
		var ch23 = p3.readU8(pos5 + 1);
		var ch31 = p3.readU8(pos5 + 2);
		var ch41 = p3.readU8(pos5 + 3);
		g2 = info4 + (ch41 | ch31 << 8 | ch23 << 16 | ch13 << 24);
	}
	if(g1 == g2) {
		return -1;
	} else {
		return g1;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox = function(info,glyph_index,rect) {
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return false;
	}
	var p = info.data;
	var pos = g + 2;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	rect.x0 = (n & 32768) != 0 ? n - 65536 : n;
	var p1 = info.data;
	var pos1 = g + 4;
	if(pos1 == null) {
		pos1 = 0;
	}
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	rect.y0 = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	var p2 = info.data;
	var pos2 = g + 6;
	if(pos2 == null) {
		pos2 = 0;
	}
	var ch12 = p2.readU8(pos2);
	var ch22 = p2.readU8(pos2 + 1);
	var n2 = ch22 | ch12 << 8;
	rect.x1 = (n2 & 32768) != 0 ? n2 - 65536 : n2;
	var p3 = info.data;
	var pos3 = g + 8;
	if(pos3 == null) {
		pos3 = 0;
	}
	var ch13 = p3.readU8(pos3);
	var ch23 = p3.readU8(pos3 + 1);
	var n3 = ch23 | ch13 << 8;
	rect.y1 = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBox = function(info,codepoint,rect) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint),rect);
};
kha_graphics2_truetype_StbTruetype.stbtt_IsGlyphEmpty = function(info,glyph_index) {
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return true;
	}
	var p = info.data;
	var pos = g;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	var numberOfContours = (n & 32768) != 0 ? n - 65536 : n;
	return numberOfContours == 0;
};
kha_graphics2_truetype_StbTruetype.stbtt__close_shape = function(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy) {
	if(start_off) {
		if(was_off) {
			kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + scx >> 1,cy + scy >> 1,cx,cy);
		}
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,scx,scy);
	} else if(was_off) {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,cx,cy);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,sx,sy,0,0);
	}
	return num_vertices;
};
kha_graphics2_truetype_StbTruetype.copyVertices = function(from,to,offset,count) {
	var _g = 0;
	var _g1 = count;
	while(_g < _g1) {
		var i = _g++;
		to[offset + i] = from[i];
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape = function(info,glyph_index) {
	var data = info.data;
	var vertices = null;
	var num_vertices = 0;
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return null;
	}
	var pos = g;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	var numberOfContours = (n & 32768) != 0 ? n - 65536 : n;
	if(numberOfContours > 0) {
		var flags = 0;
		var j = 0;
		var next_move = 0;
		var off = 0;
		var was_off = false;
		var start_off = false;
		var endPtsOfContoursOffset = g + 10;
		var pos1 = endPtsOfContoursOffset + numberOfContours * 2;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch11 = data.readU8(pos1);
		var ch21 = data.readU8(pos1 + 1);
		var ins = ch21 | ch11 << 8;
		var pointsIndex = endPtsOfContoursOffset + numberOfContours * 2 + 2 + ins;
		var pos2 = endPtsOfContoursOffset + numberOfContours * 2 - 2;
		if(pos2 == null) {
			pos2 = 0;
		}
		var ch12 = data.readU8(pos2);
		var ch22 = data.readU8(pos2 + 1);
		var n1 = 1 + (ch22 | ch12 << 8);
		var m = n1 + 2 * numberOfContours;
		var this1 = new Array(m);
		vertices = this1;
		if(vertices == null) {
			return null;
		} else {
			var _g = 0;
			var _g1 = vertices.length;
			while(_g < _g1) {
				var i = _g++;
				vertices[i] = new kha_graphics2_truetype_Stbtt_$vertex();
			}
		}
		next_move = 0;
		var flagcount = 0;
		off = m - n1;
		var _g2 = 0;
		var _g11 = n1;
		while(_g2 < _g11) {
			var i1 = _g2++;
			if(flagcount == 0) {
				flags = data.readU8(pointsIndex++);
				if((flags & 8) != 0) {
					flagcount = data.readU8(pointsIndex++);
				}
			} else {
				--flagcount;
			}
			vertices[off + i1].type = flags;
		}
		var x = 0;
		var _g21 = 0;
		var _g3 = n1;
		while(_g21 < _g3) {
			var i2 = _g21++;
			flags = vertices[off + i2].type;
			if((flags & 2) != 0) {
				var dx = data.readU8(pointsIndex++);
				x += (flags & 16) != 0 ? dx : -dx;
			} else if((flags & 16) == 0) {
				var value;
				var ch13 = data.readU8(pointsIndex);
				var ch23 = data.readU8(pointsIndex + 1);
				var n2 = ch23 | ch13 << 8;
				if((n2 & 32768) != 0) {
					value = n2 - 65536;
				} else {
					value = n2;
				}
				x += value;
				pointsIndex += 2;
			}
			vertices[off + i2].x = x;
		}
		var y = 0;
		var _g4 = 0;
		var _g5 = n1;
		while(_g4 < _g5) {
			var i3 = _g4++;
			flags = vertices[off + i3].type;
			if((flags & 4) != 0) {
				var dy = data.readU8(pointsIndex++);
				y += (flags & 32) != 0 ? dy : -dy;
			} else if((flags & 32) == 0) {
				var value1;
				var ch14 = data.readU8(pointsIndex);
				var ch24 = data.readU8(pointsIndex + 1);
				var n3 = ch24 | ch14 << 8;
				if((n3 & 32768) != 0) {
					value1 = n3 - 65536;
				} else {
					value1 = n3;
				}
				y += value1;
				pointsIndex += 2;
			}
			vertices[off + i3].y = y;
		}
		num_vertices = 0;
		var scy = 0;
		var scx = scy;
		var cy = scx;
		var cx = cy;
		var sy = cx;
		var sx = sy;
		var i4 = 0;
		while(i4 < n1) {
			flags = vertices[off + i4].type;
			x = vertices[off + i4].x;
			y = vertices[off + i4].y;
			if(next_move == i4) {
				if(i4 != 0) {
					num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
				}
				start_off = (flags & 1) == 0;
				if(start_off) {
					scx = x;
					scy = y;
					if((vertices[off + i4 + 1].type & 1) == 0) {
						sx = x + vertices[off + i4 + 1].x >> 1;
						sy = y + vertices[off + i4 + 1].y >> 1;
					} else {
						sx = vertices[off + i4 + 1].x;
						sy = vertices[off + i4 + 1].y;
						++i4;
					}
				} else {
					sx = x;
					sy = y;
				}
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],1,sx,sy,0,0);
				was_off = false;
				var pos3 = endPtsOfContoursOffset + j * 2;
				if(pos3 == null) {
					pos3 = 0;
				}
				var ch15 = data.readU8(pos3);
				var ch25 = data.readU8(pos3 + 1);
				next_move = 1 + (ch25 | ch15 << 8);
				++j;
			} else if((flags & 1) == 0) {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + x >> 1,cy + y >> 1,cx,cy);
				}
				cx = x;
				cy = y;
				was_off = true;
			} else {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,x,y,cx,cy);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,x,y,0,0);
				}
				was_off = false;
			}
			++i4;
		}
		num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
	} else if(numberOfContours == -1) {
		var more = 1;
		var compIndex = g + 10;
		num_vertices = 0;
		vertices = null;
		while(more != 0) {
			var comp_num_verts = 0;
			var i5;
			var comp_verts = null;
			var tmp = null;
			var mtx0 = 1;
			var mtx1 = 0;
			var mtx2 = 0;
			var mtx3 = 1;
			var mtx4 = 0;
			var mtx5 = 0;
			var pos4 = compIndex;
			if(pos4 == null) {
				pos4 = 0;
			}
			var ch16 = data.readU8(pos4);
			var ch26 = data.readU8(pos4 + 1);
			var n4 = ch26 | ch16 << 8;
			var flags1 = (n4 & 32768) != 0 ? n4 - 65536 : n4;
			var pos5 = compIndex += 2;
			if(pos5 == null) {
				pos5 = 0;
			}
			var ch17 = data.readU8(pos5);
			var ch27 = data.readU8(pos5 + 1);
			var n5 = ch27 | ch17 << 8;
			var gidx = (n5 & 32768) != 0 ? n5 - 65536 : n5;
			compIndex += 2;
			if((flags1 & 2) != 0) {
				if((flags1 & 1) != 0) {
					var pos6 = compIndex;
					if(pos6 == null) {
						pos6 = 0;
					}
					var ch18 = data.readU8(pos6);
					var ch28 = data.readU8(pos6 + 1);
					var n6 = ch28 | ch18 << 8;
					mtx4 = (n6 & 32768) != 0 ? n6 - 65536 : n6;
					var pos7 = compIndex += 2;
					if(pos7 == null) {
						pos7 = 0;
					}
					var ch19 = data.readU8(pos7);
					var ch29 = data.readU8(pos7 + 1);
					var n7 = ch29 | ch19 << 8;
					mtx5 = (n7 & 32768) != 0 ? n7 - 65536 : n7;
					compIndex += 2;
				} else {
					var pos8 = compIndex;
					if(pos8 == null) {
						pos8 = 0;
					}
					var n8 = data.readU8(pos8);
					mtx4 = n8 >= 128 ? n8 - 256 : n8;
					var pos9 = ++compIndex;
					if(pos9 == null) {
						pos9 = 0;
					}
					var n9 = data.readU8(pos9);
					mtx5 = n9 >= 128 ? n9 - 256 : n9;
					++compIndex;
				}
			} else {
				throw new js__$Boot_HaxeError("Error");
			}
			if((flags1 & 8) != 0) {
				var pos10 = compIndex;
				if(pos10 == null) {
					pos10 = 0;
				}
				var ch110 = data.readU8(pos10);
				var ch210 = data.readU8(pos10 + 1);
				var n10 = ch210 | ch110 << 8;
				mtx3 = ((n10 & 32768) != 0 ? n10 - 65536 : n10) / 16384.0;
				mtx0 = mtx3;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
			} else if((flags1 & 64) != 0) {
				var pos11 = compIndex;
				if(pos11 == null) {
					pos11 = 0;
				}
				var ch111 = data.readU8(pos11);
				var ch211 = data.readU8(pos11 + 1);
				var n11 = ch211 | ch111 << 8;
				mtx0 = ((n11 & 32768) != 0 ? n11 - 65536 : n11) / 16384.0;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
				var pos12 = compIndex;
				if(pos12 == null) {
					pos12 = 0;
				}
				var ch112 = data.readU8(pos12);
				var ch212 = data.readU8(pos12 + 1);
				var n12 = ch212 | ch112 << 8;
				mtx3 = ((n12 & 32768) != 0 ? n12 - 65536 : n12) / 16384.0;
				compIndex += 2;
			} else if((flags1 & 128) != 0) {
				var pos13 = compIndex;
				if(pos13 == null) {
					pos13 = 0;
				}
				var ch113 = data.readU8(pos13);
				var ch213 = data.readU8(pos13 + 1);
				var n13 = ch213 | ch113 << 8;
				mtx0 = ((n13 & 32768) != 0 ? n13 - 65536 : n13) / 16384.0;
				var pos14 = compIndex += 2;
				if(pos14 == null) {
					pos14 = 0;
				}
				var ch114 = data.readU8(pos14);
				var ch214 = data.readU8(pos14 + 1);
				var n14 = ch214 | ch114 << 8;
				mtx1 = ((n14 & 32768) != 0 ? n14 - 65536 : n14) / 16384.0;
				var pos15 = compIndex += 2;
				if(pos15 == null) {
					pos15 = 0;
				}
				var ch115 = data.readU8(pos15);
				var ch215 = data.readU8(pos15 + 1);
				var n15 = ch215 | ch115 << 8;
				mtx2 = ((n15 & 32768) != 0 ? n15 - 65536 : n15) / 16384.0;
				var pos16 = compIndex += 2;
				if(pos16 == null) {
					pos16 = 0;
				}
				var ch116 = data.readU8(pos16);
				var ch216 = data.readU8(pos16 + 1);
				var n16 = ch216 | ch116 << 8;
				mtx3 = ((n16 & 32768) != 0 ? n16 - 65536 : n16) / 16384.0;
				compIndex += 2;
			}
			var m1 = Math.sqrt(mtx0 * mtx0 + mtx1 * mtx1);
			var n17 = Math.sqrt(mtx2 * mtx2 + mtx3 * mtx3);
			comp_verts = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,gidx);
			comp_num_verts = comp_verts == null ? 0 : comp_verts.length;
			if(comp_num_verts > 0) {
				var _g6 = 0;
				var _g12 = comp_num_verts;
				while(_g6 < _g12) {
					var i6 = _g6++;
					var v = comp_verts[i6];
					var x1 = v.x;
					var y1 = v.y;
					v.x = m1 * (mtx0 * x1 + mtx2 * y1 + mtx4) | 0;
					v.y = n17 * (mtx1 * x1 + mtx3 * y1 + mtx5) | 0;
					x1 = v.cx;
					y1 = v.cy;
					v.cx = m1 * (mtx0 * x1 + mtx2 * y1 + mtx4) | 0;
					v.cy = n17 * (mtx1 * x1 + mtx3 * y1 + mtx5) | 0;
				}
				var this2 = new Array(num_vertices + comp_num_verts);
				tmp = this2;
				if(tmp == null) {
					return null;
				}
				if(num_vertices > 0) {
					kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp,0,num_vertices);
				}
				kha_graphics2_truetype_StbTruetype.copyVertices(comp_verts,tmp,num_vertices,comp_num_verts);
				vertices = tmp;
				num_vertices += comp_num_verts;
			}
			more = flags1 & 32;
		}
	} else if(numberOfContours < 0) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(vertices == null) {
		return null;
	}
	if(vertices.length < num_vertices) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(num_vertices < vertices.length) {
		var this3 = new Array(num_vertices);
		var tmp1 = this3;
		kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp1,0,num_vertices);
		return tmp1;
	} else {
		return vertices;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics = function(info,glyph_index) {
	var p = info.data;
	var pos = info.hhea + 34;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var numOfLongHorMetrics = ch2 | ch1 << 8;
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics();
	if(glyph_index < numOfLongHorMetrics) {
		var p1 = info.data;
		var pos1 = info.hmtx + 4 * glyph_index;
		if(pos1 == null) {
			pos1 = 0;
		}
		var ch11 = p1.readU8(pos1);
		var ch21 = p1.readU8(pos1 + 1);
		var n = ch21 | ch11 << 8;
		metrics.advanceWidth = (n & 32768) != 0 ? n - 65536 : n;
		var p2 = info.data;
		var pos2 = info.hmtx + 4 * glyph_index + 2;
		if(pos2 == null) {
			pos2 = 0;
		}
		var ch12 = p2.readU8(pos2);
		var ch22 = p2.readU8(pos2 + 1);
		var n1 = ch22 | ch12 << 8;
		metrics.leftSideBearing = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	} else {
		var p3 = info.data;
		var pos3 = info.hmtx + 4 * (numOfLongHorMetrics - 1);
		if(pos3 == null) {
			pos3 = 0;
		}
		var ch13 = p3.readU8(pos3);
		var ch23 = p3.readU8(pos3 + 1);
		var n2 = ch23 | ch13 << 8;
		metrics.advanceWidth = (n2 & 32768) != 0 ? n2 - 65536 : n2;
		var p4 = info.data;
		var pos4 = info.hmtx + 4 * numOfLongHorMetrics + 2 * (glyph_index - numOfLongHorMetrics);
		if(pos4 == null) {
			pos4 = 0;
		}
		var ch14 = p4.readU8(pos4);
		var ch24 = p4.readU8(pos4 + 1);
		var n3 = ch24 | ch14 << 8;
		metrics.leftSideBearing = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	}
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphKernAdvance = function(info,glyph1,glyph2) {
	var kern = info.kern;
	var data = info.data;
	var straw;
	var m;
	if(info.kern == 0) {
		return 0;
	}
	var pos = kern + 2;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = data.readU8(pos);
	var ch2 = data.readU8(pos + 1);
	if((ch2 | ch1 << 8) < 1) {
		return 0;
	}
	var pos1 = kern + 8;
	if(pos1 == null) {
		pos1 = 0;
	}
	var ch11 = data.readU8(pos1);
	var ch21 = data.readU8(pos1 + 1);
	if((ch21 | ch11 << 8) != 1) {
		return 0;
	}
	var l = 0;
	var pos2 = kern + 10;
	if(pos2 == null) {
		pos2 = 0;
	}
	var ch12 = data.readU8(pos2);
	var ch22 = data.readU8(pos2 + 1);
	var r = (ch22 | ch12 << 8) - 1;
	var needle = glyph1 << 16 | glyph2;
	while(l <= r) {
		m = l + r >> 1;
		var pos3 = kern + 18 + m * 6;
		if(pos3 == null) {
			pos3 = 0;
		}
		var pos4 = pos3;
		if(pos4 == null) {
			pos4 = 0;
		}
		var ch13 = data.readU8(pos4);
		var ch23 = data.readU8(pos4 + 1);
		var ch3 = data.readU8(pos4 + 2);
		var ch4 = data.readU8(pos4 + 3);
		straw = ch4 | ch3 << 8 | ch23 << 16 | ch13 << 24;
		if(needle < straw) {
			r = m - 1;
		} else if(needle > straw) {
			l = m + 1;
		} else {
			var pos5 = kern + 22 + m * 6;
			if(pos5 == null) {
				pos5 = 0;
			}
			var ch14 = data.readU8(pos5);
			var ch24 = data.readU8(pos5 + 1);
			var n = ch24 | ch14 << 8;
			if((n & 32768) != 0) {
				return n - 65536;
			} else {
				return n;
			}
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointKernAdvance = function(info,ch1,ch2) {
	if(info.kern == 0) {
		return 0;
	}
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphKernAdvance(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,ch1),kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,ch2));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointHMetrics = function(info,codepoint) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics = function(info) {
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics();
	var p = info.data;
	var pos = info.hhea + 4;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	metrics.ascent = (n & 32768) != 0 ? n - 65536 : n;
	var p1 = info.data;
	var pos1 = info.hhea + 6;
	if(pos1 == null) {
		pos1 = 0;
	}
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	metrics.descent = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	var p2 = info.data;
	var pos2 = info.hhea + 8;
	if(pos2 == null) {
		pos2 = 0;
	}
	var ch12 = p2.readU8(pos2);
	var ch22 = p2.readU8(pos2 + 1);
	var n2 = ch22 | ch12 << 8;
	metrics.lineGap = (n2 & 32768) != 0 ? n2 - 65536 : n2;
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontBoundingBox = function(info) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	var p = info.data;
	var pos = info.head + 36;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	rect.x0 = (n & 32768) != 0 ? n - 65536 : n;
	var p1 = info.data;
	var pos1 = info.head + 38;
	if(pos1 == null) {
		pos1 = 0;
	}
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	rect.y0 = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	var p2 = info.data;
	var pos2 = info.head + 40;
	if(pos2 == null) {
		pos2 = 0;
	}
	var ch12 = p2.readU8(pos2);
	var ch22 = p2.readU8(pos2 + 1);
	var n2 = ch22 | ch12 << 8;
	rect.x1 = (n2 & 32768) != 0 ? n2 - 65536 : n2;
	var p3 = info.data;
	var pos3 = info.head + 42;
	if(pos3 == null) {
		pos3 = 0;
	}
	var ch13 = p3.readU8(pos3);
	var ch23 = p3.readU8(pos3 + 1);
	var n3 = ch23 | ch13 << 8;
	rect.y1 = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight = function(info,height) {
	var p = info.data;
	var pos = info.hhea + 4;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var n = ch2 | ch1 << 8;
	var p1 = info.data;
	var pos1 = info.hhea + 6;
	if(pos1 == null) {
		pos1 = 0;
	}
	var ch11 = p1.readU8(pos1);
	var ch21 = p1.readU8(pos1 + 1);
	var n1 = ch21 | ch11 << 8;
	var fheight = ((n & 32768) != 0 ? n - 65536 : n) - ((n1 & 32768) != 0 ? n1 - 65536 : n1);
	return height / fheight;
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForMappingEmToPixels = function(info,pixels) {
	var p = info.data;
	var pos = info.head + 18;
	if(pos == null) {
		pos = 0;
	}
	var ch1 = p.readU8(pos);
	var ch2 = p.readU8(pos + 1);
	var unitsPerEm = ch2 | ch1 << 8;
	return pixels / unitsPerEm;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel = function(font,glyph,scale_x,scale_y,shift_x,shift_y) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(font,glyph,rect)) {
		rect.x0 = 0;
		rect.y0 = 0;
		rect.x1 = 0;
		rect.y1 = 0;
	} else {
		var x0 = rect.x0;
		var x1 = rect.x1;
		var y0 = rect.y0;
		var y1 = rect.y1;
		rect.x0 = Math.floor(x0 * scale_x + shift_x);
		rect.y0 = Math.floor(-y1 * scale_y + shift_y);
		rect.x1 = Math.ceil(x1 * scale_x + shift_x);
		rect.y1 = Math.ceil(-y0 * scale_y + shift_y);
	}
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox = function(font,glyph,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,glyph,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBoxSubpixel = function(font,codepoint,scale_x,scale_y,shift_x,shift_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(font,codepoint),scale_x,scale_y,shift_x,shift_y);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBox = function(font,codepoint,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBoxSubpixel(font,codepoint,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt__new_active = function(e,eIndex,off_x,start_point) {
	var z = new kha_graphics2_truetype_Stbtt_$_$active_$edge();
	var dxdy = (e[eIndex].x1 - e[eIndex].x0) / (e[eIndex].y1 - e[eIndex].y0);
	if(z == null) {
		return z;
	}
	z.fdx = dxdy;
	z.fdy = dxdy != 0.0 ? 1.0 / dxdy : 0.0;
	z.fx = e[eIndex].x0 + dxdy * (start_point - e[eIndex].y0);
	z.fx -= off_x;
	z.direction = e[eIndex].invert ? 1.0 : -1.0;
	z.sy = e[eIndex].y0;
	z.ey = e[eIndex].y1;
	z.next = null;
	return z;
};
kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge = function(scanline,scanlineIndex,x,e,x0,y0,x1,y1) {
	if(y0 == y1) {
		return;
	}
	if(!(y0 < y1)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(!(e.sy <= e.ey)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(y0 > e.ey) {
		return;
	}
	if(y1 < e.sy) {
		return;
	}
	if(y0 < e.sy) {
		x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);
		y0 = e.sy;
	}
	if(y1 > e.ey) {
		x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);
		y1 = e.ey;
	}
	if(x0 == x) {
		if(!(x1 <= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 == x + 1) {
		if(!(x1 >= x)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 <= x) {
		if(!(x1 <= x)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 >= x + 1) {
		if(!(x1 >= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(!(x1 >= x && x1 <= x + 1)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(x0 <= x && x1 <= x) {
		var _g = scanlineIndex + x;
		var _g1 = scanline;
		_g1[_g] = _g1[_g] + e.direction * (y1 - y0);
	} else if(!(x0 >= x + 1 && x1 >= x + 1)) {
		if(!(x0 >= x && x0 <= x + 1 && x1 >= x && x1 <= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var _g2 = scanlineIndex + x;
		var _g11 = scanline;
		_g11[_g2] = _g11[_g2] + e.direction * (y1 - y0) * (1 - (x0 - x + (x1 - x)) / 2);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new = function(scanline,scanline_fill,scanline_fillIndex,len,e,y_top) {
	var y_bottom = y_top + 1;
	while(e != null) {
		if(!(e.ey >= y_top)) {
			throw new js__$Boot_HaxeError("Error");
		}
		if(e.fdx == 0) {
			var x0 = e.fx;
			if(x0 < len) {
				if(x0 >= 0) {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x0 | 0,e,x0,y_top,x0,y_bottom);
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,x0 + 1 | 0,e,x0,y_top,x0,y_bottom);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,0,e,x0,y_top,x0,y_bottom);
				}
			}
		} else {
			var x01 = e.fx;
			var dx = e.fdx;
			var xb = x01 + dx;
			var x_top;
			var x_bottom;
			var sy0;
			var sy1;
			var dy = e.fdy;
			if(!(e.sy <= y_bottom && e.ey >= y_top)) {
				throw new js__$Boot_HaxeError("Error");
			}
			if(e.sy > y_top) {
				x_top = x01 + dx * (e.sy - y_top);
				sy0 = e.sy;
			} else {
				x_top = x01;
				sy0 = y_top;
			}
			if(e.ey < y_bottom) {
				x_bottom = x01 + dx * (e.ey - y_top);
				sy1 = e.ey;
			} else {
				x_bottom = xb;
				sy1 = y_bottom;
			}
			if(x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {
				if((x_top | 0) == (x_bottom | 0)) {
					var x = x_top | 0;
					var height = sy1 - sy0;
					if(!(x >= 0 && x < len)) {
						throw new js__$Boot_HaxeError("Error");
					}
					var _g = x;
					var _g1 = scanline;
					_g1[_g] = _g1[_g] + e.direction * (1 - (x_top - x + (x_bottom - x)) / 2) * height;
					var _g2 = scanline_fillIndex + x;
					var _g11 = scanline_fill;
					_g11[_g2] = _g11[_g2] + e.direction * height;
				} else {
					var x1;
					if(x_top > x_bottom) {
						sy0 = y_bottom - (sy0 - y_top);
						sy1 = y_bottom - (sy1 - y_top);
						var t = sy0;
						sy0 = sy1;
						sy1 = t;
						t = x_bottom;
						x_bottom = x_top;
						x_top = t;
						dx = -dx;
						dy = -dy;
						t = x01;
						x01 = xb;
						xb = t;
					}
					var x11 = x_top | 0;
					var x2 = x_bottom | 0;
					var y_crossing = (x11 + 1 - x01) * dy + y_top;
					var sign = e.direction;
					var area = sign * (y_crossing - sy0);
					var _g3 = x11;
					var _g12 = scanline;
					_g12[_g3] = _g12[_g3] + area * (1 - (x_top - x11 + (x11 + 1 - x11)) / 2);
					var step = sign * dy;
					var _g4 = x11 + 1;
					var _g13 = x2;
					while(_g4 < _g13) {
						var x3 = _g4++;
						var _g5 = x3;
						var _g14 = scanline;
						_g14[_g5] = _g14[_g5] + (area + step / 2);
						area += step;
					}
					y_crossing += dy * (x2 - (x11 + 1));
					if(!(Math.abs(area) <= 1.01)) {
						throw new js__$Boot_HaxeError("Error");
					}
					var _g21 = x2;
					var _g31 = scanline;
					_g31[_g21] = _g31[_g21] + (area + sign * (1 - (x2 - x2 + (x_bottom - x2)) / 2) * (sy1 - y_crossing));
					var _g22 = scanline_fillIndex + x2;
					var _g32 = scanline_fill;
					_g32[_g22] = _g32[_g22] + sign * (sy1 - sy0);
				}
			} else {
				var _g6 = 0;
				var _g15 = len;
				while(_g6 < _g15) {
					var x4 = _g6++;
					var y0 = y_top;
					var x12 = x4;
					var x21 = x4 + 1;
					var x31 = xb;
					var y3 = y_bottom;
					var y1 = (x4 - x01) / dx + y_top;
					var y2 = (x4 + 1 - x01) / dx + y_top;
					if(x01 < x12 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else if(x31 < x12 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x01 < x12 && x31 > x12) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x31 < x12 && x01 > x12) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x12,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x12,y1,x31,y3);
					} else if(x01 < x21 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else if(x31 < x21 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y3);
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y0,x31,y3);
					}
				}
			}
		}
		e = e.next;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges = function(result,e,n,vsubsample,off_x,off_y) {
	var active = null;
	var j = 0;
	var scanline;
	var scanline2Index = 0;
	var eIndex = 0;
	if(result.w > 64) {
		var this1 = new Array(result.w * 2 + 1);
		scanline = this1;
	} else {
		var this2 = new Array(129);
		scanline = this2;
	}
	var scanline2 = scanline;
	scanline2Index = result.w;
	var y = off_y;
	e[eIndex + n].y0 = off_y + result.h + 1;
	while(j < result.h) {
		var scan_y_top = y + 0.0;
		var scan_y_bottom = y + 1.0;
		var step_value = active;
		var step_parent = null;
		var _g = 0;
		var _g1 = result.w;
		while(_g < _g1) {
			var i = _g++;
			scanline[i] = 0;
		}
		var _g2 = 0;
		var _g3 = result.w + 1;
		while(_g2 < _g3) {
			var i1 = _g2++;
			scanline2[scanline2Index + i1] = 0;
		}
		while(step_value != null) {
			var z = step_value;
			if(z.ey <= scan_y_top) {
				if(step_parent == null) {
					active = z.next;
					step_value = z.next;
				} else {
					step_parent.next = z.next;
					step_value = z.next;
				}
				if(z.direction == 0) {
					throw new js__$Boot_HaxeError("Error");
				}
				z.direction = 0;
			} else {
				step_parent = step_value;
				step_value = step_value.next;
			}
		}
		while(e[eIndex].y0 <= scan_y_bottom) {
			if(e[eIndex].y0 != e[eIndex].y1) {
				var z1 = kha_graphics2_truetype_StbTruetype.stbtt__new_active(e,eIndex,off_x,scan_y_top);
				if(!(z1.ey >= scan_y_top)) {
					throw new js__$Boot_HaxeError("Error");
				}
				z1.next = active;
				active = z1;
			}
			++eIndex;
		}
		if(active != null) {
			kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new(scanline,scanline2,scanline2Index + 1,result.w,active,scan_y_top);
		}
		var sum = 0;
		var _g4 = 0;
		var _g5 = result.w;
		while(_g4 < _g5) {
			var i2 = _g4++;
			sum += scanline2[scanline2Index + i2];
			var k = scanline[i2] + sum;
			k = Math.abs(k) * 255.0 + 0.5;
			var m = k | 0;
			if(m > 255) {
				m = 255;
			}
			result.pixels.writeU8(result.pixels_offset + j * result.stride + i2,m);
		}
		step_parent = null;
		step_value = active;
		while(step_value != null) {
			var z2 = step_value;
			z2.fx += z2.fdx;
			step_parent = step_value;
			step_value = step_value.next;
		}
		++y;
		++j;
	}
};
kha_graphics2_truetype_StbTruetype.STBTT__COMPARE = function(a,b) {
	return a.y0 < b.y0;
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort = function(p,n) {
	var i;
	var j;
	var _g = 1;
	var _g1 = n;
	while(_g < _g1) {
		var i1 = _g++;
		var t = p[i1];
		var a = t;
		j = i1;
		while(j > 0) {
			var b = p[j - 1];
			var c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(a,b);
			if(!c) {
				break;
			}
			p[j] = p[j - 1];
			--j;
		}
		if(i1 != j) {
			p[j] = t;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort = function(p,pIndex,n) {
	while(n > 12) {
		var t;
		var c;
		var m = n >> 1;
		var c01 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + m]);
		var c12 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + m],p[pIndex + n - 1]);
		if(c01 != c12) {
			c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + n - 1]);
			var z = c == c12 ? 0 : n - 1;
			t = p[pIndex + z];
			p[pIndex + z] = p[pIndex + m];
			p[pIndex + m] = t;
		}
		t = p[pIndex];
		p[pIndex] = p[pIndex + m];
		p[pIndex + m] = t;
		var i = 1;
		var j = n - 1;
		while(true) {
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + i],p[pIndex])) ++i;
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + j])) --j;
			if(i >= j) {
				break;
			}
			t = p[pIndex + i];
			p[pIndex + i] = p[pIndex + j];
			p[pIndex + j] = t;
			++i;
			--j;
		}
		if(j < n - i) {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex,j);
			pIndex += i;
			n -= i;
		} else {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex + i,n - i);
			n = j;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges = function(p,n) {
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,0,n);
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort(p,n);
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize = function(result,pts,wcount,windings,scale_x,scale_y,shift_x,shift_y,off_x,off_y,invert) {
	var y_scale_inv = invert ? -scale_y : scale_y;
	var i;
	var j;
	var k;
	var vsubsample = 1;
	var ptsIndex = 0;
	var n = 0;
	var _g = 0;
	var _g1 = windings;
	while(_g < _g1) {
		var i1 = _g++;
		n += wcount[i1];
	}
	var this1 = new Array(n + 1);
	var e = this1;
	if(e == null) {
		return;
	} else {
		var _g2 = 0;
		var _g3 = e.length;
		while(_g2 < _g3) {
			var i2 = _g2++;
			e[i2] = new kha_graphics2_truetype_Stbtt_$_$edge();
		}
	}
	n = 0;
	var m = 0;
	var _g21 = 0;
	var _g31 = windings;
	while(_g21 < _g31) {
		var i3 = _g21++;
		var p = pts;
		var pIndex = ptsIndex + m;
		m += wcount[i3];
		j = wcount[i3] - 1;
		var _g22 = 0;
		var _g32 = wcount[i3];
		while(_g22 < _g32) {
			var k1 = _g22++;
			var a = k1;
			var b = j;
			if(p[pIndex + j].y == p[pIndex + k1].y) {
				j = k1;
				continue;
			}
			e[n].invert = false;
			if(invert ? p[pIndex + j].y > p[pIndex + k1].y : p[pIndex + j].y < p[pIndex + k1].y) {
				e[n].invert = true;
				a = j;
				b = k1;
			}
			e[n].x0 = p[pIndex + a].x * scale_x + shift_x;
			e[n].y0 = (p[pIndex + a].y * y_scale_inv + shift_y) * vsubsample;
			e[n].x1 = p[pIndex + b].x * scale_x + shift_x;
			e[n].y1 = (p[pIndex + b].y * y_scale_inv + shift_y) * vsubsample;
			++n;
			j = k1;
		}
	}
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges(e,n);
	kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges(result,e,n,vsubsample,off_x,off_y);
};
kha_graphics2_truetype_StbTruetype.stbtt__add_point = function(points,n,x,y) {
	if(points == null) {
		return;
	}
	points[n].x = x;
	points[n].y = y;
};
kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve = function(points,num_points,x0,y0,x1,y1,x2,y2,objspace_flatness_squared,n) {
	var mx = (x0 + 2 * x1 + x2) / 4;
	var my = (y0 + 2 * y1 + y2) / 4;
	var dx = (x0 + x2) / 2 - mx;
	var dy = (y0 + y2) / 2 - my;
	if(n > 16) {
		return 1;
	}
	if(dx * dx + dy * dy > objspace_flatness_squared) {
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,x0,y0,(x0 + x1) / 2.0,(y0 + y1) / 2.0,mx,my,objspace_flatness_squared,n + 1);
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,mx,my,(x1 + x2) / 2.0,(y1 + y2) / 2.0,x2,y2,objspace_flatness_squared,n + 1);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points.value,x2,y2);
		num_points.value += 1;
	}
	return 1;
};
kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves = function(vertices,num_verts,objspace_flatness,contour_lengths,num_contours) {
	var points = null;
	var num_points = 0;
	var objspace_flatness_squared = objspace_flatness * objspace_flatness;
	var i;
	var n = 0;
	var start = 0;
	var pass;
	var _g = 0;
	var _g1 = num_verts;
	while(_g < _g1) {
		var i1 = _g++;
		if(vertices[i1].type == 1) {
			++n;
		}
	}
	num_contours.value = n;
	if(n == 0) {
		return null;
	}
	var this1 = new Array(n);
	contour_lengths.value = this1;
	if(contour_lengths.value == null) {
		num_contours.value = 0;
		return null;
	}
	var _g2 = 0;
	while(_g2 < 2) {
		var pass1 = _g2++;
		var x = 0;
		var y = 0;
		if(pass1 == 1) {
			var this2 = new Array(num_points);
			points = this2;
			if(points == null) {
				contour_lengths.value = null;
				num_contours.value = 0;
				return null;
			} else {
				var _g21 = 0;
				var _g3 = points.length;
				while(_g21 < _g3) {
					var i2 = _g21++;
					points[i2] = new kha_graphics2_truetype_Stbtt_$_$point();
				}
			}
		}
		num_points = 0;
		n = -1;
		var _g22 = 0;
		var _g31 = num_verts;
		while(_g22 < _g31) {
			var i3 = _g22++;
			switch(vertices[i3].type) {
			case 1:
				if(n >= 0) {
					contour_lengths.value[n] = num_points - start;
				}
				++n;
				start = num_points;
				x = vertices[i3].x;
				y = vertices[i3].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 2:
				x = vertices[i3].x;
				y = vertices[i3].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 3:
				var num_points_reference = { value : num_points};
				kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points_reference,x,y,vertices[i3].cx,vertices[i3].cy,vertices[i3].x,vertices[i3].y,objspace_flatness_squared,0);
				num_points = num_points_reference.value;
				x = vertices[i3].x;
				y = vertices[i3].y;
				break;
			}
		}
		contour_lengths.value[n] = num_points - start;
	}
	return points;
};
kha_graphics2_truetype_StbTruetype.stbtt_Rasterize = function(result,flatness_in_pixels,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert) {
	var scale = scale_x > scale_y ? scale_y : scale_x;
	var winding_count = 0;
	var winding_lengths = null;
	var winding_count_reference = { value : winding_count};
	var winding_lengths_reference = new kha_graphics2_truetype_VectorOfIntPointer();
	var windings = kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves(vertices,num_verts,flatness_in_pixels / scale,winding_lengths_reference,winding_count_reference);
	winding_count = winding_count_reference.value;
	winding_lengths = winding_lengths_reference.value;
	if(windings != null) {
		kha_graphics2_truetype_StbTruetype.stbtt__rasterize(result,windings,winding_lengths,winding_count,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel = function(info,scale_x,scale_y,shift_x,shift_y,glyph,region) {
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices.length;
	if(scale_x == 0) {
		scale_x = scale_y;
	}
	if(scale_y == 0) {
		if(scale_x == 0) {
			return null;
		}
		scale_y = scale_x;
	}
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	var ix0 = rect.x0;
	var iy0 = rect.y0;
	var ix1 = rect.x1;
	var iy1 = rect.y1;
	gbm.w = ix1 - ix0;
	gbm.h = iy1 - iy0;
	gbm.pixels = null;
	region.width = gbm.w;
	region.height = gbm.h;
	region.xoff = ix0;
	region.yoff = iy0;
	if(gbm.w != 0 && gbm.h != 0) {
		gbm.pixels = kha_internal_BytesBlob.alloc(gbm.w * gbm.h);
		if(gbm.pixels != null) {
			gbm.stride = gbm.w;
			kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
		}
	}
	return gbm.pixels;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmap = function(info,scale_x,scale_y,glyph,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,0.0,0.0,glyph,region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,glyph) {
	var ix0 = 0;
	var iy0 = 0;
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices == null ? 0 : vertices.length;
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	ix0 = rect.x0;
	iy0 = rect.y0;
	gbm.pixels = output;
	gbm.pixels_offset = output_offset;
	gbm.w = out_w;
	gbm.h = out_h;
	gbm.stride = out_stride;
	if(gbm.w != 0 && gbm.h != 0) {
		kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,glyph) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,glyph);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapSubpixel = function(info,scale_x,scale_y,shift_x,shift_y,codepoint,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,shift_x,shift_y,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint),region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,codepoint) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmap = function(info,scale_x,scale_y,codepoint,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapSubpixel(info,scale_x,scale_y,0.0,0.0,codepoint,region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,codepoint) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,codepoint);
};
kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap = function(data,offset,pixel_height,pixels,pw,ph,chars,chardata) {
	var f = new kha_graphics2_truetype_Stbtt_$fontinfo();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_InitFont(f,data,offset)) {
		return -1;
	}
	var y = 1;
	var x = y;
	var bottom_y = 1;
	var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(f,pixel_height);
	var i = 0;
	var _g = 0;
	while(_g < chars.length) {
		var index = chars[_g];
		++_g;
		var g = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,index);
		var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(f,g);
		var advance = metrics.advanceWidth;
		var lsb = metrics.leftSideBearing;
		var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox(f,g,scale,scale);
		var x0 = rect.x0;
		var y0 = rect.y0;
		var x1 = rect.x1;
		var y1 = rect.y1;
		var gw = x1 - x0;
		var gh = y1 - y0;
		if(x + gw + 1 >= pw) {
			y = bottom_y;
			x = 1;
		}
		if(y + gh + 1 >= ph) {
			return -i;
		}
		if(x + gw >= pw) {
			throw new js__$Boot_HaxeError("Error");
		}
		if(y + gh >= ph) {
			throw new js__$Boot_HaxeError("Error");
		}
		chardata[i].x0 = x;
		chardata[i].y0 = y;
		chardata[i].x1 = x + gw;
		chardata[i].y1 = y + gh;
		chardata[i].xadvance = scale * advance;
		chardata[i].xoff = x0;
		chardata[i].yoff = y0;
		x = x + gw + 1;
		if(y + gh + 1 > bottom_y) {
			bottom_y = y + gh + 1;
		}
		++i;
	}
	var _g1 = 0;
	var _g2 = pw * ph;
	while(_g1 < _g2) {
		var i1 = _g1++;
		pixels.writeU8(i1,0);
	}
	i = 0;
	var ch;
	var _g3 = 0;
	while(_g3 < chars.length) {
		var index1 = chars[_g3];
		++_g3;
		var g1 = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,index1);
		ch = chardata[i];
		kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap(f,pixels,ch.x0 + ch.y0 * pw,ch.x1 - ch.x0,ch.y1 - ch.y0,pw,scale,scale,g1);
		++i;
	}
	return bottom_y;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetBakedQuad = function(chardata,pw,ph,char_index,xpos,ypos,q,opengl_fillrule) {
	var d3d_bias = opengl_fillrule ? 0 : -0.5;
	var ipw = 1.0 / pw;
	var iph = 1.0 / ph;
	var b = chardata[char_index];
	var round_x = Math.floor(xpos.value + b.xoff + 0.5);
	var round_y = Math.floor(ypos.value + b.yoff + 0.5);
	q.x0 = round_x + d3d_bias;
	q.y0 = round_y + d3d_bias;
	q.x1 = round_x + b.x1 - b.x0 + d3d_bias;
	q.y1 = round_y + b.y1 - b.y0 + d3d_bias;
	q.s0 = b.x0 * ipw;
	q.t0 = b.y0 * iph;
	q.s1 = b.x1 * ipw;
	q.t1 = b.y1 * iph;
	xpos.value += b.xadvance;
};
var kha_graphics4_ConstantLocation = function() { };
$hxClasses["kha.graphics4.ConstantLocation"] = kha_graphics4_ConstantLocation;
kha_graphics4_ConstantLocation.__name__ = "kha.graphics4.ConstantLocation";
kha_graphics4_ConstantLocation.__isInterface__ = true;
var kha_graphics4_CubeMap = function(texture) {
	this.texture_ = texture;
};
$hxClasses["kha.graphics4.CubeMap"] = kha_graphics4_CubeMap;
kha_graphics4_CubeMap.__name__ = "kha.graphics4.CubeMap";
kha_graphics4_CubeMap.__interfaces__ = [kha_Resource,kha_Canvas];
kha_graphics4_CubeMap.getRenderTargetFormat = function(format) {
	switch(format) {
	case 0:
		return 0;
	case 2:
		return 3;
	case 3:
		return 4;
	case 4:
		return 1;
	default:
		return 0;
	}
};
kha_graphics4_CubeMap.getDepthBufferBits = function(depthAndStencil) {
	switch(depthAndStencil) {
	case 0:
		return -1;
	case 1:
		return 24;
	case 2:
		return 24;
	case 3:
		return 24;
	case 4:
		return 32;
	case 5:
		return 16;
	}
};
kha_graphics4_CubeMap.getStencilBufferBits = function(depthAndStencil) {
	switch(depthAndStencil) {
	case 0:
		return -1;
	case 1:
		return -1;
	case 2:
		return 8;
	case 3:
		return 8;
	case 4:
		return 8;
	case 5:
		return 0;
	}
};
kha_graphics4_CubeMap.getTextureFormat = function(format) {
	switch(format) {
	case 0:
		return 0;
	case 2:
		return 3;
	case 4:
		return 4;
	case 5:
		return 5;
	default:
		return 1;
	}
};
kha_graphics4_CubeMap.createRenderTarget = function(size,format,depthStencil,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	if(format == null) {
		format = 0;
	}
	var cubeMap = new kha_graphics4_CubeMap(null);
	cubeMap.format = format;
	cubeMap.renderTarget_ = Krom.createRenderTargetCubeMap(size,kha_graphics4_CubeMap.getDepthBufferBits(depthStencil),kha_graphics4_CubeMap.getRenderTargetFormat(format),kha_graphics4_CubeMap.getStencilBufferBits(depthStencil),contextId);
	return cubeMap;
};
kha_graphics4_CubeMap.prototype = {
	texture_: null
	,renderTarget_: null
	,format: null
	,graphics4: null
	,unload: function() {
	}
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		return null;
	}
	,unlock: function() {
	}
	,width: null
	,get_width: function() {
		if(this.texture_ == null) {
			return this.renderTarget_.width;
		} else {
			return this.texture_.width;
		}
	}
	,height: null
	,get_height: function() {
		if(this.texture_ == null) {
			return this.renderTarget_.height;
		} else {
			return this.texture_.height;
		}
	}
	,g1: null
	,get_g1: function() {
		return null;
	}
	,g2: null
	,get_g2: function() {
		return null;
	}
	,g4: null
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_krom_Graphics(this);
		}
		return this.graphics4;
	}
	,__class__: kha_graphics4_CubeMap
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_height:"get_height",get_width:"get_width"}
};
var kha_graphics4_FragmentShader = function(sources,names) {
	if(sources != null) {
		this.shader = Krom.createFragmentShader(sources[0].bytes.b.bufferValue,names[0]);
	}
};
$hxClasses["kha.graphics4.FragmentShader"] = kha_graphics4_FragmentShader;
kha_graphics4_FragmentShader.__name__ = "kha.graphics4.FragmentShader";
kha_graphics4_FragmentShader.fromSource = function(source) {
	var shader = new kha_graphics4_FragmentShader(null,null);
	shader.shader = Krom.createFragmentShaderFromSource(source);
	return shader;
};
kha_graphics4_FragmentShader.prototype = {
	shader: null
	,'delete': function() {
		Krom.deleteShader(this.shader);
		this.shader = null;
	}
	,__class__: kha_graphics4_FragmentShader
};
var kha_graphics4_GeometryShader = function(sources,names) {
	this.shader = Krom.createGeometryShader(sources[0].bytes.b.bufferValue,names[0]);
};
$hxClasses["kha.graphics4.GeometryShader"] = kha_graphics4_GeometryShader;
kha_graphics4_GeometryShader.__name__ = "kha.graphics4.GeometryShader";
kha_graphics4_GeometryShader.prototype = {
	shader: null
	,'delete': function() {
		Krom.deleteShader(this.shader);
		this.shader = null;
	}
	,__class__: kha_graphics4_GeometryShader
};
var kha_graphics4_Graphics = function() { };
$hxClasses["kha.graphics4.Graphics"] = kha_graphics4_Graphics;
kha_graphics4_Graphics.__name__ = "kha.graphics4.Graphics";
kha_graphics4_Graphics.__isInterface__ = true;
kha_graphics4_Graphics.prototype = {
	begin: null
	,beginFace: null
	,beginEye: null
	,end: null
	,vsynced: null
	,refreshRate: null
	,clear: null
	,viewport: null
	,scissor: null
	,disableScissor: null
	,setVertexBuffer: null
	,setVertexBuffers: null
	,setIndexBuffer: null
	,setTexture: null
	,setTextureDepth: null
	,setTextureArray: null
	,setVideoTexture: null
	,setImageTexture: null
	,setTextureParameters: null
	,setTexture3DParameters: null
	,setTextureCompareMode: null
	,setCubeMapCompareMode: null
	,setCubeMap: null
	,setCubeMapDepth: null
	,maxBoundTextures: null
	,setStencilReferenceValue: null
	,instancedRenderingAvailable: null
	,setPipeline: null
	,setBool: null
	,setInt: null
	,setInt2: null
	,setInt3: null
	,setInt4: null
	,setInts: null
	,setFloat: null
	,setFloat2: null
	,setFloat3: null
	,setFloat4: null
	,setFloats: null
	,setVector2: null
	,setVector3: null
	,setVector4: null
	,setMatrix: null
	,setMatrix3: null
	,drawIndexedVertices: null
	,drawIndexedVerticesInstanced: null
	,flush: null
	,__class__: kha_graphics4_Graphics
};
var kha_graphics4_PipelineCache = function(pipeline) {
	this.pipeline = pipeline;
	try {
		this.projectionLocation = pipeline.getConstantLocation("projectionMatrix");
	} catch( x ) {
		haxe_Log.trace(((x) instanceof js__$Boot_HaxeError) ? x.val : x,{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 39, className : "kha.graphics4.PipelineCache", methodName : "new"});
	}
	try {
		this.textureLocation = pipeline.getTextureUnit("tex");
	} catch( x1 ) {
		haxe_Log.trace(((x1) instanceof js__$Boot_HaxeError) ? x1.val : x1,{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 40, className : "kha.graphics4.PipelineCache", methodName : "new"});
	}
};
$hxClasses["kha.graphics4.PipelineCache"] = kha_graphics4_PipelineCache;
kha_graphics4_PipelineCache.__name__ = "kha.graphics4.PipelineCache";
kha_graphics4_PipelineCache.prototype = {
	pipeline: null
	,projectionLocation: null
	,textureLocation: null
	,__class__: kha_graphics4_PipelineCache
};
var kha_graphics4_ImageShaderPainter = function(g4) {
	this.myPipeline = null;
	this.bilinearMipmaps = false;
	this.bilinear = false;
	this.g = g4;
	kha_graphics4_ImageShaderPainter.bufferIndex = 0;
	kha_graphics4_ImageShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_ImageShaderPainter.standardImagePipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.ImageShaderPainter"] = kha_graphics4_ImageShaderPainter;
kha_graphics4_ImageShaderPainter.__name__ = "kha.graphics4.ImageShaderPainter";
kha_graphics4_ImageShaderPainter.initShaders = function() {
	if(kha_graphics4_ImageShaderPainter.structure == null) {
		kha_graphics4_ImageShaderPainter.structure = kha_graphics4_Graphics2.createImageVertexStructure();
	}
	if(kha_graphics4_ImageShaderPainter.standardImagePipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_ImageShaderPainter.structure);
		pipeline.compile();
		kha_graphics4_ImageShaderPainter.standardImagePipeline = new kha_graphics4_PipelineCache(pipeline);
	}
};
kha_graphics4_ImageShaderPainter.prototype = {
	projectionMatrix: null
	,bilinear: null
	,bilinearMipmaps: null
	,g: null
	,myPipeline: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_ImageShaderPainter.standardImagePipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ImageShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ImageShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(6000,kha_graphics4_ImageShaderPainter.structure,1);
			kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ImageShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(9000,0);
			var indices = kha_graphics4_ImageShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1500) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_ImageShaderPainter.indexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 9] = topleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 10] = toplefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 18] = toprightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 19] = toprighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 27] = bottomrightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 28] = bottomrighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 29] = -5.0;
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
	}
	,setRectColor: function(r,g,b,a) {
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
	}
	,drawBuffer: function() {
		kha_graphics4_ImageShaderPainter.rectVertexBuffer.unlock(kha_graphics4_ImageShaderPainter.bufferIndex * 4);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ImageShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ImageShaderPainter.indexBuffer);
		this.g.setTexture(this.myPipeline.textureLocation,kha_graphics4_ImageShaderPainter.lastTexture);
		this.g.setTextureParameters(this.myPipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,this.bilinearMipmaps ? 2 : 0);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ImageShaderPainter.bufferIndex * 2 * 3);
		this.g.setTexture(this.myPipeline.textureLocation,null);
		kha_graphics4_ImageShaderPainter.bufferIndex = 0;
		kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock();
	}
	,setBilinearFilter: function(bilinear) {
		this.end();
		this.bilinear = bilinear;
	}
	,setBilinearMipmapFilter: function(bilinear) {
		this.end();
		this.bilinearMipmaps = bilinear;
	}
	,drawImage: function(img,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty,opacity,color) {
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
		var right = tex.get_width() / tex.get_realWidth();
		var bottom = tex.get_height() / tex.get_realHeight();
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 3] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 12] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 13] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 22] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 31] = bottom;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = bottomleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = bottomlefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = topleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = toplefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = toprightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = toprighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = bottomrightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = bottomrighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,drawImage2: function(img,sx,sy,sw,sh,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty,opacity,color) {
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		var left = sx / tex.get_realWidth();
		var top = sy / tex.get_realHeight();
		var right = (sx + sw) / tex.get_realWidth();
		var bottom = (sy + sh) / tex.get_realHeight();
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 35] = a;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = bottomleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = bottomlefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = topleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = toplefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = toprightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = toprighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = bottomrightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = bottomrighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,drawImageScale: function(img,sx,sy,sw,sh,left,top,right,bottom,opacity,color) {
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		var left1 = sx / tex.get_realWidth();
		var top1 = sy / tex.get_realHeight();
		var right1 = (sx + sw) / tex.get_realWidth();
		var bottom1 = (sy + sh) / tex.get_realHeight();
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom1;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 8] = opacity;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 17] = opacity;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 26] = opacity;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 35] = opacity;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,end: function() {
		if(kha_graphics4_ImageShaderPainter.bufferIndex > 0) {
			this.drawBuffer();
		}
		kha_graphics4_ImageShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_ImageShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_ColoredShaderPainter = function(g4) {
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_ColoredShaderPainter.standardColorPipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.ColoredShaderPainter"] = kha_graphics4_ColoredShaderPainter;
kha_graphics4_ColoredShaderPainter.__name__ = "kha.graphics4.ColoredShaderPainter";
kha_graphics4_ColoredShaderPainter.initShaders = function() {
	if(kha_graphics4_ColoredShaderPainter.structure == null) {
		kha_graphics4_ColoredShaderPainter.structure = kha_graphics4_Graphics2.createColoredVertexStructure();
	}
	if(kha_graphics4_ColoredShaderPainter.standardColorPipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createColoredPipeline(kha_graphics4_ColoredShaderPainter.structure);
		pipeline.compile();
		kha_graphics4_ColoredShaderPainter.standardColorPipeline = new kha_graphics4_PipelineCache(pipeline);
	}
};
kha_graphics4_ColoredShaderPainter.prototype = {
	projectionMatrix: null
	,g: null
	,myPipeline: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_ColoredShaderPainter.standardColorPipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ColoredShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ColoredShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4000,kha_graphics4_ColoredShaderPainter.structure,1);
			kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(6000,0);
			var indices = kha_graphics4_ColoredShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_ColoredShaderPainter.indexBuffer.unlock();
			kha_graphics4_ColoredShaderPainter.triangleVertexBuffer = new kha_graphics4_VertexBuffer(3000,kha_graphics4_ColoredShaderPainter.structure,1);
			kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer = new kha_graphics4_IndexBuffer(3000,0);
			var triIndices = kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.lock();
			var _g1 = 0;
			while(_g1 < 1000) {
				var i1 = _g1++;
				triIndices[i1 * 3] = i1 * 3;
				triIndices[i1 * 3 + 1] = i1 * 3 + 1;
				triIndices[i1 * 3 + 2] = i1 * 3 + 2;
			}
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 7 * 4;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 7] = topleftx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 8] = toplefty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 9] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 14] = toprightx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 15] = toprighty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 16] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 21] = bottomrightx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 22] = bottomrighty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 23] = -5.0;
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 7 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var r = a * (((color & 16711680) >>> 16) * 0.00392156862745098);
		var g = a * (((color & 65280) >>> 8) * 0.00392156862745098);
		var b = a * ((color & 255) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 3] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 4] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 5] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 6] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 10] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 11] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 12] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 13] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 17] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 18] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 19] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 20] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 24] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 25] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 26] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 27] = a;
	}
	,setTriVertices: function(x1,y1,x2,y2,x3,y3) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 7 * 3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex] = x1;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 1] = y1;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 7] = x2;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 8] = y2;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 9] = -5.0;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 14] = x3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 15] = y3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 16] = -5.0;
	}
	,setTriColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 7 * 3;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var r = a * (((color & 16711680) >>> 16) * 0.00392156862745098);
		var g = a * (((color & 65280) >>> 8) * 0.00392156862745098);
		var b = a * ((color & 255) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 3] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 4] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 5] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 6] = a;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 10] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 11] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 12] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 13] = a;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 17] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 18] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 19] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 20] = a;
	}
	,drawBuffer: function(trisDone) {
		if(!trisDone) {
			if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
				this.drawTriBuffer(true);
			}
		}
		kha_graphics4_ColoredShaderPainter.rectVertexBuffer.unlock(kha_graphics4_ColoredShaderPainter.bufferIndex * 4);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.indexBuffer);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.bufferIndex * 2 * 3);
		kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
	}
	,drawTriBuffer: function(rectsDone) {
		if(!rectsDone) {
			if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
				this.drawBuffer(true);
			}
		}
		kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.unlock(kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.triangleVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.triangleIndexBuffer);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
	}
	,fillRect: function(opacity,color,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex + 1 >= 1000) {
			this.drawBuffer(false);
		}
		this.setRectColors(opacity,color);
		this.setRectVertices(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty);
		++kha_graphics4_ColoredShaderPainter.bufferIndex;
	}
	,fillTriangle: function(opacity,color,x1,y1,x2,y2,x3,y3) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex + 1 >= 1000) {
			this.drawTriBuffer(false);
		}
		this.setTriColors(opacity,color);
		this.setTriVertices(x1,y1,x2,y2,x3,y3);
		++kha_graphics4_ColoredShaderPainter.triangleBufferIndex;
	}
	,endTris: function(rectsDone) {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(rectsDone);
		}
	}
	,endRects: function(trisDone) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(trisDone);
		}
	}
	,end: function() {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(false);
		}
	}
	,__class__: kha_graphics4_ColoredShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_TextShaderPainter = function(g4) {
	this.bakedQuadCache = new kha_AlignedQuad();
	this.bilinear = false;
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_TextShaderPainter.bufferIndex = 0;
	kha_graphics4_TextShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_TextShaderPainter.standardTextPipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.TextShaderPainter"] = kha_graphics4_TextShaderPainter;
kha_graphics4_TextShaderPainter.__name__ = "kha.graphics4.TextShaderPainter";
kha_graphics4_TextShaderPainter.initShaders = function() {
	if(kha_graphics4_TextShaderPainter.structure == null) {
		kha_graphics4_TextShaderPainter.structure = kha_graphics4_Graphics2.createTextVertexStructure();
	}
	if(kha_graphics4_TextShaderPainter.standardTextPipeline == null) {
		var pipeline = kha_graphics4_Graphics2.createTextPipeline(kha_graphics4_TextShaderPainter.structure);
		pipeline.compile();
		kha_graphics4_TextShaderPainter.standardTextPipeline = new kha_graphics4_PipelineCache(pipeline);
	}
};
kha_graphics4_TextShaderPainter.findIndex = function(charCode) {
	var glyphs = kha_graphics2_Graphics.fontGlyphs;
	var blocks = kha_KravurImage.charBlocks;
	var offset = 0;
	var _g = 0;
	var _g1 = blocks.length / 2 | 0;
	while(_g < _g1) {
		var i = _g++;
		var start = blocks[i * 2];
		var end = blocks[i * 2 + 1];
		if(charCode >= start && charCode <= end) {
			return offset + charCode - start;
		}
		offset += end - start + 1;
	}
	return 0;
};
kha_graphics4_TextShaderPainter.prototype = {
	projectionMatrix: null
	,font: null
	,g: null
	,myPipeline: null
	,fontSize: null
	,bilinear: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_TextShaderPainter.standardTextPipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_TextShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_TextShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4000,kha_graphics4_TextShaderPainter.structure,1);
			kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_TextShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(6000,0);
			var indices = kha_graphics4_TextShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_TextShaderPainter.indexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 9] = topleftx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 10] = toplefty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 18] = toprightx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 19] = toprighty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 27] = bottomrightx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 28] = bottomrighty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 29] = -5.0;
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 31] = bottom;
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 5] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 6] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 7] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 14] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 15] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 16] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 23] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 24] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 25] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 32] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 33] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 34] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 35] = a;
	}
	,drawBuffer: function() {
		kha_graphics4_TextShaderPainter.rectVertexBuffer.unlock(kha_graphics4_TextShaderPainter.bufferIndex * 4);
		this.g.setPipeline(this.myPipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_TextShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_TextShaderPainter.indexBuffer);
		this.g.setMatrix(this.myPipeline.projectionLocation,this.projectionMatrix);
		this.g.setTexture(this.myPipeline.textureLocation,kha_graphics4_TextShaderPainter.lastTexture);
		this.g.setTextureParameters(this.myPipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,0);
		this.g.drawIndexedVertices(0,kha_graphics4_TextShaderPainter.bufferIndex * 2 * 3);
		this.g.setTexture(this.myPipeline.textureLocation,null);
		kha_graphics4_TextShaderPainter.bufferIndex = 0;
		kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
	}
	,setBilinearFilter: function(bilinear) {
		this.end();
		this.bilinear = bilinear;
	}
	,setFont: function(font) {
		this.font = js_Boot.__cast(font , kha_Kravur);
	}
	,bakedQuadCache: null
	,drawString: function(text,opacity,color,x,y,transformation) {
		var font = this.font._get(this.fontSize);
		var tex = font.getTexture();
		if(kha_graphics4_TextShaderPainter.lastTexture != null && tex != kha_graphics4_TextShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = tex;
		var xpos = x;
		var ypos = y;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var i = _g++;
			var charCode = text.charCodeAt(i);
			var q = font.getBakedQuad(this.bakedQuadCache,kha_graphics4_TextShaderPainter.findIndex(charCode),xpos,ypos);
			if(q != null) {
				if(kha_graphics4_TextShaderPainter.bufferIndex + 1 >= 1000) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var x1 = q.x0;
				var y1 = q.y1;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var value_x = x1;
				var value_y = y1;
				var w = transformation._02 * value_x + transformation._12 * value_y + transformation._22;
				var x2 = (transformation._00 * value_x + transformation._10 * value_y + transformation._20) / w;
				var y2 = (transformation._01 * value_x + transformation._11 * value_y + transformation._21) / w;
				var x3 = x2;
				var y3 = y2;
				if(y3 == null) {
					y3 = 0;
				}
				if(x3 == null) {
					x3 = 0;
				}
				var p0_x = x3;
				var p0_y = y3;
				var x4 = q.x0;
				var y4 = q.y0;
				if(y4 == null) {
					y4 = 0;
				}
				if(x4 == null) {
					x4 = 0;
				}
				var value_x1 = x4;
				var value_y1 = y4;
				var w1 = transformation._02 * value_x1 + transformation._12 * value_y1 + transformation._22;
				var x5 = (transformation._00 * value_x1 + transformation._10 * value_y1 + transformation._20) / w1;
				var y5 = (transformation._01 * value_x1 + transformation._11 * value_y1 + transformation._21) / w1;
				var x6 = x5;
				var y6 = y5;
				if(y6 == null) {
					y6 = 0;
				}
				if(x6 == null) {
					x6 = 0;
				}
				var p1_x = x6;
				var p1_y = y6;
				var x7 = q.x1;
				var y7 = q.y0;
				if(y7 == null) {
					y7 = 0;
				}
				if(x7 == null) {
					x7 = 0;
				}
				var value_x2 = x7;
				var value_y2 = y7;
				var w2 = transformation._02 * value_x2 + transformation._12 * value_y2 + transformation._22;
				var x8 = (transformation._00 * value_x2 + transformation._10 * value_y2 + transformation._20) / w2;
				var y8 = (transformation._01 * value_x2 + transformation._11 * value_y2 + transformation._21) / w2;
				var x9 = x8;
				var y9 = y8;
				if(y9 == null) {
					y9 = 0;
				}
				if(x9 == null) {
					x9 = 0;
				}
				var p2_x = x9;
				var p2_y = y9;
				var x10 = q.x1;
				var y10 = q.y1;
				if(y10 == null) {
					y10 = 0;
				}
				if(x10 == null) {
					x10 = 0;
				}
				var value_x3 = x10;
				var value_y3 = y10;
				var w3 = transformation._02 * value_x3 + transformation._12 * value_y3 + transformation._22;
				var x11 = (transformation._00 * value_x3 + transformation._10 * value_y3 + transformation._20) / w3;
				var y11 = (transformation._01 * value_x3 + transformation._11 * value_y3 + transformation._21) / w3;
				var x12 = x11;
				var y12 = y11;
				if(y12 == null) {
					y12 = 0;
				}
				if(x12 == null) {
					x12 = 0;
				}
				var p3_x = x12;
				var p3_y = y12;
				this.setRectVertices(p0_x,p0_y,p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
				xpos += q.xadvance;
				++kha_graphics4_TextShaderPainter.bufferIndex;
			}
		}
	}
	,drawCharacters: function(text,start,length,opacity,color,x,y,transformation) {
		var font = this.font._get(this.fontSize);
		var tex = font.getTexture();
		if(kha_graphics4_TextShaderPainter.lastTexture != null && tex != kha_graphics4_TextShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = tex;
		var xpos = x;
		var ypos = y;
		var _g = start;
		var _g1 = start + length;
		while(_g < _g1) {
			var i = _g++;
			var q = font.getBakedQuad(this.bakedQuadCache,kha_graphics4_TextShaderPainter.findIndex(text[i]),xpos,ypos);
			if(q != null) {
				if(kha_graphics4_TextShaderPainter.bufferIndex + 1 >= 1000) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var x1 = q.x0;
				var y1 = q.y1;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var value_x = x1;
				var value_y = y1;
				var w = transformation._02 * value_x + transformation._12 * value_y + transformation._22;
				var x2 = (transformation._00 * value_x + transformation._10 * value_y + transformation._20) / w;
				var y2 = (transformation._01 * value_x + transformation._11 * value_y + transformation._21) / w;
				var x3 = x2;
				var y3 = y2;
				if(y3 == null) {
					y3 = 0;
				}
				if(x3 == null) {
					x3 = 0;
				}
				var p0_x = x3;
				var p0_y = y3;
				var x4 = q.x0;
				var y4 = q.y0;
				if(y4 == null) {
					y4 = 0;
				}
				if(x4 == null) {
					x4 = 0;
				}
				var value_x1 = x4;
				var value_y1 = y4;
				var w1 = transformation._02 * value_x1 + transformation._12 * value_y1 + transformation._22;
				var x5 = (transformation._00 * value_x1 + transformation._10 * value_y1 + transformation._20) / w1;
				var y5 = (transformation._01 * value_x1 + transformation._11 * value_y1 + transformation._21) / w1;
				var x6 = x5;
				var y6 = y5;
				if(y6 == null) {
					y6 = 0;
				}
				if(x6 == null) {
					x6 = 0;
				}
				var p1_x = x6;
				var p1_y = y6;
				var x7 = q.x1;
				var y7 = q.y0;
				if(y7 == null) {
					y7 = 0;
				}
				if(x7 == null) {
					x7 = 0;
				}
				var value_x2 = x7;
				var value_y2 = y7;
				var w2 = transformation._02 * value_x2 + transformation._12 * value_y2 + transformation._22;
				var x8 = (transformation._00 * value_x2 + transformation._10 * value_y2 + transformation._20) / w2;
				var y8 = (transformation._01 * value_x2 + transformation._11 * value_y2 + transformation._21) / w2;
				var x9 = x8;
				var y9 = y8;
				if(y9 == null) {
					y9 = 0;
				}
				if(x9 == null) {
					x9 = 0;
				}
				var p2_x = x9;
				var p2_y = y9;
				var x10 = q.x1;
				var y10 = q.y1;
				if(y10 == null) {
					y10 = 0;
				}
				if(x10 == null) {
					x10 = 0;
				}
				var value_x3 = x10;
				var value_y3 = y10;
				var w3 = transformation._02 * value_x3 + transformation._12 * value_y3 + transformation._22;
				var x11 = (transformation._00 * value_x3 + transformation._10 * value_y3 + transformation._20) / w3;
				var y11 = (transformation._01 * value_x3 + transformation._11 * value_y3 + transformation._21) / w3;
				var x12 = x11;
				var y12 = y11;
				if(y12 == null) {
					y12 = 0;
				}
				if(x12 == null) {
					x12 = 0;
				}
				var p3_x = x12;
				var p3_y = y12;
				this.setRectVertices(p0_x,p0_y,p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
				xpos += q.xadvance;
				++kha_graphics4_TextShaderPainter.bufferIndex;
			}
		}
	}
	,end: function() {
		if(kha_graphics4_TextShaderPainter.bufferIndex > 0) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_TextShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_Graphics2 = function(canvas) {
	this.scissorH = -1;
	this.scissorW = -1;
	this.scissorY = -1;
	this.scissorX = -1;
	this.scissorEnabled = false;
	this.lastPipeline = null;
	this.pipelineCache = new haxe_ds_ObjectMap();
	this.myMipmapScaleQuality = 0;
	this.myImageScaleQuality = 0;
	kha_graphics2_Graphics.call(this);
	this.set_color(-1);
	this.canvas = canvas;
	this.g = canvas.get_g4();
	this.imagePainter = new kha_graphics4_ImageShaderPainter(this.g);
	this.coloredPainter = new kha_graphics4_ColoredShaderPainter(this.g);
	this.textPainter = new kha_graphics4_TextShaderPainter(this.g);
	this.textPainter.fontSize = this.get_fontSize();
	this.projectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.setProjection();
	if(kha_graphics4_Graphics2.videoPipeline == null) {
		kha_graphics4_Graphics2.videoPipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_Graphics2.createImageVertexStructure());
		kha_graphics4_Graphics2.videoPipeline.fragmentShader = kha_Shaders.painter_video_frag;
		kha_graphics4_Graphics2.videoPipeline.vertexShader = kha_Shaders.painter_video_vert;
		kha_graphics4_Graphics2.videoPipeline.compile();
	}
};
$hxClasses["kha.graphics4.Graphics2"] = kha_graphics4_Graphics2;
kha_graphics4_Graphics2.__name__ = "kha.graphics4.Graphics2";
kha_graphics4_Graphics2.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_graphics4_Graphics2.createImageVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("texPosition",1);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createImagePipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_image_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_image_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createColoredVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createColoredPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_colored_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_colored_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createTextVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("texPosition",1);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createTextPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_text_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_text_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 3;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 3;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.__super__ = kha_graphics2_Graphics;
kha_graphics4_Graphics2.prototype = $extend(kha_graphics2_Graphics.prototype,{
	myColor: null
	,myFont: null
	,projectionMatrix: null
	,imagePainter: null
	,coloredPainter: null
	,textPainter: null
	,canvas: null
	,g: null
	,setProjection: function() {
		var width = this.canvas.get_width();
		var height = this.canvas.get_height();
		if(((this.canvas) instanceof kha_Framebuffer)) {
			var _this = this.projectionMatrix;
			var tx = -width / width;
			var ty = -height / (0 - height);
			var tz = -1.0002000200020003;
			var m__00 = 2 / width;
			var m__10 = 0;
			var m__20 = 0;
			var m__30 = tx;
			var m__01 = 0;
			var m__11 = 2.0 / (0 - height);
			var m__21 = 0;
			var m__31 = ty;
			var m__02 = 0;
			var m__12 = 0;
			var m__22 = -0.002000200020002;
			var m__32 = tz;
			var m__03 = 0;
			var m__13 = 0;
			var m__23 = 0;
			var m__33 = 1;
			_this._00 = m__00;
			_this._10 = m__10;
			_this._20 = m__20;
			_this._30 = m__30;
			_this._01 = m__01;
			_this._11 = m__11;
			_this._21 = m__21;
			_this._31 = m__31;
			_this._02 = m__02;
			_this._12 = m__12;
			_this._22 = m__22;
			_this._32 = m__32;
			_this._03 = m__03;
			_this._13 = m__13;
			_this._23 = m__23;
			_this._33 = m__33;
		} else {
			if(!kha_Image.get_nonPow2Supported()) {
				width = kha_graphics4_Graphics2.upperPowerOfTwo(width);
				height = kha_graphics4_Graphics2.upperPowerOfTwo(height);
			}
			if(kha_Image.renderTargetsInvertedY()) {
				var _this1 = this.projectionMatrix;
				var tx1 = -width / width;
				var ty1 = -height / height;
				var tz1 = -1.0002000200020003;
				var m__001 = 2 / width;
				var m__101 = 0;
				var m__201 = 0;
				var m__301 = tx1;
				var m__011 = 0;
				var m__111 = 2.0 / height;
				var m__211 = 0;
				var m__311 = ty1;
				var m__021 = 0;
				var m__121 = 0;
				var m__221 = -0.002000200020002;
				var m__321 = tz1;
				var m__031 = 0;
				var m__131 = 0;
				var m__231 = 0;
				var m__331 = 1;
				_this1._00 = m__001;
				_this1._10 = m__101;
				_this1._20 = m__201;
				_this1._30 = m__301;
				_this1._01 = m__011;
				_this1._11 = m__111;
				_this1._21 = m__211;
				_this1._31 = m__311;
				_this1._02 = m__021;
				_this1._12 = m__121;
				_this1._22 = m__221;
				_this1._32 = m__321;
				_this1._03 = m__031;
				_this1._13 = m__131;
				_this1._23 = m__231;
				_this1._33 = m__331;
			} else {
				var _this2 = this.projectionMatrix;
				var tx2 = -width / width;
				var ty2 = -height / (0 - height);
				var tz2 = -1.0002000200020003;
				var m__002 = 2 / width;
				var m__102 = 0;
				var m__202 = 0;
				var m__302 = tx2;
				var m__012 = 0;
				var m__112 = 2.0 / (0 - height);
				var m__212 = 0;
				var m__312 = ty2;
				var m__022 = 0;
				var m__122 = 0;
				var m__222 = -0.002000200020002;
				var m__322 = tz2;
				var m__032 = 0;
				var m__132 = 0;
				var m__232 = 0;
				var m__332 = 1;
				_this2._00 = m__002;
				_this2._10 = m__102;
				_this2._20 = m__202;
				_this2._30 = m__302;
				_this2._01 = m__012;
				_this2._11 = m__112;
				_this2._21 = m__212;
				_this2._31 = m__312;
				_this2._02 = m__022;
				_this2._12 = m__122;
				_this2._22 = m__222;
				_this2._32 = m__322;
				_this2._03 = m__032;
				_this2._13 = m__132;
				_this2._23 = m__232;
				_this2._33 = m__332;
			}
		}
		this.imagePainter.setProjection(this.projectionMatrix);
		this.coloredPainter.setProjection(this.projectionMatrix);
		this.textPainter.setProjection(this.projectionMatrix);
	}
	,drawImage: function(img,x,y) {
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var xw = x + img.get_width();
		var yh = y + img.get_height();
		var _this1 = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = yh;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this1._02 * value_x + _this1._12 * value_y + _this1._22;
		var x2 = (_this1._00 * value_x + _this1._10 * value_y + _this1._20) / w;
		var y2 = (_this1._01 * value_x + _this1._11 * value_y + _this1._21) / w;
		var x3 = x2;
		var y3 = y2;
		if(y3 == null) {
			y3 = 0;
		}
		if(x3 == null) {
			x3 = 0;
		}
		var p1_x = x3;
		var p1_y = y3;
		var _this2 = this.transformations[this.transformationIndex];
		var x4 = x;
		var y4 = y;
		if(y4 == null) {
			y4 = 0;
		}
		if(x4 == null) {
			x4 = 0;
		}
		var value_x1 = x4;
		var value_y1 = y4;
		var w1 = _this2._02 * value_x1 + _this2._12 * value_y1 + _this2._22;
		var x5 = (_this2._00 * value_x1 + _this2._10 * value_y1 + _this2._20) / w1;
		var y5 = (_this2._01 * value_x1 + _this2._11 * value_y1 + _this2._21) / w1;
		var x6 = x5;
		var y6 = y5;
		if(y6 == null) {
			y6 = 0;
		}
		if(x6 == null) {
			x6 = 0;
		}
		var p2_x = x6;
		var p2_y = y6;
		var _this3 = this.transformations[this.transformationIndex];
		var x7 = xw;
		var y7 = y;
		if(y7 == null) {
			y7 = 0;
		}
		if(x7 == null) {
			x7 = 0;
		}
		var value_x2 = x7;
		var value_y2 = y7;
		var w2 = _this3._02 * value_x2 + _this3._12 * value_y2 + _this3._22;
		var x8 = (_this3._00 * value_x2 + _this3._10 * value_y2 + _this3._20) / w2;
		var y8 = (_this3._01 * value_x2 + _this3._11 * value_y2 + _this3._21) / w2;
		var x9 = x8;
		var y9 = y8;
		if(y9 == null) {
			y9 = 0;
		}
		if(x9 == null) {
			x9 = 0;
		}
		var p3_x = x9;
		var p3_y = y9;
		var _this4 = this.transformations[this.transformationIndex];
		var x10 = xw;
		var y10 = yh;
		if(y10 == null) {
			y10 = 0;
		}
		if(x10 == null) {
			x10 = 0;
		}
		var value_x3 = x10;
		var value_y3 = y10;
		var w3 = _this4._02 * value_x3 + _this4._12 * value_y3 + _this4._22;
		var x11 = (_this4._00 * value_x3 + _this4._10 * value_y3 + _this4._20) / w3;
		var y11 = (_this4._01 * value_x3 + _this4._11 * value_y3 + _this4._21) / w3;
		var x12 = x11;
		var y12 = y11;
		if(y12 == null) {
			y12 = 0;
		}
		if(x12 == null) {
			x12 = 0;
		}
		var p4_x = x12;
		var p4_y = y12;
		var _this5 = this.imagePainter;
		var opacity = this.get_opacity();
		var color = this.get_color();
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			_this5.drawBuffer();
		}
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
		var right = tex.get_width() / tex.get_realWidth();
		var bottom = tex.get_height() / tex.get_realHeight();
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 3] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 12] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 13] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 22] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 31] = bottom;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = p1_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = p1_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = p2_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = p2_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = p3_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = p3_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = p4_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = p4_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,drawScaledSubImage: function(img,sx,sy,sw,sh,dx,dy,dw,dh) {
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var _this1 = this.transformations[this.transformationIndex];
		var x = dx;
		var y = dy + dh;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this1._02 * value_x + _this1._12 * value_y + _this1._22;
		var x1 = (_this1._00 * value_x + _this1._10 * value_y + _this1._20) / w;
		var y1 = (_this1._01 * value_x + _this1._11 * value_y + _this1._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y2 == null) {
			y2 = 0;
		}
		if(x2 == null) {
			x2 = 0;
		}
		var p1_x = x2;
		var p1_y = y2;
		var _this2 = this.transformations[this.transformationIndex];
		var x3 = dx;
		var y3 = dy;
		if(y3 == null) {
			y3 = 0;
		}
		if(x3 == null) {
			x3 = 0;
		}
		var value_x1 = x3;
		var value_y1 = y3;
		var w1 = _this2._02 * value_x1 + _this2._12 * value_y1 + _this2._22;
		var x4 = (_this2._00 * value_x1 + _this2._10 * value_y1 + _this2._20) / w1;
		var y4 = (_this2._01 * value_x1 + _this2._11 * value_y1 + _this2._21) / w1;
		var x5 = x4;
		var y5 = y4;
		if(y5 == null) {
			y5 = 0;
		}
		if(x5 == null) {
			x5 = 0;
		}
		var p2_x = x5;
		var p2_y = y5;
		var _this3 = this.transformations[this.transformationIndex];
		var x6 = dx + dw;
		var y6 = dy;
		if(y6 == null) {
			y6 = 0;
		}
		if(x6 == null) {
			x6 = 0;
		}
		var value_x2 = x6;
		var value_y2 = y6;
		var w2 = _this3._02 * value_x2 + _this3._12 * value_y2 + _this3._22;
		var x7 = (_this3._00 * value_x2 + _this3._10 * value_y2 + _this3._20) / w2;
		var y7 = (_this3._01 * value_x2 + _this3._11 * value_y2 + _this3._21) / w2;
		var x8 = x7;
		var y8 = y7;
		if(y8 == null) {
			y8 = 0;
		}
		if(x8 == null) {
			x8 = 0;
		}
		var p3_x = x8;
		var p3_y = y8;
		var _this4 = this.transformations[this.transformationIndex];
		var x9 = dx + dw;
		var y9 = dy + dh;
		if(y9 == null) {
			y9 = 0;
		}
		if(x9 == null) {
			x9 = 0;
		}
		var value_x3 = x9;
		var value_y3 = y9;
		var w3 = _this4._02 * value_x3 + _this4._12 * value_y3 + _this4._22;
		var x10 = (_this4._00 * value_x3 + _this4._10 * value_y3 + _this4._20) / w3;
		var y10 = (_this4._01 * value_x3 + _this4._11 * value_y3 + _this4._21) / w3;
		var x11 = x10;
		var y11 = y10;
		if(y11 == null) {
			y11 = 0;
		}
		if(x11 == null) {
			x11 = 0;
		}
		var p4_x = x11;
		var p4_y = y11;
		var _this5 = this.imagePainter;
		var opacity = this.get_opacity();
		var color = this.get_color();
		var tex = img;
		if(kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && tex != kha_graphics4_ImageShaderPainter.lastTexture) {
			_this5.drawBuffer();
		}
		var left = sx / tex.get_realWidth();
		var top = sy / tex.get_realHeight();
		var right = (sx + sw) / tex.get_realWidth();
		var bottom = (sy + sh) / tex.get_realHeight();
		var baseIndex = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex1 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 35] = a;
		var baseIndex2 = kha_graphics4_ImageShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = p1_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = p1_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = p2_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = p2_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = p3_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = p3_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = p4_x;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = p4_y;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = tex;
	}
	,get_color: function() {
		return this.myColor;
	}
	,set_color: function(color) {
		return this.myColor = color;
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x1 = x - strength / 2;
		var y1 = y + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x2 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y2 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x3 = x2;
		var y3 = y2;
		if(y3 == null) {
			y3 = 0;
		}
		if(x3 == null) {
			x3 = 0;
		}
		var p1_x = x3;
		var p1_y = y3;
		var _this1 = this.transformations[this.transformationIndex];
		var x4 = x - strength / 2;
		var y4 = y - strength / 2;
		if(y4 == null) {
			y4 = 0;
		}
		if(x4 == null) {
			x4 = 0;
		}
		var value_x1 = x4;
		var value_y1 = y4;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x5 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y5 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		var x6 = x5;
		var y6 = y5;
		if(y6 == null) {
			y6 = 0;
		}
		if(x6 == null) {
			x6 = 0;
		}
		var p2_x = x6;
		var p2_y = y6;
		var _this2 = this.transformations[this.transformationIndex];
		var x7 = x + width + strength / 2;
		var y7 = y - strength / 2;
		if(y7 == null) {
			y7 = 0;
		}
		if(x7 == null) {
			x7 = 0;
		}
		var value_x2 = x7;
		var value_y2 = y7;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x8 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y8 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		var x9 = x8;
		var y9 = y8;
		if(y9 == null) {
			y9 = 0;
		}
		if(x9 == null) {
			x9 = 0;
		}
		var p3_x = x9;
		var p3_y = y9;
		var _this3 = this.transformations[this.transformationIndex];
		var x10 = x + width + strength / 2;
		var y10 = y + strength / 2;
		if(y10 == null) {
			y10 = 0;
		}
		if(x10 == null) {
			x10 = 0;
		}
		var value_x3 = x10;
		var value_y3 = y10;
		var w3 = _this3._02 * value_x3 + _this3._12 * value_y3 + _this3._22;
		var x11 = (_this3._00 * value_x3 + _this3._10 * value_y3 + _this3._20) / w3;
		var y11 = (_this3._01 * value_x3 + _this3._11 * value_y3 + _this3._21) / w3;
		var x12 = x11;
		var y12 = y11;
		if(y12 == null) {
			y12 = 0;
		}
		if(x12 == null) {
			x12 = 0;
		}
		var p4_x = x12;
		var p4_y = y12;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this4 = this.transformations[this.transformationIndex];
		var x13 = x - strength / 2;
		var y13 = y + height - strength / 2;
		if(y13 == null) {
			y13 = 0;
		}
		if(x13 == null) {
			x13 = 0;
		}
		var value_x4 = x13;
		var value_y4 = y13;
		var w4 = _this4._02 * value_x4 + _this4._12 * value_y4 + _this4._22;
		var x14 = (_this4._00 * value_x4 + _this4._10 * value_y4 + _this4._20) / w4;
		var y14 = (_this4._01 * value_x4 + _this4._11 * value_y4 + _this4._21) / w4;
		var x15 = x14;
		var y15 = y14;
		if(y15 == null) {
			y15 = 0;
		}
		if(x15 == null) {
			x15 = 0;
		}
		var v_x = x15;
		var v_y = y15;
		p1_x = v_x;
		p1_y = v_y;
		var _this5 = this.transformations[this.transformationIndex];
		var x16 = x - strength / 2;
		var y16 = y + strength / 2;
		if(y16 == null) {
			y16 = 0;
		}
		if(x16 == null) {
			x16 = 0;
		}
		var value_x5 = x16;
		var value_y5 = y16;
		var w5 = _this5._02 * value_x5 + _this5._12 * value_y5 + _this5._22;
		var x17 = (_this5._00 * value_x5 + _this5._10 * value_y5 + _this5._20) / w5;
		var y17 = (_this5._01 * value_x5 + _this5._11 * value_y5 + _this5._21) / w5;
		var x18 = x17;
		var y18 = y17;
		if(y18 == null) {
			y18 = 0;
		}
		if(x18 == null) {
			x18 = 0;
		}
		var v_x1 = x18;
		var v_y1 = y18;
		p2_x = v_x1;
		p2_y = v_y1;
		var _this6 = this.transformations[this.transformationIndex];
		var x19 = x + strength / 2;
		var y19 = y + strength / 2;
		if(y19 == null) {
			y19 = 0;
		}
		if(x19 == null) {
			x19 = 0;
		}
		var value_x6 = x19;
		var value_y6 = y19;
		var w6 = _this6._02 * value_x6 + _this6._12 * value_y6 + _this6._22;
		var x20 = (_this6._00 * value_x6 + _this6._10 * value_y6 + _this6._20) / w6;
		var y20 = (_this6._01 * value_x6 + _this6._11 * value_y6 + _this6._21) / w6;
		var x21 = x20;
		var y21 = y20;
		if(y21 == null) {
			y21 = 0;
		}
		if(x21 == null) {
			x21 = 0;
		}
		var v_x2 = x21;
		var v_y2 = y21;
		p3_x = v_x2;
		p3_y = v_y2;
		var _this7 = this.transformations[this.transformationIndex];
		var x22 = x + strength / 2;
		var y22 = y + height - strength / 2;
		if(y22 == null) {
			y22 = 0;
		}
		if(x22 == null) {
			x22 = 0;
		}
		var value_x7 = x22;
		var value_y7 = y22;
		var w7 = _this7._02 * value_x7 + _this7._12 * value_y7 + _this7._22;
		var x23 = (_this7._00 * value_x7 + _this7._10 * value_y7 + _this7._20) / w7;
		var y23 = (_this7._01 * value_x7 + _this7._11 * value_y7 + _this7._21) / w7;
		var x24 = x23;
		var y24 = y23;
		if(y24 == null) {
			y24 = 0;
		}
		if(x24 == null) {
			x24 = 0;
		}
		var v_x3 = x24;
		var v_y3 = y24;
		p4_x = v_x3;
		p4_y = v_y3;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this8 = this.transformations[this.transformationIndex];
		var x25 = x - strength / 2;
		var y25 = y + height + strength / 2;
		if(y25 == null) {
			y25 = 0;
		}
		if(x25 == null) {
			x25 = 0;
		}
		var value_x8 = x25;
		var value_y8 = y25;
		var w8 = _this8._02 * value_x8 + _this8._12 * value_y8 + _this8._22;
		var x26 = (_this8._00 * value_x8 + _this8._10 * value_y8 + _this8._20) / w8;
		var y26 = (_this8._01 * value_x8 + _this8._11 * value_y8 + _this8._21) / w8;
		var x27 = x26;
		var y27 = y26;
		if(y27 == null) {
			y27 = 0;
		}
		if(x27 == null) {
			x27 = 0;
		}
		var v_x4 = x27;
		var v_y4 = y27;
		p1_x = v_x4;
		p1_y = v_y4;
		var _this9 = this.transformations[this.transformationIndex];
		var x28 = x - strength / 2;
		var y28 = y + height - strength / 2;
		if(y28 == null) {
			y28 = 0;
		}
		if(x28 == null) {
			x28 = 0;
		}
		var value_x9 = x28;
		var value_y9 = y28;
		var w9 = _this9._02 * value_x9 + _this9._12 * value_y9 + _this9._22;
		var x29 = (_this9._00 * value_x9 + _this9._10 * value_y9 + _this9._20) / w9;
		var y29 = (_this9._01 * value_x9 + _this9._11 * value_y9 + _this9._21) / w9;
		var x30 = x29;
		var y30 = y29;
		if(y30 == null) {
			y30 = 0;
		}
		if(x30 == null) {
			x30 = 0;
		}
		var v_x5 = x30;
		var v_y5 = y30;
		p2_x = v_x5;
		p2_y = v_y5;
		var _this10 = this.transformations[this.transformationIndex];
		var x31 = x + width + strength / 2;
		var y31 = y + height - strength / 2;
		if(y31 == null) {
			y31 = 0;
		}
		if(x31 == null) {
			x31 = 0;
		}
		var value_x10 = x31;
		var value_y10 = y31;
		var w10 = _this10._02 * value_x10 + _this10._12 * value_y10 + _this10._22;
		var x32 = (_this10._00 * value_x10 + _this10._10 * value_y10 + _this10._20) / w10;
		var y32 = (_this10._01 * value_x10 + _this10._11 * value_y10 + _this10._21) / w10;
		var x33 = x32;
		var y33 = y32;
		if(y33 == null) {
			y33 = 0;
		}
		if(x33 == null) {
			x33 = 0;
		}
		var v_x6 = x33;
		var v_y6 = y33;
		p3_x = v_x6;
		p3_y = v_y6;
		var _this11 = this.transformations[this.transformationIndex];
		var x34 = x + width + strength / 2;
		var y34 = y + height + strength / 2;
		if(y34 == null) {
			y34 = 0;
		}
		if(x34 == null) {
			x34 = 0;
		}
		var value_x11 = x34;
		var value_y11 = y34;
		var w11 = _this11._02 * value_x11 + _this11._12 * value_y11 + _this11._22;
		var x35 = (_this11._00 * value_x11 + _this11._10 * value_y11 + _this11._20) / w11;
		var y35 = (_this11._01 * value_x11 + _this11._11 * value_y11 + _this11._21) / w11;
		var x36 = x35;
		var y36 = y35;
		if(y36 == null) {
			y36 = 0;
		}
		if(x36 == null) {
			x36 = 0;
		}
		var v_x7 = x36;
		var v_y7 = y36;
		p4_x = v_x7;
		p4_y = v_y7;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this12 = this.transformations[this.transformationIndex];
		var x37 = x + width - strength / 2;
		var y37 = y + height - strength / 2;
		if(y37 == null) {
			y37 = 0;
		}
		if(x37 == null) {
			x37 = 0;
		}
		var value_x12 = x37;
		var value_y12 = y37;
		var w12 = _this12._02 * value_x12 + _this12._12 * value_y12 + _this12._22;
		var x38 = (_this12._00 * value_x12 + _this12._10 * value_y12 + _this12._20) / w12;
		var y38 = (_this12._01 * value_x12 + _this12._11 * value_y12 + _this12._21) / w12;
		var x39 = x38;
		var y39 = y38;
		if(y39 == null) {
			y39 = 0;
		}
		if(x39 == null) {
			x39 = 0;
		}
		var v_x8 = x39;
		var v_y8 = y39;
		p1_x = v_x8;
		p1_y = v_y8;
		var _this13 = this.transformations[this.transformationIndex];
		var x40 = x + width - strength / 2;
		var y40 = y + strength / 2;
		if(y40 == null) {
			y40 = 0;
		}
		if(x40 == null) {
			x40 = 0;
		}
		var value_x13 = x40;
		var value_y13 = y40;
		var w13 = _this13._02 * value_x13 + _this13._12 * value_y13 + _this13._22;
		var x41 = (_this13._00 * value_x13 + _this13._10 * value_y13 + _this13._20) / w13;
		var y41 = (_this13._01 * value_x13 + _this13._11 * value_y13 + _this13._21) / w13;
		var x42 = x41;
		var y42 = y41;
		if(y42 == null) {
			y42 = 0;
		}
		if(x42 == null) {
			x42 = 0;
		}
		var v_x9 = x42;
		var v_y9 = y42;
		p2_x = v_x9;
		p2_y = v_y9;
		var _this14 = this.transformations[this.transformationIndex];
		var x43 = x + width + strength / 2;
		var y43 = y + strength / 2;
		if(y43 == null) {
			y43 = 0;
		}
		if(x43 == null) {
			x43 = 0;
		}
		var value_x14 = x43;
		var value_y14 = y43;
		var w14 = _this14._02 * value_x14 + _this14._12 * value_y14 + _this14._22;
		var x44 = (_this14._00 * value_x14 + _this14._10 * value_y14 + _this14._20) / w14;
		var y44 = (_this14._01 * value_x14 + _this14._11 * value_y14 + _this14._21) / w14;
		var x45 = x44;
		var y45 = y44;
		if(y45 == null) {
			y45 = 0;
		}
		if(x45 == null) {
			x45 = 0;
		}
		var v_x10 = x45;
		var v_y10 = y45;
		p3_x = v_x10;
		p3_y = v_y10;
		var _this15 = this.transformations[this.transformationIndex];
		var x46 = x + width + strength / 2;
		var y46 = y + height - strength / 2;
		if(y46 == null) {
			y46 = 0;
		}
		if(x46 == null) {
			x46 = 0;
		}
		var value_x15 = x46;
		var value_y15 = y46;
		var w15 = _this15._02 * value_x15 + _this15._12 * value_y15 + _this15._22;
		var x47 = (_this15._00 * value_x15 + _this15._10 * value_y15 + _this15._20) / w15;
		var y47 = (_this15._01 * value_x15 + _this15._11 * value_y15 + _this15._21) / w15;
		var x48 = x47;
		var y48 = y47;
		if(y48 == null) {
			y48 = 0;
		}
		if(x48 == null) {
			x48 = 0;
		}
		var v_x11 = x48;
		var v_y11 = y48;
		p4_x = v_x11;
		p4_y = v_y11;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
	}
	,fillRect: function(x,y,width,height) {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = y + height;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x2 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y2 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x3 = x2;
		var y3 = y2;
		if(y3 == null) {
			y3 = 0;
		}
		if(x3 == null) {
			x3 = 0;
		}
		var p1_x = x3;
		var p1_y = y3;
		var _this1 = this.transformations[this.transformationIndex];
		var x4 = x;
		var y4 = y;
		if(y4 == null) {
			y4 = 0;
		}
		if(x4 == null) {
			x4 = 0;
		}
		var value_x1 = x4;
		var value_y1 = y4;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x5 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y5 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		var x6 = x5;
		var y6 = y5;
		if(y6 == null) {
			y6 = 0;
		}
		if(x6 == null) {
			x6 = 0;
		}
		var p2_x = x6;
		var p2_y = y6;
		var _this2 = this.transformations[this.transformationIndex];
		var x7 = x + width;
		var y7 = y;
		if(y7 == null) {
			y7 = 0;
		}
		if(x7 == null) {
			x7 = 0;
		}
		var value_x2 = x7;
		var value_y2 = y7;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x8 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y8 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		var x9 = x8;
		var y9 = y8;
		if(y9 == null) {
			y9 = 0;
		}
		if(x9 == null) {
			x9 = 0;
		}
		var p3_x = x9;
		var p3_y = y9;
		var _this3 = this.transformations[this.transformationIndex];
		var x10 = x + width;
		var y10 = y + height;
		if(y10 == null) {
			y10 = 0;
		}
		if(x10 == null) {
			x10 = 0;
		}
		var value_x3 = x10;
		var value_y3 = y10;
		var w3 = _this3._02 * value_x3 + _this3._12 * value_y3 + _this3._22;
		var x11 = (_this3._00 * value_x3 + _this3._10 * value_y3 + _this3._20) / w3;
		var y11 = (_this3._01 * value_x3 + _this3._11 * value_y3 + _this3._21) / w3;
		var x12 = x11;
		var y12 = y11;
		if(y12 == null) {
			y12 = 0;
		}
		if(x12 == null) {
			x12 = 0;
		}
		var p4_x = x12;
		var p4_y = y12;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
	}
	,drawString: function(text,x,y) {
		this.imagePainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.drawString(text,this.get_opacity(),this.get_color(),x,y,this.transformations[this.transformationIndex]);
	}
	,drawCharacters: function(text,start,length,x,y) {
		this.imagePainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.drawCharacters(text,start,length,this.get_opacity(),this.get_color(),x,y,this.transformations[this.transformationIndex]);
	}
	,get_font: function() {
		return this.myFont;
	}
	,set_font: function(font) {
		this.textPainter.setFont(font);
		return this.myFont = font;
	}
	,set_fontSize: function(value) {
		return kha_graphics2_Graphics.prototype.set_fontSize.call(this,this.textPainter.fontSize = value);
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var vec_x = 0;
		var vec_y = 0;
		if(y2 == y1) {
			var x = 0;
			var y = -1;
			if(y == null) {
				y = 0;
			}
			if(x == null) {
				x = 0;
			}
			var v_x = x;
			var v_y = y;
			vec_x = v_x;
			vec_y = v_y;
		} else {
			var x3 = 1;
			var y3 = -(x2 - x1) / (y2 - y1);
			if(y3 == null) {
				y3 = 0;
			}
			if(x3 == null) {
				x3 = 0;
			}
			var v_x1 = x3;
			var v_y1 = y3;
			vec_x = v_x1;
			vec_y = v_y1;
		}
		var currentLength = Math.sqrt(vec_x * vec_x + vec_y * vec_y);
		if(currentLength != 0) {
			var mul = strength / currentLength;
			vec_x *= mul;
			vec_y *= mul;
		}
		var x4 = x1 + 0.5 * vec_x;
		var y4 = y1 + 0.5 * vec_y;
		if(y4 == null) {
			y4 = 0;
		}
		if(x4 == null) {
			x4 = 0;
		}
		var p1_x = x4;
		var p1_y = y4;
		var x5 = x2 + 0.5 * vec_x;
		var y5 = y2 + 0.5 * vec_y;
		if(y5 == null) {
			y5 = 0;
		}
		if(x5 == null) {
			x5 = 0;
		}
		var p2_x = x5;
		var p2_y = y5;
		var x6 = p1_x - vec_x;
		var y6 = p1_y - vec_y;
		if(y6 == null) {
			y6 = 0;
		}
		if(x6 == null) {
			x6 = 0;
		}
		var p3_x = x6;
		var p3_y = y6;
		var x7 = p2_x - vec_x;
		var y7 = p2_y - vec_y;
		if(y7 == null) {
			y7 = 0;
		}
		if(x7 == null) {
			x7 = 0;
		}
		var p4_x = x7;
		var p4_y = y7;
		var _this = this.transformations[this.transformationIndex];
		var w = _this._02 * p1_x + _this._12 * p1_y + _this._22;
		var x8 = (_this._00 * p1_x + _this._10 * p1_y + _this._20) / w;
		var y8 = (_this._01 * p1_x + _this._11 * p1_y + _this._21) / w;
		var x9 = x8;
		var y9 = y8;
		if(y9 == null) {
			y9 = 0;
		}
		if(x9 == null) {
			x9 = 0;
		}
		var v_x2 = x9;
		var v_y2 = y9;
		p1_x = v_x2;
		p1_y = v_y2;
		var _this1 = this.transformations[this.transformationIndex];
		var w1 = _this1._02 * p2_x + _this1._12 * p2_y + _this1._22;
		var x10 = (_this1._00 * p2_x + _this1._10 * p2_y + _this1._20) / w1;
		var y10 = (_this1._01 * p2_x + _this1._11 * p2_y + _this1._21) / w1;
		var x11 = x10;
		var y11 = y10;
		if(y11 == null) {
			y11 = 0;
		}
		if(x11 == null) {
			x11 = 0;
		}
		var v_x3 = x11;
		var v_y3 = y11;
		p2_x = v_x3;
		p2_y = v_y3;
		var _this2 = this.transformations[this.transformationIndex];
		var w2 = _this2._02 * p3_x + _this2._12 * p3_y + _this2._22;
		var x12 = (_this2._00 * p3_x + _this2._10 * p3_y + _this2._20) / w2;
		var y12 = (_this2._01 * p3_x + _this2._11 * p3_y + _this2._21) / w2;
		var x13 = x12;
		var y13 = y12;
		if(y13 == null) {
			y13 = 0;
		}
		if(x13 == null) {
			x13 = 0;
		}
		var v_x4 = x13;
		var v_y4 = y13;
		p3_x = v_x4;
		p3_y = v_y4;
		var _this3 = this.transformations[this.transformationIndex];
		var w3 = _this3._02 * p4_x + _this3._12 * p4_y + _this3._22;
		var x14 = (_this3._00 * p4_x + _this3._10 * p4_y + _this3._20) / w3;
		var y14 = (_this3._01 * p4_x + _this3._11 * p4_y + _this3._21) / w3;
		var x15 = x14;
		var y15 = y14;
		if(y15 == null) {
			y15 = 0;
		}
		if(x15 == null) {
			x15 = 0;
		}
		var v_x5 = x15;
		var v_y5 = y15;
		p4_x = v_x5;
		p4_y = v_y5;
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p3_x,p3_y,p2_x,p2_y,p4_x,p4_y);
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x = x1;
		var y = y1;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x4 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y4 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x5 = x4;
		var y5 = y4;
		if(y5 == null) {
			y5 = 0;
		}
		if(x5 == null) {
			x5 = 0;
		}
		var p1_x = x5;
		var p1_y = y5;
		var _this1 = this.transformations[this.transformationIndex];
		var x6 = x2;
		var y6 = y2;
		if(y6 == null) {
			y6 = 0;
		}
		if(x6 == null) {
			x6 = 0;
		}
		var value_x1 = x6;
		var value_y1 = y6;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x7 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y7 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		var x8 = x7;
		var y8 = y7;
		if(y8 == null) {
			y8 = 0;
		}
		if(x8 == null) {
			x8 = 0;
		}
		var p2_x = x8;
		var p2_y = y8;
		var _this2 = this.transformations[this.transformationIndex];
		var x9 = x3;
		var y9 = y3;
		if(y9 == null) {
			y9 = 0;
		}
		if(x9 == null) {
			x9 = 0;
		}
		var value_x2 = x9;
		var value_y2 = y9;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x10 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y10 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		var x11 = x10;
		var y11 = y10;
		if(y11 == null) {
			y11 = 0;
		}
		if(x11 == null) {
			x11 = 0;
		}
		var p3_x = x11;
		var p3_y = y11;
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
	}
	,myImageScaleQuality: null
	,get_imageScaleQuality: function() {
		return this.myImageScaleQuality;
	}
	,set_imageScaleQuality: function(value) {
		if(value == this.myImageScaleQuality) {
			return value;
		}
		this.imagePainter.setBilinearFilter(value == 1);
		this.textPainter.setBilinearFilter(value == 1);
		return this.myImageScaleQuality = value;
	}
	,myMipmapScaleQuality: null
	,get_mipmapScaleQuality: function() {
		return this.myMipmapScaleQuality;
	}
	,set_mipmapScaleQuality: function(value) {
		this.imagePainter.setBilinearMipmapFilter(value == 1);
		return this.myMipmapScaleQuality = value;
	}
	,pipelineCache: null
	,lastPipeline: null
	,setPipeline: function(pipeline) {
		if(pipeline == this.lastPipeline) {
			return;
		}
		this.lastPipeline = pipeline;
		this.flush();
		if(pipeline == null) {
			this.imagePainter.set_pipeline(null);
			this.coloredPainter.set_pipeline(null);
			this.textPainter.set_pipeline(null);
		} else {
			var cache = this.pipelineCache.h[pipeline.__id__];
			if(cache == null) {
				cache = new kha_graphics4_PipelineCache(pipeline);
				this.pipelineCache.set(pipeline,cache);
			}
			this.imagePainter.set_pipeline(cache);
			this.coloredPainter.set_pipeline(cache);
			this.textPainter.set_pipeline(cache);
		}
	}
	,scissorEnabled: null
	,scissorX: null
	,scissorY: null
	,scissorW: null
	,scissorH: null
	,scissor: function(x,y,width,height) {
		this.scissorEnabled = true;
		this.scissorX = x;
		this.scissorY = y;
		this.scissorW = width;
		this.scissorH = height;
		this.flush();
		this.g.scissor(x,y,width,height);
	}
	,disableScissor: function() {
		this.scissorEnabled = false;
		this.flush();
		this.g.disableScissor();
	}
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		if(kha_graphics4_Graphics2.current == null) {
			kha_graphics4_Graphics2.current = this;
		} else {
			throw new js__$Boot_HaxeError("End before you begin");
		}
		this.g.begin();
		if(clear) {
			this.clear(clearColor);
		}
		this.setProjection();
	}
	,clear: function(color) {
		this.flush();
		this.g.clear(color == null ? -16777216 : color);
	}
	,flush: function() {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
	}
	,end: function() {
		this.flush();
		this.g.end();
		if(kha_graphics4_Graphics2.current == this) {
			kha_graphics4_Graphics2.current = null;
		} else {
			throw new js__$Boot_HaxeError("Begin before you end");
		}
	}
	,drawVideoInternal: function(video,x,y,width,height) {
	}
	,drawVideo: function(video,x,y,width,height) {
		this.setPipeline(kha_graphics4_Graphics2.videoPipeline);
		this.drawVideoInternal(video,x,y,width,height);
		this.setPipeline(null);
	}
	,__class__: kha_graphics4_Graphics2
});
var kha_graphics4_IndexBuffer = function(indexCount,usage,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	this.indexCount = indexCount;
	this.buffer = Krom.createIndexBuffer(indexCount);
};
$hxClasses["kha.graphics4.IndexBuffer"] = kha_graphics4_IndexBuffer;
kha_graphics4_IndexBuffer.__name__ = "kha.graphics4.IndexBuffer";
kha_graphics4_IndexBuffer.prototype = {
	buffer: null
	,_data: null
	,indexCount: null
	,'delete': function() {
		Krom.deleteIndexBuffer(this.buffer);
		this.buffer = null;
	}
	,lock: function(start,count) {
		this._data = Krom.lockIndexBuffer(this.buffer);
		if(start == null) {
			start = 0;
		}
		if(count == null) {
			count = this.indexCount;
		}
		return this._data.subarray(start,start + count);
	}
	,unlock: function(count) {
		Krom.unlockIndexBuffer(this.buffer);
	}
	,set: function() {
		Krom.setIndexBuffer(this.buffer);
	}
	,count: function() {
		return this.indexCount;
	}
	,__class__: kha_graphics4_IndexBuffer
};
var kha_graphics4_PipelineStateBase = function() {
	this.inputLayout = null;
	this.vertexShader = null;
	this.fragmentShader = null;
	this.geometryShader = null;
	this.tessellationControlShader = null;
	this.tessellationEvaluationShader = null;
	this.cullMode = 2;
	this.depthWrite = false;
	this.depthMode = 0;
	this.stencilMode = 0;
	this.stencilBothPass = 0;
	this.stencilDepthFail = 0;
	this.stencilFail = 0;
	this.stencilReferenceValue = kha_graphics4_StencilValue.Static(0);
	this.stencilReadMask = 255;
	this.stencilWriteMask = 255;
	this.blendSource = 1;
	this.blendDestination = 2;
	this.blendOperation = 0;
	this.alphaBlendSource = 1;
	this.alphaBlendDestination = 2;
	this.alphaBlendOperation = 0;
	this.colorWriteMasksRed = [];
	this.colorWriteMasksGreen = [];
	this.colorWriteMasksBlue = [];
	this.colorWriteMasksAlpha = [];
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.conservativeRasterization = false;
};
$hxClasses["kha.graphics4.PipelineStateBase"] = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineStateBase.__name__ = "kha.graphics4.PipelineStateBase";
kha_graphics4_PipelineStateBase.prototype = {
	inputLayout: null
	,vertexShader: null
	,fragmentShader: null
	,geometryShader: null
	,tessellationControlShader: null
	,tessellationEvaluationShader: null
	,cullMode: null
	,depthWrite: null
	,depthMode: null
	,stencilMode: null
	,stencilBothPass: null
	,stencilDepthFail: null
	,stencilFail: null
	,stencilReferenceValue: null
	,stencilReadMask: null
	,stencilWriteMask: null
	,blendSource: null
	,blendDestination: null
	,blendOperation: null
	,alphaBlendSource: null
	,alphaBlendDestination: null
	,alphaBlendOperation: null
	,colorWriteMasksRed: null
	,colorWriteMasksGreen: null
	,colorWriteMasksBlue: null
	,colorWriteMasksAlpha: null
	,set_colorWriteMask: function(value) {
		var value1 = this.colorWriteMasksAlpha[0] = value;
		var value2 = this.colorWriteMasksGreen[0] = value1;
		var value3 = this.colorWriteMasksBlue[0] = value2;
		return this.colorWriteMasksRed[0] = value3;
	}
	,get_colorWriteMaskRed: function() {
		return this.colorWriteMasksRed[0];
	}
	,set_colorWriteMaskRed: function(value) {
		return this.colorWriteMasksRed[0] = value;
	}
	,get_colorWriteMaskGreen: function() {
		return this.colorWriteMasksGreen[0];
	}
	,set_colorWriteMaskGreen: function(value) {
		return this.colorWriteMasksGreen[0] = value;
	}
	,get_colorWriteMaskBlue: function() {
		return this.colorWriteMasksBlue[0];
	}
	,set_colorWriteMaskBlue: function(value) {
		return this.colorWriteMasksBlue[0] = value;
	}
	,get_colorWriteMaskAlpha: function() {
		return this.colorWriteMasksAlpha[0];
	}
	,set_colorWriteMaskAlpha: function(value) {
		return this.colorWriteMasksAlpha[0] = value;
	}
	,conservativeRasterization: null
	,__class__: kha_graphics4_PipelineStateBase
	,__properties__: {set_colorWriteMaskAlpha:"set_colorWriteMaskAlpha",get_colorWriteMaskAlpha:"get_colorWriteMaskAlpha",set_colorWriteMaskBlue:"set_colorWriteMaskBlue",get_colorWriteMaskBlue:"get_colorWriteMaskBlue",set_colorWriteMaskGreen:"set_colorWriteMaskGreen",get_colorWriteMaskGreen:"get_colorWriteMaskGreen",set_colorWriteMaskRed:"set_colorWriteMaskRed",get_colorWriteMaskRed:"get_colorWriteMaskRed",set_colorWriteMask:"set_colorWriteMask"}
};
var kha_graphics4_PipelineState = function() {
	kha_graphics4_PipelineStateBase.call(this);
	this.pipeline = Krom.createPipeline();
};
$hxClasses["kha.graphics4.PipelineState"] = kha_graphics4_PipelineState;
kha_graphics4_PipelineState.__name__ = "kha.graphics4.PipelineState";
kha_graphics4_PipelineState.convertBlendingFactor = function(factor) {
	switch(factor) {
	case 0:case 1:
		return 0;
	case 2:
		return 1;
	case 3:
		return 2;
	case 4:
		return 3;
	case 5:
		return 4;
	case 6:
		return 5;
	case 7:
		return 6;
	case 8:
		return 7;
	case 9:
		return 8;
	case 10:
		return 9;
	}
};
kha_graphics4_PipelineState.__super__ = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineState.prototype = $extend(kha_graphics4_PipelineStateBase.prototype,{
	pipeline: null
	,'delete': function() {
		Krom.deletePipeline(this.pipeline);
		this.pipeline = null;
	}
	,compile: function() {
		var structure0 = this.inputLayout.length > 0 ? this.inputLayout[0] : null;
		var structure1 = this.inputLayout.length > 1 ? this.inputLayout[1] : null;
		var structure2 = this.inputLayout.length > 2 ? this.inputLayout[2] : null;
		var structure3 = this.inputLayout.length > 3 ? this.inputLayout[3] : null;
		var gs = this.geometryShader != null ? this.geometryShader.shader : null;
		var tcs = this.tessellationControlShader != null ? this.tessellationControlShader.shader : null;
		var tes = this.tessellationEvaluationShader != null ? this.tessellationEvaluationShader.shader : null;
		var stencilReferenceValue = 0;
		var _g = this.stencilReferenceValue;
		if(_g._hx_index == 1) {
			var value = _g.value;
			stencilReferenceValue = value;
		}
		Krom.compilePipeline(this.pipeline,structure0,structure1,structure2,structure3,this.inputLayout.length,this.vertexShader.shader,this.fragmentShader.shader,gs,tcs,tes,{ cullMode : this.cullMode, depthWrite : this.depthWrite, depthMode : this.depthMode, stencilMode : this.stencilMode, stencilBothPass : this.stencilBothPass, stencilDepthFail : this.stencilDepthFail, stencilFail : this.stencilFail, stencilReferenceValue : stencilReferenceValue, stencilReadMask : this.stencilReadMask, stencilWriteMask : this.stencilWriteMask, blendSource : kha_graphics4_PipelineState.convertBlendingFactor(this.blendSource), blendDestination : kha_graphics4_PipelineState.convertBlendingFactor(this.blendDestination), alphaBlendSource : kha_graphics4_PipelineState.convertBlendingFactor(this.alphaBlendSource), alphaBlendDestination : kha_graphics4_PipelineState.convertBlendingFactor(this.alphaBlendDestination), colorWriteMaskRed : this.colorWriteMasksRed, colorWriteMaskGreen : this.colorWriteMasksGreen, colorWriteMaskBlue : this.colorWriteMasksBlue, colorWriteMaskAlpha : this.colorWriteMasksAlpha, conservativeRasterization : this.conservativeRasterization});
	}
	,set: function() {
		Krom.setPipeline(this.pipeline);
	}
	,getConstantLocation: function(name) {
		return Krom.getConstantLocation(this.pipeline,name);
	}
	,getTextureUnit: function(name) {
		return Krom.getTextureUnit(this.pipeline,name);
	}
	,__class__: kha_graphics4_PipelineState
});
var kha_graphics4_StencilValue = $hxEnums["kha.graphics4.StencilValue"] = { __ename__ : true, __constructs__ : ["Dynamic","Static"]
	,Dynamic: {_hx_index:0,__enum__:"kha.graphics4.StencilValue",toString:$estr}
	,Static: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"kha.graphics4.StencilValue",toString:$estr}; },$_.__params__ = ["value"],$_)
};
var kha_graphics4_TessellationControlShader = function(sources,names) {
	this.shader = Krom.createTessellationControlShader(sources[0].bytes.b.bufferValue,names[0]);
};
$hxClasses["kha.graphics4.TessellationControlShader"] = kha_graphics4_TessellationControlShader;
kha_graphics4_TessellationControlShader.__name__ = "kha.graphics4.TessellationControlShader";
kha_graphics4_TessellationControlShader.prototype = {
	shader: null
	,'delete': function() {
		Krom.deleteShader(this.shader);
		this.shader = null;
	}
	,__class__: kha_graphics4_TessellationControlShader
};
var kha_graphics4_TessellationEvaluationShader = function(sources,names) {
	this.shader = Krom.createTessellationEvaluationShader(sources[0].bytes.b.bufferValue,names[0]);
};
$hxClasses["kha.graphics4.TessellationEvaluationShader"] = kha_graphics4_TessellationEvaluationShader;
kha_graphics4_TessellationEvaluationShader.__name__ = "kha.graphics4.TessellationEvaluationShader";
kha_graphics4_TessellationEvaluationShader.prototype = {
	shader: null
	,'delete': function() {
		Krom.deleteShader(this.shader);
		this.shader = null;
	}
	,__class__: kha_graphics4_TessellationEvaluationShader
};
var kha_graphics4_TextureUnit = function() { };
$hxClasses["kha.graphics4.TextureUnit"] = kha_graphics4_TextureUnit;
kha_graphics4_TextureUnit.__name__ = "kha.graphics4.TextureUnit";
kha_graphics4_TextureUnit.__isInterface__ = true;
var kha_graphics4_VertexBuffer = function(vertexCount,structure,usage,instanceDataStepRate,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	if(instanceDataStepRate == null) {
		instanceDataStepRate = 0;
	}
	this.vertexCount = vertexCount;
	this.structure = structure;
	this.buffer = Krom.createVertexBuffer(vertexCount,structure.elements,usage,instanceDataStepRate);
};
$hxClasses["kha.graphics4.VertexBuffer"] = kha_graphics4_VertexBuffer;
kha_graphics4_VertexBuffer.__name__ = "kha.graphics4.VertexBuffer";
kha_graphics4_VertexBuffer.prototype = {
	buffer: null
	,_data: null
	,vertexCount: null
	,structure: null
	,'delete': function() {
		Krom.deleteVertexBuffer(this.buffer);
		this.buffer = null;
	}
	,lock: function(start,count) {
		this._data = Krom.lockVertexBuffer(this.buffer);
		return this._data;
	}
	,lockInt16: function(start,count) {
		var this1 = new Int16Array(this.lock(start,count).buffer);
		return this1;
	}
	,unlock: function(count) {
		Krom.unlockVertexBuffer(this.buffer);
	}
	,stride: function() {
		return this.structure.byteSize();
	}
	,count: function() {
		return this.vertexCount;
	}
	,set: function(offset) {
		Krom.setVertexBuffer(this.buffer);
		return 0;
	}
	,__class__: kha_graphics4_VertexBuffer
};
var kha_graphics4_VertexElement = function(name,data) {
	this.name = name;
	this.data = data;
};
$hxClasses["kha.graphics4.VertexElement"] = kha_graphics4_VertexElement;
kha_graphics4_VertexElement.__name__ = "kha.graphics4.VertexElement";
kha_graphics4_VertexElement.prototype = {
	name: null
	,data: null
	,__class__: kha_graphics4_VertexElement
};
var kha_graphics4_VertexShader = function(sources,names) {
	if(sources != null) {
		this.shader = Krom.createVertexShader(sources[0].bytes.b.bufferValue,names[0]);
	}
};
$hxClasses["kha.graphics4.VertexShader"] = kha_graphics4_VertexShader;
kha_graphics4_VertexShader.__name__ = "kha.graphics4.VertexShader";
kha_graphics4_VertexShader.fromSource = function(source) {
	var shader = new kha_graphics4_VertexShader(null,null);
	shader.shader = Krom.createVertexShaderFromSource(source);
	return shader;
};
kha_graphics4_VertexShader.prototype = {
	shader: null
	,'delete': function() {
		Krom.deleteShader(this.shader);
		this.shader = null;
	}
	,__class__: kha_graphics4_VertexShader
};
var kha_graphics4_VertexStructure = function() {
	this.elements = [];
	this.instanced = false;
};
$hxClasses["kha.graphics4.VertexStructure"] = kha_graphics4_VertexStructure;
kha_graphics4_VertexStructure.__name__ = "kha.graphics4.VertexStructure";
kha_graphics4_VertexStructure.prototype = {
	elements: null
	,instanced: null
	,add: function(name,data) {
		this.elements.push(new kha_graphics4_VertexElement(name,data));
	}
	,size: function() {
		return this.elements.length;
	}
	,byteSize: function() {
		var byteSize = 0;
		var _g = 0;
		var _g1 = this.elements.length;
		while(_g < _g1) {
			var i = _g++;
			byteSize += this.dataByteSize(this.elements[i].data);
		}
		return byteSize;
	}
	,dataByteSize: function(data) {
		switch(data) {
		case 0:
			return 4;
		case 1:
			return 8;
		case 2:
			return 12;
		case 3:
			return 16;
		case 4:
			return 64;
		case 5:
			return 4;
		case 6:
			return 8;
		}
	}
	,get: function(index) {
		return this.elements[index];
	}
	,__class__: kha_graphics4_VertexStructure
};
var kha_input_Gamepad = $hx_exports["kha"]["input"]["Gamepad"] = function(index,id) {
	if(id == null) {
		id = "unknown";
	}
	if(index == null) {
		index = 0;
	}
	this.index = index;
	this.axisListeners = [];
	this.buttonListeners = [];
	kha_input_Gamepad.instances[index] = this;
};
$hxClasses["kha.input.Gamepad"] = kha_input_Gamepad;
kha_input_Gamepad.__name__ = "kha.input.Gamepad";
kha_input_Gamepad.get = function(index) {
	if(index == null) {
		index = 0;
	}
	if(index >= kha_input_Gamepad.instances.length) {
		return null;
	}
	return kha_input_Gamepad.instances[index];
};
kha_input_Gamepad.notifyOnConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		kha_input_Gamepad.connectListeners.push(connectListener);
	}
	if(disconnectListener != null) {
		kha_input_Gamepad.disconnectListeners.push(disconnectListener);
	}
};
kha_input_Gamepad.removeConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.connectListeners,connectListener);
	}
	if(disconnectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.disconnectListeners,disconnectListener);
	}
};
kha_input_Gamepad.sendConnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = true;
	var _g = 0;
	var _g1 = kha_input_Gamepad.connectListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(index);
	}
};
kha_input_Gamepad.sendDisconnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = false;
	var _g = 0;
	var _g1 = kha_input_Gamepad.disconnectListeners;
	while(_g < _g1.length) {
		var listener = _g1[_g];
		++_g;
		listener(index);
	}
};
kha_input_Gamepad.prototype = {
	index: null
	,notify: function(axisListener,buttonListener) {
		if(axisListener != null) {
			this.axisListeners.push(axisListener);
		}
		if(buttonListener != null) {
			this.buttonListeners.push(buttonListener);
		}
	}
	,remove: function(axisListener,buttonListener) {
		if(axisListener != null) {
			HxOverrides.remove(this.axisListeners,axisListener);
		}
		if(buttonListener != null) {
			HxOverrides.remove(this.buttonListeners,buttonListener);
		}
	}
	,axisListeners: null
	,buttonListeners: null
	,id: null
	,vendor: null
	,connected: null
	,get_id: function() {
		return kha_SystemImpl.getGamepadId(this.index);
	}
	,get_vendor: function() {
		return kha_SystemImpl.getGamepadVendor(this.index);
	}
	,sendAxisEvent: function(axis,value) {
		var _g = 0;
		var _g1 = this.axisListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(axis,value);
		}
	}
	,sendButtonEvent: function(button,value) {
		var _g = 0;
		var _g1 = this.buttonListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(button,value);
		}
	}
	,__class__: kha_input_Gamepad
	,__properties__: {get_vendor:"get_vendor",get_id:"get_id"}
};
var kha_input_BlockInterventions = $hxEnums["kha.input.BlockInterventions"] = { __ename__ : true, __constructs__ : ["Default","Full","None","Custom"]
	,Default: {_hx_index:0,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,Full: {_hx_index:1,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,None: {_hx_index:2,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:3,func:func,__enum__:"kha.input.BlockInterventions",toString:$estr}; },$_.__params__ = ["func"],$_)
};
var kha_netsync_Controller = function() {
	this.__id = kha_netsync_ControllerBuilder.nextId++;
	this._inputBuffer = new haxe_io_Bytes(new ArrayBuffer(1));
};
$hxClasses["kha.netsync.Controller"] = kha_netsync_Controller;
kha_netsync_Controller.__name__ = "kha.netsync.Controller";
kha_netsync_Controller.prototype = {
	__id: null
	,_inputBufferIndex: null
	,_inputBuffer: null
	,_id: function() {
		return this.__id;
	}
	,_receive: function(bytes) {
	}
	,__class__: kha_netsync_Controller
};
var kha_input_Keyboard = $hx_exports["kha"]["input"]["Keyboard"] = function() {
	kha_netsync_Controller.call(this);
	this.downListeners = [];
	this.upListeners = [];
	this.pressListeners = [];
	kha_input_Keyboard.instance = this;
};
$hxClasses["kha.input.Keyboard"] = kha_input_Keyboard;
kha_input_Keyboard.__name__ = "kha.input.Keyboard";
kha_input_Keyboard.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getKeyboard(num);
};
kha_input_Keyboard.disableSystemInterventions = function(behavior) {
	kha_input_Keyboard.keyBehavior = behavior;
};
kha_input_Keyboard.__super__ = kha_netsync_Controller;
kha_input_Keyboard.prototype = $extend(kha_netsync_Controller.prototype,{
	notify: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			this.downListeners.push(downListener);
		}
		if(upListener != null) {
			this.upListeners.push(upListener);
		}
		if(pressListener != null) {
			this.pressListeners.push(pressListener);
		}
	}
	,remove: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			HxOverrides.remove(this.downListeners,downListener);
		}
		if(upListener != null) {
			HxOverrides.remove(this.upListeners,upListener);
		}
		if(pressListener != null) {
			HxOverrides.remove(this.pressListeners,pressListener);
		}
	}
	,show: function() {
	}
	,hide: function() {
	}
	,downListeners: null
	,upListeners: null
	,pressListeners: null
	,sendDownEvent: function(code) {
		var _g = 0;
		var _g1 = this.downListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(code);
		}
	}
	,sendUpEvent: function(code) {
		var _g = 0;
		var _g1 = this.upListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(code);
		}
	}
	,sendPressEvent: function(char) {
		var _g = 0;
		var _g1 = this.pressListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(char);
		}
	}
	,_receive: function(bytes) {
	}
	,__class__: kha_input_Keyboard
});
var kha_input_MouseEventBlockBehavior = $hxEnums["kha.input.MouseEventBlockBehavior"] = { __ename__ : true, __constructs__ : ["Full","None","Custom"]
	,Full: {_hx_index:0,__enum__:"kha.input.MouseEventBlockBehavior",toString:$estr}
	,None: {_hx_index:1,__enum__:"kha.input.MouseEventBlockBehavior",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:2,func:func,__enum__:"kha.input.MouseEventBlockBehavior",toString:$estr}; },$_.__params__ = ["func"],$_)
};
var kha_input_Mouse = $hx_exports["kha"]["input"]["Mouse"] = function() {
	kha_netsync_Controller.call(this);
	kha_input_Mouse.instance = this;
};
$hxClasses["kha.input.Mouse"] = kha_input_Mouse;
kha_input_Mouse.__name__ = "kha.input.Mouse";
kha_input_Mouse.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getMouse(num);
};
kha_input_Mouse.setWheelEventBlockBehavior = function(behavior) {
	kha_input_Mouse.wheelEventBlockBehavior = behavior;
};
kha_input_Mouse.__super__ = kha_netsync_Controller;
kha_input_Mouse.prototype = $extend(kha_netsync_Controller.prototype,{
	notify: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.notifyWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,remove: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.removeWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,notifyWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners == null) {
				this.windowDownListeners = [];
			}
			while(this.windowDownListeners.length <= windowId) this.windowDownListeners.push([]);
			this.windowDownListeners[windowId].push(downListener);
		}
		if(upListener != null) {
			if(this.windowUpListeners == null) {
				this.windowUpListeners = [];
			}
			while(this.windowUpListeners.length <= windowId) this.windowUpListeners.push([]);
			this.windowUpListeners[windowId].push(upListener);
		}
		if(moveListener != null) {
			if(this.windowMoveListeners == null) {
				this.windowMoveListeners = [];
			}
			while(this.windowMoveListeners.length <= windowId) this.windowMoveListeners.push([]);
			this.windowMoveListeners[windowId].push(moveListener);
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners == null) {
				this.windowWheelListeners = [];
			}
			while(this.windowWheelListeners.length <= windowId) this.windowWheelListeners.push([]);
			this.windowWheelListeners[windowId].push(wheelListener);
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners == null) {
				this.windowLeaveListeners = [];
			}
			while(this.windowLeaveListeners.length <= windowId) this.windowLeaveListeners.push([]);
			this.windowLeaveListeners[windowId].push(leaveListener);
		}
	}
	,removeWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners != null) {
				if(windowId < this.windowDownListeners.length) {
					HxOverrides.remove(this.windowDownListeners[windowId],downListener);
				} else {
					haxe_Log.trace("no downListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 130, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no downListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 134, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(upListener != null) {
			if(this.windowUpListeners != null) {
				if(windowId < this.windowUpListeners.length) {
					HxOverrides.remove(this.windowUpListeners[windowId],upListener);
				} else {
					haxe_Log.trace("no upListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 144, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no upListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 148, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(moveListener != null) {
			if(this.windowMoveListeners != null) {
				if(windowId < this.windowMoveListeners.length) {
					HxOverrides.remove(this.windowMoveListeners[windowId],moveListener);
				} else {
					haxe_Log.trace("no moveListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 158, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no moveListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 162, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners != null) {
				if(windowId < this.windowWheelListeners.length) {
					HxOverrides.remove(this.windowWheelListeners[windowId],wheelListener);
				} else {
					haxe_Log.trace("no wheelListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 172, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no wheelListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 176, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners != null) {
				if(windowId < this.windowLeaveListeners.length) {
					HxOverrides.remove(this.windowLeaveListeners[windowId],leaveListener);
				} else {
					haxe_Log.trace("no leaveListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 186, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no leaveListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 190, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
	}
	,lock: function() {
	}
	,unlock: function() {
	}
	,canLock: function() {
		return false;
	}
	,isLocked: function() {
		return false;
	}
	,notifyOnLockChange: function(change,error) {
	}
	,removeFromLockChange: function(change,error) {
	}
	,hideSystemCursor: function() {
	}
	,showSystemCursor: function() {
	}
	,windowDownListeners: null
	,windowUpListeners: null
	,windowMoveListeners: null
	,windowWheelListeners: null
	,windowLeaveListeners: null
	,sendLeaveEvent: function(windowId) {
		if(this.windowLeaveListeners != null) {
			var _g = 0;
			var _g1 = this.windowLeaveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener();
			}
		}
	}
	,sendDownEvent: function(windowId,button,x,y) {
		if(this.windowDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowDownListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(button,x,y);
			}
		}
	}
	,sendUpEvent: function(windowId,button,x,y) {
		if(this.windowUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowUpListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(button,x,y);
			}
		}
	}
	,sendMoveEvent: function(windowId,x,y,movementX,movementY) {
		if(this.windowMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowMoveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,movementX,movementY);
			}
		}
	}
	,sendWheelEvent: function(windowId,delta) {
		if(this.windowWheelListeners != null) {
			var _g = 0;
			var _g1 = this.windowWheelListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(delta);
			}
		}
	}
	,_receive: function(bytes) {
	}
	,__class__: kha_input_Mouse
});
var kha_input_MouseImpl = function() {
	kha_input_Mouse.call(this);
};
$hxClasses["kha.input.MouseImpl"] = kha_input_MouseImpl;
kha_input_MouseImpl.__name__ = "kha.input.MouseImpl";
kha_input_MouseImpl.__super__ = kha_input_Mouse;
kha_input_MouseImpl.prototype = $extend(kha_input_Mouse.prototype,{
	lock: function() {
		kha_SystemImpl.lockMouse();
	}
	,unlock: function() {
		kha_SystemImpl.unlockMouse();
	}
	,canLock: function() {
		return kha_SystemImpl.canLockMouse();
	}
	,isLocked: function() {
		return kha_SystemImpl.isMouseLocked();
	}
	,notifyOnLockChange: function(func,error) {
		kha_SystemImpl.notifyOfMouseLockChange(func,error);
	}
	,removeFromLockChange: function(func,error) {
		kha_SystemImpl.removeFromMouseLockChange(func,error);
	}
	,hideSystemCursor: function() {
		kha_SystemImpl.hideSystemCursor();
	}
	,showSystemCursor: function() {
		kha_SystemImpl.showSystemCursor();
	}
	,_receive: function(bytes) {
	}
	,__class__: kha_input_MouseImpl
});
var kha_input_Pen = function() {
	kha_input_Pen.instance = this;
};
$hxClasses["kha.input.Pen"] = kha_input_Pen;
kha_input_Pen.__name__ = "kha.input.Pen";
kha_input_Pen.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getPen(num);
};
kha_input_Pen.prototype = {
	notify: function(downListener,upListener,moveListener) {
		this.notifyWindowed(0,downListener,upListener,moveListener);
	}
	,remove: function(downListener,upListener,moveListener) {
		this.removeWindowed(0,downListener,upListener,moveListener);
	}
	,notifyWindowed: function(windowId,downListener,upListener,moveListener) {
		if(downListener != null) {
			if(this.windowDownListeners == null) {
				this.windowDownListeners = [];
			}
			while(this.windowDownListeners.length <= windowId) this.windowDownListeners.push([]);
			this.windowDownListeners[windowId].push(downListener);
		}
		if(upListener != null) {
			if(this.windowUpListeners == null) {
				this.windowUpListeners = [];
			}
			while(this.windowUpListeners.length <= windowId) this.windowUpListeners.push([]);
			this.windowUpListeners[windowId].push(upListener);
		}
		if(moveListener != null) {
			if(this.windowMoveListeners == null) {
				this.windowMoveListeners = [];
			}
			while(this.windowMoveListeners.length <= windowId) this.windowMoveListeners.push([]);
			this.windowMoveListeners[windowId].push(moveListener);
		}
	}
	,removeWindowed: function(windowId,downListener,upListener,moveListener) {
		if(downListener != null && this.windowDownListeners != null) {
			if(windowId < this.windowDownListeners.length) {
				HxOverrides.remove(this.windowDownListeners[windowId],downListener);
			}
		}
		if(upListener != null && this.windowUpListeners != null) {
			if(windowId < this.windowUpListeners.length) {
				HxOverrides.remove(this.windowUpListeners[windowId],upListener);
			}
		}
		if(moveListener != null && this.windowMoveListeners != null) {
			if(windowId < this.windowMoveListeners.length) {
				HxOverrides.remove(this.windowMoveListeners[windowId],moveListener);
			}
		}
	}
	,windowDownListeners: null
	,windowUpListeners: null
	,windowMoveListeners: null
	,sendDownEvent: function(windowId,x,y,pressure) {
		if(this.windowDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowDownListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,sendUpEvent: function(windowId,x,y,pressure) {
		if(this.windowUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowUpListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,sendMoveEvent: function(windowId,x,y,pressure) {
		if(this.windowMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowMoveListeners[windowId];
			while(_g < _g1.length) {
				var listener = _g1[_g];
				++_g;
				listener(x,y,pressure);
			}
		}
	}
	,__class__: kha_input_Pen
};
var kha_input_Sensor = function() { };
$hxClasses["kha.input.Sensor"] = kha_input_Sensor;
kha_input_Sensor.__name__ = "kha.input.Sensor";
kha_input_Sensor.get = function(type) {
	return null;
};
kha_input_Sensor.prototype = {
	notify: function(listener) {
	}
	,__class__: kha_input_Sensor
};
var kha_input_TouchDownEventBlockBehavior = $hxEnums["kha.input.TouchDownEventBlockBehavior"] = { __ename__ : true, __constructs__ : ["Full","None","Custom"]
	,Full: {_hx_index:0,__enum__:"kha.input.TouchDownEventBlockBehavior",toString:$estr}
	,None: {_hx_index:1,__enum__:"kha.input.TouchDownEventBlockBehavior",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:2,func:func,__enum__:"kha.input.TouchDownEventBlockBehavior",toString:$estr}; },$_.__params__ = ["func"],$_)
};
var kha_input_Surface = $hx_exports["kha"]["input"]["Surface"] = function() {
	this.touchStartListeners = [];
	this.touchEndListeners = [];
	this.moveListeners = [];
	kha_input_Surface.instance = this;
};
$hxClasses["kha.input.Surface"] = kha_input_Surface;
kha_input_Surface.__name__ = "kha.input.Surface";
kha_input_Surface.get = function(num) {
	if(num == null) {
		num = 0;
	}
	if(num != 0) {
		return null;
	}
	return kha_input_Surface.instance;
};
kha_input_Surface.setTouchDownEventBlockBehavior = function(behavior) {
	kha_input_Surface.touchDownEventBlockBehavior = behavior;
};
kha_input_Surface.prototype = {
	notify: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			this.touchStartListeners.push(touchStartListener);
		}
		if(touchEndListener != null) {
			this.touchEndListeners.push(touchEndListener);
		}
		if(moveListener != null) {
			this.moveListeners.push(moveListener);
		}
	}
	,remove: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			HxOverrides.remove(this.touchStartListeners,touchStartListener);
		}
		if(touchEndListener != null) {
			HxOverrides.remove(this.touchEndListeners,touchEndListener);
		}
		if(moveListener != null) {
			HxOverrides.remove(this.moveListeners,moveListener);
		}
	}
	,touchStartListeners: null
	,touchEndListeners: null
	,moveListeners: null
	,sendTouchStartEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchStartListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,sendTouchEndEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchEndListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,sendMoveEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.moveListeners;
		while(_g < _g1.length) {
			var listener = _g1[_g];
			++_g;
			listener(index,x,y);
		}
	}
	,__class__: kha_input_Surface
};
var kha_internal_BytesBlob = function(bytes) {
	this.bytes = bytes;
};
$hxClasses["kha.internal.BytesBlob"] = kha_internal_BytesBlob;
kha_internal_BytesBlob.__name__ = "kha.internal.BytesBlob";
kha_internal_BytesBlob.__interfaces__ = [kha_Resource];
kha_internal_BytesBlob.fromBytes = function(bytes) {
	return new kha_internal_BytesBlob(bytes);
};
kha_internal_BytesBlob.alloc = function(size) {
	return new kha_internal_BytesBlob(new haxe_io_Bytes(new ArrayBuffer(size)));
};
kha_internal_BytesBlob.readF32 = function(i) {
	var sign = (i & -2147483648) == 0 ? 1 : -1;
	var exp = i >> 23 & 255;
	var man = i & 8388607;
	switch(exp) {
	case 0:
		return 0.0;
	case 255:
		if(man != 0) {
			return NaN;
		} else if(sign > 0) {
			return Infinity;
		} else {
			return -Infinity;
		}
		break;
	default:
		return sign * ((man + 8388608) / 8388608.0) * Math.pow(2,exp - 127);
	}
};
kha_internal_BytesBlob.bit = function(value,position) {
	var b = (value >>> position & 1) == 1;
	if(b) {
		var a = 3;
		++a;
		return true;
	} else {
		var c = 4;
		--c;
		return false;
	}
};
kha_internal_BytesBlob.toText = function(chars,length) {
	var value = "";
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		value += String.fromCodePoint(chars[i]);
	}
	return value;
};
kha_internal_BytesBlob.prototype = {
	bytes: null
	,sub: function(start,length) {
		return new kha_internal_BytesBlob(this.bytes.sub(start,length));
	}
	,length: null
	,get_length: function() {
		return this.bytes.length;
	}
	,writeU8: function(position,value) {
		this.bytes.b[position] = value;
	}
	,readU8: function(position) {
		var byte = this.bytes.b[position];
		++position;
		return byte;
	}
	,readS8: function(position) {
		var byte = this.bytes.b[position];
		++position;
		var sign = (byte & 128) == 0 ? 1 : -1;
		byte &= 127;
		return sign * byte;
	}
	,readU16BE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		return first * 256 + second;
	}
	,readU16LE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		return second * 256 + first;
	}
	,readU32LE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		position += 4;
		return fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
	}
	,readU32BE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		position += 4;
		return first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
	}
	,readS16BE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		var sign = (first & 128) == 0 ? 1 : -1;
		first &= 127;
		if(sign == -1) {
			return -32767 + first * 256 + second;
		} else {
			return first * 256 + second;
		}
	}
	,readS16LE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		var sign = (second & 128) == 0 ? 1 : -1;
		second &= 127;
		position += 2;
		if(sign == -1) {
			return -32767 + second * 256 + first;
		} else {
			return second * 256 + first;
		}
	}
	,readS32LE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		var sign = (first & 128) == 0 ? 1 : -1;
		first &= 127;
		position += 4;
		if(sign == -1) {
			return -2147483647 + fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
		} else {
			return fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
		}
	}
	,readS32BE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		var sign = (fourth & 128) == 0 ? 1 : -1;
		fourth &= 127;
		position += 4;
		if(sign == -1) {
			return -2147483647 + first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
		}
		return first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
	}
	,readF32LE: function(position) {
		return kha_internal_BytesBlob.readF32(this.readS32LE(position));
	}
	,readF32BE: function(position) {
		return kha_internal_BytesBlob.readF32(this.readS32BE(position));
	}
	,toString: function() {
		return this.bytes.toString();
	}
	,readUtf8String: function() {
		return this.bytes.toString();
	}
	,toBytes: function() {
		return this.bytes;
	}
	,unload: function() {
		this.bytes = null;
	}
	,__class__: kha_internal_BytesBlob
	,__properties__: {get_length:"get_length"}
};
var kha_krom_Graphics = function(renderTarget) {
	this.renderTarget = renderTarget;
};
$hxClasses["kha.krom.Graphics"] = kha_krom_Graphics;
kha_krom_Graphics.__name__ = "kha.krom.Graphics";
kha_krom_Graphics.__interfaces__ = [kha_graphics4_Graphics];
kha_krom_Graphics.prototype = {
	renderTarget: null
	,begin: function(additionalRenderTargets) {
		Krom.begin(this.renderTarget,additionalRenderTargets);
	}
	,beginFace: function(face) {
		Krom.beginFace(this.renderTarget,face);
	}
	,beginEye: function(eye) {
	}
	,end: function() {
		Krom.end();
	}
	,flush: function() {
	}
	,vsynced: function() {
		return true;
	}
	,refreshRate: function() {
		return 60;
	}
	,clear: function(color,depth,stencil) {
		var flags = 0;
		if(color != null) {
			flags |= 1;
		}
		if(depth != null) {
			flags |= 2;
		}
		if(stencil != null) {
			flags |= 4;
		}
		Krom.clear(flags,color == null ? 0 : color,depth,stencil);
	}
	,viewport: function(x,y,width,height) {
		Krom.viewport(x,y,width,height);
	}
	,setVertexBuffer: function(vertexBuffer) {
		vertexBuffer.set(0);
	}
	,setVertexBuffers: function(vertexBuffers) {
		Krom.setVertexBuffers(vertexBuffers);
	}
	,setIndexBuffer: function(indexBuffer) {
		indexBuffer.set();
	}
	,setCubeMap: function(unit,cubeMap) {
		if(cubeMap == null) {
			return;
		}
		if(cubeMap.texture_ != null) {
			Krom.setTexture(unit,cubeMap.texture_);
		} else {
			Krom.setRenderTarget(unit,cubeMap.renderTarget_);
		}
	}
	,setCubeMapDepth: function(unit,cubeMap) {
		if(cubeMap == null) {
			return;
		}
		Krom.setTextureDepth(unit,cubeMap.renderTarget_);
	}
	,setTexture: function(unit,texture) {
		if(texture == null) {
			return;
		}
		if(texture.texture_ != null) {
			Krom.setTexture(unit,texture.texture_);
		} else {
			Krom.setRenderTarget(unit,texture.renderTarget_);
		}
	}
	,setTextureDepth: function(unit,texture) {
		if(texture == null) {
			return;
		}
		Krom.setTextureDepth(unit,texture.renderTarget_);
	}
	,setTextureArray: function(unit,texture) {
	}
	,setVideoTexture: function(unit,texture) {
	}
	,setImageTexture: function(unit,texture) {
		if(texture == null) {
			return;
		}
		Krom.setImageTexture(unit,texture.texture_);
	}
	,setTextureParameters: function(texunit,uAddressing,vAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
		Krom.setTextureParameters(texunit,uAddressing,vAddressing,minificationFilter,magnificationFilter,mipmapFilter);
	}
	,setTexture3DParameters: function(texunit,uAddressing,vAddressing,wAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
		Krom.setTexture3DParameters(texunit,uAddressing,vAddressing,wAddressing,minificationFilter,magnificationFilter,mipmapFilter);
	}
	,setTextureCompareMode: function(texunit,enabled) {
		Krom.setTextureCompareMode(texunit,enabled);
	}
	,setCubeMapCompareMode: function(texunit,enabled) {
		Krom.setCubeMapCompareMode(texunit,enabled);
	}
	,maxBoundTextures: function() {
		return 8;
	}
	,setPipeline: function(pipeline) {
		pipeline.set();
	}
	,setStencilReferenceValue: function(value) {
	}
	,setBool: function(location,value) {
		Krom.setBool(location,value);
	}
	,setInt: function(location,value) {
		Krom.setInt(location,value);
	}
	,setInt2: function(location,value1,value2) {
	}
	,setInt3: function(location,value1,value2,value3) {
	}
	,setInt4: function(location,value1,value2,value3,value4) {
	}
	,setInts: function(location,values) {
	}
	,setFloat: function(location,value) {
		Krom.setFloat(location,value);
	}
	,setFloat2: function(location,value1,value2) {
		Krom.setFloat2(location,value1,value2);
	}
	,setFloat3: function(location,value1,value2,value3) {
		Krom.setFloat3(location,value1,value2,value3);
	}
	,setFloat4: function(location,value1,value2,value3,value4) {
		Krom.setFloat4(location,value1,value2,value3,value4);
	}
	,setFloats: function(location,values) {
		Krom.setFloats(location,values.buffer);
	}
	,setVector2: function(location,value) {
		Krom.setFloat2(location,value.x,value.y);
	}
	,setVector3: function(location,value) {
		Krom.setFloat3(location,value.x,value.y,value.z);
	}
	,setVector4: function(location,value) {
		Krom.setFloat4(location,value.x,value.y,value.z,value.w);
	}
	,setMatrix: function(location,matrix) {
		kha_krom_Graphics.mat[0] = matrix._00;
		kha_krom_Graphics.mat[1] = matrix._01;
		kha_krom_Graphics.mat[2] = matrix._02;
		kha_krom_Graphics.mat[3] = matrix._03;
		kha_krom_Graphics.mat[4] = matrix._10;
		kha_krom_Graphics.mat[5] = matrix._11;
		kha_krom_Graphics.mat[6] = matrix._12;
		kha_krom_Graphics.mat[7] = matrix._13;
		kha_krom_Graphics.mat[8] = matrix._20;
		kha_krom_Graphics.mat[9] = matrix._21;
		kha_krom_Graphics.mat[10] = matrix._22;
		kha_krom_Graphics.mat[11] = matrix._23;
		kha_krom_Graphics.mat[12] = matrix._30;
		kha_krom_Graphics.mat[13] = matrix._31;
		kha_krom_Graphics.mat[14] = matrix._32;
		kha_krom_Graphics.mat[15] = matrix._33;
		Krom.setMatrix(location,kha_krom_Graphics.mat.buffer);
	}
	,setMatrix3: function(location,matrix) {
		kha_krom_Graphics.mat[0] = matrix._00;
		kha_krom_Graphics.mat[1] = matrix._01;
		kha_krom_Graphics.mat[2] = matrix._02;
		kha_krom_Graphics.mat[3] = matrix._10;
		kha_krom_Graphics.mat[4] = matrix._11;
		kha_krom_Graphics.mat[5] = matrix._12;
		kha_krom_Graphics.mat[6] = matrix._20;
		kha_krom_Graphics.mat[7] = matrix._21;
		kha_krom_Graphics.mat[8] = matrix._22;
		Krom.setMatrix3(location,kha_krom_Graphics.mat.buffer);
	}
	,drawIndexedVertices: function(start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		Krom.drawIndexedVertices(start,count);
	}
	,drawIndexedVerticesInstanced: function(instanceCount,start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		Krom.drawIndexedVerticesInstanced(instanceCount,start,count);
	}
	,instancedRenderingAvailable: function() {
		return true;
	}
	,scissor: function(x,y,width,height) {
		Krom.scissor(x,y,width,height);
	}
	,disableScissor: function() {
		Krom.disableScissor();
	}
	,__class__: kha_krom_Graphics
};
var kha_krom_Sound = function(bytes) {
	kha_Sound.call(this);
	this.sampleRate = 44100;
	var count = bytes.length / 4 | 0;
	var this1 = new Float32Array(count);
	this.uncompressedData = this1;
	var _g = 0;
	var _g1 = count;
	while(_g < _g1) {
		var i = _g++;
		this.uncompressedData[i] = bytes.getFloat(i * 4);
	}
	this.compressedData = null;
};
$hxClasses["kha.krom.Sound"] = kha_krom_Sound;
kha_krom_Sound.__name__ = "kha.krom.Sound";
kha_krom_Sound.__super__ = kha_Sound;
kha_krom_Sound.prototype = $extend(kha_Sound.prototype,{
	uncompress: function(done) {
		done();
	}
	,unload: function() {
		kha_Sound.prototype.unload.call(this);
	}
	,__class__: kha_krom_Sound
});
var kha_math_FastVector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["kha.math.FastVector2"] = kha_math_FastVector2;
kha_math_FastVector2.__name__ = "kha.math.FastVector2";
kha_math_FastVector2.fromVector2 = function(v) {
	return new kha_math_FastVector2(v.x,v.y);
};
kha_math_FastVector2.prototype = {
	x: null
	,y: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector2(" + this.x + ", " + this.y + ")";
	}
	,__class__: kha_math_FastVector2
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_FastVector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["kha.math.FastVector3"] = kha_math_FastVector3;
kha_math_FastVector3.__name__ = "kha.math.FastVector3";
kha_math_FastVector3.fromVector3 = function(v) {
	return new kha_math_FastVector3(v.x,v.y,v.z);
};
kha_math_FastVector3.prototype = {
	x: null
	,y: null
	,z: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector3(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,__class__: kha_math_FastVector3
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_FastVector4 = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["kha.math.FastVector4"] = kha_math_FastVector4;
kha_math_FastVector4.__name__ = "kha.math.FastVector4";
kha_math_FastVector4.fromVector4 = function(v) {
	return new kha_math_FastVector4(v.x,v.y,v.z,v.w);
};
kha_math_FastVector4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		this.w *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector4(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";
	}
	,__class__: kha_math_FastVector4
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Matrix3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
$hxClasses["kha.math.Matrix3"] = kha_math_Matrix3;
kha_math_Matrix3.__name__ = "kha.math.Matrix3";
kha_math_Matrix3.fromFastMatrix3 = function(m) {
	return new kha_math_Matrix3(m._00,m._10,m._20,m._01,m._11,m._21,m._02,m._12,m._22);
};
kha_math_Matrix3.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_01: null
	,_11: null
	,_21: null
	,_02: null
	,_12: null
	,_22: null
	,__class__: kha_math_Matrix3
};
var kha_math_Matrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
$hxClasses["kha.math.Matrix4"] = kha_math_Matrix4;
kha_math_Matrix4.__name__ = "kha.math.Matrix4";
kha_math_Matrix4.fromFastMatrix4 = function(m) {
	return new kha_math_Matrix4(m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32,m._03,m._13,m._23,m._33);
};
kha_math_Matrix4.orthogonalProjection = function(left,right,bottom,top,zn,zf) {
	var tx = -(right + left) / (right - left);
	var ty = -(top + bottom) / (top - bottom);
	var tz = -(zf + zn) / (zf - zn);
	return new kha_math_Matrix4(2 / (right - left),0,0,tx,0,2 / (top - bottom),0,ty,0,0,-2 / (zf - zn),tz,0,0,0,1);
};
kha_math_Matrix4.perspectiveProjection = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	var uw = uh / aspect;
	return new kha_math_Matrix4(uw,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
kha_math_Matrix4.lookAt = function(eye,at,up) {
	var x = at.x - eye.x;
	var y = at.y - eye.y;
	var z = at.z - eye.z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var _this_x = x;
	var _this_y = y;
	var _this_z = z;
	var x1 = _this_x;
	var y1 = _this_y;
	var z1 = _this_z;
	if(z1 == null) {
		z1 = 0;
	}
	if(y1 == null) {
		y1 = 0;
	}
	if(x1 == null) {
		x1 = 0;
	}
	var zaxis_x = x1;
	var zaxis_y = y1;
	var zaxis_z = z1;
	var currentLength = Math.sqrt(zaxis_x * zaxis_x + zaxis_y * zaxis_y + zaxis_z * zaxis_z);
	if(currentLength != 0) {
		var mul = 1 / currentLength;
		zaxis_x *= mul;
		zaxis_y *= mul;
		zaxis_z *= mul;
	}
	var _x = zaxis_y * up.z - zaxis_z * up.y;
	var _y = zaxis_z * up.x - zaxis_x * up.z;
	var _z = zaxis_x * up.y - zaxis_y * up.x;
	var x2 = _x;
	var y2 = _y;
	var z2 = _z;
	if(z2 == null) {
		z2 = 0;
	}
	if(y2 == null) {
		y2 = 0;
	}
	if(x2 == null) {
		x2 = 0;
	}
	var _this_x1 = x2;
	var _this_y1 = y2;
	var _this_z1 = z2;
	var x3 = _this_x1;
	var y3 = _this_y1;
	var z3 = _this_z1;
	if(z3 == null) {
		z3 = 0;
	}
	if(y3 == null) {
		y3 = 0;
	}
	if(x3 == null) {
		x3 = 0;
	}
	var xaxis_x = x3;
	var xaxis_y = y3;
	var xaxis_z = z3;
	var currentLength1 = Math.sqrt(xaxis_x * xaxis_x + xaxis_y * xaxis_y + xaxis_z * xaxis_z);
	if(currentLength1 != 0) {
		var mul1 = 1 / currentLength1;
		xaxis_x *= mul1;
		xaxis_y *= mul1;
		xaxis_z *= mul1;
	}
	var _x1 = xaxis_y * zaxis_z - xaxis_z * zaxis_y;
	var _y1 = xaxis_z * zaxis_x - xaxis_x * zaxis_z;
	var _z1 = xaxis_x * zaxis_y - xaxis_y * zaxis_x;
	var x4 = _x1;
	var y4 = _y1;
	var z4 = _z1;
	if(z4 == null) {
		z4 = 0;
	}
	if(y4 == null) {
		y4 = 0;
	}
	if(x4 == null) {
		x4 = 0;
	}
	var yaxis_x = x4;
	var yaxis_y = y4;
	var yaxis_z = z4;
	return new kha_math_Matrix4(xaxis_x,xaxis_y,xaxis_z,-(xaxis_x * eye.x + xaxis_y * eye.y + xaxis_z * eye.z),yaxis_x,yaxis_y,yaxis_z,-(yaxis_x * eye.x + yaxis_y * eye.y + yaxis_z * eye.z),-zaxis_x,-zaxis_y,-zaxis_z,zaxis_x * eye.x + zaxis_y * eye.y + zaxis_z * eye.z,0,0,0,1);
};
kha_math_Matrix4.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_30: null
	,_01: null
	,_11: null
	,_21: null
	,_31: null
	,_02: null
	,_12: null
	,_22: null
	,_32: null
	,_03: null
	,_13: null
	,_23: null
	,_33: null
	,__class__: kha_math_Matrix4
};
var kha_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["kha.math.Vector2"] = kha_math_Vector2;
kha_math_Vector2.__name__ = "kha.math.Vector2";
kha_math_Vector2.prototype = {
	x: null
	,y: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		return length;
	}
	,__class__: kha_math_Vector2
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Vector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["kha.math.Vector3"] = kha_math_Vector3;
kha_math_Vector3.__name__ = "kha.math.Vector3";
kha_math_Vector3.prototype = {
	x: null
	,y: null
	,z: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		return length;
	}
	,__class__: kha_math_Vector3
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["kha.math.Vector4"] = kha_math_Vector4;
kha_math_Vector4.__name__ = "kha.math.Vector4";
kha_math_Vector4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		this.w *= mul;
		return length;
	}
	,__class__: kha_math_Vector4
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_netsync_Client = function() { };
$hxClasses["kha.netsync.Client"] = kha_netsync_Client;
kha_netsync_Client.__name__ = "kha.netsync.Client";
kha_netsync_Client.__isInterface__ = true;
kha_netsync_Client.prototype = {
	get_id: null
	,id: null
	,send: null
	,receive: null
	,onClose: null
	,__class__: kha_netsync_Client
	,__properties__: {get_id:"get_id"}
};
var kha_netsync_ControllerBuilder = function() { };
$hxClasses["kha.netsync.ControllerBuilder"] = kha_netsync_ControllerBuilder;
kha_netsync_ControllerBuilder.__name__ = "kha.netsync.ControllerBuilder";
var kha_netsync_Entity = function() { };
$hxClasses["kha.netsync.Entity"] = kha_netsync_Entity;
kha_netsync_Entity.__name__ = "kha.netsync.Entity";
kha_netsync_Entity.__isInterface__ = true;
kha_netsync_Entity.prototype = {
	_id: null
	,_size: null
	,_send: null
	,_receive: null
	,__class__: kha_netsync_Entity
};
var kha_netsync_LocalClient = function(id) {
	this.myId = id;
};
$hxClasses["kha.netsync.LocalClient"] = kha_netsync_LocalClient;
kha_netsync_LocalClient.__name__ = "kha.netsync.LocalClient";
kha_netsync_LocalClient.__interfaces__ = [kha_netsync_Client];
kha_netsync_LocalClient.prototype = {
	myId: null
	,send: function(bytes,mandatory) {
	}
	,receive: function(receiver) {
	}
	,onClose: function(close) {
	}
	,controllers: null
	,get_controllers: function() {
		return null;
	}
	,id: null
	,get_id: function() {
		return this.myId;
	}
	,__class__: kha_netsync_LocalClient
	,__properties__: {get_id:"get_id",get_controllers:"get_controllers"}
};
var kha_netsync_State = function(time,data) {
	this.time = time;
	this.data = data;
};
$hxClasses["kha.netsync.State"] = kha_netsync_State;
kha_netsync_State.__name__ = "kha.netsync.State";
kha_netsync_State.prototype = {
	time: null
	,data: null
	,__class__: kha_netsync_State
};
var kha_netsync_Session = function(maxPlayers,address,port) {
	this.ping = 1;
	this.currentPlayers = 0;
	this.controllers = new haxe_ds_IntMap();
	this.entities = new haxe_ds_IntMap();
	kha_netsync_Session.instance = this;
	this.maxPlayers = maxPlayers;
	this.address = address;
	this.port = port;
};
$hxClasses["kha.netsync.Session"] = kha_netsync_Session;
kha_netsync_Session.__name__ = "kha.netsync.Session";
kha_netsync_Session.the = function() {
	return kha_netsync_Session.instance;
};
kha_netsync_Session.prototype = {
	entities: null
	,controllers: null
	,maxPlayers: null
	,currentPlayers: null
	,ping: null
	,address: null
	,port: null
	,startCallback: null
	,refusedCallback: null
	,resetCallback: null
	,localClient: null
	,network: null
	,updateTaskId: null
	,pingTaskId: null
	,me: null
	,get_me: function() {
		return this.localClient;
	}
	,addEntity: function(entity) {
		var this1 = this.entities;
		var key = entity._id();
		this1.h[key] = entity;
	}
	,addController: function(controller) {
		haxe_Log.trace("Adding controller id " + controller._id(),{ fileName : "kha/netsync/Session.hx", lineNumber : 88, className : "kha.netsync.Session", methodName : "addController"});
		controller._inputBufferIndex = 0;
		var this1 = this.controllers;
		var key = controller._id();
		this1.h[key] = controller;
	}
	,sendControllerUpdate: function(id,bytes) {
		if(this.controllers.h.hasOwnProperty(id)) {
			if(this.controllers.h[id]._inputBuffer.length < this.controllers.h[id]._inputBufferIndex + 4 + bytes.length) {
				var newBuffer = new haxe_io_Bytes(new ArrayBuffer(this.controllers.h[id]._inputBufferIndex + 4 + bytes.length));
				newBuffer.blit(0,this.controllers.h[id]._inputBuffer,0,this.controllers.h[id]._inputBufferIndex);
				this.controllers.h[id]._inputBuffer = newBuffer;
			}
			this.controllers.h[id]._inputBuffer.setInt32(this.controllers.h[id]._inputBufferIndex,bytes.length);
			this.controllers.h[id]._inputBuffer.blit(this.controllers.h[id]._inputBufferIndex + 4,bytes,0,bytes.length);
			this.controllers.h[id]._inputBufferIndex += 4 + bytes.length;
		}
	}
	,sendPing: function() {
		var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
		bytes.b[0] = 4;
		bytes.setFloat(1,kha_Scheduler.realTime());
		this.sendToServer(bytes);
	}
	,sendPlayerUpdate: function() {
	}
	,receive: function(bytes,client) {
		switch(bytes.b[0]) {
		case 0:
			var index = bytes.b[1];
			this.localClient = new kha_netsync_LocalClient(index);
			kha_Scheduler.resetTime();
			this.startCallback();
			break;
		case 1:
			var time = bytes.getDouble(1);
			var offset = 9;
			var entity = this.entities.iterator();
			while(entity.hasNext()) {
				var entity1 = entity.next();
				entity1._receive(offset,bytes);
				offset += entity1._size();
			}
			kha_Scheduler.warp(time);
			break;
		case 3:
			switch(bytes.b[1]) {
			case 0:
				break;
			case 1:
				this.executeRPC(bytes);
				break;
			}
			break;
		case 4:
			var sendTime = bytes.getFloat(1);
			this.ping = kha_Scheduler.realTime() - sendTime;
			break;
		case 5:
			this.refusedCallback();
			break;
		case 6:
			this.currentPlayers = bytes.getInt32(1);
			break;
		}
	}
	,executeRPC: function(bytes) {
		var args = [];
		var syncId = bytes.getInt32(2);
		var index = 6;
		var classnamelength = bytes.getUInt16(index);
		index += 2;
		var classname = "";
		var _g = 0;
		var _g1 = classnamelength;
		while(_g < _g1) {
			var i = _g++;
			var code = bytes.b[index];
			classname += String.fromCodePoint(code);
			++index;
		}
		var methodnamelength = bytes.getUInt16(index);
		index += 2;
		var methodname = "";
		var _g2 = 0;
		var _g3 = methodnamelength;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var code1 = bytes.b[index];
			methodname += String.fromCodePoint(code1);
			++index;
		}
		while(index < bytes.length) {
			var type = bytes.b[index];
			++index;
			switch(type) {
			case 66:
				var value = bytes.b[index] == 1;
				++index;
				haxe_Log.trace("Bool: " + (value == null ? "null" : "" + value),{ fileName : "kha/netsync/Session.hx", lineNumber : 295, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(value);
				break;
			case 70:
				var value1 = bytes.getDouble(index);
				index += 8;
				haxe_Log.trace("Float: " + value1,{ fileName : "kha/netsync/Session.hx", lineNumber : 300, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(value1);
				break;
			case 73:
				var value2 = bytes.getInt32(index);
				index += 4;
				haxe_Log.trace("Int: " + value2,{ fileName : "kha/netsync/Session.hx", lineNumber : 305, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(value2);
				break;
			case 83:
				var length = bytes.getUInt16(index);
				index += 2;
				var str = "";
				var _g4 = 0;
				var _g5 = length;
				while(_g4 < _g5) {
					var i2 = _g4++;
					var code2 = bytes.b[index];
					str += String.fromCodePoint(code2);
					++index;
				}
				haxe_Log.trace("String: " + str,{ fileName : "kha/netsync/Session.hx", lineNumber : 315, className : "kha.netsync.Session", methodName : "executeRPC"});
				args.push(str);
				break;
			default:
				haxe_Log.trace("Unknown argument type.",{ fileName : "kha/netsync/Session.hx", lineNumber : 318, className : "kha.netsync.Session", methodName : "executeRPC"});
			}
		}
		if(syncId == -1) {
			Reflect.field($hxClasses[classname],methodname + "_remotely").apply(null,args);
		} else {
			Reflect.field(kha_netsync_SyncBuilder.objects[syncId],methodname + "_remotely").apply(kha_netsync_SyncBuilder.objects[syncId],args);
		}
	}
	,waitForStart: function(callback,refuseCallback,errorCallback,closeCallback,resCallback) {
		var _gthis = this;
		this.startCallback = callback;
		this.refusedCallback = refuseCallback;
		this.resetCallback = resCallback;
		this.network = new kha.netsync.Network(this.address,this.port,errorCallback,function() {
			closeCallback();
			_gthis.reset();
		});
		this.network.listen(function(bytes) {
			_gthis.receive(bytes);
		});
		this.updateTaskId = kha_Scheduler.addFrameTask($bind(this,this.update),0);
		this.ping = 1;
		this.pingTaskId = kha_Scheduler.addTimeTask($bind(this,this.sendPing),0,1);
	}
	,reset: function() {
		kha_Scheduler.removeFrameTask(this.updateTaskId);
		kha_Scheduler.removeTimeTask(this.pingTaskId);
		this.currentPlayers = 0;
		this.ping = 1;
		this.controllers = new haxe_ds_IntMap();
		this.entities = new haxe_ds_IntMap();
		this.resetCallback();
	}
	,update: function() {
		var controller = this.controllers.iterator();
		while(controller.hasNext()) {
			var controller1 = controller.next();
			if(controller1._inputBufferIndex > 0) {
				var bytes = new haxe_io_Bytes(new ArrayBuffer(22 + controller1._inputBufferIndex));
				bytes.b[0] = 2;
				bytes.setInt32(1,controller1._id());
				bytes.setDouble(5,kha_Scheduler.time());
				bytes.setInt32(13,kha_System.windowWidth(0));
				bytes.setInt32(17,kha_System.windowHeight(0));
				bytes.b[21] = 0;
				bytes.blit(22,controller1._inputBuffer,0,controller1._inputBufferIndex);
				this.sendToServer(bytes);
				controller1._inputBufferIndex = 0;
			}
		}
	}
	,sendToServer: function(bytes) {
		this.network.send(bytes,false);
	}
	,__class__: kha_netsync_Session
	,__properties__: {get_me:"get_me"}
};
var kha_netsync_SyncBuilder = function() { };
$hxClasses["kha.netsync.SyncBuilder"] = kha_netsync_SyncBuilder;
kha_netsync_SyncBuilder.__name__ = "kha.netsync.SyncBuilder";
var kha_simd_Float32x4 = function(_0,_1,_2,_3) {
	this._0 = _0;
	this._1 = _1;
	this._2 = _2;
	this._3 = _3;
};
$hxClasses["kha.simd.Float32x4"] = kha_simd_Float32x4;
kha_simd_Float32x4.__name__ = "kha.simd.Float32x4";
kha_simd_Float32x4.create = function() {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.loadAllFast = function(t) {
	return new kha_simd_Float32x4(t,t,t,t);
};
kha_simd_Float32x4.load = function(a,b,c,d) {
	return new kha_simd_Float32x4(a,b,c,d);
};
kha_simd_Float32x4.loadFast = function(a,b,c,d) {
	return new kha_simd_Float32x4(a,b,c,d);
};
kha_simd_Float32x4.get = function(t,index) {
	var value = 0;
	switch(index) {
	case 0:
		value = t._0;
		break;
	case 1:
		value = t._1;
		break;
	case 2:
		value = t._2;
		break;
	case 3:
		value = t._3;
		break;
	}
	return value;
};
kha_simd_Float32x4.getFast = function(t,index) {
	switch(index) {
	case 0:
		return t._0;
	case 1:
		return t._1;
	case 2:
		return t._2;
	case 3:
		return t._3;
	}
	return 0;
};
kha_simd_Float32x4.abs = function(t) {
	return new kha_simd_Float32x4(Math.abs(t._0),Math.abs(t._1),Math.abs(t._2),Math.abs(t._3));
};
kha_simd_Float32x4.add = function(a,b) {
	return new kha_simd_Float32x4(a._0 + b._0,a._1 + b._1,a._2 + b._2,a._3 + b._3);
};
kha_simd_Float32x4.div = function(a,b) {
	return new kha_simd_Float32x4(a._0 / b._0,a._1 / b._1,a._2 / b._2,a._3 / b._3);
};
kha_simd_Float32x4.mul = function(a,b) {
	return new kha_simd_Float32x4(a._0 * b._0,a._1 * b._1,a._2 * b._2,a._3 * b._3);
};
kha_simd_Float32x4.neg = function(t) {
	return new kha_simd_Float32x4(-t._0,-t._1,-t._2,-t._3);
};
kha_simd_Float32x4.reciprocalApproximation = function(t) {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.reciprocalSqrtApproximation = function(t) {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.sub = function(a,b) {
	return new kha_simd_Float32x4(a._0 - b._0,a._1 - b._1,a._2 - b._2,a._3 - b._3);
};
kha_simd_Float32x4.sqrt = function(t) {
	return new kha_simd_Float32x4(Math.sqrt(t._0),Math.sqrt(t._1),Math.sqrt(t._2),Math.sqrt(t._3));
};
kha_simd_Float32x4.prototype = {
	_0: null
	,_1: null
	,_2: null
	,_3: null
	,__class__: kha_simd_Float32x4
};
var zui_Handle = function(ops) {
	this.changed = false;
	this.dragY = 0;
	this.dragX = 0;
	this.dragEnabled = false;
	this.lastMaxY = 0.0;
	this.lastMaxX = 0.0;
	this.layout = 0;
	this.scrollEnabled = false;
	this.scrollOffset = 0.0;
	this.redraws = 2;
	this.texture = null;
	this.text = "";
	this.value = 0.0;
	this.color = -1;
	this.position = 0;
	this.selected = false;
	if(ops != null) {
		if(ops.selected != null) {
			this.selected = ops.selected;
		}
		if(ops.position != null) {
			this.position = ops.position;
		}
		if(ops.value != null) {
			this.value = ops.value;
		}
		if(ops.text != null) {
			this.text = ops.text;
		}
		if(ops.color != null) {
			this.color = ops.color;
		}
		if(ops.layout != null) {
			this.layout = ops.layout;
		}
	}
};
$hxClasses["zui.Handle"] = zui_Handle;
zui_Handle.__name__ = "zui.Handle";
zui_Handle.prototype = {
	selected: null
	,position: null
	,color: null
	,value: null
	,text: null
	,texture: null
	,redraws: null
	,scrollOffset: null
	,scrollEnabled: null
	,layout: null
	,lastMaxX: null
	,lastMaxY: null
	,dragEnabled: null
	,dragX: null
	,dragY: null
	,changed: null
	,children: null
	,nest: function(i,ops) {
		if(this.children == null) {
			this.children = new haxe_ds_IntMap();
		}
		var c = this.children.h[i];
		if(c == null) {
			c = new zui_Handle(ops);
			this.children.h[i] = c;
		}
		return c;
	}
	,unnest: function(i) {
		if(this.children != null) {
			this.children.remove(i);
		}
	}
	,__class__: zui_Handle
};
var zui_Canvas = function() { };
$hxClasses["zui.Canvas"] = zui_Canvas;
zui_Canvas.__name__ = "zui.Canvas";
zui_Canvas.draw = function(ui,canvas,g) {
	zui_Canvas.screenW = kha_System.windowWidth();
	zui_Canvas.screenH = kha_System.windowHeight();
	zui_Canvas.events = [];
	zui_Canvas._ui = ui;
	g.end();
	ui.begin(g);
	g.begin(false);
	ui.g = g;
	var _g = 0;
	var _g1 = canvas.elements;
	while(_g < _g1.length) {
		var elem = _g1[_g];
		++_g;
		if(elem.parent == null) {
			zui_Canvas.drawElement(ui,canvas,elem);
		}
	}
	g.end();
	ui.end();
	g.begin(false);
	return zui_Canvas.events;
};
zui_Canvas.drawElement = function(ui,canvas,element,px,py) {
	if(py == null) {
		py = 0.0;
	}
	if(px == null) {
		px = 0.0;
	}
	if(element == null || element.visible == false) {
		return;
	}
	var anchorOffset = zui_Canvas.getAnchorOffset(canvas,element);
	px += anchorOffset[0];
	py += anchorOffset[1];
	ui._x = canvas.x + (element.x * zui_Canvas._ui.ops.scaleFactor | 0) + px;
	ui._y = canvas.y + (element.y * zui_Canvas._ui.ops.scaleFactor | 0) + py;
	ui._w = element.width * zui_Canvas._ui.ops.scaleFactor | 0;
	var rotated = element.rotation != null && element.rotation != 0;
	if(rotated) {
		ui.g.pushRotation(element.rotation,ui._x + (element.width * zui_Canvas._ui.ops.scaleFactor | 0) / 2,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0) / 2);
	}
	switch(element.type) {
	case 0:
		var font = ui.ops.font;
		var size = ui.fontSize;
		var fontAsset = element.asset != null && StringTools.endsWith(element.asset,".ttf");
		if(fontAsset) {
			ui.ops.font = zui_Canvas.getAsset(canvas,element.asset);
		}
		ui.fontSize = element.height * zui_Canvas._ui.ops.scaleFactor | 0;
		var color = element.color_text;
		var defaultColor = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.TEXT_COL = color != null ? color : defaultColor;
		ui.text(element.text,element.alignment);
		ui.ops.font = font;
		ui.fontSize = size;
		break;
	case 1:
		var image = zui_Canvas.getAsset(canvas,element.asset);
		var fontAsset1 = element.asset != null && StringTools.endsWith(element.asset,".ttf");
		if(image != null && !fontAsset1) {
			ui.imageScrollAlign = false;
			var tint = element.color != null ? element.color : -1;
			if(ui.image(image,tint,element.height * zui_Canvas._ui.ops.scaleFactor | 0) == 3) {
				var e = element.event;
				if(e != null && e != "") {
					zui_Canvas.events.push(e);
				}
			}
			ui.imageScrollAlign = true;
		}
		break;
	case 2:
		var eh = ui.t.ELEMENT_H;
		var bh = ui.t.BUTTON_H;
		ui.t.ELEMENT_H = element.height;
		ui.t.BUTTON_H = element.height;
		var color1 = element.color;
		var defaultColor1 = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui.t.BUTTON_COL = color1 != null ? color1 : defaultColor1;
		var color2 = element.color_text;
		var defaultColor2 = zui_Canvas.getTheme(canvas.theme).BUTTON_TEXT_COL;
		ui.t.BUTTON_TEXT_COL = color2 != null ? color2 : defaultColor2;
		var color3 = element.color_hover;
		var defaultColor3 = zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL;
		ui.t.BUTTON_HOVER_COL = color3 != null ? color3 : defaultColor3;
		var color4 = element.color_press;
		var defaultColor4 = zui_Canvas.getTheme(canvas.theme).BUTTON_PRESSED_COL;
		ui.t.BUTTON_PRESSED_COL = color4 != null ? color4 : defaultColor4;
		if(ui.button(element.text,element.alignment)) {
			var e1 = element.event;
			if(e1 != null && e1 != "") {
				zui_Canvas.events.push(e1);
			}
		}
		ui.t.ELEMENT_H = eh;
		ui.t.BUTTON_H = bh;
		break;
	case 3:
		break;
	case 6:
		var color5 = element.color_text;
		var defaultColor5 = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.TEXT_COL = color5 != null ? color5 : defaultColor5;
		var color6 = element.color;
		var defaultColor6 = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui.t.ACCENT_COL = color6 != null ? color6 : defaultColor6;
		var color7 = element.color_hover;
		var defaultColor7 = zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL;
		ui.t.ACCENT_HOVER_COL = color7 != null ? color7 : defaultColor7;
		ui.check(zui_Canvas.h.nest(element.id),element.text);
		break;
	case 7:
		var color8 = element.color_text;
		var defaultColor8 = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.TEXT_COL = color8 != null ? color8 : defaultColor8;
		var color9 = element.color;
		var defaultColor9 = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui.t.ACCENT_COL = color9 != null ? color9 : defaultColor9;
		var color10 = element.color_hover;
		var defaultColor10 = zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL;
		ui.t.ACCENT_HOVER_COL = color10 != null ? color10 : defaultColor10;
		zui_Ext.inlineRadio(ui,zui_Canvas.h.nest(element.id),element.text.split(";"));
		break;
	case 8:
		var color11 = element.color_text;
		var defaultColor11 = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.TEXT_COL = color11 != null ? color11 : defaultColor11;
		var color12 = element.color_text;
		var defaultColor12 = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.LABEL_COL = color12 != null ? color12 : defaultColor12;
		var color13 = element.color;
		var defaultColor13 = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui.t.ACCENT_COL = color13 != null ? color13 : defaultColor13;
		var color14 = element.color;
		var defaultColor14 = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui.t.SEPARATOR_COL = color14 != null ? color14 : defaultColor14;
		var color15 = element.color_hover;
		var defaultColor15 = zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL;
		ui.t.ACCENT_HOVER_COL = color15 != null ? color15 : defaultColor15;
		ui.combo(zui_Canvas.h.nest(element.id),element.text.split(";"));
		break;
	case 9:
		var color16 = element.color_text;
		var defaultColor16 = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.TEXT_COL = color16 != null ? color16 : defaultColor16;
		var color17 = element.color_text;
		var defaultColor17 = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.LABEL_COL = color17 != null ? color17 : defaultColor17;
		var color18 = element.color;
		var defaultColor18 = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui.t.ACCENT_COL = color18 != null ? color18 : defaultColor18;
		var color19 = element.color_hover;
		var defaultColor19 = zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL;
		ui.t.ACCENT_HOVER_COL = color19 != null ? color19 : defaultColor19;
		ui.slider(zui_Canvas.h.nest(element.id),element.text,0.0,1.0,true,100,true,element.alignment);
		break;
	case 10:
		var color20 = element.color_text;
		var defaultColor20 = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.TEXT_COL = color20 != null ? color20 : defaultColor20;
		var color21 = element.color_text;
		var defaultColor21 = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.LABEL_COL = color21 != null ? color21 : defaultColor21;
		var color22 = element.color;
		var defaultColor22 = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui.t.ACCENT_COL = color22 != null ? color22 : defaultColor22;
		var color23 = element.color_hover;
		var defaultColor23 = zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL;
		ui.t.ACCENT_HOVER_COL = color23 != null ? color23 : defaultColor23;
		ui.textInput(zui_Canvas.h.nest(element.id),element.text,element.alignment);
		if(zui_Canvas.h.nest(element.id).changed) {
			var e2 = element.event;
			if(e2 != null && e2 != "") {
				zui_Canvas.events.push(e2);
			}
		}
		break;
	case 11:
		var color24 = element.color_text;
		var defaultColor24 = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.TEXT_COL = color24 != null ? color24 : defaultColor24;
		var color25 = element.color_text;
		var defaultColor25 = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui.t.LABEL_COL = color25 != null ? color25 : defaultColor25;
		var color26 = element.color;
		var defaultColor26 = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui.t.ACCENT_COL = color26 != null ? color26 : defaultColor26;
		var color27 = element.color_hover;
		var defaultColor27 = zui_Canvas.getTheme(canvas.theme).BUTTON_HOVER_COL;
		ui.t.ACCENT_HOVER_COL = color27 != null ? color27 : defaultColor27;
		zui_Ext.keyInput(ui,zui_Canvas.h.nest(element.id),element.text);
		break;
	case 12:
		var col = ui.g.get_color();
		var ui1 = ui.g;
		var color28 = element.color;
		var defaultColor28 = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui1.set_color(color28 != null ? color28 : defaultColor28);
		ui.g.fillRect(ui._x,ui._y,ui._w,element.height * zui_Canvas._ui.ops.scaleFactor | 0);
		ui.g.set_color(col);
		break;
	case 13:
		var col1 = ui.g.get_color();
		var ui2 = ui.g;
		var color29 = element.color;
		var defaultColor29 = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui2.set_color(color29 != null ? color29 : defaultColor29);
		ui.g.drawRect(ui._x,ui._y,ui._w,element.height * zui_Canvas._ui.ops.scaleFactor | 0,element.strength);
		ui.g.set_color(col1);
		break;
	case 14:
		var col2 = ui.g.get_color();
		var ui3 = ui.g;
		var color30 = element.color;
		var defaultColor30 = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui3.set_color(color30 != null ? color30 : defaultColor30);
		kha_graphics2_GraphicsExtension.fillCircle(ui.g,ui._x + (element.width * zui_Canvas._ui.ops.scaleFactor | 0) / 2,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0) / 2,ui._w / 2);
		ui.g.set_color(col2);
		break;
	case 15:
		var col3 = ui.g.get_color();
		var ui4 = ui.g;
		var color31 = element.color;
		var defaultColor31 = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui4.set_color(color31 != null ? color31 : defaultColor31);
		kha_graphics2_GraphicsExtension.drawCircle(ui.g,ui._x + (element.width * zui_Canvas._ui.ops.scaleFactor | 0) / 2,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0) / 2,ui._w / 2,element.strength);
		ui.g.set_color(col3);
		break;
	case 16:
		var col4 = ui.g.get_color();
		var ui5 = ui.g;
		var color32 = element.color;
		var defaultColor32 = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui5.set_color(color32 != null ? color32 : defaultColor32);
		ui.g.fillTriangle(ui._x + ui._w / 2,ui._y,ui._x,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0),ui._x + ui._w,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0));
		ui.g.set_color(col4);
		break;
	case 17:
		var col5 = ui.g.get_color();
		var ui6 = ui.g;
		var color33 = element.color;
		var defaultColor33 = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui6.set_color(color33 != null ? color33 : defaultColor33);
		ui.g.drawLine(ui._x + ui._w / 2,ui._y,ui._x,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0),element.strength);
		ui.g.drawLine(ui._x,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0),ui._x + ui._w,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0),element.strength);
		ui.g.drawLine(ui._x + ui._w,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0),ui._x + ui._w / 2,ui._y,element.strength);
		ui.g.set_color(col5);
		break;
	case 18:
		var col6 = ui.g.get_color();
		var progress = element.progress_at;
		var totalprogress = element.progress_total;
		var ui7 = ui.g;
		var color34 = element.color_progress;
		var defaultColor34 = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui7.set_color(color34 != null ? color34 : defaultColor34);
		ui.g.fillRect(ui._x,ui._y,ui._w / totalprogress * Math.min(progress,totalprogress),element.height * zui_Canvas._ui.ops.scaleFactor | 0);
		var ui8 = ui.g;
		var color35 = element.color;
		var defaultColor35 = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui8.set_color(color35 != null ? color35 : defaultColor35);
		ui.g.drawRect(ui._x,ui._y,ui._w,element.height * zui_Canvas._ui.ops.scaleFactor | 0,element.strength);
		ui.g.set_color(col6);
		break;
	case 19:
		var col7 = ui.g.get_color();
		var progress1 = element.progress_at;
		var totalprogress1 = element.progress_total;
		var ui9 = ui.g;
		var color36 = element.color_progress;
		var defaultColor36 = zui_Canvas.getTheme(canvas.theme).TEXT_COL;
		ui9.set_color(color36 != null ? color36 : defaultColor36);
		kha_graphics2_GraphicsExtension.drawArc(ui.g,ui._x + (element.width * zui_Canvas._ui.ops.scaleFactor | 0) / 2,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0) / 2,ui._w / 2,-Math.PI / 2,Math.PI * 2 / totalprogress1 * progress1 - Math.PI / 2,element.strength);
		var ui10 = ui.g;
		var color37 = element.color;
		var defaultColor37 = zui_Canvas.getTheme(canvas.theme).BUTTON_COL;
		ui10.set_color(color37 != null ? color37 : defaultColor37);
		kha_graphics2_GraphicsExtension.fillCircle(ui.g,ui._x + (element.width * zui_Canvas._ui.ops.scaleFactor | 0) / 2,ui._y + (element.height * zui_Canvas._ui.ops.scaleFactor | 0) / 2,ui._w / 2 - 10);
		ui.g.set_color(col7);
		break;
	}
	if(element.children != null) {
		var _g1 = 0;
		var _g2 = element.children;
		while(_g1 < _g2.length) {
			var id = _g2[_g1];
			++_g1;
			zui_Canvas.drawElement(ui,canvas,zui_Canvas.elemById(canvas,id),(element.x * zui_Canvas._ui.ops.scaleFactor | 0) + px,(element.y * zui_Canvas._ui.ops.scaleFactor | 0) + py);
		}
	}
	if(rotated) {
		ui.g.popTransformation();
	}
};
zui_Canvas.getText = function(canvas,e) {
	return e.text;
};
zui_Canvas.getAsset = function(canvas,asset) {
	var _g = 0;
	var _g1 = canvas.assets;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		if(a.name == asset) {
			return zui_Canvas.assetMap.h[a.id];
		}
	}
	return null;
};
zui_Canvas.getElementId = function(canvas) {
	if(zui_Canvas.elemId == -1) {
		var _g = 0;
		var _g1 = canvas.elements;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(zui_Canvas.elemId < e.id) {
				zui_Canvas.elemId = e.id;
			}
		}
	}
	return ++zui_Canvas.elemId;
};
zui_Canvas.getAssetId = function(canvas) {
	if(zui_Canvas.assetId == -1) {
		var _g = 0;
		var _g1 = canvas.assets;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(zui_Canvas.assetId < a.id) {
				zui_Canvas.assetId = a.id;
			}
		}
	}
	return ++zui_Canvas.assetId;
};
zui_Canvas.elemById = function(canvas,id) {
	var _g = 0;
	var _g1 = canvas.elements;
	while(_g < _g1.length) {
		var e = _g1[_g];
		++_g;
		if(e.id == id) {
			return e;
		}
	}
	return null;
};
zui_Canvas.scaled = function(f) {
	return f * zui_Canvas._ui.ops.scaleFactor | 0;
};
zui_Canvas.getColor = function(color,defaultColor) {
	if(color != null) {
		return color;
	} else {
		return defaultColor;
	}
};
zui_Canvas.getTheme = function(theme) {
	var _g = 0;
	var _g1 = zui_Canvas.themes;
	while(_g < _g1.length) {
		var t = _g1[_g];
		++_g;
		if(t.NAME == theme) {
			return t;
		}
	}
	return null;
};
zui_Canvas.getAnchorOffset = function(canvas,element) {
	var boxWidth;
	var boxHeight;
	var offsetX = 0.0;
	var offsetY = 0.0;
	if(element.parent == null) {
		boxWidth = canvas.width;
		boxHeight = canvas.height;
	} else {
		var parent = zui_Canvas.elemById(canvas,element.parent);
		boxWidth = parent.width * zui_Canvas._ui.ops.scaleFactor | 0;
		boxHeight = parent.height * zui_Canvas._ui.ops.scaleFactor | 0;
	}
	switch(element.anchor) {
	case 1:
		offsetX += boxWidth / 2 - (element.width * zui_Canvas._ui.ops.scaleFactor | 0) / 2;
		break;
	case 2:
		offsetX += boxWidth - (element.width * zui_Canvas._ui.ops.scaleFactor | 0);
		break;
	case 3:
		offsetY += boxHeight / 2 - (element.height * zui_Canvas._ui.ops.scaleFactor | 0) / 2;
		break;
	case 4:
		offsetX += boxWidth / 2 - (element.width * zui_Canvas._ui.ops.scaleFactor | 0) / 2;
		offsetY += boxHeight / 2 - (element.height * zui_Canvas._ui.ops.scaleFactor | 0) / 2;
		break;
	case 5:
		offsetX += boxWidth - (element.width * zui_Canvas._ui.ops.scaleFactor | 0);
		offsetY += boxHeight / 2 - (element.height * zui_Canvas._ui.ops.scaleFactor | 0) / 2;
		break;
	case 6:
		offsetY += boxHeight - (element.height * zui_Canvas._ui.ops.scaleFactor | 0);
		break;
	case 7:
		offsetX += boxWidth / 2 - (element.width * zui_Canvas._ui.ops.scaleFactor | 0) / 2;
		offsetY += boxHeight - (element.height * zui_Canvas._ui.ops.scaleFactor | 0);
		break;
	case 8:
		offsetX += boxWidth - (element.width * zui_Canvas._ui.ops.scaleFactor | 0);
		offsetY += boxHeight - (element.height * zui_Canvas._ui.ops.scaleFactor | 0);
		break;
	}
	return [offsetX,offsetY];
};
var zui_Ext = function() { };
$hxClasses["zui.Ext"] = zui_Ext;
zui_Ext.__name__ = "zui.Ext";
zui_Ext.floatInput = function(ui,handle,label,align) {
	if(align == null) {
		align = 0;
	}
	if(label == null) {
		label = "";
	}
	handle.text = handle.value == null ? "null" : "" + handle.value;
	var text = ui.textInput(handle,label,align);
	handle.value = parseFloat(text);
	return handle.value;
};
zui_Ext.keyInput = function(ui,handle,label,align) {
	if(align == null) {
		align = 0;
	}
	if(label == null) {
		label = "";
	}
	if(!ui.isVisible(ui.t.ELEMENT_H * ui.ops.scaleFactor)) {
		ui.endElement();
		return handle.value | 0;
	}
	var hover = ui.getHover();
	if(hover && zui_Zui.onTextHover != null) {
		zui_Zui.onTextHover();
	}
	ui.g.set_color(hover ? ui.t.ACCENT_HOVER_COL : ui.t.ACCENT_COL);
	var g = ui.g;
	var fill = ui.t.FILL_ACCENT_BG;
	var x = ui._x + ui.buttonOffsetY;
	var y = ui._y + ui.buttonOffsetY;
	var w = ui._w - ui.buttonOffsetY * 2;
	var h = ui.t.BUTTON_H * ui.ops.scaleFactor;
	var strength = 0.0;
	if(strength == 0.0) {
		strength = 1;
	}
	if(!ui.enabled) {
		ui.fadeColor();
	}
	if(fill) {
		g.fillRect(x,y - 1,w,h + 1);
	} else {
		g.drawRect(x,y,w,h,strength);
	}
	var startEdit = ui.getReleased() || ui.tabPressed;
	if(ui.textSelectedHandle != handle && startEdit) {
		ui.startTextEdit(handle);
	}
	if(ui.textSelectedHandle == handle) {
		zui_Ext.listenToKey(ui,handle);
	} else {
		handle.changed = false;
	}
	if(label != "") {
		ui.g.set_color(ui.t.LABEL_COL);
		var labelAlign = align == 2 ? 0 : 2;
		var xOffset = labelAlign == 0 ? 7 : 0;
		ui.drawString(ui.g,label,xOffset,0,labelAlign);
	}
	handle.text = zui_Ext.keycodeToString(handle.value | 0);
	ui.g.set_color(ui.t.TEXT_COL);
	if(ui.textSelectedHandle != handle) {
		ui.drawString(ui.g,handle.text,null,0,align);
	} else {
		ui.drawString(ui.g,ui.textSelected,null,0,align);
	}
	ui.endElement();
	return handle.value | 0;
};
zui_Ext.listenToKey = function(ui,handle) {
	if(ui.isKeyDown) {
		handle.value = ui.key;
		handle.changed = ui.changed = true;
		ui.textSelectedHandle = null;
		ui.isTyping = false;
		if(kha_input_Keyboard.get() != null) {
			kha_input_Keyboard.get().hide();
		}
	} else {
		ui.textSelected = "Press a key...";
	}
};
zui_Ext.list = function(ui,handle,ar,opts) {
	var selected = 0;
	if(opts == null) {
		opts = { };
	}
	var addCb = opts.addCb != null ? opts.addCb : function(name) {
		ar.push(name);
	};
	var removeCb = opts.removeCb != null ? opts.removeCb : function(i) {
		ar.splice(i,1);
	};
	var getNameCb = opts.getNameCb != null ? opts.getNameCb : function(i1) {
		return ar[i1];
	};
	var setNameCb = opts.setNameCb != null ? opts.setNameCb : function(i2,name1) {
		ar[i2] = name1;
	};
	var getLabelCb = opts.getLabelCb != null ? opts.getLabelCb : function(i3) {
		return "";
	};
	var itemDrawCb = opts.itemDrawCb;
	var showRadio = opts.showRadio != null && opts.showRadio;
	var editable = opts.editable != null ? opts.editable : true;
	var showAdd = opts.showAdd != null ? opts.showAdd : true;
	var addLabel = opts.addLabel != null ? opts.addLabel : "Add";
	var i4 = 0;
	while(i4 < ar.length) {
		if(showRadio) {
			ui.row([0.12,0.68,0.2]);
			if(ui.radio(handle.nest(0),i4,"")) {
				selected = i4;
			}
		} else {
			ui.row([0.8,0.2]);
		}
		var itemHandle = handle.nest(i4);
		itemHandle.text = getNameCb(i4);
		if(editable) {
			setNameCb(i4,ui.textInput(itemHandle,getLabelCb(i4)));
		} else {
			ui.text(getNameCb(i4));
		}
		if(ui.button("X")) {
			removeCb(i4);
		} else {
			++i4;
		}
		if(itemDrawCb != null) {
			itemDrawCb(itemHandle.nest(i4),i4 - 1);
		}
	}
	if(showAdd && ui.button(addLabel)) {
		addCb("untitled");
	}
	return selected;
};
zui_Ext.panelList = function(ui,handle,ar,addCb,removeCb,getNameCb,setNameCb,itemDrawCb,editable,showAdd,addLabel) {
	if(addLabel == null) {
		addLabel = "Add";
	}
	if(showAdd == null) {
		showAdd = true;
	}
	if(editable == null) {
		editable = true;
	}
	if(addCb == null) {
		addCb = function(name) {
			ar.push(name);
		};
	}
	if(removeCb == null) {
		removeCb = function(i) {
			ar.splice(i,1);
		};
	}
	if(getNameCb == null) {
		getNameCb = function(i1) {
			return ar[i1];
		};
	}
	if(setNameCb == null) {
		setNameCb = function(i2,name1) {
			ar[i2] = name1;
		};
	}
	var i3 = 0;
	while(i3 < ar.length) {
		ui.row([0.12,0.68,0.2]);
		var expanded = ui.panel(handle.nest(i3),"");
		var itemHandle = handle.nest(i3);
		if(editable) {
			setNameCb(i3,ui.textInput(itemHandle,getNameCb(i3)));
		} else {
			ui.text(getNameCb(i3));
		}
		if(ui.button("X")) {
			removeCb(i3);
		} else {
			++i3;
		}
		if(itemDrawCb != null && expanded) {
			itemDrawCb(itemHandle.nest(i3),i3 - 1);
		}
	}
	if(showAdd && ui.button(addLabel)) {
		addCb("untitled");
	}
};
zui_Ext.colorField = function(ui,handle,alpha) {
	if(alpha == null) {
		alpha = false;
	}
	ui.g.set_color(handle.color);
	var g = ui.g;
	var x = ui._x + 2;
	var y = ui._y + ui.buttonOffsetY;
	var w = ui._w - 4;
	var h = ui.t.BUTTON_H * ui.ops.scaleFactor;
	var strength = 0.0;
	if(strength == 0.0) {
		strength = 1;
	}
	if(!ui.enabled) {
		ui.fadeColor();
	}
	g.fillRect(x,y - 1,w,h + 1);
	ui.g.set_color(ui.getHover() ? ui.t.ACCENT_HOVER_COL : ui.t.ACCENT_COL);
	var g1 = ui.g;
	var x1 = ui._x + 2;
	var y1 = ui._y + ui.buttonOffsetY;
	var w1 = ui._w - 4;
	var h1 = ui.t.BUTTON_H * ui.ops.scaleFactor;
	var strength1 = 1.0;
	if(strength1 == null) {
		strength1 = 0.0;
	}
	if(strength1 == 0.0) {
		strength1 = 1;
	}
	if(!ui.enabled) {
		ui.fadeColor();
	}
	g1.drawRect(x1,y1,w1,h1,strength1);
	if(ui.getStarted()) {
		zui_Popup.showCustom(new zui_Zui(ui.ops),function(ui1) {
			zui_Ext.colorWheel(ui1,handle,alpha);
		},ui.inputX | 0,ui.inputY | 0,200,500);
	}
	ui.endElement();
	return handle.color;
};
zui_Ext.colorPicker = function(ui,handle,alpha) {
	if(alpha == null) {
		alpha = false;
	}
	var r = ui.slider(handle.nest(0,{ value : ((handle.color & 16711680) >>> 16) * 0.00392156862745098}),"R",0,1,true);
	var g = ui.slider(handle.nest(1,{ value : ((handle.color & 65280) >>> 8) * 0.00392156862745098}),"G",0,1,true);
	var b = ui.slider(handle.nest(2,{ value : (handle.color & 255) * 0.00392156862745098}),"B",0,1,true);
	var a = (handle.color >>> 24) * 0.00392156862745098;
	if(alpha) {
		a = ui.slider(handle.nest(3,{ value : a}),"A",0,1,true);
	}
	var col = kha__$Color_Color_$Impl_$.fromFloats(r,g,b,a);
	ui.text("",2,col);
	return col;
};
zui_Ext.initPath = function(handle,systemId) {
	handle.text = systemId == "Windows" ? "C:\\Users" : "/";
};
zui_Ext.fileBrowser = function(ui,handle,foldersOnly) {
	if(foldersOnly == null) {
		foldersOnly = false;
	}
	var sep = "/";
	var cmd = "ls ";
	var systemId = kha_System.get_systemId();
	if(systemId == "Windows") {
		cmd = "dir /b ";
		if(foldersOnly) {
			cmd += "/ad ";
		}
		sep = "\\";
		handle.text = StringTools.replace(handle.text,"\\\\","\\");
		handle.text = StringTools.replace(handle.text,"\r","");
	}
	if(handle.text == "") {
		zui_Ext.initPath(handle,systemId);
	}
	var save = Krom.getFilesLocation() + sep + zui_Ext.dataPath + "dir.txt";
	if(handle.text != zui_Ext.lastPath) {
		Krom.sysCommand(cmd + "\"" + handle.text + "\"" + " > " + "\"" + save + "\"");
	}
	zui_Ext.lastPath = handle.text;
	var str = haxe_io_Bytes.ofData(Krom.loadBlob(save)).toString();
	var files = str.split("\n");
	var i1 = handle.text.indexOf("/");
	var i2 = handle.text.indexOf("\\");
	var nested = i1 > -1 && handle.text.length - 1 > i1 || i2 > -1 && handle.text.length - 1 > i2;
	handle.changed = false;
	if(nested && ui.button("..",0)) {
		handle.changed = ui.changed = true;
		handle.text = handle.text.substring(0,handle.text.lastIndexOf(sep));
		if(handle.text.length == 2 && handle.text.charAt(1) == ":") {
			handle.text += sep;
		}
	}
	var _g = 0;
	while(_g < files.length) {
		var f = files[_g];
		++_g;
		if(f == "" || f.charAt(0) == ".") {
			continue;
		}
		if(ui.button(f,0)) {
			handle.changed = ui.changed = true;
			if(handle.text.charAt(handle.text.length - 1) != sep) {
				handle.text += sep;
			}
			handle.text += f;
		}
	}
	return handle.text;
};
zui_Ext.inlineRadio = function(ui,handle,texts,align) {
	if(align == null) {
		align = 1;
	}
	if(!ui.isVisible(ui.t.ELEMENT_H * ui.ops.scaleFactor)) {
		ui.endElement();
		return handle.position;
	}
	if(ui.getReleased()) {
		if(++handle.position >= texts.length) {
			handle.position = 0;
		}
		handle.changed = ui.changed = true;
	} else {
		handle.changed = false;
	}
	var hover = ui.getHover();
	zui_Ext.drawInlineRadio(ui,texts[handle.position],hover,align);
	ui.endElement();
	return handle.position;
};
zui_Ext.drawInlineRadio = function(ui,text,hover,align) {
	if(align == null) {
		align = 1;
	}
	if(hover) {
		ui.g.set_color(ui.t.ACCENT_HOVER_COL);
		ui.g.fillRect(ui._x + ui.buttonOffsetY,ui._y + ui.buttonOffsetY,ui._w - ui.buttonOffsetY * 2,ui.t.BUTTON_H * ui.ops.scaleFactor);
	} else {
		ui.g.set_color(ui.t.ACCENT_COL);
		if(!ui.enabled) {
			ui.fadeColor();
		}
		ui.g.drawRect(ui._x + ui.buttonOffsetY,ui._y + ui.buttonOffsetY,ui._w - ui.buttonOffsetY * 2,ui.t.BUTTON_H * ui.ops.scaleFactor);
	}
	ui.g.set_color(ui.t.TEXT_COL);
	ui.drawString(ui.g,text,ui.t.TEXT_OFFSET * ui.ops.scaleFactor,0,align);
};
zui_Ext.colorWheel = function(ui,handle,alpha,w,rowAlign,colorPreview) {
	if(colorPreview == null) {
		colorPreview = true;
	}
	if(rowAlign == null) {
		rowAlign = false;
	}
	if(alpha == null) {
		alpha = false;
	}
	if(w == null) {
		w = ui._w;
	}
	zui_Ext.rgbToHsv(((handle.color & 16711680) >>> 16) * 0.00392156862745098,((handle.color & 65280) >>> 8) * 0.00392156862745098,(handle.color & 255) * 0.00392156862745098,zui_Ext.ar);
	var chue = zui_Ext.ar[0];
	var csat = zui_Ext.ar[1];
	var cval = zui_Ext.ar[2];
	var calpha = (handle.color >>> 24) * 0.00392156862745098;
	var px = ui._x;
	var py = ui._y;
	var scroll = ui.currentWindow != null && ui.currentWindow.scrollEnabled;
	if(!scroll) {
		w -= ui.t.SCROLL_W * ui.ops.scaleFactor | 0;
		px += (ui.t.SCROLL_W * ui.ops.scaleFactor | 0) / 2;
	}
	ui.image(ui.ops.color_wheel,kha__$Color_Color_$Impl_$.fromFloats(cval,cval,cval));
	var ph = ui._y - py;
	var ox = px + w / 2;
	var oy = py + ph / 2;
	var cw = w * 0.7;
	var cwh = cw / 2;
	var cx = ox;
	var cy = oy + csat * cwh;
	var theta = chue * (Math.PI * 2.0);
	var cx2 = Math.cos(theta) * (cx - ox) - Math.sin(theta) * (cy - oy) + ox;
	var cy2 = Math.sin(theta) * (cx - ox) + Math.cos(theta) * (cy - oy) + oy;
	cx = cx2;
	cy = cy2;
	ui.g.set_color(-16777216);
	ui.g.fillRect(cx - 3 * ui.ops.scaleFactor,cy - 3 * ui.ops.scaleFactor,6 * ui.ops.scaleFactor,6 * ui.ops.scaleFactor);
	ui.g.set_color(-1);
	ui.g.fillRect(cx - 2 * ui.ops.scaleFactor,cy - 2 * ui.ops.scaleFactor,4 * ui.ops.scaleFactor,4 * ui.ops.scaleFactor);
	if(rowAlign) {
		if(alpha) {
			ui.row([0.33333333333333331,0.33333333333333331,0.33333333333333331]);
		} else {
			ui.row([0.5,0.5]);
		}
	}
	var valHandle = handle.nest(0);
	valHandle.value = Math.round(cval * 100) / 100;
	cval = ui.slider(valHandle,"Value",0.0,1.0,true);
	if(valHandle.changed) {
		handle.changed = ui.changed = true;
	} else {
		handle.changed = false;
	}
	if(alpha) {
		var alphaHandle = handle.nest(1,{ value : Math.round(calpha * 100) / 100});
		calpha = ui.slider(alphaHandle,"Alpha",0.0,1.0,true);
		if(alphaHandle.changed) {
			handle.changed = ui.changed = true;
		}
	}
	var gx = ox + ui._windowX;
	var gy = oy + ui._windowY;
	if(ui.inputStarted && ui.getInputInRect(gx - cwh,gy - cwh,cw,cw)) {
		zui_Ext.wheelSelectedHande = handle;
	}
	if(ui.inputReleased) {
		zui_Ext.wheelSelectedHande = null;
	}
	if(ui.inputDown && zui_Ext.wheelSelectedHande == handle) {
		var vx = gx - ui.inputX;
		var vy = gy - ui.inputY;
		csat = Math.min(Math.sqrt(vx * vx + vy * vy),cwh) / cwh;
		var angle = Math.atan2(ui.inputX - gx,ui.inputY - gy);
		if(angle < 0) {
			angle = Math.PI + (Math.PI - Math.abs(angle));
		}
		angle = Math.PI * 2 - angle;
		chue = angle / (Math.PI * 2);
		handle.changed = ui.changed = true;
	}
	zui_Ext.hsvToRgb(chue,csat,cval,zui_Ext.ar);
	handle.color = kha__$Color_Color_$Impl_$.fromFloats(zui_Ext.ar[0],zui_Ext.ar[1],zui_Ext.ar[2],calpha);
	if(colorPreview) {
		ui.text("",2,handle.color);
	}
	return handle.color;
};
zui_Ext.textArea = function(ui,handle,align,editable) {
	if(editable == null) {
		editable = true;
	}
	if(align == null) {
		align = 0;
	}
	handle.text = StringTools.replace(handle.text,"\t","    ");
	var lines = handle.text.split("\n");
	var selected = ui.textSelectedHandle == handle;
	var cursorStartX = ui.cursorX;
	var keyPressed = selected && ui.isKeyPressed;
	ui.highlightOnSelect = false;
	ui.tabSwitchEnabled = false;
	ui.g.set_color(ui.t.SEPARATOR_COL);
	var g = ui.g;
	var x = ui._x + ui.buttonOffsetY;
	var y = ui._y + ui.buttonOffsetY;
	var w = ui._w - ui.buttonOffsetY * 2;
	var h = lines.length * (ui.t.ELEMENT_H * ui.ops.scaleFactor) - ui.buttonOffsetY * 2;
	var strength = 0.0;
	if(strength == 0.0) {
		strength = 1;
	}
	if(!ui.enabled) {
		ui.fadeColor();
	}
	g.fillRect(x,y - 1,w,h + 1);
	var _g = 0;
	var _g1 = lines.length;
	while(_g < _g1) {
		var i = _g++;
		if(!selected && ui.getHover() || selected && i == handle.position) {
			handle.position = i;
			handle.text = lines[i];
			ui.textInput(handle,"",align,editable);
			if(keyPressed && ui.key != 13) {
				lines[i] = ui.textSelected;
			}
		} else {
			ui.text(lines[i],align);
		}
		ui._y -= ui.t.ELEMENT_OFFSET * ui.ops.scaleFactor;
	}
	ui._y += ui.t.ELEMENT_OFFSET * ui.ops.scaleFactor;
	if(keyPressed) {
		if(ui.key == 40 && handle.position < lines.length - 1) {
			handle.position++;
		}
		if(ui.key == 38 && handle.position > 0) {
			handle.position--;
		}
		if(editable && ui.key == 13) {
			handle.position++;
			lines.splice(handle.position,0,HxOverrides.substr(lines[handle.position - 1],ui.cursorX,null));
			lines[handle.position - 1] = HxOverrides.substr(lines[handle.position - 1],0,ui.cursorX);
			ui.startTextEdit(handle);
			ui.cursorX = ui.highlightAnchor = 0;
		}
		if(editable && ui.key == 8 && cursorStartX == 0 && handle.position > 0) {
			handle.position--;
			ui.cursorX = ui.highlightAnchor = lines[handle.position].length;
			lines[handle.position] += lines[handle.position + 1];
			lines.splice(handle.position + 1,1);
		}
		ui.textSelected = lines[handle.position];
	}
	ui.highlightOnSelect = true;
	ui.tabSwitchEnabled = true;
	handle.text = lines.join("\n");
	return handle.text;
};
zui_Ext.keycodeToString = function(keycode) {
	switch(keycode) {
	case -1:
		return "None";
	case 0:
		return "Unknown";
	case 1:
		return "Back";
	case 3:
		return "Cancel";
	case 6:
		return "Help";
	case 8:
		return "Backspace";
	case 9:
		return "Tab";
	case 12:
		return "Clear";
	case 13:
		return "Return";
	case 16:
		return "Shift";
	case 17:
		return "Ctrl";
	case 18:
		return "Alt";
	case 19:
		return "Pause";
	case 20:
		return "CapsLock";
	case 21:
		return "Kana";
	case 22:
		return "Eisu";
	case 23:
		return "Junja";
	case 24:
		return "Final";
	case 25:
		return "Hanja";
	case 27:
		return "Esc";
	case 28:
		return "Convert";
	case 29:
		return "NonConvert";
	case 30:
		return "Accept";
	case 31:
		return "ModeChange";
	case 32:
		return "Space";
	case 33:
		return "PageUp";
	case 34:
		return "PageDown";
	case 35:
		return "End";
	case 36:
		return "Home";
	case 37:
		return "Left";
	case 38:
		return "Up";
	case 39:
		return "Right";
	case 40:
		return "Down";
	case 41:
		return "Select";
	case 42:
		return "Print";
	case 43:
		return "Execute";
	case 44:
		return "PrintScreen";
	case 45:
		return "Insert";
	case 46:
		return "Delete";
	case 58:
		return "Colon";
	case 59:
		return "Semicolon";
	case 60:
		return "LessThan";
	case 61:
		return "Equals";
	case 62:
		return "GreaterThan";
	case 63:
		return "QuestionMark";
	case 64:
		return "At";
	case 91:
		return "Win";
	case 93:
		return "ContextMenu";
	case 95:
		return "Sleep";
	case 96:
		return "Numpad0";
	case 97:
		return "Numpad1";
	case 98:
		return "Numpad2";
	case 99:
		return "Numpad3";
	case 100:
		return "Numpad4";
	case 101:
		return "Numpad5";
	case 102:
		return "Numpad6";
	case 103:
		return "Numpad7";
	case 104:
		return "Numpad8";
	case 105:
		return "Numpad9";
	case 106:
		return "Multiply";
	case 107:
		return "Add";
	case 108:
		return "Separator";
	case 109:
		return "Subtract";
	case 110:
		return "Decimal";
	case 111:
		return "Divide";
	case 112:
		return "F1";
	case 113:
		return "F2";
	case 114:
		return "F3";
	case 115:
		return "F4";
	case 116:
		return "F5";
	case 117:
		return "F6";
	case 118:
		return "F7";
	case 119:
		return "F8";
	case 120:
		return "F9";
	case 121:
		return "F10";
	case 122:
		return "F11";
	case 123:
		return "F12";
	case 124:
		return "F13";
	case 125:
		return "F14";
	case 126:
		return "F15";
	case 127:
		return "F16";
	case 128:
		return "F17";
	case 129:
		return "F18";
	case 130:
		return "F19";
	case 131:
		return "F20";
	case 132:
		return "F21";
	case 133:
		return "F22";
	case 134:
		return "F23";
	case 135:
		return "F24";
	case 144:
		return "NumLock";
	case 145:
		return "ScrollLock";
	case 146:
		return "WinOemFjJisho";
	case 147:
		return "WinOemFjMasshou";
	case 148:
		return "WinOemFjTouroku";
	case 149:
		return "WinOemFjLoya";
	case 150:
		return "WinOemFjRoya";
	case 160:
		return "Circumflex";
	case 161:
		return "Exclamation";
	case 162:
		return "DoubleQuote";
	case 163:
		return "Hash";
	case 164:
		return "Dollar";
	case 165:
		return "Percent";
	case 166:
		return "Ampersand";
	case 167:
		return "Underscore";
	case 168:
		return "OpenParen";
	case 169:
		return "CloseParen";
	case 170:
		return "Asterisk";
	case 171:
		return "Plus";
	case 172:
		return "Pipe";
	case 173:
		return "HyphenMinus";
	case 174:
		return "OpenCurlyBracket";
	case 175:
		return "CloseCurlyBracket";
	case 176:
		return "Tilde";
	case 181:
		return "VolumeMute";
	case 182:
		return "VolumeDown";
	case 183:
		return "VolumeUp";
	case 188:
		return "Comma";
	case 190:
		return "Period";
	case 191:
		return "Slash";
	case 192:
		return "BackQuote";
	case 219:
		return "OpenBracket";
	case 220:
		return "BackSlash";
	case 221:
		return "CloseBracket";
	case 222:
		return "Quote";
	case 224:
		return "Meta";
	case 225:
		return "AltGr";
	case 227:
		return "WinIcoHelp";
	case 228:
		return "WinIco00";
	case 230:
		return "WinIcoClear";
	case 233:
		return "WinOemReset";
	case 234:
		return "WinOemJump";
	case 235:
		return "WinOemPA1";
	case 236:
		return "WinOemPA2";
	case 237:
		return "WinOemPA3";
	case 238:
		return "WinOemWSCTRL";
	case 239:
		return "WinOemCUSEL";
	case 240:
		return "WinOemATTN";
	case 241:
		return "WinOemFinish";
	case 242:
		return "WinOemCopy";
	case 243:
		return "WinOemAuto";
	case 244:
		return "WinOemENLW";
	case 245:
		return "WinOemBackTab";
	case 246:
		return "ATTN";
	case 247:
		return "CRSEL";
	case 248:
		return "EXSEL";
	case 249:
		return "EREOF";
	case 250:
		return "Play";
	case 251:
		return "Zoom";
	case 253:
		return "PA1";
	case 254:
		return "WinOemClear";
	}
	return String.fromCodePoint(keycode);
};
zui_Ext.dist = function(x1,y1,x2,y2) {
	var vx = x1 - x2;
	var vy = y1 - y2;
	return Math.sqrt(vx * vx + vy * vy);
};
zui_Ext.fract = function(f) {
	return f - (f | 0);
};
zui_Ext.mix = function(x,y,a) {
	return x * (1.0 - a) + y * a;
};
zui_Ext.clamp = function(x,minVal,maxVal) {
	return Math.min(Math.max(x,minVal),maxVal);
};
zui_Ext.step = function(edge,x) {
	if(x < edge) {
		return 0.0;
	} else {
		return 1.0;
	}
};
zui_Ext.hsvToRgb = function(cR,cG,cB,out) {
	var f = cR + 1.0;
	var px = Math.abs((f - (f | 0)) * 6.0 - 3.0);
	var f1 = cR + 0.66666666666666663;
	var py = Math.abs((f1 - (f1 | 0)) * 6.0 - 3.0);
	var f2 = cR + 0.33333333333333331;
	var pz = Math.abs((f2 - (f2 | 0)) * 6.0 - 3.0);
	out[0] = cB * (1.0 - cG + Math.min(Math.max(px - 1.0,0.0),1.0) * cG);
	out[1] = cB * (1.0 - cG + Math.min(Math.max(py - 1.0,0.0),1.0) * cG);
	out[2] = cB * (1.0 - cG + Math.min(Math.max(pz - 1.0,0.0),1.0) * cG);
};
zui_Ext.rgbToHsv = function(cR,cG,cB,out) {
	var a = cG < cB ? 0.0 : 1.0;
	var px = cB * (1.0 - a) + cG * a;
	var a1 = cG < cB ? 0.0 : 1.0;
	var py = cG * (1.0 - a1) + cB * a1;
	var a2 = cG < cB ? 0.0 : 1.0;
	var pz = -1.0 * (1.0 - a2) + 0.0 * a2;
	var a3 = cG < cB ? 0.0 : 1.0;
	var pw = 0.66666666666666663 * (1.0 - a3) + -0.33333333333333331 * a3;
	var a4 = cR < px ? 0.0 : 1.0;
	var qx = px * (1.0 - a4) + cR * a4;
	var a5 = cR < px ? 0.0 : 1.0;
	var qy = py * (1.0 - a5) + py * a5;
	var a6 = cR < px ? 0.0 : 1.0;
	var qz = pw * (1.0 - a6) + pz * a6;
	var a7 = cR < px ? 0.0 : 1.0;
	var qw = cR * (1.0 - a7) + px * a7;
	var d = qx - Math.min(qw,qy);
	out[0] = Math.abs(qz + (qw - qy) / (6.0 * d + 1.0e-10));
	out[1] = d / (qx + 1.0e-10);
	out[2] = qx;
};
var zui_Id = function() { };
$hxClasses["zui.Id"] = zui_Id;
zui_Id.__name__ = "zui.Id";
var zui_Popup = function() { };
$hxClasses["zui.Popup"] = zui_Popup;
zui_Popup.__name__ = "zui.Popup";
zui_Popup.render = function(g) {
	if(zui_Popup.boxCommands == null) {
		zui_Popup.ui.begin(g);
		if(zui_Popup.ui.window(zui_Popup.hwnd,zui_Popup.modalX,zui_Popup.modalY,zui_Popup.modalW,zui_Popup.modalH)) {
			zui_Popup.drawTitle(g);
			var _g = 0;
			var _g1 = zui_Popup.boxText.split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				zui_Popup.ui.text(line);
			}
			zui_Popup.ui._y = zui_Popup.ui._h - zui_Popup.ui.t.BUTTON_H - 10;
			zui_Popup.ui.row([0.33333333333333331,0.33333333333333331,0.33333333333333331]);
			zui_Popup.ui.endElement();
			if(zui_Popup.ui.button("OK")) {
				zui_Popup.show = false;
			}
		}
		zui_Popup.ui.end();
	} else {
		zui_Popup.ui.begin(g);
		if(zui_Popup.ui.window(zui_Popup.hwnd,zui_Popup.modalX,zui_Popup.modalY,zui_Popup.modalW,zui_Popup.modalH)) {
			zui_Popup.drawTitle(g);
			zui_Popup.ui._y += 10;
			zui_Popup.boxCommands(zui_Popup.ui);
		}
		zui_Popup.ui.end();
	}
};
zui_Popup.drawTitle = function(g) {
	if(zui_Popup.boxTitle != "") {
		g.set_color(zui_Popup.ui.t.SEPARATOR_COL);
		var _this = zui_Popup.ui;
		var x = zui_Popup.ui._x;
		var y = zui_Popup.ui._y;
		var w = zui_Popup.ui._w;
		var h = zui_Popup.ui.t.BUTTON_H;
		var strength = 0.0;
		if(strength == 0.0) {
			strength = 1;
		}
		if(!_this.enabled) {
			_this.fadeColor();
		}
		g.fillRect(x,y - 1,w,h + 1);
		g.set_color(zui_Popup.ui.t.TEXT_COL);
		zui_Popup.ui.text(zui_Popup.boxTitle);
	}
};
zui_Popup.update = function() {
	var inUse = zui_Popup.ui.comboSelectedHandle != null;
	if(zui_Popup.ui.inputStarted && !inUse) {
		if(zui_Popup.ui.inputX < zui_Popup.modalX || zui_Popup.ui.inputX > zui_Popup.modalX + zui_Popup.modalW || zui_Popup.ui.inputY < zui_Popup.modalY || zui_Popup.ui.inputY > zui_Popup.modalY + zui_Popup.modalH) {
			zui_Popup.show = false;
		}
	}
};
zui_Popup.showMessage = function(ui,title,text) {
	zui_Popup.ui = ui;
	zui_Popup.init();
	zui_Popup.boxTitle = title;
	zui_Popup.boxText = text;
	zui_Popup.boxCommands = null;
};
zui_Popup.showCustom = function(ui,commands,mx,my,mw,mh) {
	if(mh == null) {
		mh = 160;
	}
	if(mw == null) {
		mw = 400;
	}
	if(my == null) {
		my = -1;
	}
	if(mx == null) {
		mx = -1;
	}
	zui_Popup.ui = ui;
	zui_Popup.init(mx,my,mw,mh);
	zui_Popup.boxTitle = "";
	zui_Popup.boxText = "";
	zui_Popup.boxCommands = commands;
};
zui_Popup.init = function(mx,my,mw,mh) {
	if(mh == null) {
		mh = 160;
	}
	if(mw == null) {
		mw = 400;
	}
	if(my == null) {
		my = -1;
	}
	if(mx == null) {
		mx = -1;
	}
	var appW = kha_System.windowWidth();
	var appH = kha_System.windowHeight();
	zui_Popup.modalX = mx;
	zui_Popup.modalY = my;
	zui_Popup.modalW = mw * zui_Popup.ui.ops.scaleFactor | 0;
	zui_Popup.modalH = mh * zui_Popup.ui.ops.scaleFactor | 0;
	if(mx == -1) {
		zui_Popup.modalX = appW / 2 - zui_Popup.modalW / 2 | 0;
	}
	if(my == -1) {
		zui_Popup.modalY = appH / 2 - zui_Popup.modalH / 2 | 0;
	}
	zui_Popup.modalX = Math.max(0,Math.min(zui_Popup.modalX,appW - zui_Popup.modalW)) | 0;
	zui_Popup.modalY = Math.max(0,Math.min(zui_Popup.modalY,appH - zui_Popup.modalH)) | 0;
	zui_Popup.hwnd.dragX = 0;
	zui_Popup.hwnd.dragY = 0;
	zui_Popup.show = true;
};
var zui_Themes = function() { };
$hxClasses["zui.Themes"] = zui_Themes;
zui_Themes.__name__ = "zui.Themes";
var zui_Zui = function(ops) {
	this.checkSelectImage = null;
	this.elementsBaked = false;
	this.tabVertical = false;
	this.tabScroll = 0.0;
	this.tabHandle = null;
	this.tabColors = null;
	this.tabNames = null;
	this.tooltipTime = 0.0;
	this.tooltipWait = false;
	this.tooltipShown = false;
	this.tooltipY = 0.0;
	this.tooltipX = 0.0;
	this.tooltipInvertY = false;
	this.tooltipImgMaxWidth = null;
	this.tooltipImg = null;
	this.tooltipText = "";
	this.comboToSubmit = 0;
	this.submitComboHandle = null;
	this.comboSelectedWindow = null;
	this.comboSelectedHandle = null;
	this.tabPressedHandle = null;
	this.tabPressed = false;
	this.textToSubmit = "";
	this.submitTextHandle = null;
	this.textSelectedHandle = null;
	this.restoreY = -1.0;
	this.restoreX = -1.0;
	this.windowHeaderH = 0.0;
	this.windowHeaderW = 0.0;
	this.dragHandle = null;
	this.scrollHandle = null;
	this.windowEnded = true;
	this._windowY = 0.0;
	this._windowX = 0.0;
	this.imageScrollAlign = true;
	this.scrollAlign = 0.0;
	this.curRatio = -1;
	this.highlightAnchor = 0;
	this.cursorX = 0;
	this.inputStartedTime = 0.0;
	this.key = null;
	this.isReturnDown = false;
	this.isEscapeDown = false;
	this.isDeleteDown = false;
	this.isBackspaceDown = false;
	this.isADown = false;
	this.isAltDown = false;
	this.isCtrlDown = false;
	this.isShiftDown = false;
	this.isKeyDown = false;
	this.isKeyPressed = false;
	this.inputWheelDelta = 0;
	this.inputEnabled = true;
	this.inputRegistered = false;
	this.touchHold = false;
	this.highlightFullRow = false;
	this.tabSwitchEnabled = true;
	this.highlightOnSelect = true;
	this.alwaysRedraw = false;
	this.scrollEnabled = true;
	this.imageInvertY = false;
	this.changed = false;
	this.isReleased = false;
	this.isHovered = false;
	this.isPushed = false;
	this.isStarted = false;
	this.enabled = true;
	this.isTyping = false;
	this.isScrolling = false;
	if(ops.theme == null) {
		ops.theme = zui_Themes.dark;
	}
	this.t = ops.theme;
	if(ops.khaWindowId == null) {
		ops.khaWindowId = 0;
	}
	if(ops.scaleFactor == null) {
		ops.scaleFactor = 1.0;
	}
	if(ops.autoNotifyInput == null) {
		ops.autoNotifyInput = true;
	}
	this.ops = ops;
	this.setScale(ops.scaleFactor);
	if(ops.autoNotifyInput) {
		this.registerInput();
	}
	if(zui_Zui.copyReceiver == null) {
		zui_Zui.copyReceiver = this;
		kha_System.notifyOnCutCopyPaste($bind(this,this.onCut),$bind(this,this.onCopy),$bind(this,this.onPaste));
		kha_System.notifyOnFrames(function(frames) {
			if((zui_Zui.isCopy || zui_Zui.isPaste) && ++zui_Zui.copyFrame > 1) {
				zui_Zui.isCopy = zui_Zui.isCut = zui_Zui.isPaste = false;
				zui_Zui.copyFrame = 0;
			}
		});
	}
	var rtTextVS = kha_graphics4_Graphics2.createTextVertexStructure();
	this.rtTextPipeline = kha_graphics4_Graphics2.createTextPipeline(rtTextVS);
	this.rtTextPipeline.alphaBlendSource = 1;
	this.rtTextPipeline.compile();
};
$hxClasses["zui.Zui"] = zui_Zui;
zui_Zui.__name__ = "zui.Zui";
zui_Zui.clampi = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
zui_Zui.prototype = {
	isScrolling: null
	,isTyping: null
	,enabled: null
	,isStarted: null
	,isPushed: null
	,isHovered: null
	,isReleased: null
	,changed: null
	,imageInvertY: null
	,scrollEnabled: null
	,alwaysRedraw: null
	,highlightOnSelect: null
	,tabSwitchEnabled: null
	,highlightFullRow: null
	,touchHold: null
	,inputRegistered: null
	,inputEnabled: null
	,inputX: null
	,inputY: null
	,inputStartedX: null
	,inputStartedY: null
	,inputDX: null
	,inputDY: null
	,inputWheelDelta: null
	,inputStarted: null
	,inputStartedR: null
	,inputReleased: null
	,inputReleasedR: null
	,inputDown: null
	,inputDownR: null
	,isKeyPressed: null
	,isKeyDown: null
	,isShiftDown: null
	,isCtrlDown: null
	,isAltDown: null
	,isADown: null
	,isBackspaceDown: null
	,isDeleteDown: null
	,isEscapeDown: null
	,isReturnDown: null
	,key: null
	,char: null
	,inputStartedTime: null
	,cursorX: null
	,highlightAnchor: null
	,ratios: null
	,curRatio: null
	,xBeforeSplit: null
	,wBeforeSplit: null
	,g: null
	,t: null
	,ops: null
	,globalG: null
	,rtTextPipeline: null
	,fontSize: null
	,fontOffsetY: null
	,arrowOffsetX: null
	,arrowOffsetY: null
	,titleOffsetX: null
	,buttonOffsetY: null
	,checkOffsetX: null
	,checkOffsetY: null
	,checkSelectOffsetX: null
	,checkSelectOffsetY: null
	,radioOffsetX: null
	,radioOffsetY: null
	,radioSelectOffsetX: null
	,radioSelectOffsetY: null
	,scrollAlign: null
	,imageScrollAlign: null
	,_x: null
	,_y: null
	,_w: null
	,_h: null
	,_windowX: null
	,_windowY: null
	,_windowW: null
	,_windowH: null
	,currentWindow: null
	,windowEnded: null
	,scrollHandle: null
	,dragHandle: null
	,windowHeaderW: null
	,windowHeaderH: null
	,restoreX: null
	,restoreY: null
	,textSelectedHandle: null
	,textSelected: null
	,submitTextHandle: null
	,textToSubmit: null
	,tabPressed: null
	,tabPressedHandle: null
	,comboSelectedHandle: null
	,comboSelectedWindow: null
	,comboSelectedAlign: null
	,comboSelectedTexts: null
	,comboItemCount: null
	,comboItemOffset: null
	,comboSelectedLabel: null
	,comboSelectedX: null
	,comboSelectedY: null
	,comboSelectedW: null
	,submitComboHandle: null
	,comboToSubmit: null
	,tooltipText: null
	,tooltipImg: null
	,tooltipImgMaxWidth: null
	,tooltipInvertY: null
	,tooltipX: null
	,tooltipY: null
	,tooltipShown: null
	,tooltipWait: null
	,tooltipTime: null
	,tabNames: null
	,tabColors: null
	,tabHandle: null
	,tabScroll: null
	,tabVertical: null
	,elementsBaked: null
	,checkSelectImage: null
	,setScale: function(factor) {
		this.ops.scaleFactor = factor;
		this.fontSize = this.t.FONT_SIZE * this.ops.scaleFactor | 0;
		var fontHeight = this.ops.font.height(this.fontSize);
		this.fontOffsetY = (this.t.ELEMENT_H * this.ops.scaleFactor - fontHeight) / 2;
		this.arrowOffsetY = (this.t.ELEMENT_H * this.ops.scaleFactor - this.t.ARROW_SIZE * this.ops.scaleFactor) / 2;
		this.arrowOffsetX = this.arrowOffsetY;
		this.titleOffsetX = (this.arrowOffsetX * 2 + this.t.ARROW_SIZE * this.ops.scaleFactor) / this.ops.scaleFactor;
		this.buttonOffsetY = (this.t.ELEMENT_H * this.ops.scaleFactor - this.t.BUTTON_H * this.ops.scaleFactor) / 2;
		this.checkOffsetY = (this.t.ELEMENT_H * this.ops.scaleFactor - this.t.CHECK_SIZE * this.ops.scaleFactor) / 2;
		this.checkOffsetX = this.checkOffsetY;
		this.checkSelectOffsetY = (this.t.CHECK_SIZE * this.ops.scaleFactor - this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor) / 2;
		this.checkSelectOffsetX = this.checkSelectOffsetY;
		this.radioOffsetY = (this.t.ELEMENT_H * this.ops.scaleFactor - this.t.CHECK_SIZE * this.ops.scaleFactor) / 2;
		this.radioOffsetX = this.radioOffsetY;
		this.radioSelectOffsetY = (this.t.CHECK_SIZE * this.ops.scaleFactor - this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor) / 2;
		this.radioSelectOffsetX = this.radioSelectOffsetY;
		this.elementsBaked = false;
	}
	,bakeElements: function() {
		if(this.checkSelectImage != null) {
			this.checkSelectImage.unload();
		}
		this.checkSelectImage = kha_Image.createRenderTarget(this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor | 0,this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor | 0,null,0,1,this.ops.khaWindowId);
		var g = this.checkSelectImage.get_g2();
		g.begin(true,0);
		g.set_color(this.t.ACCENT_SELECT_COL);
		g.drawLine(0,0,this.checkSelectImage.get_width(),this.checkSelectImage.get_height(),2 * this.ops.scaleFactor);
		g.drawLine(this.checkSelectImage.get_width(),0,0,this.checkSelectImage.get_height(),2 * this.ops.scaleFactor);
		g.end();
		this.elementsBaked = true;
	}
	,remove: function() {
		if(this.ops.autoNotifyInput) {
			this.unregisterInput();
		}
	}
	,registerInput: function() {
		var _gthis = this;
		kha_input_Mouse.get().notifyWindowed(this.ops.khaWindowId,$bind(this,this.onMouseDown),$bind(this,this.onMouseUp),$bind(this,this.onMouseMove),$bind(this,this.onMouseWheel));
		kha_input_Keyboard.get().notify($bind(this,this.onKeyDown),$bind(this,this.onKeyUp),$bind(this,this.onKeyPress));
		kha_System.notifyOnApplicationState(function() {
			_gthis.inputDX = _gthis.inputDY = 0;
		},null,null,null,null);
		this.inputRegistered = true;
	}
	,unregisterInput: function() {
		kha_input_Mouse.get().removeWindowed(this.ops.khaWindowId,$bind(this,this.onMouseDown),$bind(this,this.onMouseUp),$bind(this,this.onMouseMove),$bind(this,this.onMouseWheel));
		kha_input_Keyboard.get().remove($bind(this,this.onKeyDown),$bind(this,this.onKeyUp),$bind(this,this.onKeyPress));
		this.endInput();
		this.inputX = this.inputY = 0;
		this.inputRegistered = false;
	}
	,begin: function(g) {
		if(!this.elementsBaked) {
			this.bakeElements();
		}
		this.changed = false;
		this.globalG = g;
		this._x = 0;
		this._y = 0;
		this._w = 0;
		this._h = 0;
	}
	,end: function(last) {
		if(last == null) {
			last = true;
		}
		if(!this.windowEnded) {
			this.endWindow();
		}
		this.drawCombo();
		this.drawTooltip();
		this.tabPressedHandle = null;
		if(last) {
			this.endInput();
		}
	}
	,beginRegion: function(g,x,y,w) {
		if(!this.elementsBaked) {
			g.end();
			this.bakeElements();
			g.begin(false);
		}
		this.changed = false;
		this.globalG = g;
		this.g = g;
		this.currentWindow = null;
		this.tooltipText = "";
		this.tooltipImg = null;
		this._windowX = 0;
		this._windowY = 0;
		this._windowW = w;
		this._x = x;
		this._y = y;
		this._w = w;
	}
	,endRegion: function(last) {
		if(last == null) {
			last = true;
		}
		this.drawTooltip();
		this.tabPressedHandle = null;
		if(last) {
			this.endInput();
		}
	}
	,endInput: function() {
		this.isKeyPressed = false;
		this.inputStarted = false;
		this.inputStartedR = false;
		this.inputReleased = false;
		this.inputReleasedR = false;
		this.inputDX = 0;
		this.inputDY = 0;
		this.inputWheelDelta = 0;
		zui_Zui.textToPaste = "";
		if(zui_Zui.keyRepeat && this.isKeyDown && kha_Scheduler.time() - zui_Zui.keyRepeatTime > 0.05) {
			if(this.key == 8 || this.key == 46 || this.key == 37 || this.key == 39 || this.key == 38 || this.key == 40) {
				zui_Zui.keyRepeatTime = kha_Scheduler.time();
				this.isKeyPressed = true;
			}
		}
		if(zui_Zui.touchControls && this.inputDown && this.inputX == this.inputStartedX && this.inputY == this.inputStartedY && this.inputStartedTime > 0 && kha_Scheduler.time() - this.inputStartedTime > 0.5) {
			this.touchHold = true;
			this.inputStartedTime = 0;
		}
	}
	,inputChanged: function() {
		if(!(this.inputDX != 0 || this.inputDY != 0 || this.inputWheelDelta != 0 || this.inputStarted || this.inputStartedR || this.inputReleased || this.inputReleasedR || this.inputDown || this.inputDownR)) {
			return this.isKeyPressed;
		} else {
			return true;
		}
	}
	,windowDirty: function(handle,x,y,w,h) {
		var wx = x + handle.dragX;
		var wy = y + handle.dragY;
		var inputChanged = this.getInputInRect(wx,wy,w,h) && this.inputChanged();
		if(!(this.alwaysRedraw || this.isScrolling || this.isTyping)) {
			return inputChanged;
		} else {
			return true;
		}
	}
	,window: function(handle,x,y,w,h,drag) {
		if(drag == null) {
			drag = false;
		}
		if(handle.texture == null || w != handle.texture.get_width() || h != handle.texture.get_height()) {
			this.resize(handle,w,h,this.ops.khaWindowId);
		}
		if(!this.windowEnded) {
			this.endWindow();
		}
		this.windowEnded = false;
		this.g = handle.texture.get_g2();
		this.currentWindow = handle;
		this._windowX = x + handle.dragX;
		this._windowY = y + handle.dragY;
		this._windowW = w;
		this._windowH = h;
		this.windowHeaderW = 0;
		this.windowHeaderH = 0;
		if(this.windowDirty(handle,x,y,w,h)) {
			handle.redraws = 2;
		}
		if(zui_Zui.onBorderHover != null) {
			if(this.getInputInRect(this._windowX - 4,this._windowY,8,this._windowH)) {
				zui_Zui.onBorderHover(handle,0);
			} else if(this.getInputInRect(this._windowX + this._windowW - 4,this._windowY,8,this._windowH)) {
				zui_Zui.onBorderHover(handle,1);
			} else if(this.getInputInRect(this._windowX,this._windowY - 4,this._windowW,8)) {
				zui_Zui.onBorderHover(handle,2);
			} else if(this.getInputInRect(this._windowX,this._windowY + this._windowH - 4,this._windowW,8)) {
				zui_Zui.onBorderHover(handle,3);
			}
		}
		if(handle.redraws <= 0) {
			return false;
		}
		this._x = 0;
		this._y = handle.scrollOffset;
		if(handle.layout == 1) {
			w = this.t.ELEMENT_W * this.ops.scaleFactor | 0;
		}
		this._w = !handle.scrollEnabled ? w : w - (this.t.SCROLL_W * this.ops.scaleFactor | 0);
		this._h = h;
		this.tooltipText = "";
		this.tooltipImg = null;
		this.tabNames = null;
		if(this.t.FILL_WINDOW_BG) {
			this.g.begin(true,this.t.WINDOW_BG_COL);
		} else {
			this.g.begin(true,0);
			this.g.set_color(this.t.WINDOW_BG_COL);
			this.g.fillRect(this._x,this._y - handle.scrollOffset,handle.lastMaxX,handle.lastMaxY);
		}
		handle.dragEnabled = drag;
		if(drag) {
			if(this.inputStarted && this.getInputInRect(this._windowX,this._windowY,this._windowW,15 * this.ops.scaleFactor | 0)) {
				this.dragHandle = handle;
			} else if(this.inputReleased) {
				this.dragHandle = null;
			}
			if(handle == this.dragHandle) {
				handle.redraws = 2;
				handle.dragX += this.inputDX | 0;
				handle.dragY += this.inputDY | 0;
			}
			this._y += 15 * this.ops.scaleFactor | 0;
			this.windowHeaderH += 15 * this.ops.scaleFactor | 0;
		}
		return true;
	}
	,endWindow: function(bindGlobalG) {
		if(bindGlobalG == null) {
			bindGlobalG = true;
		}
		var handle = this.currentWindow;
		if(handle == null) {
			return;
		}
		if(handle.redraws > 0 || this.isScrolling || this.isTyping) {
			if(this.tabNames != null) {
				this.drawTabs();
			}
			if(handle.dragEnabled) {
				this.g.set_color(this.t.SEPARATOR_COL);
				this.g.fillRect(0,0,this._windowW,15 * this.ops.scaleFactor | 0);
			}
			var wh = this._windowH - this.windowHeaderH;
			var fullHeight = this._y - handle.scrollOffset - this.windowHeaderH;
			if(fullHeight < wh || handle.layout == 1 || !this.scrollEnabled) {
				handle.scrollEnabled = false;
				handle.scrollOffset = 0;
			} else {
				handle.scrollEnabled = true;
				if(this.tabScroll < 0) {
					handle.scrollOffset = this.tabScroll;
					this.tabScroll = 0;
				}
				var wy = this._windowY + this.windowHeaderH;
				var amountToScroll = fullHeight - wh;
				var amountScrolled = -handle.scrollOffset;
				var ratio = amountScrolled / amountToScroll;
				var barH = wh * Math.abs(wh / fullHeight);
				barH = Math.max(barH,this.t.ELEMENT_H * this.ops.scaleFactor);
				var totalScrollableArea = wh - barH;
				var e = amountToScroll / totalScrollableArea;
				var barY = totalScrollableArea * ratio + this.windowHeaderH;
				var barFocus = this.getInputInRect(this._windowX + this._windowW - (this.t.SCROLL_W * this.ops.scaleFactor | 0),barY + this._windowY,this.t.SCROLL_W * this.ops.scaleFactor | 0,barH);
				if(this.inputStarted && barFocus) {
					this.scrollHandle = handle;
					this.isScrolling = true;
				}
				var scrollDelta = this.inputWheelDelta;
				if(zui_Zui.touchControls && this.inputDownR && this.inputDY != 0) {
					this.isScrolling = true;
					scrollDelta = -this.inputDY / 20;
				}
				if(handle == this.scrollHandle) {
					this.scroll(this.inputDY * e,fullHeight);
				} else if(scrollDelta != 0 && this.comboSelectedHandle == null && this.getInputInRect(this._windowX,wy,this._windowW,wh)) {
					this.scroll(scrollDelta * (this.t.ELEMENT_H * this.ops.scaleFactor),fullHeight);
				}
				if(handle.scrollOffset > 0) {
					handle.scrollOffset = 0;
				} else if(fullHeight + handle.scrollOffset < wh) {
					handle.scrollOffset = wh - fullHeight;
				}
				this.g.set_color(this.t.WINDOW_BG_COL);
				this.g.fillRect(this._windowW - (this.t.SCROLL_W * this.ops.scaleFactor | 0),wy,this.t.SCROLL_W * this.ops.scaleFactor | 0,wh);
				this.g.set_color(this.t.ACCENT_COL);
				var scrollbarFocus = this.getInputInRect(this._windowX + this._windowW - (this.t.SCROLL_W * this.ops.scaleFactor | 0),wy,this.t.SCROLL_W * this.ops.scaleFactor | 0,wh);
				var barW = scrollbarFocus || handle == this.scrollHandle ? this.t.SCROLL_W * this.ops.scaleFactor | 0 : (this.t.SCROLL_W * this.ops.scaleFactor | 0) / 3;
				this.g.fillRect(this._windowW - barW - this.scrollAlign,barY,barW,barH);
			}
			handle.lastMaxX = this._x;
			handle.lastMaxY = this._y;
			if(handle.layout == 0) {
				handle.lastMaxX += this._windowW;
			} else {
				handle.lastMaxY += this._windowH;
			}
			handle.redraws--;
			this.g.end();
		}
		this.windowEnded = true;
		if(zui_Zui.alwaysRedrawWindow || handle.redraws > -4) {
			if(bindGlobalG) {
				this.globalG.begin(false);
			}
			this.globalG.set_color(this.t.WINDOW_TINT_COL);
			this.globalG.drawImage(handle.texture,this._windowX,this._windowY);
			if(bindGlobalG) {
				this.globalG.end();
			}
			if(handle.redraws <= 0) {
				handle.redraws--;
			}
		}
	}
	,scroll: function(delta,fullHeight) {
		this.currentWindow.scrollOffset -= delta;
	}
	,tab: function(handle,text,vertical,color) {
		if(color == null) {
			color = -1;
		}
		if(vertical == null) {
			vertical = false;
		}
		if(this.tabNames == null) {
			this.tabNames = [];
			this.tabColors = [];
			this.tabHandle = handle;
			this.tabVertical = vertical;
			this._w -= this.tabVertical ? this.t.ELEMENT_OFFSET * this.ops.scaleFactor + this.t.ELEMENT_W * this.ops.scaleFactor - this.ops.scaleFactor | 0 : 0;
			if(vertical) {
				this.windowHeaderW += this.t.ELEMENT_W * this.ops.scaleFactor;
			} else {
				this.windowHeaderH += this.t.BUTTON_H * this.ops.scaleFactor + this.buttonOffsetY + this.t.ELEMENT_OFFSET * this.ops.scaleFactor;
			}
			this.restoreX = this.inputX;
			this.restoreY = this.inputY;
			if(!vertical && this.getInputInRect(this._windowX,this._windowY,this._windowW,this.windowHeaderH)) {
				this.inputX = this.inputY = -1;
			}
			if(vertical) {
				this._x += this.windowHeaderW + 6;
				this._w -= 6;
			} else {
				this._y += this.windowHeaderH + 3;
			}
		}
		this.tabNames.push(text);
		this.tabColors.push(color);
		return handle.position == this.tabNames.length - 1;
	}
	,drawTabs: function() {
		this.inputX = this.restoreX;
		this.inputY = this.restoreY;
		if(this.currentWindow == null) {
			return;
		}
		var tabX = 0.0;
		var tabY = 0.0;
		var tabH = this.t.BUTTON_H * this.ops.scaleFactor * 1.1 | 0;
		var origy = this._y;
		this._y = this.currentWindow.dragEnabled ? 15 * this.ops.scaleFactor | 0 : 0;
		this.tabHandle.changed = false;
		this.g.set_color(this.t.SEPARATOR_COL);
		if(this.tabVertical) {
			this.g.fillRect(0,this._y,this.t.ELEMENT_W * this.ops.scaleFactor,this._windowH);
		} else {
			this.g.fillRect(0,this._y,this._windowW,this.buttonOffsetY + tabH + 2);
		}
		this.g.set_color(this.t.ACCENT_COL);
		if(this.tabVertical) {
			this.g.fillRect(this.t.ELEMENT_W * this.ops.scaleFactor,this._y,1,this._windowH);
		} else {
			this.g.fillRect(this.buttonOffsetY,this._y + this.buttonOffsetY + tabH + 2,this._windowW - this.buttonOffsetY * 2,1);
		}
		var basey = this.tabVertical ? this._y : this._y + 2;
		var _g = 0;
		var _g1 = this.tabNames.length;
		while(_g < _g1) {
			var i = _g++;
			this._x = tabX;
			this._y = basey + tabY;
			this._w = this.tabVertical ? this.t.ELEMENT_W * this.ops.scaleFactor - this.ops.scaleFactor | 0 : this.ops.font.width(this.fontSize,this.tabNames[i]) + this.buttonOffsetY * 2 + 18 * this.ops.scaleFactor | 0;
			var released = this.getReleased();
			var pushed = this.getPushed();
			var hover = this.getHover();
			if(released) {
				var h = this.tabHandle.nest(this.tabHandle.position);
				h.scrollOffset = this.currentWindow.scrollOffset;
				h = this.tabHandle.nest(i);
				this.tabScroll = h.scrollOffset;
				this.tabHandle.position = i;
				this.currentWindow.redraws = 3;
				this.tabHandle.changed = true;
			}
			var selected = this.tabHandle.position == i;
			this.g.set_color(pushed || hover ? this.t.BUTTON_HOVER_COL : this.tabColors[i] != -1 ? this.tabColors[i] : selected ? this.t.WINDOW_BG_COL : this.t.SEPARATOR_COL);
			if(this.tabVertical) {
				tabY += tabH + 1;
			} else {
				tabX += this._w + 1;
			}
			var g = this.g;
			var x = this._x + this.buttonOffsetY;
			var y = this._y + this.buttonOffsetY;
			var w = this._w;
			var strength = 0.0;
			if(strength == 0.0) {
				strength = 1;
			}
			if(!this.enabled) {
				this.fadeColor();
			}
			g.fillRect(x,y - 1,w,tabH + 1);
			this.g.set_color(selected ? this.t.BUTTON_TEXT_COL : this.t.LABEL_COL);
			this.drawString(this.g,this.tabNames[i],this.t.TEXT_OFFSET,0,0);
			if(selected && !this.tabVertical) {
				this.g.set_color(this.t.WINDOW_BG_COL);
				this.g.fillRect(this._x + this.buttonOffsetY + 1,this._y + this.buttonOffsetY + tabH,this._w - 1,1);
			}
		}
		this._x = 0;
		this._y = origy;
		this._w = (!this.currentWindow.scrollEnabled ? this._windowW : this._windowW - (this.t.SCROLL_W * this.ops.scaleFactor | 0)) | 0;
	}
	,panel: function(handle,text,isTree,filled,pack) {
		if(pack == null) {
			pack = true;
		}
		if(filled == null) {
			filled = true;
		}
		if(isTree == null) {
			isTree = false;
		}
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return handle.selected;
		}
		if(this.getReleased()) {
			handle.selected = !handle.selected;
			handle.changed = this.changed = true;
		}
		if(filled) {
			this.g.set_color(this.t.PANEL_BG_COL);
			var g = this.g;
			var x = this._x;
			var y = this._y;
			var w = this._w;
			var h = this.t.ELEMENT_H * this.ops.scaleFactor;
			var strength = 0.0;
			if(strength == 0.0) {
				strength = 1;
			}
			if(!this.enabled) {
				this.fadeColor();
			}
			g.fillRect(x,y - 1,w,h + 1);
		}
		if(isTree) {
			this.drawTree(handle.selected);
		} else {
			this.drawArrow(handle.selected);
		}
		this.g.set_color(this.t.LABEL_COL);
		this.g.set_opacity(1.0);
		this.drawString(this.g,text,this.titleOffsetX,0);
		this.endElement();
		if(pack && !handle.selected) {
			this._y -= this.t.ELEMENT_OFFSET * this.ops.scaleFactor;
		}
		return handle.selected;
	}
	,image: function(image,tint,h,sx,sy,sw,sh) {
		if(sh == null) {
			sh = 0;
		}
		if(sw == null) {
			sw = 0;
		}
		if(sy == null) {
			sy = 0;
		}
		if(sx == null) {
			sx = 0;
		}
		if(tint == null) {
			tint = -1;
		}
		var iw = (sw > 0 ? sw : image.get_width()) * this.ops.scaleFactor;
		var ih = (sh > 0 ? sh : image.get_height()) * this.ops.scaleFactor;
		var w = Math.min(iw,this._w);
		var x = this._x;
		var scroll = this.currentWindow != null && this.currentWindow.scrollEnabled;
		var r;
		if(this.curRatio == -1) {
			r = 1.0;
		} else {
			var ratio = this.ratios[this.curRatio];
			r = ratio < 0 ? -ratio : ratio;
		}
		if(this.imageScrollAlign) {
			w = Math.min(iw,this._w - this.buttonOffsetY * 2);
			x += this.buttonOffsetY;
			if(!scroll) {
				w -= (this.t.SCROLL_W * this.ops.scaleFactor | 0) * r;
				x += (this.t.SCROLL_W * this.ops.scaleFactor | 0) * r / 2;
			}
		} else if(scroll) {
			w += (this.t.SCROLL_W * this.ops.scaleFactor | 0) * r;
		}
		var ratio1 = h == null ? w / iw : h / ih;
		if(h == null) {
			h = ih * ratio1;
		} else {
			w = iw * ratio1;
		}
		if(!this.isVisible(h)) {
			this.endElement(h);
			return 0;
		}
		var started = this.getStarted(h);
		var down = this.getPushed(h);
		var released = this.getReleased(h);
		var hover = this.getHover(h);
		this.g.set_color(tint);
		if(!this.enabled) {
			this.fadeColor();
		}
		var h_float = h;
		if(sw > 0) {
			if(this.imageInvertY) {
				this.g.drawScaledSubImage(image,sx,sy,sw,sh,x,this._y + h_float,w,-h_float);
			} else {
				this.g.drawScaledSubImage(image,sx,sy,sw,sh,x,this._y,w,h_float);
			}
		} else if(this.imageInvertY) {
			this.g.drawScaledImage(image,x,this._y + h_float,w,-h_float);
		} else {
			this.g.drawScaledImage(image,x,this._y,w,h_float);
		}
		this.endElement(h);
		if(started) {
			return 1;
		} else if(released) {
			return 3;
		} else if(down) {
			return 2;
		} else if(hover) {
			return 4;
		} else {
			return 0;
		}
	}
	,text: function(text,align,bg) {
		if(bg == null) {
			bg = 0;
		}
		if(align == null) {
			align = 0;
		}
		if(text.indexOf("\n") >= 0) {
			var align1 = align;
			var bg1 = bg;
			if(bg1 == null) {
				bg1 = 0;
			}
			if(align1 == null) {
				align1 = 0;
			}
			var _g = 0;
			var _g1 = text.split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				this.text(line,align1,bg1);
			}
			return 0;
		}
		var h = Math.max(this.t.ELEMENT_H * this.ops.scaleFactor,this.ops.font.height(this.fontSize));
		if(!this.isVisible(h)) {
			this.endElement(h + this.t.ELEMENT_OFFSET * this.ops.scaleFactor);
			return 0;
		}
		var started = this.getStarted(h);
		var down = this.getPushed(h);
		var released = this.getReleased(h);
		var hover = this.getHover(h);
		if(bg != 0) {
			this.g.set_color(bg);
			this.g.fillRect(this._x + this.buttonOffsetY,this._y + this.buttonOffsetY,this._w - this.buttonOffsetY * 2,this.t.BUTTON_H * this.ops.scaleFactor);
		}
		this.g.set_color(this.t.TEXT_COL);
		this.drawString(this.g,text,this.t.TEXT_OFFSET * this.ops.scaleFactor,0,align);
		this.endElement(h + this.t.ELEMENT_OFFSET * this.ops.scaleFactor);
		if(started) {
			return 1;
		} else if(released) {
			return 3;
		} else if(down) {
			return 2;
		} else {
			return 0;
		}
	}
	,splitText: function(lines,align,bg) {
		if(bg == null) {
			bg = 0;
		}
		if(align == null) {
			align = 0;
		}
		var _g = 0;
		var _g1 = lines.split("\n");
		while(_g < _g1.length) {
			var line = _g1[_g];
			++_g;
			this.text(line,align,bg);
		}
	}
	,startTextEdit: function(handle) {
		this.isTyping = true;
		this.submitTextHandle = this.textSelectedHandle;
		this.textToSubmit = this.textSelected;
		this.textSelectedHandle = handle;
		this.textSelected = handle.text;
		this.cursorX = handle.text.length;
		if(this.tabPressed) {
			this.tabPressed = false;
			this.isKeyPressed = false;
		} else if(!this.highlightOnSelect) {
			var x = this.inputX - (this._windowX + this._x + this.t.TEXT_OFFSET * this.ops.scaleFactor);
			this.cursorX = 0;
			while(this.cursorX < this.textSelected.length && this.ops.font.width(this.fontSize,HxOverrides.substr(this.textSelected,0,this.cursorX)) < x) this.cursorX++;
		}
		this.tabPressedHandle = handle;
		this.highlightAnchor = this.highlightOnSelect ? 0 : this.cursorX;
		if(kha_input_Keyboard.get() != null) {
			kha_input_Keyboard.get().show();
		}
	}
	,submitTextEdit: function() {
		this.submitTextHandle.text = this.textToSubmit;
		this.submitTextHandle.changed = this.changed = true;
		this.submitTextHandle = null;
		this.textToSubmit = "";
		this.textSelected = "";
	}
	,updateTextEdit: function(align,editable) {
		if(editable == null) {
			editable = true;
		}
		if(align == null) {
			align = 0;
		}
		var text = this.textSelected;
		if(this.isKeyPressed) {
			if(this.key == 37) {
				if(this.cursorX > 0) {
					this.cursorX--;
				}
			} else if(this.key == 39) {
				if(this.cursorX < text.length) {
					this.cursorX++;
				}
			} else if(editable && this.key == 8) {
				if(this.cursorX > 0 && this.highlightAnchor == this.cursorX) {
					text = HxOverrides.substr(text,0,this.cursorX - 1) + HxOverrides.substr(text,this.cursorX,text.length);
					this.cursorX--;
				} else if(this.highlightAnchor < this.cursorX) {
					text = HxOverrides.substr(text,0,this.highlightAnchor) + HxOverrides.substr(text,this.cursorX,text.length);
					this.cursorX = this.highlightAnchor;
				} else {
					text = HxOverrides.substr(text,0,this.cursorX) + HxOverrides.substr(text,this.highlightAnchor,text.length);
				}
			} else if(editable && this.key == 46) {
				if(this.highlightAnchor == this.cursorX) {
					text = HxOverrides.substr(text,0,this.cursorX) + HxOverrides.substr(text,this.cursorX + 1,null);
				} else if(this.highlightAnchor < this.cursorX) {
					text = HxOverrides.substr(text,0,this.highlightAnchor) + HxOverrides.substr(text,this.cursorX,text.length);
					this.cursorX = this.highlightAnchor;
				} else {
					text = HxOverrides.substr(text,0,this.cursorX) + HxOverrides.substr(text,this.highlightAnchor,text.length);
				}
			} else if(this.key == 13) {
				this.deselectText();
			} else if(this.key == 27) {
				this.textSelected = this.textSelectedHandle.text;
				this.deselectText();
			} else if(this.key == 9 && this.tabSwitchEnabled) {
				this.tabPressed = true;
				this.deselectText();
				this.key = null;
			} else if(this.key == 36) {
				this.cursorX = 0;
			} else if(this.key == 35) {
				this.cursorX = text.length;
			} else if(this.isCtrlDown && this.isADown) {
				this.cursorX = text.length;
				this.highlightAnchor = 0;
			} else if(editable && this.key != 16 && this.key != 20 && this.key != 17 && this.key != 18 && this.key != 38 && this.key != 40 && this.char != null && this.char != "" && HxOverrides.cca(this.char,0) >= 32) {
				text = HxOverrides.substr(text,0,this.highlightAnchor) + this.char + HxOverrides.substr(text,this.cursorX,null);
				this.cursorX = this.cursorX + 1 > text.length ? text.length : this.cursorX + 1;
			}
			var selecting = this.isShiftDown && (this.key == 37 || this.key == 39 || this.key == 16);
			if(!selecting && !this.isCtrlDown) {
				this.highlightAnchor = this.cursorX;
			}
		}
		if(zui_Zui.textToPaste != "") {
			text = HxOverrides.substr(text,0,this.highlightAnchor) + zui_Zui.textToPaste + HxOverrides.substr(text,this.cursorX,null);
			this.cursorX += zui_Zui.textToPaste.length;
			this.highlightAnchor = this.cursorX;
			zui_Zui.textToPaste = "";
		}
		if(this.highlightAnchor == this.cursorX) {
			zui_Zui.textToCopy = text;
		} else if(this.highlightAnchor < this.cursorX) {
			zui_Zui.textToCopy = text.substring(this.highlightAnchor,this.cursorX);
		} else {
			zui_Zui.textToCopy = text.substring(this.cursorX,this.highlightAnchor);
		}
		if(zui_Zui.isCut) {
			if(this.highlightAnchor == this.cursorX) {
				text = "";
			} else if(this.highlightAnchor < this.cursorX) {
				text = HxOverrides.substr(text,0,this.highlightAnchor) + HxOverrides.substr(text,this.cursorX,text.length);
				this.cursorX = this.highlightAnchor;
			} else {
				text = HxOverrides.substr(text,0,this.cursorX) + HxOverrides.substr(text,this.highlightAnchor,text.length);
			}
		}
		var off = this.t.TEXT_OFFSET * this.ops.scaleFactor;
		var lineHeight = this.t.ELEMENT_H * this.ops.scaleFactor;
		var cursorHeight = lineHeight - this.buttonOffsetY * 3.0;
		if(this.highlightAnchor != this.cursorX) {
			var istart = this.cursorX;
			var iend = this.highlightAnchor;
			if(this.highlightAnchor < this.cursorX) {
				istart = this.highlightAnchor;
				iend = this.cursorX;
			}
			var hlstr = HxOverrides.substr(text,istart,iend - istart);
			var hlstrw = this.ops.font.width(this.fontSize,hlstr);
			var startoff = this.ops.font.width(this.fontSize,HxOverrides.substr(text,0,istart));
			var hlStart = align == 0 ? this._x + startoff + off : this._x + this._w - hlstrw - off;
			if(align == 2) {
				hlStart -= this.ops.font.width(this.fontSize,HxOverrides.substr(text,iend,text.length));
			}
			this.g.set_color(this.t.ACCENT_SELECT_COL);
			this.g.fillRect(hlStart,this._y + this.buttonOffsetY * 1.5,hlstrw,cursorHeight);
		}
		var time = kha_Scheduler.time();
		if(this.isKeyDown || time % 1. < 0.5) {
			var str = align == 0 ? HxOverrides.substr(text,0,this.cursorX) : text.substring(this.cursorX,text.length);
			var strw = this.ops.font.width(this.fontSize,str);
			var cursorX = align == 0 ? this._x + strw + off : this._x + this._w - strw - off;
			this.g.set_color(this.t.TEXT_COL);
			this.g.fillRect(cursorX,this._y + this.buttonOffsetY * 1.5,this.ops.scaleFactor,cursorHeight);
		}
		this.textSelected = text;
	}
	,textInput: function(handle,label,align,editable) {
		if(editable == null) {
			editable = true;
		}
		if(align == null) {
			align = 0;
		}
		if(label == null) {
			label = "";
		}
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return handle.text;
		}
		var hover = this.getHover();
		if(hover && zui_Zui.onTextHover != null) {
			zui_Zui.onTextHover();
		}
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		var g = this.g;
		var fill = this.t.FILL_ACCENT_BG;
		var x = this._x + this.buttonOffsetY;
		var y = this._y + this.buttonOffsetY;
		var w = this._w - this.buttonOffsetY * 2;
		var h = this.t.BUTTON_H * this.ops.scaleFactor;
		var strength = 0.0;
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		if(fill) {
			g.fillRect(x,y - 1,w,h + 1);
		} else {
			g.drawRect(x,y,w,h,strength);
		}
		var startEdit = this.getReleased() || this.tabPressed;
		if(this.textSelectedHandle != handle && startEdit) {
			this.startTextEdit(handle);
		}
		if(this.textSelectedHandle == handle) {
			this.updateTextEdit(align,editable);
		}
		if(this.submitTextHandle == handle) {
			this.submitTextEdit();
		} else {
			handle.changed = false;
		}
		if(label != "") {
			this.g.set_color(this.t.LABEL_COL);
			var labelAlign = align == 2 ? 0 : 2;
			var xOffset = labelAlign == 0 ? 7 : 0;
			this.drawString(this.g,label,xOffset,0,labelAlign);
		}
		this.g.set_color(this.t.TEXT_COL);
		if(this.textSelectedHandle != handle) {
			this.drawString(this.g,handle.text,null,0,align);
		} else {
			this.drawString(this.g,this.textSelected,null,0,align);
		}
		this.endElement();
		return handle.text;
	}
	,deselectText: function() {
		if(this.textSelectedHandle == null) {
			return;
		}
		this.submitTextHandle = this.textSelectedHandle;
		this.textToSubmit = this.textSelected;
		this.textSelectedHandle = null;
		this.isTyping = false;
		if(this.currentWindow != null) {
			this.currentWindow.redraws = 2;
		}
		if(kha_input_Keyboard.get() != null) {
			kha_input_Keyboard.get().hide();
		}
		this.highlightAnchor = this.cursorX;
	}
	,button: function(text,align,label) {
		if(label == null) {
			label = "";
		}
		if(align == null) {
			align = 1;
		}
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return false;
		}
		var released = this.getReleased();
		var pushed = this.getPushed();
		var hover = this.getHover();
		if(released) {
			this.changed = true;
		}
		this.g.set_color(pushed ? this.t.BUTTON_PRESSED_COL : hover ? this.t.BUTTON_HOVER_COL : this.t.BUTTON_COL);
		var g = this.g;
		var fill = this.t.FILL_BUTTON_BG;
		var x = this._x + this.buttonOffsetY;
		var y = this._y + this.buttonOffsetY;
		var w = this._w - this.buttonOffsetY * 2;
		var h = this.t.BUTTON_H * this.ops.scaleFactor;
		var strength = 0.0;
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		if(fill) {
			g.fillRect(x,y - 1,w,h + 1);
		} else {
			g.drawRect(x,y,w,h,strength);
		}
		this.g.set_color(this.t.BUTTON_TEXT_COL);
		this.drawString(this.g,text,this.t.TEXT_OFFSET * this.ops.scaleFactor,0,align);
		if(label != "") {
			this.g.set_color(this.t.LABEL_COL);
			this.drawString(this.g,label,this.t.TEXT_OFFSET * this.ops.scaleFactor,0,align == 2 ? 0 : 2);
		}
		this.endElement();
		return released;
	}
	,check: function(handle,text) {
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return handle.selected;
		}
		if(this.getReleased()) {
			handle.selected = !handle.selected;
			handle.changed = this.changed = true;
		} else {
			handle.changed = false;
		}
		var hover = this.getHover();
		this.drawCheck(handle.selected,hover);
		this.g.set_color(this.t.TEXT_COL);
		this.drawString(this.g,text,this.titleOffsetX,0,0);
		this.endElement();
		return handle.selected;
	}
	,radio: function(handle,position,text) {
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return handle.position == position;
		}
		if(position == 0) {
			handle.changed = false;
		}
		if(this.getReleased()) {
			handle.position = position;
			handle.changed = this.changed = true;
		}
		var hover = this.getHover();
		this.drawRadio(handle.position == position,hover);
		this.g.set_color(this.t.TEXT_COL);
		this.drawString(this.g,text,this.titleOffsetX,0);
		this.endElement();
		return handle.position == position;
	}
	,combo: function(handle,texts,label,showLabel,align,itemCount) {
		if(itemCount == null) {
			itemCount = -1;
		}
		if(align == null) {
			align = 0;
		}
		if(showLabel == null) {
			showLabel = false;
		}
		if(label == null) {
			label = "";
		}
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return handle.position;
		}
		if(this.getReleased()) {
			if(this.comboSelectedHandle == null) {
				this.inputEnabled = false;
				this.comboSelectedHandle = handle;
				this.comboSelectedWindow = this.currentWindow;
				this.comboSelectedAlign = align;
				this.comboSelectedTexts = texts;
				this.comboSelectedLabel = label;
				this.comboSelectedX = this._x + this._windowX | 0;
				this.comboSelectedY = this._y + this._windowY + this.t.ELEMENT_H * this.ops.scaleFactor | 0;
				this.comboSelectedW = this._w | 0;
				this.comboItemCount = itemCount < 0 ? texts.length : itemCount;
				this.comboItemOffset = -1;
			}
		}
		if(handle == this.submitComboHandle) {
			handle.position = this.comboToSubmit;
			this.submitComboHandle = null;
			handle.changed = this.changed = true;
		} else {
			handle.changed = false;
		}
		if(this.inputWheelDelta != 0 && this.comboSelectedHandle != null) {
			if(this.inputWheelDelta > 0) {
				this.comboItemOffset += 1;
			} else {
				this.comboItemOffset -= 1;
			}
			var maxOffset = this.comboSelectedTexts.length - this.comboItemCount;
			if(this.comboItemOffset > maxOffset) {
				this.comboItemOffset = maxOffset;
			}
			if(this.comboItemOffset < 0) {
				this.comboItemOffset = 0;
			}
		}
		var hover = this.getHover();
		if(hover) {
			this.g.set_color(this.t.ACCENT_HOVER_COL);
			var g = this.g;
			var fill = this.t.FILL_ACCENT_BG;
			var x = this._x + this.buttonOffsetY;
			var y = this._y + this.buttonOffsetY;
			var w = this._w - this.buttonOffsetY * 2;
			var h = this.t.BUTTON_H * this.ops.scaleFactor;
			var strength = 0.0;
			if(strength == 0.0) {
				strength = 1;
			}
			if(!this.enabled) {
				this.fadeColor();
			}
			if(fill) {
				g.fillRect(x,y - 1,w,h + 1);
			} else {
				g.drawRect(x,y,w,h,strength);
			}
		} else {
			this.g.set_color(this.t.ACCENT_COL);
			var g1 = this.g;
			var fill1 = this.t.FILL_ACCENT_BG;
			var x1 = this._x + this.buttonOffsetY;
			var y1 = this._y + this.buttonOffsetY;
			var w1 = this._w - this.buttonOffsetY * 2;
			var h1 = this.t.BUTTON_H * this.ops.scaleFactor;
			var strength1 = 0.0;
			if(strength1 == 0.0) {
				strength1 = 1;
			}
			if(!this.enabled) {
				this.fadeColor();
			}
			if(fill1) {
				g1.fillRect(x1,y1 - 1,w1,h1 + 1);
			} else {
				g1.drawRect(x1,y1,w1,h1,strength1);
			}
		}
		var x2 = this._x + this._w - this.arrowOffsetX - 8;
		var y2 = this._y + this.arrowOffsetY + 3;
		this.g.fillTriangle(x2,y2,x2 + this.t.ARROW_SIZE * this.ops.scaleFactor,y2,x2 + this.t.ARROW_SIZE * this.ops.scaleFactor / 2,y2 + this.t.ARROW_SIZE * this.ops.scaleFactor / 2);
		if(showLabel && label != "") {
			if(align == 0) {
				this._x -= 15;
			}
			this.g.set_color(this.t.LABEL_COL);
			this.drawString(this.g,label,null,0,align == 0 ? 2 : 0);
			if(align == 0) {
				this._x += 15;
			}
		}
		if(align == 2) {
			this._x -= 15;
		}
		this.g.set_color(this.t.TEXT_COL);
		if(handle.position < texts.length) {
			this.drawString(this.g,texts[handle.position],null,0,align);
		}
		if(align == 2) {
			this._x += 15;
		}
		this.endElement();
		return handle.position;
	}
	,slider: function(handle,text,from,to,filled,precision,displayValue,align,textEdit) {
		if(textEdit == null) {
			textEdit = true;
		}
		if(align == null) {
			align = 2;
		}
		if(displayValue == null) {
			displayValue = true;
		}
		if(precision == null) {
			precision = 100.0;
		}
		if(filled == null) {
			filled = false;
		}
		if(to == null) {
			to = 1.0;
		}
		if(from == null) {
			from = 0.0;
		}
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this.endElement();
			return handle.value;
		}
		if(this.getStarted()) {
			this.scrollHandle = handle;
			this.isScrolling = true;
		}
		handle.changed = false;
		if(handle == this.scrollHandle) {
			var range = to - from;
			var sliderX = this._x + this._windowX + this.buttonOffsetY;
			var sliderW = this._w - this.buttonOffsetY * 2;
			var step = range / sliderW;
			var value = from + (this.inputX - sliderX) * step;
			handle.value = Math.round(value * precision) / precision;
			if(handle.value < from) {
				handle.value = from;
			} else if(handle.value > to) {
				handle.value = to;
			}
			handle.changed = this.changed = true;
		}
		var hover = this.getHover();
		this.drawSlider(handle.value,from,to,filled,hover);
		var startEdit = (this.getReleased() || this.tabPressed) && textEdit;
		if(startEdit) {
			handle.text = handle.value + "";
			this.startTextEdit(handle);
			handle.changed = this.changed = true;
		}
		var lalign = align == 0 ? 2 : 0;
		if(this.textSelectedHandle == handle) {
			this.updateTextEdit(lalign);
		}
		if(this.submitTextHandle == handle) {
			this.submitTextEdit();
			handle.value = parseFloat(handle.text);
			handle.changed = this.changed = true;
		}
		this.g.set_color(this.t.LABEL_COL);
		this.drawString(this.g,text,null,0,align);
		if(displayValue) {
			this.g.set_color(this.t.TEXT_COL);
			if(this.textSelectedHandle != handle) {
				this.drawString(this.g,handle.value + "",null,0,lalign);
			} else {
				this.drawString(this.g,this.textSelected,null,0,lalign);
			}
		}
		this.endElement();
		return handle.value;
	}
	,separator: function(h,fill) {
		if(fill == null) {
			fill = true;
		}
		if(h == null) {
			h = 4;
		}
		if(!this.isVisible(this.t.ELEMENT_H * this.ops.scaleFactor)) {
			this._y += h * this.ops.scaleFactor;
			return;
		}
		if(fill) {
			this.g.set_color(this.t.SEPARATOR_COL);
			this.g.fillRect(this._x,this._y,this._w,h * this.ops.scaleFactor);
		}
		this._y += h * this.ops.scaleFactor;
	}
	,tooltip: function(text) {
		this.tooltipText = text;
		this.tooltipY = this._y + this._windowY;
	}
	,tooltipImage: function(image,maxWidth) {
		this.tooltipImg = image;
		this.tooltipImgMaxWidth = maxWidth;
		this.tooltipInvertY = this.imageInvertY;
		this.tooltipY = this._y + this._windowY;
	}
	,drawArrow: function(selected) {
		var x = this._x + this.arrowOffsetX;
		var y = this._y + this.arrowOffsetY;
		this.g.set_color(this.t.TEXT_COL);
		if(selected) {
			this.g.fillTriangle(x,y,x + this.t.ARROW_SIZE * this.ops.scaleFactor,y,x + this.t.ARROW_SIZE * this.ops.scaleFactor / 2,y + this.t.ARROW_SIZE * this.ops.scaleFactor);
		} else {
			this.g.fillTriangle(x,y,x,y + this.t.ARROW_SIZE * this.ops.scaleFactor,x + this.t.ARROW_SIZE * this.ops.scaleFactor,y + this.t.ARROW_SIZE * this.ops.scaleFactor / 2);
		}
	}
	,drawTree: function(selected) {
		var SIGN_W = 7 * this.ops.scaleFactor;
		var x = this._x + this.arrowOffsetX + 1;
		var y = this._y + this.arrowOffsetY + 1;
		this.g.set_color(this.t.TEXT_COL);
		if(selected) {
			this.g.fillRect(x,y + SIGN_W / 2 - 1,SIGN_W,SIGN_W / 8);
		} else {
			this.g.fillRect(x,y + SIGN_W / 2 - 1,SIGN_W,SIGN_W / 8);
			this.g.fillRect(x + SIGN_W / 2 - 1,y,SIGN_W / 8,SIGN_W);
		}
	}
	,drawCheck: function(selected,hover) {
		var x = this._x + this.checkOffsetX;
		var y = this._y + this.checkOffsetY;
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		var g = this.g;
		var fill = this.t.FILL_ACCENT_BG;
		var w = this.t.CHECK_SIZE * this.ops.scaleFactor;
		var h = this.t.CHECK_SIZE * this.ops.scaleFactor;
		var strength = 0.0;
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		if(fill) {
			g.fillRect(x,y - 1,w,h + 1);
		} else {
			g.drawRect(x,y,w,h,strength);
		}
		if(selected) {
			this.g.set_color(-1);
			if(!this.enabled) {
				this.fadeColor();
			}
			var size = this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor | 0;
			this.g.drawScaledImage(this.checkSelectImage,x + this.checkSelectOffsetX,y + this.checkSelectOffsetY,size,size);
		}
	}
	,drawRadio: function(selected,hover) {
		var x = this._x + this.radioOffsetX;
		var y = this._y + this.radioOffsetY;
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		var g = this.g;
		var fill = this.t.FILL_ACCENT_BG;
		var w = this.t.CHECK_SIZE * this.ops.scaleFactor;
		var h = this.t.CHECK_SIZE * this.ops.scaleFactor;
		var strength = 0.0;
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		if(fill) {
			g.fillRect(x,y - 1,w,h + 1);
		} else {
			g.drawRect(x,y,w,h,strength);
		}
		if(selected) {
			this.g.set_color(this.t.ACCENT_SELECT_COL);
			if(!this.enabled) {
				this.fadeColor();
			}
			this.g.fillRect(x + this.radioSelectOffsetX,y + this.radioSelectOffsetY,this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor,this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor);
		}
	}
	,drawSlider: function(value,from,to,filled,hover) {
		var x = this._x + this.buttonOffsetY;
		var y = this._y + this.buttonOffsetY;
		var w = this._w - this.buttonOffsetY * 2;
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		var g = this.g;
		var fill = this.t.FILL_ACCENT_BG;
		var h = this.t.BUTTON_H * this.ops.scaleFactor;
		var strength = 0.0;
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		if(fill) {
			g.fillRect(x,y - 1,w,h + 1);
		} else {
			g.drawRect(x,y,w,h,strength);
		}
		this.g.set_color(hover ? this.t.ACCENT_HOVER_COL : this.t.ACCENT_COL);
		var offset = (value - from) / (to - from);
		var barW = 8 * this.ops.scaleFactor;
		var sliderX = filled ? x : x + (w - barW) * offset;
		var sliderW = filled ? w * offset : barW;
		sliderW = Math.max(Math.min(sliderW,w),0);
		var g1 = this.g;
		var h1 = this.t.BUTTON_H * this.ops.scaleFactor;
		var strength1 = 0.0;
		if(strength1 == 0.0) {
			strength1 = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		g1.fillRect(sliderX,y - 1,sliderW,h1 + 1);
	}
	,drawCombo: function() {
		if(this.comboSelectedHandle == null) {
			return;
		}
		var _g = this.g;
		this.globalG.set_color(this.t.SEPARATOR_COL);
		var elementSize = this.t.ELEMENT_H * this.ops.scaleFactor + this.t.ELEMENT_OFFSET * this.ops.scaleFactor | 0;
		var maxItemCount = Math.min(this.comboSelectedTexts.length,this.comboItemCount) | 0;
		var comboH = (maxItemCount + 1) * elementSize;
		this.globalG.begin(false);
		var distTop = this.comboSelectedY - comboH - (this.t.ELEMENT_H * this.ops.scaleFactor | 0);
		var distBottom = kha_System.windowHeight() - (this.comboSelectedY + comboH);
		var outOfScreen = distBottom < 0 && distBottom < distTop;
		var comboY = outOfScreen ? this.comboSelectedY - comboH - (this.t.ELEMENT_H * this.ops.scaleFactor | 0) : this.comboSelectedY;
		this.globalG.fillRect(this.comboSelectedX,comboY,this.comboSelectedW,comboH);
		this.beginRegion(this.globalG,this.comboSelectedX,comboY,this.comboSelectedW);
		if(this.comboItemOffset == -1) {
			if(outOfScreen) {
				this.comboItemOffset = this.comboSelectedTexts.length - 1 - this.comboSelectedHandle.position;
			} else {
				this.comboItemOffset = this.comboSelectedHandle.position;
			}
			var value = this.comboItemOffset;
			var max = this.comboSelectedTexts.length - maxItemCount;
			this.comboItemOffset = value < 0 ? 0 : value > max ? max : value;
		}
		if(outOfScreen) {
			this.g.set_color(this.t.LABEL_COL);
			this.drawString(this.g,this.comboSelectedLabel,null,0,2);
			this._y += elementSize;
			this.fill(0,0,this._w / this.ops.scaleFactor,this.ops.scaleFactor,this.t.ACCENT_SELECT_COL);
		}
		this.inputEnabled = true;
		var BUTTON_COL = this.t.BUTTON_COL;
		var _g1 = this.comboItemOffset;
		var _g11 = this.comboItemOffset + maxItemCount;
		while(_g1 < _g11) {
			var i = _g1++;
			var j = outOfScreen ? this.comboSelectedTexts.length - 1 - i : i;
			this.t.BUTTON_COL = j == this.comboSelectedHandle.position ? this.t.ACCENT_SELECT_COL : this.t.SEPARATOR_COL;
			if(this.button(this.comboSelectedTexts[j],this.comboSelectedAlign)) {
				this.comboToSubmit = j;
				this.submitComboHandle = this.comboSelectedHandle;
				if(this.comboSelectedWindow != null) {
					this.comboSelectedWindow.redraws = 2;
				}
				break;
			}
		}
		this.t.BUTTON_COL = BUTTON_COL;
		if(!outOfScreen) {
			this.fill(0,0,this._w / this.ops.scaleFactor,this.ops.scaleFactor,this.t.ACCENT_SELECT_COL);
			this.g.set_color(this.t.LABEL_COL);
			this.drawString(this.g,this.comboSelectedLabel,null,0,2);
		}
		if((this.inputReleased || this.isEscapeDown) && !zui_Zui.comboFirst) {
			this.comboSelectedHandle = null;
			zui_Zui.comboFirst = true;
		} else {
			zui_Zui.comboFirst = false;
		}
		this.inputEnabled = this.comboSelectedHandle == null;
		this.endRegion(false);
		this.globalG.end();
		this.g = _g;
	}
	,drawTooltip: function() {
		if(this.tooltipText != "" || this.tooltipImg != null) {
			if(this.inputChanged()) {
				this.tooltipShown = false;
				this.tooltipWait = this.inputDX == 0 && this.inputDY == 0;
			}
			if(!this.tooltipShown) {
				this.tooltipShown = true;
				this.tooltipX = this.inputX;
				this.tooltipTime = kha_Scheduler.time();
			}
			if(!this.tooltipWait && kha_Scheduler.time() - this.tooltipTime > 1.0) {
				if(this.tooltipText != "") {
					this.drawTooltipText();
				} else {
					this.drawTooltipImage();
				}
			}
		} else {
			this.tooltipShown = false;
		}
	}
	,drawTooltipText: function() {
		this.globalG.set_color(this.t.TEXT_COL);
		var lines = this.tooltipText.split("\n");
		var tooltipW = 0.0;
		var _g = 0;
		while(_g < lines.length) {
			var line = lines[_g];
			++_g;
			var lineTooltipW = this.ops.font.width(this.fontSize,line);
			if(lineTooltipW > tooltipW) {
				tooltipW = lineTooltipW;
			}
		}
		this.tooltipX = Math.min(this.tooltipX,kha_System.windowWidth() - tooltipW - 20);
		this.globalG.begin(false);
		this.globalG.fillRect(this.tooltipX,this.tooltipY,tooltipW + 20,this.t.ELEMENT_H * this.ops.scaleFactor * lines.length * 0.6);
		this.globalG.set_font(this.ops.font);
		this.globalG.set_fontSize(this.fontSize);
		this.globalG.set_color(this.t.ACCENT_COL);
		var _g1 = 0;
		var _g2 = lines.length;
		while(_g1 < _g2) {
			var i = _g1++;
			this.globalG.drawString(lines[i],this.tooltipX + 5,this.tooltipY + i * this.fontSize);
		}
		this.globalG.end();
	}
	,drawTooltipImage: function() {
		var w = this.tooltipImg.get_width();
		if(this.tooltipImgMaxWidth != null && w > this.tooltipImgMaxWidth) {
			w = this.tooltipImgMaxWidth;
		}
		var h = this.tooltipImg.get_height() * (w / this.tooltipImg.get_width());
		this.tooltipX = Math.min(this.tooltipX,kha_System.windowWidth() - w - 20);
		this.tooltipY = Math.min(this.tooltipY,kha_System.windowHeight() - h - 20);
		this.globalG.set_color(-16777216);
		this.globalG.begin(false);
		this.globalG.fillRect(this.tooltipX,this.tooltipY,w,h);
		this.globalG.set_color(-1);
		if(this.tooltipInvertY) {
			this.globalG.drawScaledImage(this.tooltipImg,this.tooltipX,this.tooltipY + h,w,-h);
		} else {
			this.globalG.drawScaledImage(this.tooltipImg,this.tooltipX,this.tooltipY,w,h);
		}
		this.globalG.end();
	}
	,drawString: function(g,text,xOffset,yOffset,align) {
		if(align == null) {
			align = 0;
		}
		if(yOffset == null) {
			yOffset = 0;
		}
		var fullLength = text.length;
		while(text.length > 0 && this.ops.font.width(this.fontSize,text) > this._w) text = HxOverrides.substr(text,0,text.length - 1);
		if(text.length < fullLength) {
			text += "..";
		}
		if(xOffset == null) {
			xOffset = this.t.TEXT_OFFSET;
		}
		xOffset *= this.ops.scaleFactor;
		g.set_font(this.ops.font);
		g.set_fontSize(this.fontSize);
		if(align == 1) {
			xOffset = this._w / 2 - this.ops.font.width(this.fontSize,text) / 2;
		} else if(align == 2) {
			xOffset = this._w - this.ops.font.width(this.fontSize,text) - this.t.TEXT_OFFSET * this.ops.scaleFactor;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		g.set_pipeline(this.rtTextPipeline);
		g.drawString(text,this._x + xOffset,this._y + this.fontOffsetY + yOffset);
		g.set_pipeline(null);
	}
	,endElement: function(elementSize) {
		if(elementSize == null) {
			elementSize = this.t.ELEMENT_H * this.ops.scaleFactor + this.t.ELEMENT_OFFSET * this.ops.scaleFactor;
		}
		if(this.currentWindow == null || this.currentWindow.layout == 0) {
			if(this.curRatio == -1 || this.ratios != null && this.curRatio == this.ratios.length - 1) {
				this._y += elementSize;
				if(this.ratios != null && this.curRatio == this.ratios.length - 1) {
					this.curRatio = -1;
					this.ratios = null;
					this._x = this.xBeforeSplit;
					this._w = this.wBeforeSplit;
					this.highlightFullRow = false;
				}
			} else {
				this.curRatio++;
				this._x += this._w;
				var ratio = this.ratios[this.curRatio];
				this._w = (ratio < 0 ? -ratio : ratio * this.wBeforeSplit) | 0;
			}
		} else {
			this._x += this._w + this.t.ELEMENT_OFFSET * this.ops.scaleFactor;
		}
	}
	,highlightNextRow: function() {
		this.highlightFullRow = true;
	}
	,getRatio: function(ratio,dyn) {
		if(ratio < 0) {
			return -ratio;
		} else {
			return ratio * dyn;
		}
	}
	,row: function(ratios) {
		this.ratios = ratios;
		this.curRatio = 0;
		this.xBeforeSplit = this._x;
		this.wBeforeSplit = this._w;
		var ratio = ratios[this.curRatio];
		this._w = (ratio < 0 ? -ratio : ratio * this._w) | 0;
	}
	,indent: function(bothSides) {
		if(bothSides == null) {
			bothSides = true;
		}
		this._x += this.t.TAB_W * this.ops.scaleFactor | 0;
		this._w -= this.t.TAB_W * this.ops.scaleFactor | 0;
		if(bothSides) {
			this._w -= this.t.TAB_W * this.ops.scaleFactor | 0;
		}
	}
	,unindent: function(bothSides) {
		if(bothSides == null) {
			bothSides = true;
		}
		this._x -= this.t.TAB_W * this.ops.scaleFactor | 0;
		this._w += this.t.TAB_W * this.ops.scaleFactor | 0;
		if(bothSides) {
			this._w += this.t.TAB_W * this.ops.scaleFactor | 0;
		}
	}
	,fadeColor: function() {
		this.g.set_color(kha__$Color_Color_$Impl_$.fromFloats(((this.g.get_color() & 16711680) >>> 16) * 0.00392156862745098,((this.g.get_color() & 65280) >>> 8) * 0.00392156862745098,(this.g.get_color() & 255) * 0.00392156862745098,0.25));
	}
	,fill: function(x,y,w,h,color) {
		this.g.set_color(color);
		if(!this.enabled) {
			this.fadeColor();
		}
		this.g.fillRect(this._x + x * this.ops.scaleFactor,this._y + y * this.ops.scaleFactor - 1,w * this.ops.scaleFactor,h * this.ops.scaleFactor);
		this.g.set_color(-1);
	}
	,rect: function(x,y,w,h,color,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.g.set_color(color);
		if(!this.enabled) {
			this.fadeColor();
		}
		this.g.drawRect(this._x + x * this.ops.scaleFactor,this._y + y * this.ops.scaleFactor,w * this.ops.scaleFactor,h * this.ops.scaleFactor,strength);
		this.g.set_color(-1);
	}
	,drawRect: function(g,fill,x,y,w,h,strength) {
		if(strength == null) {
			strength = 0.0;
		}
		if(strength == 0.0) {
			strength = 1;
		}
		if(!this.enabled) {
			this.fadeColor();
		}
		if(fill) {
			g.fillRect(x,y - 1,w,h + 1);
		} else {
			g.drawRect(x,y,w,h,strength);
		}
	}
	,isVisible: function(elemH) {
		if(this.currentWindow == null) {
			return true;
		}
		if(this._y + elemH > this.windowHeaderH) {
			return this._y < this.currentWindow.texture.get_height();
		} else {
			return false;
		}
	}
	,getReleased: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		this.isReleased = this.enabled && this.inputEnabled && this.inputReleased && this.getHover(elemH) && this.getInitialHover(elemH);
		return this.isReleased;
	}
	,getPushed: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		this.isPushed = this.enabled && this.inputEnabled && this.inputDown && this.getHover(elemH) && this.getInitialHover(elemH);
		return this.isPushed;
	}
	,getStarted: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		this.isStarted = this.enabled && this.inputEnabled && this.inputStarted && this.getHover(elemH);
		return this.isStarted;
	}
	,getInitialHover: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		if(elemH == -1.0) {
			elemH = this.t.ELEMENT_H * this.ops.scaleFactor;
		}
		if(this.enabled && this.inputEnabled && this.inputStartedX >= this._windowX + this._x && this.inputStartedX < this._windowX + this._x + this._w && this.inputStartedY >= this._windowY + this._y) {
			return this.inputStartedY < this._windowY + this._y + elemH;
		} else {
			return false;
		}
	}
	,getHover: function(elemH) {
		if(elemH == null) {
			elemH = -1.0;
		}
		if(elemH == -1.0) {
			elemH = this.t.ELEMENT_H * this.ops.scaleFactor;
		}
		this.isHovered = this.enabled && this.inputEnabled && this.inputX >= this._windowX + (this.highlightFullRow ? 0 : this._x) && this.inputX < this._windowX + this._x + (this.highlightFullRow ? this._windowW : this._w) && this.inputY >= this._windowY + this._y && this.inputY < this._windowY + this._y + elemH;
		return this.isHovered;
	}
	,getInputInRect: function(x,y,w,h,scale) {
		if(scale == null) {
			scale = 1.0;
		}
		if(this.enabled && this.inputEnabled && this.inputX >= x * scale && this.inputX < (x + w) * scale && this.inputY >= y * scale) {
			return this.inputY < (y + h) * scale;
		} else {
			return false;
		}
	}
	,onMouseDown: function(button,x,y) {
		if(button == 0) {
			this.inputStarted = true;
		} else {
			this.inputStartedR = true;
		}
		if(button == 0) {
			this.inputDown = true;
		} else {
			this.inputDownR = true;
		}
		this.inputStartedTime = kha_Scheduler.time();
		this.setInputPosition(x,y);
		this.inputStartedX = x;
		this.inputStartedY = y;
	}
	,onMouseUp: function(button,x,y) {
		if(this.isScrolling) {
			this.isScrolling = false;
			this.scrollHandle = null;
			if(x == this.inputStartedX && y == this.inputStartedY) {
				if(button == 0) {
					this.inputReleased = true;
				} else {
					this.inputReleasedR = true;
				}
			}
		} else if(button == 0) {
			this.inputReleased = true;
		} else {
			this.inputReleasedR = true;
		}
		if(button == 0) {
			this.inputDown = false;
		} else {
			this.inputDownR = false;
		}
		this.setInputPosition(x,y);
		this.deselectText();
		if(this.touchHold) {
			this.touchHold = false;
			this.inputReleased = false;
			this.inputReleasedR = true;
		}
	}
	,onMouseMove: function(x,y,movementX,movementY) {
		this.setInputPosition(x,y);
	}
	,onMouseWheel: function(delta) {
		this.inputWheelDelta = delta;
	}
	,setInputPosition: function(x,y) {
		this.inputDX += x - this.inputX;
		this.inputDY += y - this.inputY;
		this.inputX = x;
		this.inputY = y;
	}
	,onKeyDown: function(code) {
		this.key = code;
		this.isKeyPressed = true;
		this.isKeyDown = true;
		zui_Zui.keyRepeatTime = kha_Scheduler.time() + 0.4;
		switch(code) {
		case 8:
			this.isBackspaceDown = true;
			break;
		case 13:
			this.isReturnDown = true;
			break;
		case 16:
			this.isShiftDown = true;
			break;
		case 17:
			this.isCtrlDown = true;
			break;
		case 18:
			this.isAltDown = true;
			break;
		case 27:
			this.isEscapeDown = true;
			break;
		case 32:
			this.char = " ";
			break;
		case 46:
			this.isDeleteDown = true;
			break;
		case 65:
			this.isADown = true;
			break;
		default:
		}
	}
	,onKeyUp: function(code) {
		this.isKeyDown = false;
		switch(code) {
		case 8:
			this.isBackspaceDown = false;
			break;
		case 13:
			this.isReturnDown = false;
			break;
		case 16:
			this.isShiftDown = false;
			break;
		case 17:
			this.isCtrlDown = false;
			break;
		case 18:
			this.isAltDown = false;
			break;
		case 27:
			this.isEscapeDown = false;
			break;
		case 46:
			this.isDeleteDown = false;
			break;
		case 65:
			this.isADown = false;
			break;
		default:
		}
	}
	,onKeyPress: function(char) {
		this.char = char;
		this.isKeyPressed = true;
	}
	,onCut: function() {
		zui_Zui.isCut = true;
		return this.onCopy();
	}
	,onCopy: function() {
		zui_Zui.isCopy = true;
		return zui_Zui.textToCopy;
	}
	,onPaste: function(s) {
		zui_Zui.isPaste = true;
		zui_Zui.textToPaste = s;
	}
	,ELEMENT_W: function() {
		return this.t.ELEMENT_W * this.ops.scaleFactor;
	}
	,ELEMENT_H: function() {
		return this.t.ELEMENT_H * this.ops.scaleFactor;
	}
	,ELEMENT_OFFSET: function() {
		return this.t.ELEMENT_OFFSET * this.ops.scaleFactor;
	}
	,ARROW_SIZE: function() {
		return this.t.ARROW_SIZE * this.ops.scaleFactor;
	}
	,BUTTON_H: function() {
		return this.t.BUTTON_H * this.ops.scaleFactor;
	}
	,CHECK_SIZE: function() {
		return this.t.CHECK_SIZE * this.ops.scaleFactor;
	}
	,CHECK_SELECT_SIZE: function() {
		return this.t.CHECK_SELECT_SIZE * this.ops.scaleFactor;
	}
	,FONT_SIZE: function() {
		return this.t.FONT_SIZE * this.ops.scaleFactor | 0;
	}
	,SCROLL_W: function() {
		return this.t.SCROLL_W * this.ops.scaleFactor | 0;
	}
	,TEXT_OFFSET: function() {
		return this.t.TEXT_OFFSET * this.ops.scaleFactor;
	}
	,TAB_W: function() {
		return this.t.TAB_W * this.ops.scaleFactor | 0;
	}
	,HEADER_DRAG_H: function() {
		return 15 * this.ops.scaleFactor | 0;
	}
	,SCALE: function() {
		return this.ops.scaleFactor;
	}
	,FLASH_SPEED: function() {
		return 0.5;
	}
	,TOOLTIP_DELAY: function() {
		return 1.0;
	}
	,resize: function(handle,w,h,khaWindowId) {
		if(khaWindowId == null) {
			khaWindowId = 0;
		}
		handle.redraws = 2;
		if(handle.texture != null) {
			handle.texture.unload();
		}
		if(w < 1) {
			w = 1;
		}
		if(h < 1) {
			h = 1;
		}
		handle.texture = kha_Image.createRenderTarget(w,h,0,0,1,khaWindowId);
		handle.texture.get_g2().set_imageScaleQuality(1);
	}
	,__class__: zui_Zui
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
haxe_ds_ObjectMap.count = 0;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
Main.projectName = "littleGiant";
Main.projectPackage = "arm";
arm_GenerateGame.__meta__ = { fields : { speed : { prop : null}, totalTime : { prop : null}}};
armory_data_Config.configLoaded = false;
armory_renderpath_Inc.superSample = 1.0;
armory_renderpath_Inc.pointIndex = 0;
armory_renderpath_Inc.spotIndex = 0;
armory_renderpath_Inc.lastFrame = -1;
armory_renderpath_RenderPathCreator.setTargetMeshes = armory_renderpath_RenderPathDeferred.setTargetMeshes;
armory_renderpath_RenderPathCreator.drawMeshes = armory_renderpath_RenderPathDeferred.drawMeshes;
armory_renderpath_RenderPathCreator.applyConfig = armory_renderpath_RenderPathDeferred.applyConfig;
armory_system_Event.events = new haxe_ds_StringMap();
armory_trait_WalkNavigation.enabled = true;
armory_trait_WalkNavigation.keyUp = "w";
armory_trait_WalkNavigation.keyDown = "s";
armory_trait_WalkNavigation.keyLeft = "a";
armory_trait_WalkNavigation.keyRight = "d";
armory_trait_WalkNavigation.keyStrafeUp = "e";
armory_trait_WalkNavigation.keyStrafeDown = "q";
iron_App.traitInits = [];
iron_App.traitUpdates = [];
iron_App.traitLateUpdates = [];
iron_App.traitRenders = [];
iron_App.traitRenders2D = [];
iron_App.pauseUpdates = false;
iron_App.lastw = -1;
iron_App.lasth = -1;
iron_data_Data.cachedSceneRaws = new haxe_ds_StringMap();
iron_data_Data.cachedMeshes = new haxe_ds_StringMap();
iron_data_Data.cachedLights = new haxe_ds_StringMap();
iron_data_Data.cachedCameras = new haxe_ds_StringMap();
iron_data_Data.cachedMaterials = new haxe_ds_StringMap();
iron_data_Data.cachedParticles = new haxe_ds_StringMap();
iron_data_Data.cachedWorlds = new haxe_ds_StringMap();
iron_data_Data.cachedShaders = new haxe_ds_StringMap();
iron_data_Data.cachedBlobs = new haxe_ds_StringMap();
iron_data_Data.cachedImages = new haxe_ds_StringMap();
iron_data_Data.cachedSounds = new haxe_ds_StringMap();
iron_data_Data.cachedVideos = new haxe_ds_StringMap();
iron_data_Data.cachedFonts = new haxe_ds_StringMap();
iron_data_Data.assetsLoaded = 0;
iron_data_Data.loadingMeshes = new haxe_ds_StringMap();
iron_data_Data.loadingLights = new haxe_ds_StringMap();
iron_data_Data.loadingCameras = new haxe_ds_StringMap();
iron_data_Data.loadingMaterials = new haxe_ds_StringMap();
iron_data_Data.loadingParticles = new haxe_ds_StringMap();
iron_data_Data.loadingWorlds = new haxe_ds_StringMap();
iron_data_Data.loadingShaders = new haxe_ds_StringMap();
iron_data_Data.loadingSceneRaws = new haxe_ds_StringMap();
iron_data_Data.loadingBlobs = new haxe_ds_StringMap();
iron_data_Data.loadingImages = new haxe_ds_StringMap();
iron_data_Data.loadingSounds = new haxe_ds_StringMap();
iron_data_Data.loadingVideos = new haxe_ds_StringMap();
iron_data_Data.loadingFonts = new haxe_ds_StringMap();
iron_data_Data.sep = "/";
iron_data_Data.dataPath = "";
iron_system_Input.occupied = false;
iron_system_Input.gamepads = [];
iron_system_Input.registered = false;
iron_object_Object.uidCounter = 0;
iron_object_Object.seed = 1;
iron_Scene.uidCounter = 0;
iron_Scene.framePassed = true;
iron_system_Time.scale = 1.0;
iron_system_Time.last = 0.0;
iron_system_Time.realDelta = 0.0;
armory_trait_internal_Bridge.App = iron_App;
armory_trait_internal_Bridge.Scene = iron_Scene;
armory_trait_internal_Bridge.Time = iron_system_Time;
armory_trait_internal_Bridge.Input = iron_system_Input;
armory_trait_internal_Bridge.Object = iron_object_Object;
armory_trait_internal_Bridge.Data = iron_data_Data;
armory_trait_internal_DebugConsole.lrow = [0.5,0.5];
armory_trait_internal_DebugConsole.row4 = [0.25,0.25,0.25,0.25];
armory_trait_internal_DebugConsole.debugFloat = 1.0;
armory_trait_internal_DebugConsole.watchNodes = [];
armory_trait_internal_DebugConsole.lastTraces = [""];
armory_trait_internal_DebugDraw.maxLines = 300;
armory_trait_internal_DebugDraw.maxVertices = 1200;
armory_trait_internal_DebugDraw.maxIndices = 1800;
armory_trait_internal_DebugDraw.vx = new iron_math_Vec4();
armory_trait_internal_DebugDraw.vy = new iron_math_Vec4();
armory_trait_internal_DebugDraw.vz = new iron_math_Vec4();
armory_trait_internal_DebugDraw.v1 = new iron_math_Vec4();
armory_trait_internal_DebugDraw.v2 = new iron_math_Vec4();
armory_trait_internal_DebugDraw.t = new iron_math_Vec4();
armory_trait_internal_DebugDraw.midPoint = new iron_math_Vec4();
armory_trait_internal_DebugDraw.midLine = new iron_math_Vec4();
armory_trait_internal_DebugDraw.corner1 = new iron_math_Vec4();
armory_trait_internal_DebugDraw.corner2 = new iron_math_Vec4();
armory_trait_internal_DebugDraw.corner3 = new iron_math_Vec4();
armory_trait_internal_DebugDraw.corner4 = new iron_math_Vec4();
armory_trait_internal_DebugDraw.cameraLook = new iron_math_Vec4();
armory_trait_internal_LivePatch.patchId = 0;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
iron_RenderPath.drawCalls = 0;
iron_RenderPath.batchBuckets = 0;
iron_RenderPath.batchCalls = 0;
iron_RenderPath.culled = 0;
iron_RenderPath.numTrisMesh = 0;
iron_RenderPath.numTrisShadow = 0;
iron_data_ConstData.skydomeIndices = [0,1,2,0,3,4,3,5,6,5,7,8,7,9,10,9,11,12,13,14,15,11,16,17,13,18,2,14,2,19,2,1,20,1,4,21,4,6,22,6,8,23,8,10,24,10,12,25,14,26,15,17,27,25,22,23,28,24,29,28,24,25,30,26,31,15,25,27,32,26,19,33,19,20,34,20,21,35,21,22,36,33,34,37,34,35,38,35,36,39,36,28,40,28,29,41,30,42,41,31,43,15,30,32,44,31,33,45,40,41,46,42,47,46,43,48,15,42,44,49,43,45,50,45,37,51,37,38,52,39,53,52,39,40,54,50,51,55,51,52,56,53,57,56,53,54,58,46,59,58,46,47,60,48,61,15,47,49,62,48,50,63,59,64,65,59,60,66,61,67,15,60,62,68,61,63,69,63,55,70,56,71,70,56,57,72,57,58,65,70,71,73,71,72,74,72,65,75,64,76,75,64,66,77,67,78,15,68,79,77,67,69,80,69,70,81,76,77,82,78,83,15,77,79,84,80,85,83,80,81,86,81,73,87,74,88,87,74,75,89,76,90,89,87,88,91,88,89,92,90,93,92,90,82,94,83,95,15,82,84,96,83,85,97,86,98,97,86,87,99,95,100,15,96,101,102,95,97,103,97,98,104,98,99,105,91,106,105,91,92,107,93,108,107,93,94,102,105,106,109,106,107,110,108,111,110,108,102,112,100,113,15,102,101,114,100,103,115,103,104,116,104,105,117,114,118,119,113,115,120,115,116,121,117,122,121,109,123,122,109,110,124,111,125,124,111,112,119,113,126,15,123,124,127,125,128,127,125,119,129,126,130,15,119,118,131,126,120,132,121,133,132,121,122,134,122,123,135,130,132,136,132,133,137,133,134,138,134,135,139,135,127,140,128,141,140,128,129,142,130,143,15,129,131,144,139,140,145,141,146,145,141,142,147,143,148,15,142,144,149,143,136,150,137,151,150,138,152,151,138,139,153,150,151,154,152,155,154,153,156,155,153,145,157,146,158,157,146,147,159,148,160,15,147,149,161,148,150,162,158,163,164,158,159,165,160,166,15,161,167,165,160,162,168,162,154,169,155,170,169,156,171,170,156,157,164,169,170,172,171,173,172,171,164,174,163,175,174,163,165,176,166,177,15,165,167,178,166,168,179,168,169,180,176,181,182,177,183,15,176,178,184,177,179,185,179,180,186,172,187,186,173,188,187,173,174,189,175,182,189,187,190,191,188,192,190,188,189,193,182,194,193,182,181,195,183,196,15,181,184,197,183,185,198,185,186,191,194,195,199,196,200,15,195,197,201,196,198,202,198,191,203,190,204,203,192,205,204,192,193,206,194,207,206,205,208,209,205,206,210,207,211,210,207,199,212,200,213,15,199,201,214,202,215,213,202,203,216,204,209,216,213,217,15,214,218,219,215,220,217,215,216,221,209,222,221,209,208,223,208,210,224,211,225,224,211,212,219,223,226,227,223,224,228,225,229,228,225,219,230,217,231,15,218,232,230,220,233,231,220,221,234,222,227,234,230,232,235,231,233,236,233,234,237,227,238,237,227,226,239,226,228,240,229,241,240,229,230,242,231,243,15,239,240,244,241,245,244,241,242,246,243,247,15,235,248,246,243,236,249,237,250,249,238,251,250,239,252,251,249,250,253,250,251,254,252,255,254,252,244,256,245,257,256,245,246,258,247,259,15,248,260,258,247,249,261,257,262,263,258,264,262,259,265,15,258,260,266,259,261,267,261,253,268,253,254,269,255,270,269,255,256,263,268,271,272,269,273,271,270,274,273,270,263,275,262,276,275,262,264,277,265,278,15,264,266,279,267,272,278,276,280,281,276,277,282,278,283,15,277,279,284,278,272,285,272,271,286,271,273,287,274,288,287,274,275,281,287,3,0,288,5,3,281,7,5,280,9,7,282,11,9,283,13,15,282,284,16,285,18,13,286,0,18,0,2,18,0,4,1,3,6,4,5,8,6,7,10,8,9,12,10,11,17,12,13,2,14,14,19,26,2,20,19,1,21,20,4,22,21,6,23,22,8,24,23,10,25,24,17,25,12,22,28,36,24,28,23,24,30,29,25,32,30,26,33,31,19,34,33,20,35,34,21,36,35,33,37,45,34,38,37,35,39,38,36,40,39,28,41,40,30,41,29,30,44,42,31,45,43,40,46,54,42,46,41,42,49,47,43,50,48,45,51,50,37,52,51,39,52,38,39,54,53,50,55,63,51,56,55,53,56,52,53,58,57,46,58,54,46,60,59,47,62,60,48,63,61,59,65,58,59,66,64,60,68,66,61,69,67,63,70,69,56,70,55,56,72,71,57,65,72,70,73,81,71,74,73,72,75,74,64,75,65,64,77,76,68,77,66,67,80,78,69,81,80,76,82,90,77,84,82,80,83,78,80,86,85,81,87,86,74,87,73,74,89,88,76,89,75,87,91,99,88,92,91,90,92,89,90,94,93,82,96,94,83,97,95,86,97,85,86,99,98,96,102,94,95,103,100,97,104,103,98,105,104,91,105,99,91,107,106,93,107,92,93,102,108,105,109,117,106,110,109,108,110,107,108,112,111,102,114,112,100,115,113,103,116,115,104,117,116,114,119,112,113,120,126,115,121,120,117,121,116,109,122,117,109,124,123,111,124,110,111,119,125,123,127,135,125,127,124,125,129,128,119,131,129,126,132,130,121,132,120,121,134,133,122,135,134,130,136,143,132,137,136,133,138,137,134,139,138,135,140,139,128,140,127,128,142,141,129,144,142,139,145,153,141,145,140,141,147,146,142,149,147,143,150,148,137,150,136,138,151,137,138,153,152,150,154,162,152,154,151,153,155,152,153,157,156,146,157,145,146,159,158,147,161,159,148,162,160,158,164,157,158,165,163,161,165,159,160,168,166,162,169,168,155,169,154,156,170,155,156,164,171,169,172,180,171,172,170,171,174,173,163,174,164,163,176,175,165,178,176,166,179,177,168,180,179,176,182,175,176,184,181,177,185,183,179,186,185,172,186,180,173,187,172,173,189,188,175,189,174,187,191,186,188,190,187,188,193,192,182,193,189,182,195,194,181,197,195,183,198,196,185,191,198,194,199,207,195,201,199,196,202,200,198,203,202,190,203,191,192,204,190,192,206,205,194,206,193,205,209,204,205,210,208,207,210,206,207,212,211,199,214,212,202,213,200,202,216,215,204,216,203,214,219,212,215,217,213,215,221,220,209,221,216,209,223,222,208,224,223,211,224,210,211,219,225,223,227,222,223,228,226,225,228,224,225,230,229,218,230,219,220,231,217,220,234,233,222,234,221,230,235,242,231,236,243,233,237,236,227,237,234,227,239,238,226,240,239,229,240,228,229,242,241,239,244,252,241,244,240,241,246,245,235,246,242,243,249,247,237,249,236,238,250,237,239,251,238,249,253,261,250,254,253,252,254,251,252,256,255,245,256,244,245,258,257,248,258,246,247,261,259,257,263,256,258,262,257,258,266,264,259,267,265,261,268,267,253,269,268,255,269,254,255,263,270,268,272,267,269,271,268,270,273,269,270,275,274,262,275,263,262,277,276,264,279,277,267,278,265,276,281,275,276,282,280,277,284,282,278,285,283,272,286,285,271,287,286,274,287,273,274,281,288,287,0,286,288,3,287,281,5,288,280,7,281,282,9,280,282,16,11,285,13,283,286,18,285,84,289,96,96,289,101,101,289,114,114,289,118,118,289,131,144,131,289,149,144,289,149,289,161,161,289,167,167,289,178,178,289,184,184,289,197,197,289,201,201,289,214,214,289,218,218,289,232,232,289,235,235,289,248,260,248,289,260,289,266,266,289,279,279,289,284,284,289,16,16,289,17,27,17,289,27,289,32,44,32,289,44,289,49,49,289,62,62,289,68,68,289,79,79,289,84];
iron_data_ConstData.skydomePos = [-0.55557,0.0,0.83147,-0.544895,0.108386,0.83147,-0.37533,0.074658,0.92388,-0.707107,0.0,0.707107,-0.69352,0.13795,0.707107,-0.83147,0.0,0.55557,-0.815493,0.162212,0.55557,-0.92388,0.0,0.382683,-0.906127,0.18024,0.382683,-0.980785,0.0,0.19509,-0.96194,0.191342,0.19509,-1.0,0.0,0.0,-0.980785,0.19509,0.0,-0.19509,0.0,0.980785,-0.191342,0.03806,0.980785,0.0,0.0,1.,-0.980785,0.0,-0.28234,-0.96194,0.191342,-0.28234,-0.382683,0.0,0.92388,-0.353553,0.146447,0.92388,-0.51328,0.212608,0.83147,-0.653281,0.270598,0.707107,-0.768178,0.31819,0.55557,-0.853553,0.353553,0.382683,-0.906127,0.37533,0.19509,-0.923879,0.382684,0.0,-0.18024,0.074658,0.980785,-0.906127,0.37533,-0.28234,-0.768178,0.51328,0.382683,-0.815493,0.544895,0.19509,-0.831469,0.55557,0.0,-0.162212,0.108387,0.980785,-0.815493,0.544895,-0.28234,-0.31819,0.212608,0.92388,-0.46194,0.308658,0.83147,-0.587938,0.392848,0.707107,-0.691342,0.46194,0.55557,-0.392847,0.392848,0.83147,-0.5,0.5,0.707107,-0.587938,0.587938,0.55557,-0.653281,0.653282,0.382683,-0.69352,0.69352,0.19509,-0.707107,0.707107,0.0,-0.13795,0.13795,0.980785,-0.69352,0.69352,-0.28234,-0.270598,0.270598,0.92388,-0.544895,0.815493,0.19509,-0.55557,0.83147,0.0,-0.108386,0.162212,0.980785,-0.544895,0.815493,-0.28234,-0.212607,0.31819,0.92388,-0.308658,0.46194,0.83147,-0.392847,0.587938,0.707107,-0.46194,0.691342,0.55557,-0.51328,0.768178,0.382683,-0.212607,0.51328,0.83147,-0.270598,0.653282,0.707107,-0.318189,0.768178,0.55557,-0.353553,0.853554,0.382683,-0.37533,0.906128,0.19509,-0.382683,0.92388,0.0,-0.074658,0.18024,0.980785,-0.37533,0.906128,-0.28234,-0.146446,0.353554,0.92388,-0.191341,0.96194,0.19509,-0.18024,0.906128,0.382683,-0.19509,0.980785,0.0,-0.03806,0.191342,0.980785,-0.191341,0.96194,-0.28234,-0.074658,0.375331,0.92388,-0.108386,0.544895,0.83147,-0.137949,0.69352,0.707107,-0.162211,0.815493,0.55557,0.0,0.707107,0.707107,0.0,0.83147,0.55557,0.0,0.92388,0.382683,0.0,0.980785,0.19509,0.0,1.,0.0,0.0,0.195091,0.980785,0.0,0.980785,-0.28234,0.0,0.382684,0.92388,0.0,0.55557,0.83147,0.195091,0.980785,0.0,0.038061,0.191342,0.980785,0.191342,0.96194,-0.28234,0.074658,0.375331,0.92388,0.108387,0.544895,0.83147,0.13795,0.69352,0.707107,0.162212,0.815493,0.55557,0.18024,0.906128,0.382683,0.191342,0.96194,0.19509,0.31819,0.768178,0.55557,0.353554,0.853554,0.382683,0.375331,0.906127,0.19509,0.382684,0.92388,0.0,0.074658,0.18024,0.980785,0.375331,0.906127,-0.28234,0.146447,0.353554,0.92388,0.212608,0.51328,0.83147,0.270598,0.653282,0.707107,0.108387,0.162212,0.980785,0.544895,0.815493,-0.28234,0.555571,0.83147,0.0,0.212608,0.31819,0.92388,0.308659,0.46194,0.83147,0.392848,0.587938,0.707107,0.46194,0.691342,0.55557,0.51328,0.768178,0.382683,0.544895,0.815493,0.19509,0.587938,0.587938,0.55557,0.653282,0.653282,0.382683,0.69352,0.69352,0.19509,0.707107,0.707107,0.0,0.13795,0.13795,0.980785,0.69352,0.69352,-0.28234,0.270599,0.270598,0.92388,0.392848,0.392848,0.83147,0.5,0.5,0.707107,0.815493,0.544895,-0.28234,0.83147,0.55557,0.0,0.31819,0.212608,0.92388,0.46194,0.308658,0.83147,0.587938,0.392848,0.707107,0.691342,0.46194,0.55557,0.768178,0.51328,0.382683,0.815493,0.544895,0.19509,0.162212,0.108386,0.980785,0.853554,0.353553,0.382683,0.906128,0.37533,0.19509,0.92388,0.382683,0.0,0.18024,0.074658,0.980785,0.906128,0.37533,-0.28234,0.353554,0.146447,0.92388,0.51328,0.212608,0.83147,0.653282,0.270598,0.707107,0.768178,0.31819,0.55557,0.375331,0.074658,0.92388,0.544896,0.108386,0.83147,0.69352,0.13795,0.707107,0.815493,0.162212,0.55557,0.906128,0.18024,0.382683,0.96194,0.191342,0.19509,0.980786,0.19509,0.0,0.191342,0.03806,0.980785,0.96194,0.191342,-0.28234,0.92388,0.0,0.382683,0.980785,0.0,0.19509,1.,0.0,0.0,0.195091,0.0,0.980785,0.980785,0.0,-0.28234,0.382684,0.0,0.92388,0.555571,0.0,0.83147,0.707107,0.0,0.707107,0.83147,0.0,0.55557,0.544896,-0.108386,0.83147,0.69352,-0.13795,0.707107,0.815493,-0.162212,0.55557,0.906128,-0.18024,0.382683,0.96194,-0.191342,0.19509,0.980786,-0.19509,0.0,0.191342,-0.03806,0.980785,0.96194,-0.191342,-0.28234,0.375331,-0.074658,0.92388,0.906127,-0.37533,0.19509,0.853554,-0.353553,0.382683,0.92388,-0.382684,0.0,0.18024,-0.074658,0.980785,0.906127,-0.37533,-0.28234,0.353554,-0.146447,0.92388,0.51328,-0.212608,0.83147,0.653282,-0.270598,0.707107,0.768178,-0.31819,0.55557,0.587938,-0.392847,0.707107,0.691342,-0.46194,0.55557,0.768178,-0.51328,0.382683,0.815493,-0.544895,0.19509,0.83147,-0.55557,0.0,0.162212,-0.108386,0.980785,0.815493,-0.544895,-0.28234,0.31819,-0.212608,0.92388,0.46194,-0.308658,0.83147,0.707107,-0.707107,0.0,0.69352,-0.69352,0.19509,0.13795,-0.13795,0.980785,0.69352,-0.69352,-0.28234,0.270598,-0.270598,0.92388,0.392848,-0.392848,0.83147,0.5,-0.5,0.707107,0.587938,-0.587938,0.55557,0.653282,-0.653281,0.382683,0.392848,-0.587938,0.707107,0.308659,-0.46194,0.83147,0.46194,-0.691342,0.55557,0.51328,-0.768178,0.382683,0.544895,-0.815493,0.19509,0.55557,-0.83147,0.0,0.108387,-0.162212,0.980785,0.544895,-0.815493,-0.28234,0.212608,-0.31819,0.92388,0.382684,-0.92388,0.0,0.074658,-0.18024,0.980785,0.37533,-0.906127,-0.28234,0.146447,-0.353553,0.92388,0.212608,-0.51328,0.83147,0.270598,-0.653281,0.707107,0.31819,-0.768177,0.55557,0.353554,-0.853553,0.382683,0.37533,-0.906127,0.19509,0.162212,-0.815493,0.55557,0.13795,-0.69352,0.707107,0.18024,-0.906127,0.382683,0.191342,-0.961939,0.19509,0.19509,-0.980785,0.0,0.038061,-0.191342,0.980785,0.191342,-0.961939,-0.28234,0.074658,-0.37533,0.92388,0.108387,-0.544895,0.83147,0.0,-0.19509,0.980785,0.0,-0.980785,-0.28234,0.0,-1.0,0.0,0.0,-0.382683,0.92388,0.0,-0.55557,0.83147,0.0,-0.707107,0.707107,0.0,-0.831469,0.55557,0.0,-0.923879,0.382683,0.0,-0.980785,0.19509,-0.162211,-0.815493,0.55557,-0.137949,-0.69352,0.707107,-0.18024,-0.906127,0.382683,-0.191342,-0.961939,0.19509,-0.19509,-0.980785,0.0,-0.03806,-0.191342,0.980785,-0.191342,-0.961939,-0.28234,-0.074658,-0.37533,0.92388,-0.108386,-0.544895,0.83147,-0.37533,-0.906127,-0.28234,-0.146446,-0.353553,0.92388,-0.212607,-0.51328,0.83147,-0.270598,-0.653281,0.707107,-0.318189,-0.768177,0.55557,-0.353553,-0.853553,0.382683,-0.37533,-0.906127,0.19509,-0.382683,-0.923879,0.0,-0.074658,-0.18024,0.980785,-0.51328,-0.768178,0.382683,-0.544895,-0.815493,0.19509,-0.55557,-0.831469,0.0,-0.108386,-0.162212,0.980785,-0.544895,-0.815493,-0.28234,-0.212607,-0.31819,0.92388,-0.308658,-0.46194,0.83147,-0.392847,-0.587938,0.707107,-0.461939,-0.691341,0.55557,-0.392847,-0.392847,0.83147,-0.5,-0.5,0.707107,-0.587937,-0.587937,0.55557,-0.653281,-0.653281,0.382683,-0.693519,-0.693519,0.19509,-0.707106,-0.707106,0.0,-0.137949,-0.13795,0.980785,-0.693519,-0.693519,-0.28234,-0.270598,-0.270598,0.92388,-0.815492,-0.544895,0.19509,-0.768177,-0.51328,0.382683,-0.831469,-0.55557,0.0,-0.162211,-0.108386,0.980785,-0.815492,-0.544895,-0.28234,-0.318189,-0.212607,0.92388,-0.461939,-0.308658,0.83147,-0.587937,-0.392847,0.707107,-0.691341,-0.461939,0.55557,-0.51328,-0.212607,0.83147,-0.353553,-0.146447,0.92388,-0.653281,-0.270598,0.707107,-0.768177,-0.318189,0.55557,-0.853553,-0.353553,0.382683,-0.906127,-0.37533,0.19509,-0.923879,-0.382683,0.0,-0.18024,-0.074658,0.980785,-0.906127,-0.37533,-0.28234,-0.961939,-0.191341,0.19509,-0.906127,-0.18024,0.382683,-0.980785,-0.19509,0.0,-0.191342,-0.03806,0.980785,-0.961939,-0.191341,-0.28234,-0.37533,-0.074658,0.92388,-0.544895,-0.108386,0.83147,-0.69352,-0.13795,0.707107,-0.815492,-0.162211,0.55557,0.0,0.0,-0.860043];
iron_data_ConstData.skydomeNor = [0.559771,0.0,-0.828639,0.548997,-0.109195,-0.828639,0.380413,-0.075655,-0.92169,0.710135,0.0,-0.704031,0.696493,-0.138524,-0.704031,0.833338,0.0,-0.552751,0.817316,-0.162572,-0.552751,0.924741,0.0,-0.380535,0.90698,-0.180395,-0.380535,0.980987,0.0,-0.193915,0.962157,-0.191382,-0.193915,0.999878,0.0,-0.015015,0.980651,-0.195044,-0.015015,0.200964,0.0,-0.979583,0.197089,-0.039186,-0.979583,0.0,0.0,-1.0,0.858486,0.0,0.512803,0.841975,-0.167455,0.512803,0.38786,0.0,-0.92169,0.358348,-0.148412,-0.92169,0.517136,-0.214209,-0.828639,0.656056,-0.271737,-0.704031,0.76989,-0.318888,-0.552751,0.854366,-0.353862,-0.380535,0.906339,-0.375408,-0.193915,0.923765,-0.382611,-0.015015,0.185644,-0.076907,-0.979583,0.793146,-0.328532,0.512803,0.768914,-0.513749,-0.380535,0.815668,-0.545,-0.193915,0.831355,-0.555498,-0.015015,0.167089,-0.111637,-0.979583,0.713797,-0.476943,0.512803,0.322489,-0.215491,-0.92169,0.465407,-0.310984,-0.828639,0.590442,-0.394513,-0.704031,0.692892,-0.462966,-0.552751,0.395795,-0.395795,-0.828639,0.502121,-0.502121,-0.704031,0.589251,-0.589251,-0.552751,0.65389,-0.65389,-0.380535,0.693655,-0.693655,-0.193915,0.707022,-0.707022,-0.015015,0.142094,-0.142094,-0.979583,0.607044,-0.607044,0.512803,0.27427,-0.27427,-0.92169,0.545,-0.815668,-0.193915,0.555498,-0.831355,-0.015015,0.111637,-0.167089,-0.979583,0.476943,-0.713797,0.512803,0.215491,-0.322489,-0.92169,0.310984,-0.465407,-0.828639,0.394513,-0.590442,-0.704031,0.462966,-0.692892,-0.552751,0.513749,-0.768914,-0.380535,0.214209,-0.517136,-0.828639,0.271737,-0.656056,-0.704031,0.318888,-0.76989,-0.552751,0.353862,-0.854366,-0.380535,0.375408,-0.906339,-0.193915,0.382611,-0.923765,-0.015015,0.076907,-0.185644,-0.979583,0.328532,-0.793146,0.512803,0.148412,-0.358348,-0.92169,0.191382,-0.962157,-0.193915,0.180395,-0.90698,-0.380535,0.195044,-0.980651,-0.015015,0.039186,-0.197089,-0.979583,0.167455,-0.841975,0.512803,0.075655,-0.380413,-0.92169,0.109195,-0.548997,-0.828639,0.138524,-0.696493,-0.704031,0.162572,-0.817316,-0.552751,0.0,-0.710135,-0.704031,0.0,-0.833338,-0.552751,0.0,-0.924741,-0.380535,0.0,-0.980987,-0.193915,0.0,-0.999878,-0.015015,0.0,-0.200964,-0.979583,0.0,-0.858486,0.512803,0.0,-0.38786,-0.92169,0.0,-0.559771,-0.828639,-0.195044,-0.980651,-0.015015,-0.039186,-0.197089,-0.979583,-0.167455,-0.841975,0.512803,-0.075655,-0.380413,-0.92169,-0.109195,-0.548997,-0.828639,-0.138524,-0.696493,-0.704031,-0.162572,-0.817316,-0.552751,-0.180395,-0.90698,-0.380535,-0.191382,-0.962157,-0.193915,-0.318888,-0.76989,-0.552751,-0.353862,-0.854366,-0.380535,-0.375408,-0.906339,-0.193915,-0.382611,-0.923765,-0.015015,-0.076907,-0.185644,-0.979583,-0.328532,-0.793146,0.512803,-0.148412,-0.358348,-0.92169,-0.214209,-0.517136,-0.828639,-0.271737,-0.656056,-0.704031,-0.111637,-0.167089,-0.979583,-0.476943,-0.713797,0.512803,-0.555498,-0.831355,-0.015015,-0.215491,-0.322489,-0.92169,-0.310984,-0.465407,-0.828639,-0.394513,-0.590442,-0.704031,-0.462966,-0.692892,-0.552751,-0.513749,-0.768914,-0.380535,-0.545,-0.815668,-0.193915,-0.589251,-0.589251,-0.552751,-0.65389,-0.65389,-0.380535,-0.693655,-0.693655,-0.193915,-0.707022,-0.707022,-0.015015,-0.142094,-0.142094,-0.979583,-0.607044,-0.607044,0.512803,-0.27427,-0.27427,-0.92169,-0.395795,-0.395795,-0.828639,-0.502121,-0.502121,-0.704031,-0.713797,-0.476943,0.512803,-0.831355,-0.555498,-0.015015,-0.322489,-0.215491,-0.92169,-0.465407,-0.310984,-0.828639,-0.590442,-0.394513,-0.704031,-0.692892,-0.462966,-0.552751,-0.768914,-0.513749,-0.380535,-0.815668,-0.545,-0.193915,-0.167089,-0.111637,-0.979583,-0.854366,-0.353862,-0.380535,-0.906339,-0.375408,-0.193915,-0.923765,-0.382611,-0.015015,-0.185644,-0.076907,-0.979583,-0.793146,-0.328532,0.512803,-0.358348,-0.148412,-0.92169,-0.517136,-0.214209,-0.828639,-0.656056,-0.271737,-0.704031,-0.76989,-0.318888,-0.552751,-0.380413,-0.075655,-0.92169,-0.548997,-0.109195,-0.828639,-0.696493,-0.138524,-0.704031,-0.817316,-0.162572,-0.552751,-0.90698,-0.180395,-0.380535,-0.962157,-0.191382,-0.193915,-0.980651,-0.195044,-0.015015,-0.197089,-0.039186,-0.979583,-0.841975,-0.167455,0.512803,-0.924741,0.0,-0.380535,-0.980987,0.0,-0.193915,-0.999878,0.0,-0.015015,-0.200964,0.0,-0.979583,-0.858486,0.0,0.512803,-0.38786,0.0,-0.92169,-0.559771,0.0,-0.828639,-0.710135,0.0,-0.704031,-0.833338,0.0,-0.552751,-0.548997,0.109195,-0.828639,-0.696493,0.138524,-0.704031,-0.817316,0.162572,-0.552751,-0.90698,0.180395,-0.380535,-0.962157,0.191382,-0.193915,-0.980651,0.195044,-0.015015,-0.197089,0.039186,-0.979583,-0.841975,0.167455,0.512803,-0.380413,0.075655,-0.92169,-0.906339,0.375408,-0.193915,-0.854366,0.353862,-0.380535,-0.923765,0.382611,-0.015015,-0.185644,0.076907,-0.979583,-0.793146,0.328532,0.512803,-0.358348,0.148412,-0.92169,-0.517136,0.214209,-0.828639,-0.656056,0.271737,-0.704031,-0.76989,0.318888,-0.552751,-0.590442,0.394513,-0.704031,-0.692892,0.462966,-0.552751,-0.768914,0.513749,-0.380535,-0.815668,0.545,-0.193915,-0.831355,0.555498,-0.015015,-0.167089,0.111637,-0.979583,-0.713797,0.476943,0.512803,-0.322489,0.215491,-0.92169,-0.465407,0.310984,-0.828639,-0.707022,0.707022,-0.015015,-0.693655,0.693655,-0.193915,-0.142094,0.142094,-0.979583,-0.607044,0.607044,0.512803,-0.27427,0.27427,-0.92169,-0.395795,0.395795,-0.828639,-0.502121,0.502121,-0.704031,-0.589251,0.589251,-0.552751,-0.65389,0.65389,-0.380535,-0.394513,0.590442,-0.704031,-0.310984,0.465407,-0.828639,-0.462966,0.692892,-0.552751,-0.513749,0.768914,-0.380535,-0.545,0.815668,-0.193915,-0.555498,0.831355,-0.015015,-0.111637,0.167089,-0.979583,-0.476943,0.713797,0.512803,-0.215491,0.322489,-0.92169,-0.382611,0.923765,-0.015015,-0.076907,0.185644,-0.979583,-0.328532,0.793146,0.512803,-0.148412,0.358348,-0.92169,-0.214209,0.517136,-0.828639,-0.271737,0.656056,-0.704031,-0.318888,0.76989,-0.552751,-0.353862,0.854366,-0.380535,-0.375408,0.906339,-0.193915,-0.162572,0.817316,-0.552751,-0.138524,0.696493,-0.704031,-0.180395,0.90698,-0.380535,-0.191382,0.962157,-0.193915,-0.195044,0.980651,-0.015015,-0.039186,0.197089,-0.979583,-0.167455,0.841975,0.512803,-0.075655,0.380413,-0.92169,-0.109195,0.548997,-0.828639,0.0,0.200964,-0.979583,0.0,0.858486,0.512803,0.0,0.999878,-0.015015,0.0,0.38786,-0.92169,0.0,0.559771,-0.828639,0.0,0.710135,-0.704031,0.0,0.833338,-0.552751,0.0,0.924741,-0.380535,0.0,0.980987,-0.193915,0.162572,0.817316,-0.552751,0.138524,0.696493,-0.704031,0.180395,0.90698,-0.380535,0.191382,0.962157,-0.193915,0.195044,0.980651,-0.015015,0.039186,0.197089,-0.979583,0.167455,0.841975,0.512803,0.075655,0.380413,-0.92169,0.109195,0.548997,-0.828639,0.328532,0.793146,0.512803,0.148412,0.358348,-0.92169,0.214209,0.517136,-0.828639,0.271737,0.656056,-0.704031,0.318888,0.76989,-0.552751,0.353862,0.854366,-0.380535,0.375408,0.906339,-0.193915,0.382611,0.923765,-0.015015,0.076907,0.185644,-0.979583,0.513749,0.768914,-0.380535,0.545,0.815668,-0.193915,0.555498,0.831355,-0.015015,0.111637,0.167089,-0.979583,0.476943,0.713797,0.512803,0.215491,0.322489,-0.92169,0.310984,0.465407,-0.828639,0.394513,0.590442,-0.704031,0.462966,0.692892,-0.552751,0.395795,0.395795,-0.828639,0.502121,0.502121,-0.704031,0.589251,0.589251,-0.552751,0.65389,0.65389,-0.380535,0.693655,0.693655,-0.193915,0.707022,0.707022,-0.015015,0.142094,0.142094,-0.979583,0.607044,0.607044,0.512803,0.27427,0.27427,-0.92169,0.815668,0.545,-0.193915,0.768914,0.513749,-0.380535,0.831355,0.555498,-0.015015,0.167089,0.111637,-0.979583,0.713797,0.476943,0.512803,0.322489,0.215491,-0.92169,0.465407,0.310984,-0.828639,0.590442,0.394513,-0.704031,0.692892,0.462966,-0.552751,0.517136,0.214209,-0.828639,0.358348,0.148412,-0.92169,0.656056,0.271737,-0.704031,0.76989,0.318888,-0.552751,0.854366,0.353862,-0.380535,0.906339,0.375408,-0.193915,0.923765,0.382611,-0.015015,0.185644,0.076907,-0.979583,0.793146,0.328532,0.512803,0.962157,0.191382,-0.193915,0.90698,0.180395,-0.380535,0.980651,0.195044,-0.015015,0.197089,0.039186,-0.979583,0.841975,0.167486,0.512803,0.380413,0.075655,-0.92169,0.548997,0.109195,-0.828639,0.696493,0.138524,-0.704031,0.817316,0.162572,-0.552751,0.0,0.0,0.999969];
iron_data_MaterialData.uidCounter = 0;
iron_data_MaterialContext.num = 0;
kha_math_FastMatrix4.width = 4;
kha_math_FastMatrix4.height = 4;
iron_math_Mat4.helpVec = new iron_math_Vec4();
iron_math_Mat4.helpMat = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_math_Quat.helpVec0 = new iron_math_Vec4();
iron_math_Quat.helpVec1 = new iron_math_Vec4();
iron_math_Quat.helpVec2 = new iron_math_Vec4();
iron_math_Quat.helpMat = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_math_Quat.xAxis = new iron_math_Vec4(1.0,0.0,0.0);
iron_math_Quat.yAxis = new iron_math_Vec4(0.0,1.0,0.0);
iron_object_Animation.m1 = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_object_Animation.m2 = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_object_Animation.vpos = new iron_math_Vec4();
iron_object_Animation.vpos2 = new iron_math_Vec4();
iron_object_Animation.vscl = new iron_math_Vec4();
iron_object_Animation.vscl2 = new iron_math_Vec4();
iron_object_Animation.q1 = new iron_math_Quat();
iron_object_Animation.q2 = new iron_math_Quat();
iron_object_Animation.q3 = new iron_math_Quat();
iron_object_Animation.vp = new iron_math_Vec4();
iron_object_Animation.vs = new iron_math_Vec4();
iron_object_Animation.animationTime = 0.0;
iron_object_Animation.startTime = 0.0;
iron_object_BoneAnimation.skinMaxBones = 128;
iron_object_BoneAnimation.m = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_object_BoneAnimation.m1 = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_object_BoneAnimation.m2 = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_object_BoneAnimation.bm = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_object_BoneAnimation.wm = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_object_BoneAnimation.vpos = new iron_math_Vec4();
iron_object_BoneAnimation.vscl = new iron_math_Vec4();
iron_object_BoneAnimation.q1 = new iron_math_Quat();
iron_object_BoneAnimation.q2 = new iron_math_Quat();
iron_object_BoneAnimation.q3 = new iron_math_Quat();
iron_object_BoneAnimation.vpos2 = new iron_math_Vec4();
iron_object_BoneAnimation.vscl2 = new iron_math_Vec4();
iron_object_BoneAnimation.v1 = new iron_math_Vec4();
iron_object_BoneAnimation.v2 = new iron_math_Vec4();
iron_object_CameraObject.temp = new iron_math_Vec4();
iron_object_CameraObject.q = new iron_math_Quat();
iron_object_CameraObject.sphereCenter = new iron_math_Vec4();
iron_object_CameraObject.vcenter = new iron_math_Vec4();
iron_object_CameraObject.vup = new iron_math_Vec4();
iron_object_LightObject.cascadeCount = 1;
iron_object_LightObject.cascadeSplitFactor = 0.8;
iron_object_LightObject.cascadeBounds = 1.0;
iron_object_LightObject.m = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_object_LightObject.eye = new iron_math_Vec4();
iron_object_Transform.temp = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_object_Transform.q = new iron_math_Quat();
kha_math_FastMatrix3.width = 3;
kha_math_FastMatrix3.height = 3;
iron_object_Uniforms.biasMat = new iron_math_Mat4(0.5,0.0,0.0,0.5,0.0,-0.5,0.0,0.5,0.0,0.0,0.5,0.5,0.0,0.0,0.0,1.0);
iron_object_Uniforms.helpMat = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_object_Uniforms.helpMat2 = new iron_math_Mat4(1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0);
iron_object_Uniforms.helpMat3 = new iron_math_Mat3(1,0,0,0,1,0,0,0,1);
iron_object_Uniforms.helpVec = new iron_math_Vec4();
iron_object_Uniforms.helpVec2 = new iron_math_Vec4();
iron_object_Uniforms.helpQuat = new iron_math_Quat();
iron_object_Uniforms.defaultFilter = 1;
iron_system_Mouse.buttons = ["left","right","middle"];
iron_system_Pen.buttons = ["tip"];
iron_system_Keyboard.keys = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","space","backspace","tab","enter","shift","control","alt","escape","delete","up","down","left","right","back",",",".",":",";","<","=",">","?","!","\"","#","$","%","&","_","(",")","*","|","{","}","[","]","~","`","/","\\","@","+","-","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12"];
iron_system_Gamepad.buttonsPS = ["cross","circle","square","triangle","l1","r1","l2","r2","share","options","l3","r3","up","down","left","right","home","touchpad"];
iron_system_Gamepad.buttonsXBOX = ["a","b","x","y","l1","r1","l2","r2","share","options","l3","r3","up","down","left","right","home","touchpad"];
iron_system_Gamepad.buttons = iron_system_Gamepad.buttonsPS;
kha_Assets.images = new kha__$Assets_ImageList();
kha_Assets.sounds = new kha__$Assets_SoundList();
kha_Assets.blobs = new kha__$Assets_BlobList();
kha_Assets.fonts = new kha__$Assets_FontList();
kha_Assets.videos = new kha__$Assets_VideoList();
kha__$Color_Color_$Impl_$.Black = -16777216;
kha__$Color_Color_$Impl_$.White = -1;
kha__$Color_Color_$Impl_$.Red = -65536;
kha__$Color_Color_$Impl_$.Blue = -16776961;
kha__$Color_Color_$Impl_$.Green = -16711936;
kha__$Color_Color_$Impl_$.Magenta = -65281;
kha__$Color_Color_$Impl_$.Yellow = -256;
kha__$Color_Color_$Impl_$.Cyan = -16711681;
kha__$Color_Color_$Impl_$.Purple = -8388480;
kha__$Color_Color_$Impl_$.Pink = -16181;
kha__$Color_Color_$Impl_$.Orange = -23296;
kha__$Color_Color_$Impl_$.Transparent = 0;
kha__$Color_Color_$Impl_$.invMaxChannelValue = 0.00392156862745098;
kha_Display.displays = [];
kha_FontStyle.Default = new kha_FontStyle(false,false,false);
kha_Scheduler.timeWarpSaveTime = 10.0;
kha_Scheduler.DIF_COUNT = 3;
kha_Scheduler.maxframetime = 0.5;
kha_Scheduler.startTime = 0;
kha_Shaders.BLANK_mesh_fragData0 = "s1204:AAAARFhCQ6eHgB%tr9Q712u88OEuFh4BAAAAhAMAAAUAAAA0AAAAjAAAAMAAAAAMAQAACAMAAFJERUZQAAAAAAAAAAAAAAAAAAAAHAAAAAAE::8AAQAAHAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAAHBwAAVEVYQ09PUkQAq6urT1NHTkQAAAACAAAACAAAADgAAAAAAAAAAAAAAAMAAAAAAAAADwAAADgAAAABAAAAAAAAAAMAAAABAAAADwAAAFNWX1RhcmdldACrq1NIRFL0AQAAQAAAAH0AAABiEAADchAQAAAAAABlAAAD8iAQAAAAAABlAAAD8iAQAAEAAABoAAACAwAAABAAAAcSABAAAAAAAEYSEAAAAAAARhIQAAAAAABEAAAFEgAQAAAAAAAKABAAAAAAADgAAAdyABAAAAAAAAYAEAAAAAAAJhkQAAAAAAAAAAAJggAQAAAAAAAqABCAgQAAAAAAAAAaABCAgQAAAAAAAAAAAAAIggAQAAAAAAAKABCAgQAAAAAAAAA6ABAAAAAAAA4AAAdyABAAAAAAAEYCEAAAAAAA9g8QAAAAAAAAAAALMgAQAAEAAABmChCAwQAAAAAAAAACQAAAAACAPwAAgD8AAAAAAAAAAB0AAApyABAAAgAAAEYCEAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAPkgAQAAAAAABWCRAAAgAAAAJAAAAAAIA:AAAAAAAAAAAAAIA:AkAAAAAAgL8AAAAAAAAAAAAAgL84AAAHkgAQAAAAAAAGDBAAAAAAAAYEEAABAAAANwAACTIgEAAAAAAABgAQAAIAAACWBRAAAAAAAMYAEAAAAAAANgAACMIgEAAAAAAAAkAAAAAAAAAAAAAAzczMPYAAgD02AAAI8iAQAAEAAAACQAAAAAAAAOJM6j3OzEw:cf1:Qz4AAAFTVEFUdAAAAA4AAAADAAAAAAAAAAMAAAAJAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.BLANK_mesh_vertData0 = "s1580:Am5vcgAAcG9zAAEBJEdsb2JhbHMAAAJOAAAAAAAsAAAAAwNXVlAAMAAAAEAAAAAEBERYQkOUFphmEkryQPQiA0vQbvwDAQAAAHAEAAAFAAAANAAAACgBAAB0AQAAzAEAAPQDAABSREVG7AAAAAEAAABIAAAAAQAAABwAAAAABP7:AAEAALgAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAACRHbG9iYWxzAKurqzwAAAACAAAAYAAAAHAAAAAAAAAAAAAAAJAAAAAAAAAALAAAAAIAAACUAAAAAAAAAKQAAAAwAAAAQAAAAAIAAACoAAAAAAAAAE4Aq6sDAAMAAwADAAAAAAAAAAAAV1ZQAAMAAwAEAAQAAAAAAAAAAABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKurSVNHTkQAAAACAAAACAAAADgAAAAAAAAAAAAAAAMAAAAAAAAAAwMAADgAAAABAAAAAAAAAAMAAAABAAAADw8AAFRFWENPT1JEAKurq09TR05QAAAAAgAAAAgAAAA4AAAAAAAAAAAAAAADAAAAAAAAAAcIAABBAAAAAAAAAAEAAAADAAAAAQAAAA8AAABURVhDT09SRABTVl9Qb3NpdGlvbgCrq6tTSERSIAIAAEAAAQCIAAAAWQAABEaOIAAAAAAABwAAAF8AAAMyEBAAAAAAAF8AAAPyEBAAAQAAAGUAAANyIBAAAAAAAGcAAATyIBAAAQAAAAEAAABoAAACAgAAADYAAAUyABAAAAAAAEYQEAAAAAAANgAABUIAEAAAAAAAOhAQAAEAAAAQAAAIEgAQAAEAAABGAhAAAAAAAEaCIAAAAAAAAAAAABAAAAgiABAAAQAAAEYCEAAAAAAARoIgAAAAAAABAAAAEAAACEIAEAABAAAARgIQAAAAAABGgiAAAAAAAAIAAAAQAAAHEgAQAAAAAABGAhAAAQAAAEYCEAABAAAARAAABRIAEAAAAAAACgAQAAAAAAA4AAAHciAQAAAAAAAGABAAAAAAAEYCEAABAAAANgAABXIAEAAAAAAARhIQAAEAAAA2AAAFggAQAAAAAAABQAAAAACAPxEAAAgSABAAAQAAAEYOEAAAAAAARo4gAAAAAAAFAAAAEQAACCIAEAABAAAARg4QAAAAAABGjiAAAAAAAAYAAAAAAAAHEgAQAAEAAAAaABAAAQAAAAoAEAABAAAANgAABYIgEAABAAAAGgAQAAEAAAA4AAAHQiAQAAEAAAAKABAAAQAAAAFAAAAAAAA:EQAACBIgEAABAAAARg4QAAAAAABGjiAAAAAAAAMAAAARAAAIIiAQAAEAAABGDhAAAAAAAEaOIAAAAAAABAAAAD4AAAFTVEFUdAAAABIAAAACAAAAAAAAAAQAAAAMAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.BLANK_shadowmap_fragData0 = "s426:AAAARFhCQ4ETqlbuSbEtSQGO6SrzY7gBAAAAPAEAAAUAAAA0AAAAjAAAAJwAAACsAAAAwAAAAFJERUZQAAAAAAAAAAAAAAAAAAAAHAAAAAAE::8AAQAAHAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOCAAAAAAAAAAIAAAAT1NHTggAAAAAAAAACAAAAFNIRFIMAAAAQAAAAAMAAAA%AAABU1RBVHQAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.BLANK_shadowmap_vertData0 = "s1111:AXBvcwAAASRHbG9iYWxzAAABTFdWUAAAAAAAQAAAAAQERFhCQ3xflQ:oR9:Lx6mX3k:DcrwBAAAAIAMAAAUAAAA0AAAAAAEAADQBAABoAQAApAIAAFJERUbEAAAAAQAAAEgAAAABAAAAHAAAAAAE:v8AAQAAkAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJEdsb2JhbHMAq6urPAAAAAEAAABgAAAAQAAAAAAAAAAAAAAAeAAAAAAAAABAAAAAAgAAAIAAAAAAAAAATFdWUACrq6sDAAMABAAEAAAAAAAAAAAATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NACrq0lTR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAA8HAABURVhDT09SRACrq6tPU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAABAAAAAwAAAAAAAAAPAAAAU1ZfUG9zaXRpb24AU0hEUjQBAABAAAEATQAAAFkAAARGjiAAAAAAAAQAAABfAAADchAQAAAAAABnAAAE8iAQAAAAAAABAAAAaAAAAgIAAAA2AAAFcgAQAAAAAABGEhAAAAAAADYAAAWCABAAAAAAAAFAAAAAAIA:EQAACBIAEAABAAAARg4QAAAAAABGjiAAAAAAAAIAAAARAAAIIgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAwAAAAAAAAcSABAAAQAAABoAEAABAAAACgAQAAEAAAA2AAAFgiAQAAAAAAAaABAAAQAAADgAAAdCIBAAAAAAAAoAEAABAAAAAUAAAAAAAD8RAAAIEiAQAAAAAABGDhAAAAAAAEaOIAAAAAAAAAAAABEAAAgiIBAAAAAAAEYOEAAAAAAARo4gAAAAAAABAAAAPgAAAVNUQVR0AAAACgAAAAIAAAAAAAAAAgAAAAYAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.BLANK_translucent_fragData0 = "s4222:AAEkR2xvYmFscwAACWNhc0RhdGEAAAAAAEABAAAEAXNoaXJyAEABAABwAAAABAFiYWNrZ3JvdW5kQ29sALABAAAMAAAAAwFlbnZtYXBTdHJlbmd0aAC8AQAABAAAAAEBc3VuRGlyAMABAAAMAAAAAwFyZWNlaXZlU2hhZG93AMwBAAAEAAAAAQFleWUA0AEAAAwAAAADAXNoYWRvd3NCaWFzANwBAAAEAAAAAQFzdW5Db2wA4AEAAAwAAAADAURYQkO6j8LZfhRf5O:1ie:x17YpAQAAAKALAAAFAAAANAAAAFgCAAD4AgAARAMAACQLAABSREVGHAIAAAEAAABIAAAAAQAAABwAAAAABP::AAEAAOcBAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAACRHbG9iYWxzAKurqzwAAAAJAAAAYAAAAPABAAAAAAAAAAAAADgBAAAAAAAAQAEAAAAAAABAAQAAAAAAAFABAABAAQAAcAAAAAIAAABYAQAAAAAAAGgBAACwAQAADAAAAAIAAAB4AQAAAAAAAIgBAAC8AQAABAAAAAIAAACYAQAAAAAAAKgBAADAAQAADAAAAAAAAAB4AQAAAAAAAK8BAADMAQAABAAAAAAAAADAAQAAAAAAANABAADQAQAADAAAAAAAAAB4AQAAAAAAANQBAADcAQAABAAAAAAAAACYAQAAAAAAAOABAADgAQAADAAAAAAAAAB4AQAAAAAAAGNhc0RhdGEAAQADAAEABAAUAAAAAAAAAHNoaXJyAKurAQADAAEABAAHAAAAAAAAAGJhY2tncm91bmRDb2wAq6sBAAMAAQADAAAAAAAAAAAAZW52bWFwU3RyZW5ndGgAqwAAAwABAAEAAAAAAAAAAABzdW5EaXIAcmVjZWl2ZVNoYWRvdwCrq6sAAAEAAQABAAAAAAAAAAAAZXllAHNoYWRvd3NCaWFzAHN1bkNvbABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKurq0lTR06YAAAABQAAAAgAAACAAAAAAAAAAAAAAAADAAAAAAAAAAcAAACAAAAAAQAAAAAAAAADAAAAAQAAAAcHAACAAAAAAgAAAAAAAAADAAAAAgAAAAcHAACAAAAAAwAAAAAAAAADAAAAAwAAAAcAAACJAAAAAAAAAAEAAAADAAAABAAAAA8EAABURVhDT09SRABTVl9Qb3NpdGlvbgCrq6tPU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPAAAAOAAAAAEAAAAAAAAAAwAAAAEAAAAPAAAAU1ZfVGFyZ2V0AKurU0hEUtgHAABAAAAA9gEAAFkAAARGjiAAAAAAABwAAABiEAADchAQAAEAAABiEAADchAQAAIAAABkIAAEQhAQAAQAAAABAAAAZQAAA:IgEAAAAAAAZQAAA:IgEAABAAAAaAAAAgQAAAAQAAAKEgAQAAAAAABGEhAAAQAAAAJAAACamZk%PQoXP65H4T0AAAAAMgAACRIAEAAAAAAACgAQAAAAAAABQAAAVlXVPgFAAADJ5f8%GAAAByIAEAAAAAAACgAQAAAAAAABQAAAAACAPw0ABAMaABAAAAAAABAAAAciABAAAAAAAEYSEAACAAAARhIQAAIAAABEAAAFIgAQAAAAAAAaABAAAAAAADgAAAfiABAAAAAAAFYFEAAAAAAAVhIQAAIAAAA4AAALcgAQAAEAAABGgiAAAAAAABoAAAACQAAAhqvbPoar2z6Gq9s%AAAAADgAAAcyABAAAgAAAOYKEAAAAAAA5goQAAAAAAAyAAAKggAQAAEAAAAaABAAAAAAABoAEAAAAAAACgAQgEEAAAACAAAANgAABjIAEAADAAAA5oogAAAAAAAYAAAANgAABkIAEAADAAAACoAgAAAAAAAZAAAAOAAAB3IAEAACAAAAVgUQAAIAAABGAhAAAwAAADgAAApyABAAAgAAAEYCEAACAAAAAkAAAHE9Pj9xPT4:cT0%PwAAAAAyAAAJcgAQAAEAAABGAhAAAQAAAPYPEAABAAAARgIQAAIAAAAyAAANcgAQAAEAAABGgiAAAAAAABQAAAACQAAAxt9iP8bfYj:G32I:AAAAAEYCEAABAAAAMgAADXIAEAABAAAARgIQgEEAAAADAAAAAkAAACqnfT4qp30%Kqd9PgAAAABGAhAAAQAAADgAAAhyABAAAgAAAFYFEAAAAAAARoIgAAAAAAAXAAAAOAAACnIAEAACAAAARgIQAAIAAAACQAAAhqtbP4arWz%Gq1s:AAAAADIAAApyABAAAQAAAEYCEAACAAAApgoQgEEAAAAAAAAARgIQAAEAAAA4AAAIcgAQAAIAAABWBRAAAAAAAJaHIAAAAAAAGQAAADgAAAdyABAAAgAAAPYPEAAAAAAARgIQAAIAAAAyAAAMcgAQAAEAAABGAhAAAgAAAAJAAACGq1s:hqtbP4arWz8AAAAARgIQAAEAAAA4AAAJEgAQAAIAAAAqABCAQQAAAAAAAAA6gCAAAAAAABcAAAA4AAAJYgAQAAIAAACmChCAQQAAAAAAAAAGgSAAAAAAABgAAAA4AAAHcgAQAAIAAAD2DxAAAAAAAEYCEAACAAAAMgAADHIAEAABAAAARgIQAAIAAAACQAAAhqtbP4arWz%Gq1s:AAAAAEYCEAABAAAAOAAACHIAEAACAAAAVgUQAAAAAACWhyAAAAAAABYAAAAyAAAMcgAQAAEAAABGAhAAAgAAAAJAAABp:II:afyCP2n8gj8AAAAARgIQAAEAAAA4AAAJEgAQAAIAAAAqABCAQQAAAAAAAAA6gCAAAAAAABQAAAA4AAAJYgAQAAIAAACmChCAQQAAAAAAAAAGgSAAAAAAABUAAAAyAAAMcgAQAAEAAABGAhAAAgAAAAJAAABp:II:afyCP2n8gj8AAAAARgIQAAEAAAA4AAAIMgAQAAIAAAD2DxAAAAAAAOaKIAAAAAAAFQAAADgAAAhCABAAAgAAADoAEAAAAAAACoAgAAAAAAAWAAAAMgAADOIAEAAAAAAABgkQAAIAAAACQAAAAAAAAGn8gj9p:II:afyCPwYJEAABAAAAOAAAC3IAEAABAAAARoIgAAAAAAAbAAAAAkAAAArXIz0K1yM9CtcjPQAAAAAyAAAM4gAQAAAAAABWDhAAAAAAAAJAAAAAAAAAzszMPvbVcz3OzMw%BgkQAAEAAAAyAAAN4gAQAAAAAABWDhAAAAAAAPaPIAAAAAAAGwAAAAJAAAAAAAAAexSeQPM1PD97FJ5AOAAAB%IAEAAAAAAABgAQAAAAAABWDhAAAAAAADgAAAriABAAAAAAAFYOEAAAAAAAAkAAAAAAAAAAAAA:AAAAPwAAAD84AAAHEgAQAAEAAAAKABAAAAAAAAFAAAAAACBBMwAABxIAEAABAAAACgAQAAEAAAABQAAAAACAPwAAAAcSABAAAQAAAAoAEAABAAAAAUAAAArXIzw4AAAHIgAQAAEAAAAKABAAAQAAAAoAEAABAAAAOAAABxIAEAABAAAAGgAQAAEAAAAKABAAAQAAADgAAAcSABAAAQAAAAoAEAABAAAAAUAAACC8vkwyAAAKIgAQAAEAAAAqEBCAQQAAAAQAAAABQAAAZmZmPwFAAAAAAIA:OAAAB0IAEAABAAAAGgAQAAEAAAAaABAAAQAAADgAAAciABAAAQAAACoAEAABAAAAGgAQAAEAAAA4AAAHEgAQAAEAAAAaABAAAQAAAAoAEAABAAAANAAABxIAEAABAAAACgAQAAEAAAABQAAACtcjPDMAAAcSABAAAQAAAAoAEAABAAAAAUAAAACAO0U4AAAHciAQAAAAAACWBxAAAAAAAAYAEAABAAAAOAAABxIgEAABAAAACgAQAAAAAAAKABAAAQAAADYAAAWCIBAAAAAAAAoAEAAAAAAANgAACOIgEAABAAAAAkAAAAAAAAAAAAAAAAAAAAAAgD8%AAABU1RBVHQAAAA5AAAABAAAAAAAAAAFAAAAMwAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.BLANK_translucent_vertData0 = "s2196:Am5vcgAAcG9zAAEBJEdsb2JhbHMAAAVXAAAAAABAAAAABARwb3NVbnBhY2sAQAAAAAQAAAABAU4AUAAAACwAAAADA1dWUACAAAAAQAAAAAQEZXllAMAAAAAMAAAAAwFEWEJD7OI2XZA5dd0dw4S%8bp0jAEAAAAQBgAABQAAADQAAACkAQAA8AEAAJACAACUBQAAUkRFRmgBAAABAAAASAAAAAEAAAAcAAAAAAT%:wABAAA0AQAAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAkR2xvYmFscwCrq6s8AAAABQAAAGAAAADQAAAAAAAAAAAAAADYAAAAAAAAAEAAAAACAAAA3AAAAAAAAADsAAAAQAAAAAQAAAACAAAA%AAAAAAAAAAIAQAAUAAAACwAAAACAAAADAEAAAAAAAAcAQAAgAAAAEAAAAACAAAA3AAAAAAAAAAgAQAAwAAAAAwAAAACAAAAJAEAAAAAAABXAKurAwADAAQABAAAAAAAAAAAAHBvc1VucGFjawCrqwAAAwABAAEAAAAAAAAAAABOAKurAwADAAMAAwAAAAAAAAAAAFdWUABleWUAAQADAAEAAwAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAOAAAAAEAAAAAAAAAAwAAAAEAAAAPDwAAVEVYQ09PUkQAq6urT1NHTpgAAAAFAAAACAAAAIAAAAAAAAAAAAAAAAMAAAAAAAAABwgAAIAAAAABAAAAAAAAAAMAAAABAAAABwgAAIAAAAACAAAAAAAAAAMAAAACAAAABwgAAIAAAAADAAAAAAAAAAMAAAADAAAABwgAAIkAAAAAAAAAAQAAAAMAAAAEAAAADwAAAFRFWENPT1JEAFNWX1Bvc2l0aW9uAKurq1NIRFL8AgAAQAABAL8AAABZAAAERo4gAAAAAAANAAAAXwAAAzIQEAAAAAAAXwAAA:IQEAABAAAAZQAAA3IgEAAAAAAAZQAAA3IgEAABAAAAZQAAA3IgEAACAAAAZQAAA3IgEAADAAAAZwAABPIgEAAEAAAAAQAAAGgAAAIDAAAANgAABXIAEAAAAAAARhIQAAEAAAA2AAAFggAQAAAAAAABQAAAAACAPxEAAAgSABAAAQAAAEYOEAAAAAAARo4gAAAAAAAAAAAAEQAACCIAEAABAAAARg4QAAAAAABGjiAAAAAAAAEAAAARAAAIQgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAgAAAAAAAAlyIBAAAAAAAEYCEIBBAAAAAQAAAEaCIAAAAAAADAAAADYAAAVyIBAAAwAAAEYCEAABAAAAOAAACHIgEAABAAAARhIQAAEAAAAGgCAAAAAAAAQAAAA2AAAFMgAQAAEAAABGEBAAAAAAADYAAAVCABAAAQAAADoQEAABAAAAEAAACBIAEAACAAAARgIQAAEAAABGgiAAAAAAAAUAAAAQAAAIIgAQAAIAAABGAhAAAQAAAEaCIAAAAAAABgAAABAAAAhCABAAAgAAAEYCEAABAAAARoIgAAAAAAAHAAAAEAAABxIAEAABAAAARgIQAAIAAABGAhAAAgAAAEQAAAUSABAAAQAAAAoAEAABAAAAOAAAB3IgEAACAAAABgAQAAEAAABGAhAAAgAAABEAAAgSABAAAQAAAEYOEAAAAAAARo4gAAAAAAAKAAAAEQAACCIAEAABAAAARg4QAAAAAABGjiAAAAAAAAsAAAAAAAAHEgAQAAEAAAAaABAAAQAAAAoAEAABAAAANgAABYIgEAAEAAAAGgAQAAEAAAA4AAAHQiAQAAQAAAAKABAAAQAAAAFAAAAAAAA:EQAACBIgEAAEAAAARg4QAAAAAABGjiAAAAAAAAgAAAARAAAIIiAQAAQAAABGDhAAAAAAAEaOIAAAAAAACQAAAD4AAAFTVEFUdAAAABgAAAADAAAAAAAAAAcAAAARAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.blur_edge_pass_fragData0 = "s13251:AAVfZ2J1ZmZlcjBfc2FtcGxlcgAAX3RleF9zYW1wbGVyAAFnYnVmZmVyMAAAdGV4AAEkR2xvYmFscwAAAWRpckludgAAAAAACAAAAAIBRFhCQ6asAbvxZssaHmdcanwduC8BAAAAhCYAAAUAAAA0AAAArAEAAOABAAAUAgAACCYAAFJERUZwAQAAAQAAAPQAAAAFAAAAHAAAAAAE::8AAQAAPAEAALwAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAzgAAAAMAAAAAAAAAAAAAAAAAAAABAAAAAQAAAAAAAADbAAAAAgAAAAUAAAAEAAAA:::::wAAAAABAAAADAAAAOQAAAACAAAABQAAAAQAAAD:::::AQAAAAEAAAAMAAAA6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAABfZ2J1ZmZlcjBfc2FtcGxlcgBfdGV4X3NhbXBsZXIAZ2J1ZmZlcjAAdGV4ACRHbG9iYWxzAKurq%gAAAABAAAADAEAABAAAAAAAAAAAAAAACQBAAAAAAAACAAAAAIAAAAsAQAAAAAAAGRpckludgCrAQADAAEAAgAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAAAQ4AAFNWX1RhcmdldACrq1NIRFLsIwAAQAAAAPsIAABZAAAERo4gAAAAAAABAAAAWgAAAwBgEAAAAAAAWgAAAwBgEAABAAAAWBgABABwEAAAAAAAVVUAAFgYAAQAcBAAAQAAAFVVAABiEAADMhAQAAAAAABlAAADEiAQAAAAAABoAAACBgAAAEgAAAvyABAAAAAAAEYQEAAAAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAAAAAACGIAEAAAAAAABhEQAAAAAAAGgSAAAAAAAAAAAABIAAAL8gAQAAEAAACWBRAAAAAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAEgAAAvyABAAAgAAAJYFEAAAAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAAHQAACmIAEAAAAAAABgEQAAEAAAACQAAAAAAAAAAAAAAAAAAAAAAAADcAAA9iABAAAAAAAFYGEAAAAAAAAkAAAAAAAAAAAIA:AACAPwAAAAACQAAAAAAAAAAAgL8AAIC:AAAAAAAAAAviABAAAgAAAAYBEIDBAAAAAQAAAAJAAAAAAAAAAACAPwAAgD8AAIA:OAAAB2IAEAAAAAAAVgYQAAAAAACmCxAAAgAAAAAAAAhCABAAAwAAABoAEIDBAAAAAQAAABoAEAACAAAAHQAAB4IAEAAAAAAAKgAQAAMAAAABQAAAAAAAADcAAAkyABAAAwAAAPYPEAAAAAAARgAQAAEAAACWBRAAAAAAABAAAAciABAAAAAAAEYCEAADAAAARgIQAAMAAABEAAAFIgAQAAAAAAAaABAAAAAAADgAAAfiABAAAAAAAFYFEAAAAAAABgkQAAMAAABIAAAL8gAQAAEAAABGEBAAAAAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAB0AAArCABAAAQAAAAYEEAABAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAPwgAQAAEAAACmDhAAAQAAAAJAAAAAAAAAAAAAAAAAgD8AAIA:AkAAAAAAAAAAAAAAAACAvwAAgL8AAAAL4gAQAAIAAAAGARCAwQAAAAEAAAACQAAAAAAAAAAAgD8AAIA:AACAPzgAAAfCABAAAQAAAKYOEAABAAAApg4QAAIAAAAAAAAIQgAQAAMAAAAaABCAwQAAAAEAAAAaABAAAgAAAB0AAAciABAAAgAAACoAEAADAAAAAUAAAAAAAAA3AAAJMgAQAAMAAABWBRAAAgAAAEYAEAABAAAA5goQAAEAAAAQAAAHEgAQAAEAAABGAhAAAwAAAEYCEAADAAAARAAABRIAEAABAAAACgAQAAEAAAA4AAAHcgAQAAEAAAAGABAAAQAAAEYCEAADAAAAEAAAByIAEAAAAAAAlgcQAAAAAABGAhAAAQAAAB0AAAciABAAAAAAABoAEAAAAAAAAUAAADMzcz8BAAAHQgAQAAAAAAAaABAAAAAAAAFAAAC7ewA%OAAAB0IAEAAAAAAAKgAQAAAAAAAKABAAAgAAADIAAAkSABAAAAAAAAoAEAAAAAAAAUAAAPTABz4qABAAAAAAAAAAAAnCABAAAAAAAAYUEAAAAAAABoQggEEAAAAAAAAAAAAAAEgAAAvyABAAAgAAAOYKEAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAASAAAC:IAEAADAAAA5goQAAAAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAdAAAKwgAQAAAAAAAGBBAAAgAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAAD%IAEAAAAAAAVg4QAAAAAAACQAAAAAAAAFgehD4AAIA:AACAPwJAAAAAAAAA9MAHPgAAgL8AAIC:AAAAC%IAEAADAAAABgEQgMEAAAACAAAAAkAAAAAAAAAAAIA:AACAPwAAgD84AAAHwgAQAAAAAACmDhAAAAAAAKYOEAADAAAAAAAACEIAEAAEAAAAGgAQgMEAAAACAAAAGgAQAAMAAAAdAAAHggAQAAEAAAAqABAABAAAAAFAAAAAAAAANwAACTIAEAAEAAAA9g8QAAEAAABGABAAAgAAAOYKEAAAAAAAEAAAB0IAEAAAAAAARgIQAAQAAABGAhAABAAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB3IAEAACAAAApgoQAAAAAABGAhAABAAAABAAAAdCABAAAAAAAEYCEAACAAAARgIQAAEAAAAdAAAHQgAQAAAAAAAqABAAAAAAAAFAAAAzM3M:AQAAB0IAEAAAAAAAKgAQAAAAAAABQAAAu3sAPjIAAAkSABAAAAAAAAoAEAADAAAAKgAQAAAAAAAKABAAAAAAAAAAAAciABAAAAAAACoAEAAAAAAAGgAQAAAAAAAyAAANwgAQAAAAAAAGhCAAAAAAAAAAAAACQAAAAAAAAAAAAAAAAABAAAAAQAYUEAAAAAAASAAAC:IAEAACAAAA5goQAAAAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAABIAAAL8gAQAAMAAADmChAAAAAAAEZ%EAABAAAAAGAQAAEAAAABQAAAAAAAAB0AAArCABAAAAAAAAYEEAACAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAPwgAQAAAAAACmDhAAAAAAAAJAAAAAAAAAAAAAAAAAgD8AAIA:AkAAAAAAAAAAAAAAAACAvwAAgL8AAAAL4gAQAAMAAAAGARCAwQAAAAIAAAACQAAAAAAAAAAAgD8AAIA:AACAPzgAAAfCABAAAAAAAKYOEAAAAAAApg4QAAMAAAAAAAAIQgAQAAQAAAAaABCAwQAAAAIAAAAaABAAAwAAAB0AAAeCABAAAQAAACoAEAAEAAAAAUAAAAAAAAA3AAAJMgAQAAQAAAD2DxAAAQAAAEYAEAACAAAA5goQAAAAAAAQAAAHQgAQAAAAAABGAhAABAAAAEYCEAAEAAAARAAABUIAEAAAAAAAKgAQAAAAAAA4AAAHcgAQAAIAAACmChAAAAAAAEYCEAAEAAAAEAAAB0IAEAAAAAAARgIQAAIAAABGAhAAAQAAAB0AAAdCABAAAAAAACoAEAAAAAAAAUAAADMzcz8BAAAHQgAQAAAAAAAqABAAAAAAAAFAAAAW2tk9MgAACRIAEAAAAAAACgAQAAMAAAAqABAAAAAAAAoAEAAAAAAAAAAAByIAEAAAAAAAKgAQAAAAAAAaABAAAAAAADIAAA7CABAAAAAAAAaEIIBBAAAAAAAAAAAAAAACQAAAAAAAAAAAAAAAAABAAAAAQAYUEAAAAAAASAAAC:IAEAACAAAA5goQAAAAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAABIAAAL8gAQAAMAAADmChAAAAAAAEZ%EAABAAAAAGAQAAEAAAABQAAAAAAAAB0AAArCABAAAAAAAAYEEAACAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAPwgAQAAAAAACmDhAAAAAAAAJAAAAAAAAAAAAAAAAAgD8AAIA:AkAAAAAAAAAAAAAAAACAvwAAgL8AAAAL4gAQAAMAAAAGARCAwQAAAAIAAAACQAAAAAAAAAAAgD8AAIA:AACAPzgAAAfCABAAAAAAAKYOEAAAAAAApg4QAAMAAAAAAAAIQgAQAAQAAAAaABCAwQAAAAIAAAAaABAAAwAAAB0AAAeCABAAAQAAACoAEAAEAAAAAUAAAAAAAAA3AAAJMgAQAAQAAAD2DxAAAQAAAEYAEAACAAAA5goQAAAAAAAQAAAHQgAQAAAAAABGAhAABAAAAEYCEAAEAAAARAAABUIAEAAAAAAAKgAQAAAAAAA4AAAHcgAQAAIAAACmChAAAAAAAEYCEAAEAAAAEAAAB0IAEAAAAAAARgIQAAIAAABGAhAAAQAAAB0AAAdCABAAAAAAACoAEAAAAAAAAUAAADMzcz8BAAAHQgAQAAAAAAAqABAAAAAAAAFAAAAW2tk9MgAACRIAEAAAAAAACgAQAAMAAAAqABAAAAAAAAoAEAAAAAAAAAAAByIAEAAAAAAAKgAQAAAAAAAaABAAAAAAADIAAA3yABAAAgAAAEaEIAAAAAAAAAAAAAJAAAAAAEBAAABAQAAAgEAAAIBARhQQAAAAAABIAAAL8gAQAAMAAABGABAAAgAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAB0AAArCABAAAAAAAAYEEAADAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAPwgAQAAAAAACmDhAAAAAAAAJAAAAAAAAAAAAAAAAAgD8AAIA:AkAAAAAAAAAAAAAAAACAvwAAgL8AAAALcgAQAAQAAABGABCAwQAAAAMAAAACQAAAAACAPwAAgD8AAIA:AAAAADgAAAfCABAAAAAAAKYOEAAAAAAAVgkQAAQAAAAAAAAIQgAQAAQAAAAaABCAwQAAAAMAAAAKABAABAAAAB0AAAeCABAAAQAAACoAEAAEAAAAAUAAAAAAAAA3AAAJMgAQAAQAAAD2DxAAAQAAAEYAEAADAAAA5goQAAAAAAAQAAAHQgAQAAAAAABGAhAABAAAAEYCEAAEAAAARAAABUIAEAAAAAAAKgAQAAAAAAA4AAAHcgAQAAMAAACmChAAAAAAAEYCEAAEAAAAEAAAB0IAEAAAAAAARgIQAAMAAABGAhAAAQAAAB0AAAdCABAAAAAAACoAEAAAAAAAAUAAADMzcz8BAAAHQgAQAAAAAAAqABAAAAAAAAFAAAD8b6U9SAAAC:IAEAADAAAARgAQAAIAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAyAAAJEgAQAAAAAAAKABAAAwAAACoAEAAAAAAACgAQAAAAAAAAAAAHIgAQAAAAAAAqABAAAAAAABoAEAAAAAAAMgAADvIAEAADAAAARoQggEEAAAAAAAAAAAAAAAJAAAAAAEBAAABAQAAAgEAAAIBARhQQAAAAAABIAAAL8gAQAAQAAABGABAAAwAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAB0AAArCABAAAAAAAAYEEAAEAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAPwgAQAAAAAACmDhAAAAAAAAJAAAAAAAAAAAAAAAAAgD8AAIA:AkAAAAAAAAAAAAAAAACAvwAAgL8AAAALcgAQAAUAAABGABCAwQAAAAQAAAACQAAAAACAPwAAgD8AAIA:AAAAADgAAAfCABAAAAAAAKYOEAAAAAAAVgkQAAUAAAAAAAAIQgAQAAUAAAAaABCAwQAAAAQAAAAKABAABQAAAB0AAAeCABAAAQAAACoAEAAFAAAAAUAAAAAAAAA3AAAJMgAQAAUAAAD2DxAAAQAAAEYAEAAEAAAA5goQAAAAAAAQAAAHQgAQAAAAAABGAhAABQAAAEYCEAAFAAAARAAABUIAEAAAAAAAKgAQAAAAAAA4AAAHcgAQAAQAAACmChAAAAAAAEYCEAAFAAAAEAAAB0IAEAAAAAAARgIQAAQAAABGAhAAAQAAAB0AAAdCABAAAAAAACoAEAAAAAAAAUAAADMzcz8BAAAHQgAQAAAAAAAqABAAAAAAAAFAAAD8b6U9SAAAC:IAEAAEAAAARgAQAAMAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAyAAAJEgAQAAAAAAAKABAABAAAACoAEAAAAAAACgAQAAAAAAAAAAAHIgAQAAAAAAAqABAAAAAAABoAEAAAAAAASAAAC:IAEAAEAAAA5goQAAIAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAABIAAAL8gAQAAIAAADmChAAAgAAAEZ%EAABAAAAAGAQAAEAAAABQAAAAAAAAB0AAArCABAAAAAAAAYEEAAEAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAPwgAQAAAAAACmDhAAAAAAAAJAAAAAAAAAAAAAAAAAgD8AAIA:AkAAAAAAAAAAAAAAAACAvwAAgL8AAAAL4gAQAAIAAAAGARCAwQAAAAQAAAACQAAAAAAAAAAAgD8AAIA:AACAPzgAAAfCABAAAAAAAKYOEAAAAAAApg4QAAIAAAAAAAAIQgAQAAUAAAAaABCAwQAAAAQAAAAaABAAAgAAAB0AAAeCABAAAQAAACoAEAAFAAAAAUAAAAAAAAA3AAAJMgAQAAUAAAD2DxAAAQAAAEYAEAAEAAAA5goQAAAAAAAQAAAHQgAQAAAAAABGAhAABQAAAEYCEAAFAAAARAAABUIAEAAAAAAAKgAQAAAAAAA4AAAH4gAQAAIAAACmChAAAAAAAAYJEAAFAAAAEAAAB0IAEAAAAAAAlgcQAAIAAABGAhAAAQAAAB0AAAdCABAAAAAAACoAEAAAAAAAAUAAADMzcz8BAAAHQgAQAAAAAAAqABAAAAAAAAFAAABAE2E9MgAACRIAEAAAAAAACgAQAAIAAAAqABAAAAAAAAoAEAAAAAAAAAAAByIAEAAAAAAAKgAQAAAAAAAaABAAAAAAAEgAAAvyABAAAgAAAOYKEAADAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAASAAAC:IAEAADAAAA5goQAAMAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAdAAAKwgAQAAAAAAAGBBAAAgAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAAD8IAEAAAAAAApg4QAAAAAAACQAAAAAAAAAAAAAAAAIA:AACAPwJAAAAAAAAAAAAAAAAAgL8AAIC:AAAAC%IAEAADAAAABgEQgMEAAAACAAAAAkAAAAAAAAAAAIA:AACAPwAAgD84AAAHwgAQAAAAAACmDhAAAAAAAKYOEAADAAAAAAAACEIAEAAEAAAAGgAQgMEAAAACAAAAGgAQAAMAAAAdAAAHggAQAAEAAAAqABAABAAAAAFAAAAAAAAANwAACTIAEAAEAAAA9g8QAAEAAABGABAAAgAAAOYKEAAAAAAAEAAAB0IAEAAAAAAARgIQAAQAAABGAhAABAAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB3IAEAACAAAApgoQAAAAAABGAhAABAAAABAAAAdCABAAAAAAAEYCEAACAAAARgIQAAEAAAAdAAAHQgAQAAAAAAAqABAAAAAAAAFAAAAzM3M:AQAAB0IAEAAAAAAAKgAQAAAAAAABQAAAQBNhPTIAAAkSABAAAAAAAAoAEAADAAAAKgAQAAAAAAAKABAAAAAAAAAAAAciABAAAAAAACoAEAAAAAAAGgAQAAAAAAAyAAAN8gAQAAIAAABGhCAAAAAAAAAAAAACQAAAAACgQAAAoEAAAMBAAADAQEYUEAAAAAAASAAAC:IAEAADAAAARgAQAAIAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAdAAAKwgAQAAAAAAAGBBAAAwAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAAD8IAEAAAAAAApg4QAAAAAAACQAAAAAAAAAAAAAAAAIA:AACAPwJAAAAAAAAAAAAAAAAAgL8AAIC:AAAAC3IAEAAEAAAARgAQgMEAAAADAAAAAkAAAAAAgD8AAIA:AACAPwAAAAA4AAAHwgAQAAAAAACmDhAAAAAAAFYJEAAEAAAAAAAACEIAEAAEAAAAGgAQgMEAAAADAAAACgAQAAQAAAAdAAAHggAQAAEAAAAqABAABAAAAAFAAAAAAAAANwAACTIAEAAEAAAA9g8QAAEAAABGABAAAwAAAOYKEAAAAAAAEAAAB0IAEAAAAAAARgIQAAQAAABGAhAABAAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB3IAEAADAAAApgoQAAAAAABGAhAABAAAABAAAAdCABAAAAAAAEYCEAADAAAARgIQAAEAAAAdAAAHQgAQAAAAAAAqABAAAAAAAAFAAAAzM3M:AQAAB0IAEAAAAAAAKgAQAAAAAAABQAAAbCQJPUgAAAvyABAAAwAAAEYAEAACAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAAMgAACRIAEAAAAAAACgAQAAMAAAAqABAAAAAAAAoAEAAAAAAAAAAAByIAEAAAAAAAKgAQAAAAAAAaABAAAAAAADIAAA7yABAAAwAAAEaEIIBBAAAAAAAAAAAAAAACQAAAAACgQAAAoEAAAMBAAADAQEYUEAAAAAAASAAAC:IAEAAEAAAARgAQAAMAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAdAAAKwgAQAAAAAAAGBBAABAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAAD8IAEAAAAAAApg4QAAAAAAACQAAAAAAAAAAAAAAAAIA:AACAPwJAAAAAAAAAAAAAAAAAgL8AAIC:AAAAC3IAEAAFAAAARgAQgMEAAAAEAAAAAkAAAAAAgD8AAIA:AACAPwAAAAA4AAAHwgAQAAAAAACmDhAAAAAAAFYJEAAFAAAAAAAACEIAEAAFAAAAGgAQgMEAAAAEAAAACgAQAAUAAAAdAAAHggAQAAEAAAAqABAABQAAAAFAAAAAAAAANwAACTIAEAAFAAAA9g8QAAEAAABGABAABAAAAOYKEAAAAAAAEAAAB0IAEAAAAAAARgIQAAUAAABGAhAABQAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB3IAEAAEAAAApgoQAAAAAABGAhAABQAAABAAAAdCABAAAAAAAEYCEAAEAAAARgIQAAEAAAAdAAAHQgAQAAAAAAAqABAAAAAAAAFAAAAzM3M:AQAAB0IAEAAAAAAAKgAQAAAAAAABQAAAbCQJPUgAAAvyABAABAAAAEYAEAADAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAAMgAACRIAEAAAAAAACgAQAAQAAAAqABAAAAAAAAoAEAAAAAAAAAAAByIAEAAAAAAAKgAQAAAAAAAaABAAAAAAAEgAAAvyABAABAAAAOYKEAACAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAASAAAC:IAEAACAAAA5goQAAIAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAdAAAKwgAQAAAAAAAGBBAABAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAAD8IAEAAAAAAApg4QAAAAAAACQAAAAAAAAAAAAAAAAIA:AACAPwJAAAAAAAAAAAAAAAAAgL8AAIC:AAAAC%IAEAACAAAABgEQgMEAAAAEAAAAAkAAAAAAAAAAAIA:AACAPwAAgD84AAAHwgAQAAAAAACmDhAAAAAAAKYOEAACAAAAAAAACEIAEAAFAAAAGgAQgMEAAAAEAAAAGgAQAAIAAAAdAAAHggAQAAEAAAAqABAABQAAAAFAAAAAAAAANwAACTIAEAAFAAAA9g8QAAEAAABGABAABAAAAOYKEAAAAAAAEAAAB0IAEAAAAAAARgIQAAUAAABGAhAABQAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB%IAEAACAAAApgoQAAAAAAAGCRAABQAAABAAAAdCABAAAAAAAJYHEAACAAAARgIQAAEAAAAdAAAHQgAQAAAAAAAqABAAAAAAAAFAAAAzM3M:AQAAB0IAEAAAAAAAKgAQAAAAAAABQAAAdLWVPDIAAAkSABAAAAAAAAoAEAACAAAAKgAQAAAAAAAKABAAAAAAAAAAAAciABAAAAAAACoAEAAAAAAAGgAQAAAAAABIAAAL8gAQAAIAAADmChAAAwAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAEgAAAvyABAAAwAAAOYKEAADAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAAHQAACsIAEAAAAAAABgQQAAIAAAACQAAAAAAAAAAAAAAAAAAAAAAAADcAAA:CABAAAAAAAKYOEAAAAAAAAkAAAAAAAAAAAAAAAACAPwAAgD8CQAAAAAAAAAAAAAAAAIC:AACAvwAAAAviABAAAwAAAAYBEIDBAAAAAgAAAAJAAAAAAAAAAACAPwAAgD8AAIA:OAAAB8IAEAAAAAAApg4QAAAAAACmDhAAAwAAAAAAAAhCABAABAAAABoAEIDBAAAAAgAAABoAEAADAAAAHQAAB4IAEAABAAAAKgAQAAQAAAABQAAAAAAAADcAAAkyABAABAAAAPYPEAABAAAARgAQAAIAAADmChAAAAAAABAAAAdCABAAAAAAAEYCEAAEAAAARgIQAAQAAABEAAAFQgAQAAAAAAAqABAAAAAAADgAAAdyABAAAgAAAKYKEAAAAAAARgIQAAQAAAAQAAAHQgAQAAAAAABGAhAAAgAAAEYCEAABAAAAHQAAB0IAEAAAAAAAKgAQAAAAAAABQAAAMzNzPwEAAAdCABAAAAAAACoAEAAAAAAAAUAAAHS1lTwyAAAJEgAQAAAAAAAKABAAAwAAACoAEAAAAAAACgAQAAAAAAAAAAAHIgAQAAAAAAAqABAAAAAAABoAEAAAAAAAMgAADcIAEAAAAAAABoQgAAAAAAAAAAAAAkAAAAAAAAAAAAAAAADgQAAA4EAGFBAAAAAAAEgAAAvyABAAAgAAAOYKEAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAASAAAC:IAEAADAAAA5goQAAAAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAdAAAKwgAQAAAAAAAGBBAAAgAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAAD8IAEAAAAAAApg4QAAAAAAACQAAAAAAAAAAAAAAAAIA:AACAPwJAAAAAAAAAAAAAAAAAgL8AAIC:AAAAC%IAEAADAAAABgEQgMEAAAACAAAAAkAAAAAAAAAAAIA:AACAPwAAgD84AAAHwgAQAAAAAACmDhAAAAAAAKYOEAADAAAAAAAACEIAEAAEAAAAGgAQgMEAAAACAAAAGgAQAAMAAAAdAAAHggAQAAEAAAAqABAABAAAAAFAAAAAAAAANwAACTIAEAAEAAAA9g8QAAEAAABGABAAAgAAAOYKEAAAAAAAEAAAB0IAEAAAAAAARgIQAAQAAABGAhAABAAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB3IAEAACAAAApgoQAAAAAABGAhAABAAAABAAAAdCABAAAAAAAEYCEAACAAAARgIQAAEAAAAdAAAHQgAQAAAAAAAqABAAAAAAAAFAAAAzM3M:AQAAB0IAEAAAAAAAKgAQAAAAAAABQAAA6V8SPDIAAAkSABAAAAAAAAoAEAADAAAAKgAQAAAAAAAKABAAAAAAAAAAAAciABAAAAAAACoAEAAAAAAAGgAQAAAAAAAyAAAOwgAQAAAAAAAGhCCAQQAAAAAAAAAAAAAAAkAAAAAAAAAAAAAAAADgQAAA4EAGFBAAAAAAAEgAAAvyABAAAgAAAOYKEAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAASAAAC:IAEAADAAAA5goQAAAAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAdAAAKwgAQAAAAAAAGBBAAAgAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAAD8IAEAAAAAAApg4QAAAAAAACQAAAAAAAAAAAAAAAAIA:AACAPwJAAAAAAAAAAAAAAAAAgL8AAIC:AAAAC%IAEAADAAAABgEQgMEAAAACAAAAAkAAAAAAAAAAAIA:AACAPwAAgD84AAAHwgAQAAAAAACmDhAAAAAAAKYOEAADAAAAAAAACEIAEAAEAAAAGgAQgMEAAAACAAAAGgAQAAMAAAAdAAAHggAQAAEAAAAqABAABAAAAAFAAAAAAAAANwAACTIAEAAEAAAA9g8QAAEAAABGABAAAgAAAOYKEAAAAAAAEAAAB0IAEAAAAAAARgIQAAQAAABGAhAABAAAAEQAAAVCABAAAAAAACoAEAAAAAAAOAAAB3IAEAACAAAApgoQAAAAAABGAhAABAAAABAAAAdCABAAAAAAAEYCEAACAAAARgIQAAEAAAAdAAAHQgAQAAAAAAAqABAAAAAAAAFAAAAzM3M:AQAAB0IAEAAAAAAAKgAQAAAAAAABQAAA6V8SPDIAAAkSABAAAAAAAAoAEAADAAAAKgAQAAAAAAAKABAAAAAAAAAAAAciABAAAAAAACoAEAAAAAAAGgAQAAAAAAAOAAAHEiAQAAAAAAAKABAAAAAAABoAEAAAAAAAPgAAAVNUQVR0AAAABgEAAAYAAAAAAAAAAgAAALsAAAAAAAAADgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHgAAAAAAAAAAAAAAAAAAAAAAAAAeAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.compositor_pass_fragData0 = "s1224:AAJfdGV4X3NhbXBsZXIAAHRleAAAAERYQkObE1kYN0AGXWtz2Skb6AN7AQAAAIADAAAFAAAANAAAANwAAAAQAQAARAEAAAQDAABSREVGoAAAAAAAAAAAAAAAAgAAABwAAAAABP::AAEAAG0AAABcAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAGkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAX3RleF9zYW1wbGVyAHRleABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKtJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFK4AQAAQAAAAG4AAABaAAADAGAQAAAAAABYGAAEAHAQAAAAAABVVQAAYhAAAzIQEAAAAAAAZQAAA:IgEAAAAAAAaAAAAgMAAABIAAAL8gAQAAAAAABGEBAAAAAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAAAAAApyABAAAAAAAEYCEAAAAAAAAkAAAG8Sg7tvEoO7bxKDuwAAAAA2AAAFgiAQAAAAAAA6ABAAAAAAADQAAApyABAAAAAAAEYCEAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAyAAAPcgAQAAEAAABGAhAAAAAAAAJAAABmZsZAZmbGQGZmxkAAAAAAAkAAAAAAAD8AAAA:AAAAPwAAAAA4AAAHcgAQAAEAAABGAhAAAAAAAEYCEAABAAAAMgAAD3IAEAACAAAARgIQAAAAAAACQAAAZmbGQGZmxkBmZsZAAAAAAAJAAACamdk:mpnZP5qZ2T8AAAAAMgAADHIAEAAAAAAARgIQAAAAAABGAhAAAgAAAAJAAACPwnU9j8J1PY:CdT0AAAAADgAAB3IgEAAAAAAARgIQAAEAAABGAhAAAAAAAD4AAAFTVEFUdAAAAAoAAAADAAAAAAAAAAIAAAAHAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.compositor_pass_vertData0 = "s779:AXBvcwAAAABEWEJD7F0vBgrwXt7WrnoVcnvrCQEAAABAAgAABQAAADQAAACMAAAAwAAAABgBAADEAQAAUkRFRlAAAAAAAAAAAAAAAAAAAAAcAAAAAAT%:wABAAAcAAAATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NACrq0lTR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAAMDAABURVhDT09SRACrq6tPU0dOUAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAADDAAAQQAAAAAAAAABAAAAAwAAAAEAAAAPAAAAVEVYQ09PUkQAU1ZfUG9zaXRpb24Aq6urU0hEUqQAAABAAAEAKQAAAF8AAAMyEBAAAAAAAGUAAAMyIBAAAAAAAGcAAATyIBAAAQAAAAEAAAAyAAAPMiAQAAAAAABGEBAAAAAAAAJAAAAAAAA:AAAAvwAAAAAAAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAA2AAAFMiAQAAEAAABGEBAAAAAAADYAAAjCIBAAAQAAAAJAAAAAAAAAAAAAAAAAAD8AAIA:PgAAAVNUQVR0AAAABAAAAAAAAAAAAAAAAwAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.deferred_light_fragData0 = "s11918:AAtfZ2J1ZmZlcjBfc2FtcGxlcgAAX2didWZmZXIxX3NhbXBsZXIAAV9nYnVmZmVyRF9zYW1wbGVyAAJfc3Nhb3RleF9zYW1wbGVyAANfc2hhZG93TWFwX3NhbXBsZXIABGdidWZmZXIwAABnYnVmZmVyMQABZ2J1ZmZlckQAAnNzYW90ZXgAA3NoYWRvd01hcAAEJEdsb2JhbHMAAApjYXNEYXRhAAAAAABAAQAABAFzaGlycgBAAQAAcAAAAAQBZXllALABAAAMAAAAAwFleWVMb29rAMABAAAMAAAAAwFjYW1lcmFQcm9qANABAAAIAAAAAgFiYWNrZ3JvdW5kQ29sAOABAAAMAAAAAwFlbnZtYXBTdHJlbmd0aADsAQAABAAAAAEBc3VuRGlyAPABAAAMAAAAAwFzaGFkb3dzQmlhcwD8AQAABAAAAAEBc3VuQ29sAAACAAAMAAAAAwFEWEJDnRTHH4PWmiTkFZmwhxDZsAEAAACMIQAABQAAADQAAAA0BAAAgAQAALQEAAAQIQAAUkRFRvgDAAABAAAADAIAAAsAAAAcAAAAAAT::wABAADGAwAAfAEAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAACOAQAAAwAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAAAAAKABAAADAAAAAAAAAAAAAAAAAAAAAgAAAAEAAAAAAAAAsgEAAAMAAAAAAAAAAAAAAAAAAAADAAAAAQAAAAAAAADDAQAAAwAAAAAAAAAAAAAAAAAAAAQAAAABAAAAAgAAANYBAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAA3wEAAAIAAAAFAAAABAAAAP::::8BAAAAAQAAAAwAAADoAQAAAgAAAAUAAAAEAAAA:::::wIAAAABAAAADAAAAPEBAAACAAAABQAAAAQAAAD:::::AwAAAAEAAAAMAAAA%QEAAAIAAAAFAAAABAAAAP::::8EAAAAAQAAAAwAAAADAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAF9nYnVmZmVyMF9zYW1wbGVyAF9nYnVmZmVyMV9zYW1wbGVyAF9nYnVmZmVyRF9zYW1wbGVyAF9zc2FvdGV4X3NhbXBsZXIAX3NoYWRvd01hcF9zYW1wbGVyAGdidWZmZXIwAGdidWZmZXIxAGdidWZmZXJEAHNzYW90ZXgAc2hhZG93TWFwACRHbG9iYWxzAAMCAAAKAAAAJAIAABACAAAAAAAAAAAAABQDAAAAAAAAQAEAAAIAAAAcAwAAAAAAACwDAABAAQAAcAAAAAIAAAA0AwAAAAAAAEQDAACwAQAADAAAAAIAAABIAwAAAAAAAFgDAADAAQAADAAAAAIAAABIAwAAAAAAAGADAADQAQAACAAAAAIAAABsAwAAAAAAAHwDAADgAQAADAAAAAIAAABIAwAAAAAAAIoDAADsAQAABAAAAAIAAACcAwAAAAAAAKwDAADwAQAADAAAAAIAAABIAwAAAAAAALMDAAD8AQAABAAAAAIAAACcAwAAAAAAAL8DAAAAAgAADAAAAAIAAABIAwAAAAAAAGNhc0RhdGEAAQADAAEABAAUAAAAAAAAAHNoaXJyAKurAQADAAEABAAHAAAAAAAAAGV5ZQABAAMAAQADAAAAAAAAAAAAZXllTG9vawBjYW1lcmFQcm9qAKsBAAMAAQACAAAAAAAAAAAAYmFja2dyb3VuZENvbABlbnZtYXBTdHJlbmd0aACrq6sAAAMAAQABAAAAAAAAAAAAc3VuRGlyAHNoYWRvd3NCaWFzAHN1bkNvbABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AElTR05EAAAAAgAAAAgAAAA4AAAAAAAAAAAAAAADAAAAAAAAAAMDAAA4AAAAAQAAAAAAAAADAAAAAQAAAAcHAABURVhDT09SRACrq6tPU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAAPAAAAU1ZfVGFyZ2V0AKurU0hEUlQcAABAAAAAFQcAADUYAAASAAAAAACAPwAAAAAAAAAAAAAAAAAAAAAAAIA:AAAAAAAAAAAAAAAAAAAAAAAAgD8AAAAAAAAAAAAAAAAAAAAAAACAP1kIAARGjiAAAAAAACEAAABaAAADAGAQAAAAAABaAAADAGAQAAEAAABaAAADAGAQAAIAAABaAAADAGAQAAMAAABaCAADAGAQAAQAAABYGAAEAHAQAAAAAABVVQAAWBgABABwEAABAAAAVVUAAFgYAAQAcBAAAgAAAFVVAABYGAAEAHAQAAMAAABVVQAAWBgABABwEAAEAAAAVVUAAGIQAAMyEBAAAAAAAGIQAANyEBAAAQAAAGUAAAPyIBAAAAAAAGgAAAILAAAASAAAC:IAEAAAAAAARhAQAAAAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAAAAALcgAQAAEAAABGABCAwQAAAAAAAAACQAAAAACAPwAAgD8AAIA:AAAAAAAAAAhCABAAAgAAABoAEIDBAAAAAAAAAAoAEAABAAAAHQAABxIAEAABAAAAKgAQAAIAAAABQAAAAAAAAB0AAAoyABAAAwAAAEYAEAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA3AAAPMgAQAAMAAABGABAAAwAAAAJAAAAAAIA:AACAPwAAAAAAAAAAAkAAAAAAgL8AAIC:AAAAAAAAAAA4AAAHYgAQAAEAAABWBhAAAQAAAAYBEAADAAAANwAACTIAEAACAAAABgAQAAEAAABGABAAAAAAAJYFEAABAAAAEAAABxIAEAAAAAAARgIQAAIAAABGAhAAAgAAAEQAAAUSABAAAAAAAAoAEAAAAAAAOAAAB3IAEAABAAAABgAQAAAAAABGAhAAAgAAADIAAAkSABAAAAAAADoAEAAAAAAAAUAAAAD:f0EBQAAAgACANxsAAAUSABAAAAAAAAoAEAAAAAAAVgAABRIAEAAAAAAACgAQAAAAAAAyAAAJEgAQAAAAAAAKABAAAAAAAAFAAACAAIC9OgAQAAAAAAA4IAAHEgAQAAAAAAAKABAAAAAAAAFAAACAB4BBSAAAC:IAEAACAAAARhAQAAAAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAABBAAAFIgAQAAAAAAA6ABAAAgAAADgAAAgiABAAAAAAABoAEAAAAAAAOoAgAAAAAAAeAAAAGgAABYIAEAABAAAAOgAQAAIAAAAyAAAKcgAQAAMAAAAGABAAAAAAAEYCEIBBAAAAAgAAAEYCEAACAAAAAAAACnIAEAAEAAAARgIQAAIAAAACQAAACtcjvQrXI70K1yO9AAAAADIAAAxyABAABAAAAAYAEAAAAAAARgIQAAQAAAACQAAACtcjPQrXIz0K1yM9AAAAAEgAAAvyABAABQAAAEYQEAAAAAAARn4QAAIAAAAAYBAAAgAAAAFAAAAAAAAAMgAACRIAEAAAAAAACgAQAAUAAAABQAAAAAAAQAFAAAAAAIC:EAAAB4IAEAACAAAARhIQAAEAAABGEhAAAQAAAEQAAAWCABAAAgAAADoAEAACAAAAOAAAB3IAEAAFAAAA9g8QAAIAAABGEhAAAQAAADIAAAkSABAAAAAAAAoAEAAAAAAAAUAAAAAAAD8BQAAAAAAAPwAAAAkSABAAAAAAAAoAEAAAAAAACoAggEEAAAAAAAAAHQAAAA4AAAgSABAAAAAAABqAIAAAAAAAHQAAAAoAEAAAAAAAEAAACIIAEAACAAAARoIgAAAAAAAcAAAARgIQAAUAAAAOAAAHEgAQAAAAAAAKABAAAAAAADoAEAACAAAAMgAACnIAEAAFAAAARgIQAAUAAAAGABAAAAAAAEaCIAAAAAAAGwAAAAAAAAlyABAABgAAAEYCEIBBAAAABQAAAEaCIAAAAAAAGwAAABAAAAcSABAAAAAAAEYCEAAGAAAARgIQAAYAAABEAAAFEgAQAAAAAAAKABAAAAAAADgAAAdyABAABwAAAAYAEAAAAAAARgIQAAYAAAAQAAAHggAQAAIAAABGAhAAAQAAAEYCEAAHAAAANAAAB4IAEAACAAAAOgAQAAIAAAABQAAAAAAAADgAAAtyABAACAAAAEaCIAAAAAAAGgAAAAJAAACGq9s%hqvbPoar2z4AAAAAOAAABzIAEAAJAAAAJgoQAAEAAAAmChAAAQAAADIAAAqCABAAAwAAABoAEAABAAAAGgAQAAEAAAAKABCAQQAAAAkAAAA2AAAGMgAQAAoAAADmiiAAAAAAABgAAAA2AAAGQgAQAAoAAAAKgCAAAAAAABkAAAA4AAAHcgAQAAkAAABWBRAACQAAAEYCEAAKAAAAOAAACnIAEAAJAAAARgIQAAkAAAACQAAAcT0%P3E9Pj9xPT4:AAAAADIAAAlyABAACAAAAEYCEAAIAAAA9g8QAAMAAABGAhAACQAAADIAAA1yABAACAAAAEaCIAAAAAAAFAAAAAJAAADG32I:xt9iP8bfYj8AAAAARgIQAAgAAAAyAAANcgAQAAgAAABGAhCAQQAAAAoAAAACQAAAKqd9PiqnfT4qp30%AAAAAEYCEAAIAAAAOAAACHIAEAAJAAAAVgUQAAEAAABGgiAAAAAAABcAAAA4AAAKcgAQAAkAAABGAhAACQAAAAJAAACGq1s:hqtbP4arWz8AAAAAMgAACnIAEAAIAAAARgIQAAkAAACmChCAQQAAAAEAAABGAhAACAAAADgAAAhyABAACQAAAFYFEAABAAAAlocgAAAAAAAZAAAAOAAAB3IAEAAJAAAABgAQAAEAAABGAhAACQAAADIAAAxyABAACAAAAEYCEAAJAAAAAkAAAIarWz%Gq1s:hqtbPwAAAABGAhAACAAAADgAAAkSABAACQAAACoAEIBBAAAAAQAAADqAIAAAAAAAFwAAADgAAAliABAACQAAAKYKEIBBAAAAAQAAAAaBIAAAAAAAGAAAADgAAAdyABAACQAAAAYAEAABAAAARgIQAAkAAAAyAAAMcgAQAAgAAABGAhAACQAAAAJAAACGq1s:hqtbP4arWz8AAAAARgIQAAgAAAA4AAAIcgAQAAkAAABWBRAAAQAAAJaHIAAAAAAAFgAAADIAAAxyABAACAAAAEYCEAAJAAAAAkAAAGn8gj9p:II:afyCPwAAAABGAhAACAAAADgAAAkSABAACQAAACoAEIBBAAAAAQAAADqAIAAAAAAAFAAAADgAAAliABAACQAAAKYKEIBBAAAAAQAAAAaBIAAAAAAAFQAAADIAAAxyABAACAAAAEYCEAAJAAAAAkAAAGn8gj9p:II:afyCPwAAAABGAhAACAAAADgAAAgyABAACQAAAAYAEAABAAAA5oogAAAAAAAVAAAAOAAACEIAEAAJAAAACgAQAAEAAAAKgCAAAAAAABYAAAAyAAAMcgAQAAgAAABGAhAACQAAAAJAAABp:II:afyCP2n8gj8AAAAARgIQAAgAAAA4AAAIcgAQAAkAAABGAhAABAAAAEaCIAAAAAAAHgAAADIAAAlyABAACAAAAEYCEAAIAAAARgIQAAMAAABGAhAACQAAADgAAAciABAAAAAAABoAEAAAAAAAAUAAAIGAgDs4AAAHcgAQAAgAAABWBRAAAAAAAEYCEAAIAAAASAAAC:IAEAAJAAAARhAQAAAAAABGfhAAAwAAAABgEAADAAAAAUAAAAAAAAA4AAAH4gAQAAkAAAAGCRAACAAAAAYAEAAJAAAAGAAAByIAEAAAAAAAOgAQAAAAAAABQAAAAACAPzIAAAlyABAAAgAAAEYCEAAIAAAABgAQAAkAAABGAhAAAgAAADcAAAlyABAAAgAAAFYFEAAAAAAARgIQAAIAAACWBxAACQAAADcAAAxyABAAAwAAAFYFEAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAABGAhAAAwAAADIAAAqyABAAAAAAAEYIEAAGAAAABgAQAAAAAABGiCAAAAAAAB8AAAAQAAAHggAQAAMAAABGAxAAAAAAAEYDEAAAAAAARAAABYIAEAADAAAAOgAQAAMAAAA4AAAHsgAQAAAAAABGDBAAAAAAAPYPEAADAAAAEAAAB4IAEAADAAAARgIQAAEAAABGAxAAAAAAABAAAAcSABAAAAAAAEYCEAAHAAAARgMQAAAAAAAQAAAIIgAQAAAAAABGAhAAAQAAAEaCIAAAAAAAHwAAADQAAAeCABAAAAAAABoAEAAAAAAAAUAAAAAAAAA4AAAHggAQAAQAAAAqABAAAAAAACoAEAAAAAAAAAAAC3IAEAAGAAAARgIQgEEAAAAEAAAAAkAAAAAAgD8AAIA:AACAPwAAAAAyAAAJggAQAAUAAAAKABAAAAAAAAFAAABZwLHAAUAAAAx238A4AAAHEgAQAAAAAAAKABAAAAAAADoAEAAFAAAAGQAABRIAEAAAAAAACgAQAAAAAAAyAAAJcgAQAAQAAABGAhAABgAAAAYAEAAAAAAARgIQAAQAAAA4AAAHEgAQAAAAAAA6ABAABAAAADoAEAAEAAAAOAAAB4IAEAADAAAAOgAQAAMAAAA6ABAAAwAAADIAAAmCABAABQAAADoAEAAEAAAAOgAQAAQAAAABQAAAAACAvzIAAAmCABAAAwAAADoAEAADAAAAOgAQAAUAAAABQAAAAACAPzgAAAeCABAAAwAAADoAEAADAAAAOgAQAAMAAAA4AAAHEgAQAAAAAAAKABAAAAAAAAFAAACD%aI%DgAABxIAEAAAAAAACgAQAAAAAAA6ABAAAwAAADIAAApCABAAAAAAACoAEIBBAAAAAAAAACoAEAAAAAAAAUAAAAAAgD8yAAAJIgAQAAAAAAAaABAAAAAAACoAEAAAAAAAOgAQAAQAAAAyAAAJQgAQAAAAAAA6ABAAAgAAACoAEAAAAAAAOgAQAAQAAAA4AAAHIgAQAAAAAAAqABAAAAAAABoAEAAAAAAADgAACiIAEAAAAAAAAkAAAAAAgD8AAIA:AACAPwAAgD8aABAAAAAAADYgAAUiABAAAAAAABoAEAAAAAAAOAAABxIAEAAAAAAAGgAQAAAAAAAKABAAAAAAADgAAAdyABAAAAAAAAYAEAAAAAAARgIQAAQAAAA4AAAHcgAQAAAAAAD2DxAAAQAAAEYCEAAAAAAAOAAACnIAEAAAAAAARgIQAAAAAAACQAAAAACAPgAAgD4AAIA%AAAAADIAAAlyABAAAAAAAEYCEAADAAAA9g8QAAAAAABGAhAAAAAAADgAAAhyABAAAQAAAEYCEAABAAAA9o8gAAAAAAAfAAAAMgAADHIAEAABAAAARgIQAAEAAAACQAAAAAAgQQAAIEEAACBBAAAAAEYCEAAFAAAAAAAACXIAEAADAAAARgIQgEEAAAABAAAARoIgAAAAAAAbAAAAEAAAB4IAEAAAAAAARgIQAAMAAABGAhAAAwAAAEsAAAWCABAAAAAAADoAEAAAAAAAMQAACPIAEAADAAAARo4gAAAAAAAQAAAA9g8QAAAAAAABAAAK8gAQAAMAAABGDhAAAwAAAAJAAAAAAIA:AACAPwAAgD8AAIA:EQAACoIAEAABAAAAAkAAAAAAgD8AAIA:AACAPwAAgD9GDhAAAwAAABsAAAWCABAAAQAAADoAEAABAAAAKQAAB4IAEAACAAAAOgAQAAEAAAABQAAAAgAAAB4AAApyABAAAwAAAPYPEAACAAAAAkAAAAEAAAACAAAAAwAAAAAAAAA4AAAJ8gAQAAQAAABWBRAAAQAAAEaOIAQAAAAACgAQAAMAAAAyAAAL8gAQAAQAAAAGABAAAQAAAEaOIAQAAAAAOgAQAAIAAABGDhAABAAAADIAAAvyABAABAAAAKYKEAABAAAARo4gBAAAAAAaABAAAwAAAEYOEAAEAAAAAAAACfIAEAADAAAARg4QAAQAAABGjiAEAAAAACoAEAADAAAADgAAB3IAEAADAAAARgIQAAMAAAD2DxAAAwAAADEAAAeCABAAAwAAAAFAAAAAAAAAOgAQAAMAAAAAAAAJQgAQAAMAAAAqABAAAwAAADqAIIBBAAAAAAAAAB8AAAAAAAAK8gAQAAQAAABGBBAAAwAAAAJAAAAAAIC5AACAugAAgLkAAAAARgAACxIAEAAEAAAARgAQAAQAAAAGcBAABAAAAABgEAAEAAAAKgAQAAMAAABGAAALIgAQAAQAAADmChAABAAAAAZwEAAEAAAAAGAQAAQAAAAqABAAAwAAAAAAAAryABAABQAAAEYEEAADAAAAAkAAAAAAgLkAAIA6AAAAAAAAgLpGAAALQgAQAAQAAABGABAABQAAAAZwEAAEAAAAAGAQAAQAAAAqABAAAwAAAEYAAAuCABAABAAAAOYKEAAFAAAABnAQAAQAAAAAYBAABAAAACoAEAADAAAARgAACxIAEAAFAAAARgAQAAMAAAAGcBAABAAAAABgEAAEAAAAKgAQAAMAAAAAAAAK8gAQAAYAAABGBBAAAwAAAAJAAAAAAAAAAACAOgAAgDkAAIC6RgAACyIAEAAFAAAARgAQAAYAAAAGcBAABAAAAABgEAAEAAAAKgAQAAMAAABGAAALQgAQAAUAAADmChAABgAAAAZwEAAEAAAAAGAQAAQAAAAqABAAAwAAAAAAAAryABAABgAAAEYEEAADAAAAAkAAAAAAgDkAAAAAAACAOQAAgDpGAAALEgAQAAMAAABGABAABgAAAAZwEAAEAAAAAGAQAAQAAAAqABAAAwAAAEYAAAsiABAAAwAAAOYKEAAGAAAABnAQAAQAAAAAYBAABAAAACoAEAADAAAAHwAEAzoAEAADAAAAAAAAB0IAEAADAAAAGgAQAAQAAAAKABAABAAAAAAAAAdCABAAAwAAACoAEAAEAAAAKgAQAAMAAAAAAAAHQgAQAAMAAAA6ABAABAAAACoAEAADAAAAAAAAB0IAEAADAAAACgAQAAUAAAAqABAAAwAAAAAAAAdCABAAAwAAABoAEAAFAAAAKgAQAAMAAAAAAAAHQgAQAAMAAAAqABAABQAAACoAEAADAAAAAAAABxIAEAADAAAACgAQAAMAAAAqABAAAwAAAAAAAAcSABAAAwAAABoAEAADAAAACgAQAAMAAAA4AAAHEgAQAAMAAAAKABAAAwAAAAFAAAA5juM9EgAAATYAAAUSABAAAwAAAAFAAAAAAIA:FQAAAREAAAkiABAAAwAAAEaOIAAAAAAAEAAAAEaekAA6ABAAAQAAAB8AAAM6ABAAAQAAADYAAAVCABAAAwAAABoAEAADAAAAEgAAAR4AAAeCABAAAwAAADoAEAABAAAAAUAAAP::::8RAAAJggAQAAMAAABGjiAAAAAAABAAAABGnpAAOgAQAAMAAAAAAAAIQgAQAAMAAAA6ABCAQQAAAAMAAAAaABAAAwAAABUAAAEAAAAIggAQAAAAAAA6ABCAQQAAAAAAAAAaABAAAwAAAA4AAAeCABAAAAAAADoAEAAAAAAAKgAQAAMAAAAdAAAHIgAQAAMAAAABQAAAmpkZPjoAEAAAAAAAJwAAB4IAEAABAAAAOgAQAAEAAAABQAAAAwAAAAEAAAeCABAAAQAAADoAEAABAAAAGgAQAAMAAAAeAAAHIgAQAAMAAAA6ABAAAgAAAAFAAAAEAAAAHgAACuIAEAADAAAAVgUQAAMAAAACQAAAAAAAAAEAAAACAAAAAwAAADgAAAnyABAABAAAAFYFEAABAAAARo4gBAAAAAAaABAAAwAAADIAAAzyABAABAAAAAYAEAABAAAARo4gBgAAAAAEAAAAOgAQAAIAAABGDhAABAAAADIAAAvyABAABAAAAKYKEAABAAAARo4gBAAAAAAqABAAAwAAAEYOEAAEAAAAAAAACfIAEAAEAAAARg4QAAQAAABGjiAEAAAAADoAEAADAAAADgAAB3IAEAABAAAARgIQAAQAAAD2DxAABAAAAAAAAAlCABAAAQAAACoAEAABAAAAOoAggEEAAAAAAAAAHwAAAAAAAAryABAABQAAAEYEEAABAAAAAkAAAAAAgLkAAIC6AACAuQAAAABGAAALggAQAAIAAABGABAABQAAAAZwEAAEAAAAAGAQAAQAAAAqABAAAQAAAEYAAAsiABAAAwAAAOYKEAAFAAAABnAQAAQAAAAAYBAABAAAACoAEAABAAAAAAAACvIAEAAFAAAARgQQAAEAAAACQAAAAACAuQAAgDoAAAAAAACAukYAAAtCABAAAwAAAEYAEAAFAAAABnAQAAQAAAAAYBAABAAAACoAEAABAAAARgAAC4IAEAADAAAA5goQAAUAAAAGcBAABAAAAABgEAAEAAAAKgAQAAEAAABGAAALEgAQAAQAAABGABAAAQAAAAZwEAAEAAAAAGAQAAQAAAAqABAAAQAAAAAAAAryABAABQAAAEYEEAABAAAAAkAAAAAAAAAAAIA6AACAOQAAgLpGAAALIgAQAAQAAABGABAABQAAAAZwEAAEAAAAAGAQAAQAAAAqABAAAQAAAEYAAAtCABAABAAAAOYKEAAFAAAABnAQAAQAAAAAYBAABAAAACoAEAABAAAAAAAACvIAEAAFAAAARgQQAAEAAAACQAAAAACAOQAAAAAAAIA5AACAOkYAAAsSABAAAQAAAEYAEAAFAAAABnAQAAQAAAAAYBAABAAAACoAEAABAAAARgAACyIAEAABAAAA5goQAAUAAAAGcBAABAAAAABgEAAEAAAAKgAQAAEAAAAfAAQDOgAQAAEAAAAxAAAHQgAQAAEAAAABQAAAAAAAADoAEAAEAAAAHwAEAyoAEAABAAAAAAAAB0IAEAABAAAAOgAQAAIAAAAaABAAAwAAAAAAAAdCABAAAQAAACoAEAADAAAAKgAQAAEAAAAAAAAHQgAQAAEAAAA6ABAAAwAAACoAEAABAAAAAAAAB0IAEAABAAAACgAQAAQAAAAqABAAAQAAAAAAAAdCABAAAQAAABoAEAAEAAAAKgAQAAEAAAAAAAAHQgAQAAEAAAAqABAABAAAACoAEAABAAAAAAAABxIAEAABAAAACgAQAAEAAAAqABAAAQAAAAAAAAcSABAAAQAAABoAEAABAAAACgAQAAEAAAA4AAAHEgAQAAEAAAAKABAAAQAAAAFAAAA5juM9EgAAATYAAAUSABAAAQAAAAFAAAAAAIA:FQAAATggAAeCABAAAAAAADoAEAAAAAAAAUAAAFVV1UAyAAAJIgAQAAEAAAA6ABAAAAAAAAFAAAAAAADAAUAAAAAAQEA4AAAHggAQAAAAAAA6ABAAAAAAADoAEAAAAAAAOAAAB4IAEAAAAAAAOgAQAAAAAAAaABAAAQAAAAAAAAgiABAAAQAAAAoAEIBBAAAAAQAAAAoAEAADAAAAMgAACYIAEAAAAAAAOgAQAAAAAAAaABAAAQAAAAoAEAABAAAAFQAAATcAAAmCABAAAAAAADoAEAABAAAAOgAQAAAAAAAKABAAAwAAADgAAAdyABAAAAAAAPYPEAAAAAAARgIQAAAAAAAyAAAKciAQAAAAAABGAhAAAAAAAEaCIAAAAAAAIAAAAEYCEAACAAAANgAABYIgEAAAAAAAAUAAAAAAgD8%AAABU1RBVHQAAADXAAAACwAAAAQAAAADAAAAngAAAAYAAAACAAAABAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAEgAAAAAAAAAAAAAABwAAAAUAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.line_deferred_fragData0 = "s698:AAAARFhCQ8aQUxceHZ1r:Mwwvi0rA94BAAAACAIAAAUAAAA0AAAAjAAAAMAAAAAMAQAAjAEAAFJERUZQAAAAAAAAAAAAAAAAAAAAHAAAAAAE::8AAQAAHAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAAHBwAAVEVYQ09PUkQAq6urT1NHTkQAAAACAAAACAAAADgAAAAAAAAAAAAAAAMAAAAAAAAADwAAADgAAAABAAAAAAAAAAMAAAABAAAADwAAAFNWX1RhcmdldACrq1NIRFJ4AAAAQAAAAB4AAABiEAADchAQAAAAAABlAAAD8iAQAAAAAABlAAAD8iAQAAEAAAA2AAAI8iAQAAAAAAACQAAAAACAPwAAgD8AAAAAAACAPzYAAAVyIBAAAQAAAEYSEAAAAAAANgAABYIgEAABAAAAAUAAAAAAgD8%AAABU1RBVHQAAAAEAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.line_fragData0 = "s607:AAAARFhCQ1ZLRjD3ZrzN:hatSzaD27EBAAAAxAEAAAUAAAA0AAAAjAAAAMAAAAD0AAAASAEAAFJERUZQAAAAAAAAAAAAAAAAAAAAHAAAAAAE::8AAQAAHAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAAHBwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFJMAAAAQAAAABMAAABiEAADchAQAAAAAABlAAAD8iAQAAAAAAA2AAAFciAQAAAAAABGEhAAAAAAADYAAAWCIBAAAAAAAAFAAAAAAIA:PgAAAVNUQVR0AAAAAwAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.line_vertData0 = "s1280:AmNvbAAAcG9zAAEBJEdsb2JhbHMAAAFWaWV3UHJvamVjdGlvbgAAAAAAQAAAAAQERFhCQ9VAoSrt3%5HfqkA07agd9IBAAAAkAMAAAUAAAA0AAAACAEAAFQBAACsAQAAFAMAAFJERUbMAAAAAQAAAEgAAAABAAAAHAAAAAAE:v8AAQAAmAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJEdsb2JhbHMAq6urPAAAAAEAAABgAAAAQAAAAAAAAAAAAAAAeAAAAAAAAABAAAAAAgAAAIgAAAAAAAAAVmlld1Byb2plY3Rpb24AqwMAAwAEAAQAAAAAAAAAAABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKurSVNHTkQAAAACAAAACAAAADgAAAAAAAAAAAAAAAMAAAAAAAAABwcAADgAAAABAAAAAAAAAAMAAAABAAAABwcAAFRFWENPT1JEAKurq09TR05QAAAAAgAAAAgAAAA4AAAAAAAAAAAAAAADAAAAAAAAAAcIAABBAAAAAAAAAAEAAAADAAAAAQAAAA8AAABURVhDT09SRABTVl9Qb3NpdGlvbgCrq6tTSERSYAEAAEAAAQBYAAAAWQAABEaOIAAAAAAABAAAAF8AAANyEBAAAAAAAF8AAANyEBAAAQAAAGUAAANyIBAAAAAAAGcAAATyIBAAAQAAAAEAAABoAAACAgAAADYAAAVyIBAAAAAAAEYSEAAAAAAANgAABXIAEAAAAAAARhIQAAEAAAA2AAAFggAQAAAAAAABQAAAAACAPxEAAAgSABAAAQAAAEYOEAAAAAAARo4gAAAAAAACAAAAEQAACCIAEAABAAAARg4QAAAAAABGjiAAAAAAAAMAAAAAAAAHEgAQAAEAAAAaABAAAQAAAAoAEAABAAAANgAABYIgEAABAAAAGgAQAAEAAAA4AAAHQiAQAAEAAAAKABAAAQAAAAFAAAAAAAA:EQAACBIgEAABAAAARg4QAAAAAABGjiAAAAAAAAAAAAARAAAIIiAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAQAAAD4AAAFTVEFUdAAAAAsAAAACAAAAAAAAAAQAAAAGAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.painter_colored_fragData0 = "s580:AAAARFhCQwKRAhCE2jyY1lWcLP2kpYQBAAAAsAEAAAUAAAA0AAAAjAAAAMAAAAD0AAAANAEAAFJERUZQAAAAAAAAAAAAAAAAAAAAHAAAAAAE::8AAQAAHAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFI4AAAAQAAAAA4AAABiEAAD8hAQAAAAAABlAAAD8iAQAAAAAAA2AAAF8iAQAAAAAABGHhAAAAAAAD4AAAFTVEFUdAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.painter_colored_vertData0 = "s1314:AnZlcnRleENvbG9yAAB2ZXJ0ZXhQb3NpdGlvbgABASRHbG9iYWxzAAABcHJvamVjdGlvbk1hdHJpeAAAAAAAQAAAAAQERFhCQ5A:MgyGPthJiwcRz4ddIcQBAAAAlAMAAAUAAAA0AAAADAEAAFgBAACwAQAAGAMAAFJERUbQAAAAAQAAAEgAAAABAAAAHAAAAAAE:v8AAQAAnAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJEdsb2JhbHMAq6urPAAAAAEAAABgAAAAQAAAAAAAAAAAAAAAeAAAAAAAAABAAAAAAgAAAIwAAAAAAAAAcHJvamVjdGlvbk1hdHJpeACrq6sDAAMABAAEAAAAAAAAAAAATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NACrq0lTR05EAAAAAgAAAAgAAAA4AAAAAAAAAAAAAAADAAAAAAAAAA8PAAA4AAAAAQAAAAAAAAADAAAAAQAAAAcHAABURVhDT09SRACrq6tPU0dOUAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPAAAAQQAAAAAAAAABAAAAAwAAAAEAAAAPAAAAVEVYQ09PUkQAU1ZfUG9zaXRpb24Aq6urU0hEUmABAABAAAEAWAAAAFkAAARGjiAAAAAAAAQAAABfAAAD8hAQAAAAAABfAAADchAQAAEAAABlAAAD8iAQAAAAAABnAAAE8iAQAAEAAAABAAAAaAAAAgIAAAA2AAAF8iAQAAAAAABGHhAAAAAAADYAAAVyABAAAAAAAEYSEAABAAAANgAABYIAEAAAAAAAAUAAAAAAgD8RAAAIEgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAgAAABEAAAgiABAAAQAAAEYOEAAAAAAARo4gAAAAAAADAAAAAAAABxIAEAABAAAAGgAQAAEAAAAKABAAAQAAADYAAAWCIBAAAQAAABoAEAABAAAAOAAAB0IgEAABAAAACgAQAAEAAAABQAAAAAAAPxEAAAgSIBAAAQAAAEYOEAAAAAAARo4gAAAAAAAAAAAAEQAACCIgEAABAAAARg4QAAAAAABGjiAAAAAAAAEAAAA%AAABU1RBVHQAAAALAAAAAgAAAAAAAAAEAAAABgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.painter_image_fragData0 = "s931:AAJfdGV4X3NhbXBsZXIAAHRleAAAAERYQkMLuHx52DaqoPgbxVgoLcgLAQAAAKQCAAAFAAAANAAAANwAAAAoAQAAXAEAACgCAABSREVGoAAAAAAAAAAAAAAAAgAAABwAAAAABP::AAEAAG0AAABcAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAGkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAX3RleF9zYW1wbGVyAHRleABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKtJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAOAAAAAEAAAAAAAAAAwAAAAEAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFLEAAAAQAAAADEAAABaAAADAGAQAAAAAABYGAAEAHAQAAAAAABVVQAAYhAAA:IQEAAAAAAAYhAAAzIQEAABAAAAZQAAA:IgEAAAAAAAaAAAAgEAAABFAAAJ8gAQAAAAAABGEBAAAQAAAEZ%EAAAAAAAAGAQAAAAAAA4AAAH8gAQAAAAAABGDhAAAAAAAEYeEAAAAAAAOAAAB3IgEAAAAAAARgIQAAAAAAD2HxAAAAAAADYAAAWCIBAAAAAAADoAEAAAAAAAPgAAAVNUQVR0AAAABQAAAAEAAAAAAAAAAwAAAAIAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.painter_image_vertData0 = "s1454:A3RleFBvc2l0aW9uAAB2ZXJ0ZXhDb2xvcgABdmVydGV4UG9zaXRpb24AAgEkR2xvYmFscwAAAXByb2plY3Rpb25NYXRyaXgAAAAAAEAAAAAEBERYQkMYRgMBQiEp1Ksh8UKJ6SuGAQAAAPADAAAFAAAANAAAAAwBAABwAQAA4AEAAHQDAABSREVG0AAAAAEAAABIAAAAAQAAABwAAAAABP7:AAEAAJwAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAACRHbG9iYWxzAKurqzwAAAABAAAAYAAAAEAAAAAAAAAAAAAAAHgAAAAAAAAAQAAAAAIAAACMAAAAAAAAAHByb2plY3Rpb25NYXRyaXgAq6urAwADAAQABAAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOXAAAAAMAAAAIAAAAUAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAUAAAAAEAAAAAAAAAAwAAAAEAAAAPDwAAUAAAAAIAAAAAAAAAAwAAAAIAAAAHBwAAVEVYQ09PUkQAq6urT1NHTmgAAAADAAAACAAAAFAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFAAAAABAAAAAAAAAAMAAAABAAAAAwwAAFkAAAAAAAAAAQAAAAMAAAACAAAADwAAAFRFWENPT1JEAFNWX1Bvc2l0aW9uAKurq1NIRFKMAQAAQAABAGMAAABZAAAERo4gAAAAAAAEAAAAXwAAAzIQEAAAAAAAXwAAA:IQEAABAAAAXwAAA3IQEAACAAAAZQAAA:IgEAAAAAAAZQAAAzIgEAABAAAAZwAABPIgEAACAAAAAQAAAGgAAAICAAAANgAABfIgEAAAAAAARh4QAAEAAAA2AAAFMiAQAAEAAABGEBAAAAAAADYAAAVyABAAAAAAAEYSEAACAAAANgAABYIAEAAAAAAAAUAAAAAAgD8RAAAIEgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAgAAABEAAAgiABAAAQAAAEYOEAAAAAAARo4gAAAAAAADAAAAAAAABxIAEAABAAAAGgAQAAEAAAAKABAAAQAAADYAAAWCIBAAAgAAABoAEAABAAAAOAAAB0IgEAACAAAACgAQAAEAAAABQAAAAAAAPxEAAAgSIBAAAgAAAEYOEAAAAAAARo4gAAAAAAAAAAAAEQAACCIgEAACAAAARg4QAAAAAABGjiAAAAAAAAEAAAA%AAABU1RBVHQAAAAMAAAAAgAAAAAAAAAGAAAABgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.painter_text_fragData0 = "s894:AAJfdGV4X3NhbXBsZXIAAHRleAAAAERYQkN4eKkSkOMyc:NS8ppPD1BYAQAAAIgCAAAFAAAANAAAANwAAAAoAQAAXAEAAAwCAABSREVGoAAAAAAAAAAAAAAAAgAAABwAAAAABP::AAEAAG0AAABcAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAGkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAX3RleF9zYW1wbGVyAHRleABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKtJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAOAAAAAEAAAAAAAAAAwAAAAEAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFKoAAAAQAAAACoAAABaAAADAGAQAAAAAABYGAAEAHAQAAAAAABVVQAAYhAAA:IQEAAAAAAAYhAAAzIQEAABAAAAZQAAA:IgEAAAAAAAaAAAAgEAAABFAAAJ8gAQAAAAAABGEBAAAQAAAEZ%EAAAAAAAAGAQAAAAAAA4AAAHgiAQAAAAAAAKABAAAAAAADoQEAAAAAAANgAABXIgEAAAAAAARhIQAAAAAAA%AAABU1RBVHQAAAAEAAAAAQAAAAAAAAADAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.painter_text_vertData0 = "s1454:A3RleFBvc2l0aW9uAAB2ZXJ0ZXhDb2xvcgABdmVydGV4UG9zaXRpb24AAgEkR2xvYmFscwAAAXByb2plY3Rpb25NYXRyaXgAAAAAAEAAAAAEBERYQkMYRgMBQiEp1Ksh8UKJ6SuGAQAAAPADAAAFAAAANAAAAAwBAABwAQAA4AEAAHQDAABSREVG0AAAAAEAAABIAAAAAQAAABwAAAAABP7:AAEAAJwAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAACRHbG9iYWxzAKurqzwAAAABAAAAYAAAAEAAAAAAAAAAAAAAAHgAAAAAAAAAQAAAAAIAAACMAAAAAAAAAHByb2plY3Rpb25NYXRyaXgAq6urAwADAAQABAAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOXAAAAAMAAAAIAAAAUAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAUAAAAAEAAAAAAAAAAwAAAAEAAAAPDwAAUAAAAAIAAAAAAAAAAwAAAAIAAAAHBwAAVEVYQ09PUkQAq6urT1NHTmgAAAADAAAACAAAAFAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFAAAAABAAAAAAAAAAMAAAABAAAAAwwAAFkAAAAAAAAAAQAAAAMAAAACAAAADwAAAFRFWENPT1JEAFNWX1Bvc2l0aW9uAKurq1NIRFKMAQAAQAABAGMAAABZAAAERo4gAAAAAAAEAAAAXwAAAzIQEAAAAAAAXwAAA:IQEAABAAAAXwAAA3IQEAACAAAAZQAAA:IgEAAAAAAAZQAAAzIgEAABAAAAZwAABPIgEAACAAAAAQAAAGgAAAICAAAANgAABfIgEAAAAAAARh4QAAEAAAA2AAAFMiAQAAEAAABGEBAAAAAAADYAAAVyABAAAAAAAEYSEAACAAAANgAABYIAEAAAAAAAAUAAAAAAgD8RAAAIEgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAgAAABEAAAgiABAAAQAAAEYOEAAAAAAARo4gAAAAAAADAAAAAAAABxIAEAABAAAAGgAQAAEAAAAKABAAAQAAADYAAAWCIBAAAgAAABoAEAABAAAAOAAAB0IgEAACAAAACgAQAAEAAAABQAAAAAAAPxEAAAgSIBAAAgAAAEYOEAAAAAAARo4gAAAAAAAAAAAAEQAACCIgEAACAAAARg4QAAAAAABGjiAAAAAAAAEAAAA%AAABU1RBVHQAAAAMAAAAAgAAAAAAAAAGAAAABgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.painter_video_fragData0 = "s931:AAJfdGV4X3NhbXBsZXIAAHRleAAAAERYQkMLuHx52DaqoPgbxVgoLcgLAQAAAKQCAAAFAAAANAAAANwAAAAoAQAAXAEAACgCAABSREVGoAAAAAAAAAAAAAAAAgAAABwAAAAABP::AAEAAG0AAABcAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAGkAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAX3RleF9zYW1wbGVyAHRleABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKtJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAOAAAAAEAAAAAAAAAAwAAAAEAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFLEAAAAQAAAADEAAABaAAADAGAQAAAAAABYGAAEAHAQAAAAAABVVQAAYhAAA:IQEAAAAAAAYhAAAzIQEAABAAAAZQAAA:IgEAAAAAAAaAAAAgEAAABFAAAJ8gAQAAAAAABGEBAAAQAAAEZ%EAAAAAAAAGAQAAAAAAA4AAAH8gAQAAAAAABGDhAAAAAAAEYeEAAAAAAAOAAAB3IgEAAAAAAARgIQAAAAAAD2HxAAAAAAADYAAAWCIBAAAAAAADoAEAAAAAAAPgAAAVNUQVR0AAAABQAAAAEAAAAAAAAAAwAAAAIAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.painter_video_vertData0 = "s1454:A3RleFBvc2l0aW9uAAB2ZXJ0ZXhDb2xvcgABdmVydGV4UG9zaXRpb24AAgEkR2xvYmFscwAAAXByb2plY3Rpb25NYXRyaXgAAAAAAEAAAAAEBERYQkMYRgMBQiEp1Ksh8UKJ6SuGAQAAAPADAAAFAAAANAAAAAwBAABwAQAA4AEAAHQDAABSREVG0AAAAAEAAABIAAAAAQAAABwAAAAABP7:AAEAAJwAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAACRHbG9iYWxzAKurqzwAAAABAAAAYAAAAEAAAAAAAAAAAAAAAHgAAAAAAAAAQAAAAAIAAACMAAAAAAAAAHByb2plY3Rpb25NYXRyaXgAq6urAwADAAQABAAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dOXAAAAAMAAAAIAAAAUAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAUAAAAAEAAAAAAAAAAwAAAAEAAAAPDwAAUAAAAAIAAAAAAAAAAwAAAAIAAAAHBwAAVEVYQ09PUkQAq6urT1NHTmgAAAADAAAACAAAAFAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFAAAAABAAAAAAAAAAMAAAABAAAAAwwAAFkAAAAAAAAAAQAAAAMAAAACAAAADwAAAFRFWENPT1JEAFNWX1Bvc2l0aW9uAKurq1NIRFKMAQAAQAABAGMAAABZAAAERo4gAAAAAAAEAAAAXwAAAzIQEAAAAAAAXwAAA:IQEAABAAAAXwAAA3IQEAACAAAAZQAAA:IgEAAAAAAAZQAAAzIgEAABAAAAZwAABPIgEAACAAAAAQAAAGgAAAICAAAANgAABfIgEAAAAAAARh4QAAEAAAA2AAAFMiAQAAEAAABGEBAAAAAAADYAAAVyABAAAAAAAEYSEAACAAAANgAABYIAEAAAAAAAAUAAAAAAgD8RAAAIEgAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAgAAABEAAAgiABAAAQAAAEYOEAAAAAAARo4gAAAAAAADAAAAAAAABxIAEAABAAAAGgAQAAEAAAAKABAAAQAAADYAAAWCIBAAAgAAABoAEAABAAAAOAAAB0IgEAACAAAACgAQAAEAAAABQAAAAAAAPxEAAAgSIBAAAgAAAEYOEAAAAAAARo4gAAAAAAAAAAAAEQAACCIgEAACAAAARg4QAAAAAABGjiAAAAAAAAEAAAA%AAABU1RBVHQAAAAMAAAAAgAAAAAAAAAGAAAABgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.pass_vertData0 = "s779:AXBvcwAAAABEWEJD7F0vBgrwXt7WrnoVcnvrCQEAAABAAgAABQAAADQAAACMAAAAwAAAABgBAADEAQAAUkRFRlAAAAAAAAAAAAAAAAAAAAAcAAAAAAT%:wABAAAcAAAATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NACrq0lTR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAAMDAABURVhDT09SRACrq6tPU0dOUAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAADDAAAQQAAAAAAAAABAAAAAwAAAAEAAAAPAAAAVEVYQ09PUkQAU1ZfUG9zaXRpb24Aq6urU0hEUqQAAABAAAEAKQAAAF8AAAMyEBAAAAAAAGUAAAMyIBAAAAAAAGcAAATyIBAAAQAAAAEAAAAyAAAPMiAQAAAAAABGEBAAAAAAAAJAAAAAAAA:AAAAvwAAAAAAAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAA2AAAFMiAQAAEAAABGEBAAAAAAADYAAAjCIBAAAQAAAAJAAAAAAAAAAAAAAAAAAD8AAIA:PgAAAVNUQVR0AAAABAAAAAAAAAAAAAAAAwAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.pass_viewray_vertData0 = "s1451:AXBvcwAAASRHbG9iYWxzAAACaW52VlAAAAAAAEAAAAAEBGV5ZQBAAAAADAAAAAMBRFhCQyALzKAdoNHY3C7yLLXUJAgBAAAAEAQAAAUAAAA0AAAALAEAAGABAADQAQAAlAMAAFJERUbwAAAAAQAAAEgAAAABAAAAHAAAAAAE:v8AAQAAvAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJEdsb2JhbHMAq6urPAAAAAIAAABgAAAAUAAAAAAAAAAAAAAAkAAAAAAAAABAAAAAAgAAAJgAAAAAAAAAqAAAAEAAAAAMAAAAAgAAAKwAAAAAAAAAaW52VlAAq6sDAAMABAAEAAAAAAAAAAAAZXllAAEAAwABAAMAAAAAAAAAAABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKurSVNHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAAAwMAAFRFWENPT1JEAKurq09TR05oAAAAAwAAAAgAAABQAAAAAAAAAAAAAAADAAAAAAAAAAMMAABQAAAAAQAAAAAAAAADAAAAAQAAAAcIAABZAAAAAAAAAAEAAAADAAAAAgAAAA8AAABURVhDT09SRABTVl9Qb3NpdGlvbgCrq6tTSERSvAEAAEAAAQBvAAAAWQAABEaOIAAAAAAABQAAAF8AAAMyEBAAAAAAAGUAAAMyIBAAAAAAAGUAAANyIBAAAQAAAGcAAATyIBAAAgAAAAEAAABoAAACAgAAADIAAA8yIBAAAAAAAEYQEAAAAAAAAkAAAAAAAD8AAAC:AAAAAAAAAAACQAAAAAAAPwAAAD8AAAAAAAAAADYAAAUyABAAAAAAAEYQEAAAAAAANgAACMIAEAAAAAAAAkAAAAAAAAAAAAAAAACAPwAAgD8RAAAIEgAQAAEAAABGDxAAAAAAAEaOIAAAAAAAAAAAABEAAAgiABAAAQAAAEYPEAAAAAAARo4gAAAAAAABAAAAEQAACEIAEAABAAAARg8QAAAAAABGjiAAAAAAAAIAAAARAAAIEgAQAAAAAABGDhAAAAAAAEaOIAAAAAAAAwAAAA4AAAdyABAAAAAAAEYCEAABAAAABgAQAAAAAAAAAAAJciAQAAEAAABGAhAAAAAAAEaCIIBBAAAAAAAAAAQAAAA2AAAFMiAQAAIAAABGEBAAAAAAADYAAAjCIBAAAgAAAAJAAAAAAAAAAAAAAAAAAD8AAIA:PgAAAVNUQVR0AAAADAAAAAIAAAAAAAAABAAAAAcAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.smaa_blend_weight_fragData0 = "s14940:AAdfZWRnZXNUZXhfc2FtcGxlcgAAX2FyZWFUZXhfc2FtcGxlcgABX3NlYXJjaFRleF9zYW1wbGVyAAJlZGdlc1RleAAAYXJlYVRleAABc2VhcmNoVGV4AAIkR2xvYmFscwAAAnNjcmVlblNpemVJbnYAAAAAAAgAAAACAXNjcmVlblNpemUACAAAAAgAAAACAURYQkNVZWcGNERXnM%Mn8QzCezoAQAAADQrAAAFAAAANAAAADwCAADQAgAABAMAALgqAABSREVGAAIAAAEAAABYAQAABwAAABwAAAAABP::AAEAAMsBAAD8AAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAA4BAAADAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAAAAAAAHwEAAAMAAAAAAAAAAAAAAAAAAAACAAAAAQAAAAAAAAAyAQAAAgAAAAUAAAAEAAAA:::::wAAAAABAAAADAAAADsBAAACAAAABQAAAAQAAAD:::::AQAAAAEAAAAMAAAAQwEAAAIAAAAFAAAABAAAAP::::8CAAAAAQAAAAwAAABNAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAF9lZGdlc1RleF9zYW1wbGVyAF9hcmVhVGV4X3NhbXBsZXIAX3NlYXJjaFRleF9zYW1wbGVyAGVkZ2VzVGV4AGFyZWFUZXgAc2VhcmNoVGV4ACRHbG9iYWxzAKurTQEAAAIAAABwAQAAEAAAAAAAAAAAAAAAoAEAAAAAAAAIAAAAAgAAALABAAAAAAAAwAEAAAgAAAAIAAAAAgAAALABAAAAAAAAc2NyZWVuU2l6ZUludgCrqwEAAwABAAIAAAAAAAAAAABzY3JlZW5TaXplAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6urSVNHTowAAAAFAAAACAAAAIAAAAAAAAAAAAAAAAMAAAAAAAAADw8AAIAAAAABAAAAAAAAAAMAAAABAAAADw8AAIAAAAACAAAAAAAAAAMAAAACAAAADw8AAIAAAAADAAAAAAAAAAMAAAADAAAAAwMAAIAAAAAEAAAAAAAAAAMAAAADAAAADAwAAFRFWENPT1JEAKurq09TR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAA8AAABTVl9UYXJnZXQAq6tTSERSrCcAAEAAAADrCQAAWQAABEaOIAAAAAAAAQAAAFoAAAMAYBAAAAAAAFoAAAMAYBAAAQAAAFoAAAMAYBAAAgAAAFgYAAQAcBAAAAAAAFVVAABYGAAEAHAQAAEAAABVVQAAWBgABABwEAACAAAAVVUAAGIQAAPyEBAAAAAAAGIQAAPyEBAAAQAAAGIQAAPyEBAAAgAAAGIQAAMyEBAAAwAAAGIQAAPCEBAAAwAAAGUAAAPyIBAAAAAAAGgAAAIHAAAAMgAADzIAEAAAAAAA5hoQAAMAAAACQAAAAACAPwAAgL8AAAAAAAAAAAJAAAAAAAAAAACAPwAAAAAAAAAASAAAC:IAEAAAAAAARgAQAAAAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAxAAAHIgAQAAAAAAABQAAAAAAAABoAEAAAAAAAHwAEAxoAEAAAAAAAMQAAByIAEAAAAAAAAUAAAAAAAAAKABAAAAAAAB8ABAMaABAAAAAAADgAAAsyABAAAQAAAEaAIAAAAAAAAAAAAAJAAAAAAIC:AACAPwAAAAAAAAAANgAABUIAEAABAAAAAUAAAAAAgD82AAAFMgAQAAIAAADmGhAAAwAAADYAAAUSABAAAwAAAAFAAAAAAAAANgAABUIAEAACAAAAAUAAAAAAgL82AAAFIgAQAAAAAAABQAAAAACAPzAAAAExAAAHQgAQAAAAAAAqABAAAgAAAAFAAAAAAOBAMQAAB4IAEAAAAAAAAUAAAGZmZj8aABAAAAAAAAEAAAdCABAAAAAAADoAEAAAAAAAKgAQAAAAAAADAAADKgAQAAAAAAAAAAAHcgAQAAIAAABGAhAAAQAAAEYCEAACAAAAAAAACIIAEAACAAAAGgAQgEEAAAACAAAAAUAAAAAAgD9IAAAL8gAQAAMAAADGABAAAgAAABZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAA8AAAoiABAAAAAAABYFEAADAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAAWAAABMQAAB0IAEAAAAAAAAUAAAGZmZj8KABAAAwAAAAEAAAdCABAAAAAAACoAEAAAAAAAAUAAAAAAgD8AAAAHEgAQAAEAAAAqABAAAAAAACoAEAACAAAAEgAAATYAAAUSABAAAQAAAAFAAAAAAAAANgAABSIAEAAAAAAAAUAAAAAAAAA2AAAFEgAQAAMAAAABQAAAAAAAABUAAAE4AAALYgAQAAIAAAAGgSAAAAAAAAAAAAACQAAAAAAAAAAAgD8AAIC:AAAAADYAAAWCABAAAgAAAAFAAAAAAIA:NgAABTIAEAAEAAAA5hoQAAMAAAA2AAAFEgAQAAUAAAAKABAAAwAAADYAAAVCABAABAAAAAFAAAAAAIC:NgAABUIAEAAAAAAAAUAAAAAAgD8wAAABMQAAB4IAEAAAAAAAKgAQAAQAAAABQAAAAADgQDEAAAcSABAAAgAAAAFAAABmZmY:KgAQAAAAAAABAAAHggAQAAAAAAA6ABAAAAAAAAoAEAACAAAAAwAAAzoAEAAAAAAAAAAAB3IAEAAEAAAAlgcQAAIAAABGAhAABAAAAAAAAAiCABAABAAAABoAEIBBAAAABAAAAAFAAAAAAIA:SAAAC:IAEAAFAAAAxgAQAAQAAAAWfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAPAAAKQgAQAAAAAAAWBRAABQAAAAJAAAAAAAA:AAAAPwAAAAAAAAAAFgAAAQAAAAeCABAAAAAAAAoAEAABAAAAKgAQAAQAAAAxAAAHggAQAAAAAAABQAAAAAAAQDoAEAAAAAAAHwAEAzoAEAAAAAAAAAAACCIAEAABAAAACgAQgEEAAAABAAAAAUAAAAAAgD4yAAAPwgAQAAEAAACmChAABAAAAAJAAAAAAAAAAAAAAAAAgD8AAIC:AkAAAAAAAAAAAAAAAAAAAAAAgL4yAAAK8gAQAAIAAAAWDhAAAQAAAEaEIAAAAAAAAAAAAOYeEAADAAAAMgAADfIAEAACAAAARoQgAAAAAAAAAAAAAkAAAAAAgL8AAAAAAACAPwAAAABGDhAAAgAAADIAAA:yABAAAgAAAEYOEAACAAAAAkAAAAAAgD8AAIC:AACAPwAAgL8CQAAAAAAAAAAAgD8AAAAAAACAP0gAAAvyABAAAwAAAEYAEAACAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAASAAAC:IAEAACAAAA5goQAAIAAACGdxAAAAAAAABgEAAAAAAAAUAAAAAAAAA2AAAFQgAQAAMAAAAKABAAAgAAADIAAA%iABAAAQAAAAYIEAADAAAAAkAAAAAAAAAAAKBAAAAAAAAAoEACQAAAAAAAAAAAcMAAAAAAAABwwDgAAAhSABAAAgAAAFYHEICBAAAAAQAAAAYCEAADAAAANgAABSIAEAACAAAAGgAQAAMAAAAAAAAK8gAQAAIAAABGDhAAAgAAAAJAAAAAAAA:AAAAPwAAAD8AAAA:QQAABfIAEAACAAAARg4QAAIAAAAyAAAMogAQAAEAAABWDRAAAgAAAAJAAAAAAAAAAAAAQAAAAAAAAABABggQAAIAAAAdAAAKYgAQAAAAAABWBhAAAAAAAAJAAAAAAAAAZmZmP2ZmZj8AAAAANwAADDIAEAACAAAAlgUQAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAANYFEAABAAAAMgAADGIAEAAAAAAABgEQAAIAAAACQAAAAAAAAAAAoEEAAKBBAAAAAAYCEAABAAAAMgAAD2IAEAAAAAAAVgYQAAAAAAACQAAAAAAAAM3MzDuhDuo6AAAAAAJAAAAAAAAAzcwAP6EOajoAAAAASAAAC:IAEAABAAAAlgUQAAAAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAASAAABNgAACDIAEAABAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAVAAABMgAACiIAEAAAAAAACoAgAAAAAAAAAAAAAUAAAAAAgD4qEBAAAwAAADYAAAcyABAAAgAAAEaAIIBBAAAAAAAAAAAAAAA2AAAFQgAQAAIAAAABQAAAAACAPzYAAAUSABAAAwAAABoAEAAAAAAANgAABSIAEAADAAAAOhAQAAMAAAA2AAAFQgAQAAAAAAAKABAABQAAADYAAAVCABAAAwAAAAFAAAAAAIC:NgAABUIAEAABAAAAAUAAAAAAgD8wAAABMQAAB4IAEAABAAAAKgAQAAMAAAABQAAAAADgQDEAAAeCABAAAgAAAAFAAABmZmY:KgAQAAEAAAABAAAHggAQAAEAAAA6ABAAAQAAADoAEAACAAAAAwAAAzoAEAABAAAAAAAAB3IAEAADAAAARgIQAAIAAABGAhAAAwAAAAAAAAiCABAAAwAAABoAEIBBAAAAAwAAAAFAAAAAAIA:SAAAC:IAEAAEAAAAxgAQAAMAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAyAAAJggAQAAEAAAAKABAABAAAAAFAAAAAAKBAAUAAAAAAcMA4AAAIEgAQAAQAAAA6ABCAgQAAAAEAAAAKABAABAAAAAAAAAoyABAABAAAAEYAEAAEAAAAAkAAAAAAAD8AAAA:AAAAAAAAAABBAAAFwgAQAAAAAABWARAABAAAAA8AAApCABAAAQAAALYPEAAAAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAAWAAABMgAADTIAEAACAAAARoAgAAAAAAAAAAAAAkAAAAAAgD8AAAAAAAAAAAAAAADmGhAAAwAAAAAAAAhCABAAAgAAABoAEIBBAAAAAgAAAAFAAAAAAIA:SAAAC:IAEAACAAAAhgAQAAIAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAxAAAHggAQAAAAAAABQAAAAAAAAAoAEAACAAAAHwAEAzoAEAAAAAAANgAABjIAEAACAAAARoAgAAAAAAAAAAAANgAABUIAEAACAAAAAUAAAAAAgD82AAAFEgAQAAQAAAAaABAAAAAAADYAAAUiABAABAAAADoQEAADAAAANgAABRIAEAAFAAAAKgAQAAAAAAA2AAAFQgAQAAQAAAABQAAAAACAvzYAAAWCABAAAAAAAAFAAAAAAIA:MAAAATEAAAeCABAAAQAAACoAEAAEAAAAAUAAAAAA4EAxAAAHggAQAAIAAAABQAAAZmZmPzoAEAAAAAAAAQAAB4IAEAABAAAAOgAQAAEAAAA6ABAAAgAAAAMAAAM6ABAAAQAAAAAAAAdyABAABAAAAEYCEAACAAAARgIQAAQAAAAAAAAIggAQAAQAAAAaABCAQQAAAAQAAAABQAAAAACAP0gAAAvyABAABgAAAMYAEAAEAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAMgAACYIAEAABAAAACgAQAAYAAAABQAAAAACgQAFAAAAAAHDAOAAACBIAEAAGAAAAOgAQgIEAAAABAAAACgAQAAYAAAAAAAAKwgAQAAUAAAAGBBAABgAAAAJAAAAAAAAAAAAAAAAAAD8AAAA:QQAABTIAEAAFAAAAtg8QAAUAAAAPAAAKggAQAAAAAAAWBRAABQAAAAJAAAAAAAA:AAAAPwAAAAAAAAAAFgAAATEAAAciABAAAAAAAAFAAABmZmY:CgAQAAUAAAABAAAHIgAQAAAAAAAaABAAAAAAAAFAAAAAAIA:AAAAByIAEAADAAAAGgAQAAAAAAAqABAABAAAABIAAAE2AAAFIgAQAAMAAAABQAAAAAAAADYAAAWCABAAAAAAAAFAAAAAAAAAFQAAAQAAAAciABAAAAAAABoAEAADAAAAKgAQAAMAAAAxAAAHIgAQAAAAAAABQAAAAAAAQBoAEAAAAAAAHwAEAxoAEAAAAAAANgAABhIAEAADAAAAKgAQgEEAAAADAAAAMgAACvIAEAACAAAABgUQAAMAAABGhCAAAAAAAAAAAADmHhAAAwAAADIAAA3yABAABAAAAEaEIAAAAAAAAAAAAAJAAAAAAIC:AAAAAAAAAAAAAIC:RgQQAAIAAAAyAAAP8gAQAAQAAABGDhAABAAAAAJAAAAAAIA:AACAvwAAgD8AAIC:AkAAAAAAAAAAAIA:AAAAAAAAgD9IAAAL8gAQAAUAAABGABAABAAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAEgAAAvyABAABAAAAOYKEAAEAAAAlnwQAAAAAAAAYBAAAAAAAAFAAAAAAAAAMgAADTIAEAACAAAARoAgAAAAAAAAAAAAAkAAAAAAgD8AAAAAAAAAAAAAAADmChAAAgAAAAAAAAhCABAAAgAAABoAEIBBAAAAAgAAAAFAAAAAAIA:SAAAC:IAEAACAAAAhgAQAAIAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAA2AAAFEgAQAAQAAAAaABAABQAAADYAAAWiABAABAAAAFYBEAACAAAAMgAADGIAEAAAAAAABgEQAAQAAAACQAAAAAAAAAAAAEAAAABAAAAAAKYLEAAEAAAAHQAAB0IAEAABAAAAKgAQAAEAAAABQAAAZmZmPx0AAAeCABAAAAAAADoAEAAAAAAAAUAAAGZmZj83AAAJEgAQAAIAAAAqABAAAQAAAAFAAAAAAAAAGgAQAAAAAAA3AAAJIgAQAAIAAAA6ABAAAAAAAAFAAAAAAAAAKgAQAAAAAAAyAAAMYgAQAAAAAAAGARAAAgAAAAJAAAAAAAAAAACgQQAAoEEAAAAApgkQAAMAAAAyAAAPYgAQAAAAAABWBhAAAAAAAAJAAAAAAAAAzczMO6EO6joAAAAAAkAAAAAAAADNzAA:oQ5qOgAAAABIAAAL8gAQAAIAAACWBRAAAAAAAEZ%EAABAAAAAGAQAAEAAAABQAAAAAAAAAAAAAcyABAAAQAAAEYAEAABAAAAFgUQAAIAAAAVAAABGAAACCIAEAAAAAAAGgAQgEEAAAABAAAACgAQAAEAAAAfAAQDGgAQAAAAAAA2AAAFogAQAAAAAAAGFBAAAAAAADYAAAVCABAAAAAAAAFAAAAAAIA:NgAABRIAEAACAAAAAUAAAAAAAAAwAAABMQAAB0IAEAABAAAAChAQAAIAAAAaABAAAAAAADEAAAeCABAAAQAAAAFAAABd:lM:KgAQAAAAAAABAAAHQgAQAAEAAAA6ABAAAQAAACoAEAABAAAAGAAAB4IAEAABAAAACgAQAAIAAAABQAAAAAAAAAEAAAdCABAAAQAAADoAEAABAAAAKgAQAAEAAAAfAAQDKgAQAAEAAAAyAAAPwgAQAAEAAABWDRAAAAAAAAJAAAAAAAAAAAAAAAAAgD8AAIC:AkAAAAAAAAAAAAAAAAAAAAAAgD9IAAAL8gAQAAIAAADmChAAAQAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIAAA0yABAAAwAAAEaAIAAAAAAAAAAAAAJAAAAAAADAAAAAgAAAAAAAAAAA1gUQAAAAAAA2AAAFQgAQAAMAAAAaABAAAgAAADYAAAXiABAAAAAAAAYGEAADAAAABwAAARIAAAECAAABFQAAARYAAAE2AAAFwgAQAAAAAACmBhAAAAAAADYAAAUiABAAAAAAAAoAEAACAAAAMgAAD2IAEAAAAAAAVgYQAAAAAAACQAAAAAAAAAAAAD8AAADAAAAAAAJAAAAAAAAAAAAAPAAAAkAAAAAASAAAC:IAEAACAAAAlgUQAAAAAABGfhAAAgAAAABgEAACAAAAAUAAAAAAAAAyAAAJIgAQAAAAAAAKABAAAgAAAAFAAAACgQDAAUAAAAAAUEAyAAAKEgAQAAIAAAAKgCAAAAAAAAAAAAAaABAAAAAAADoAEAAAAAAAAAAACCIAEAACAAAAGhAQgEEAAAABAAAAAUAAAAAAgD9IAAAL8gAQAAMAAABGABAAAgAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADYAAAWiABAAAAAAAKYeEAAAAAAANgAABUIAEAAAAAAAAUAAAAAAgD82AAAFEgAQAAQAAAABQAAAAAAAADAAAAExAAAHQgAQAAEAAAAaABAAAAAAABoQEAACAAAAMQAAB4IAEAABAAAAAUAAAF3%Uz8qABAAAAAAAAEAAAdCABAAAQAAADoAEAABAAAAKgAQAAEAAAAYAAAHggAQAAEAAAAKABAABAAAAAFAAAAAAAAAAQAAB0IAEAABAAAAOgAQAAEAAAAqABAAAQAAAB8ABAMqABAAAQAAADIAAA:CABAAAQAAAFYNEAAAAAAAAkAAAAAAAAAAAAAAAACAPwAAgL8CQAAAAAAAAAAAAAAAAAAAAACAP0gAAAvyABAABAAAAOYKEAABAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAMgAADTIAEAAFAAAARoAgAAAAAAAAAAAAAkAAAAAAAEAAAAAAAAAAAAAAAADWBRAAAAAAADYAAAVCABAABQAAABoAEAAEAAAANgAABeIAEAAAAAAABgYQAAUAAAAHAAABEgAAAQIAAAEVAAABFgAAATYAAAXCABAAAAAAAKYGEAAAAAAANgAABSIAEAAAAAAACgAQAAQAAAAyAAAPYgAQAAAAAABWBhAAAAAAAAJAAAAAAAAAAAAAPwAAAMAAAAAAAkAAAAAAAAAAAAY:AAACQAAAAABIAAAL8gAQAAQAAACWBRAAAAAAAEZ%EAACAAAAAGAQAAIAAAABQAAAAAAAADIAAAkiABAAAAAAAAoAEAAEAAAAAUAAAAKBAMABQAAAAABQQDIAAAtCABAAAgAAAAqAIIBBAAAAAAAAAAAAAAAaABAAAAAAADoAEAAAAAAAMgAAC:IAEAAEAAAApoogAAAAAAAAAAAAJgIQAAIAAAAGEBCAQQAAAAMAAAAAAAAK8gAQAAQAAABGDhAABAAAAAJAAAAAAAA:AAAAPwAAAD8AAAA:QQAABfIAEAAEAAAARg4QAAQAAABLAAAGYgAQAAAAAAD2DhCAgQAAAAQAAAA2AAAFggAQAAIAAAAaEBAAAQAAADIAAA0yABAABQAAAEaAIAAAAAAAAAAAAAJAAAAAAIA:AAAAAAAAAAAAAAAA5goQAAIAAAAAAAAIQgAQAAUAAAAaABCAQQAAAAUAAAABQAAAAACAP0gAAAvyABAABQAAAIYAEAAFAAAAFn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAANgAABRIAEAAFAAAACgAQAAMAAAAyAAAPwgAQAAEAAAAGBBAABQAAAAJAAAAAAAAAAAAAAAAAgEAAAIBAAkAAAAAAAAAAAAAAAAAAPwAAAD9BAAAFwgAQAAEAAACmDhAAAQAAADIAAAxiABAAAAAAAKYLEAABAAAAAkAAAAAAAAAAAIBBAACAQQAAAABWBhAAAAAAADIAAA9iABAAAAAAAFYGEAAAAAAAAkAAAAAAAADNzMw7oQ7qOgAAAAACQAAAAAAAAM3MTDuhDmo6AAAAAEgAAAvyABAAAwAAAJYFEAAAAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAAHQAACfIAEAAEAAAARg4QgIEAAAAEAAAAtgsQgIEAAAAEAAAAAQAACvIAEAAEAAAARg4QAAQAAAACQAAAAACAPwAAgD8AAEA:AABAPwAAAAciABAAAAAAABoAEAAEAAAACgAQAAQAAAAOAAAHYgAQAAAAAACmCxAABAAAAFYFEAAAAAAANgAABaIAEAACAAAA9h8QAAMAAAAyAAANMgAQAAQAAABGgCAAAAAAAAAAAAACQAAAAAAAAAAAgD8AAAAAAAAAAEYAEAACAAAAAAAACEIAEAAEAAAAGgAQgEEAAAAEAAAAAUAAAAAAgD9IAAAL8gAQAAQAAACGABAABAAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIAAAqCABAAAAAAABoAEIBBAAAAAAAAAAoAEAAEAAAAAUAAAAAAgD8AAAAIMgAQAAQAAADmChAAAgAAAEaAIAAAAAAAAAAAAAAAAAhCABAABAAAABoAEIBBAAAABAAAAAFAAAAAAIA:SAAAC:IAEAAEAAAAhgAQAAQAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAyIAAKEgAQAAQAAAAqABCAQQAAAAAAAAAKABAABAAAADoAEAAAAAAAMgAADTIAEAAFAAAARoAgAAAAAAAAAAAAAkAAAAAAAAAAAADAAAAAAAAAAABGABAAAgAAAAAAAAhCABAABQAAABoAEIBBAAAABQAAAAFAAAAAAIA:SAAAC:IAEAAFAAAAhgAQAAUAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAyAAAKIgAQAAAAAAAaABCAQQAAAAAAAAAKABAABQAAAAFAAAAAAIA:MgAADTIAEAACAAAARoAgAAAAAAAAAAAAAkAAAAAAgD8AAADAAAAAAAAAAADmChAAAgAAAAAAAAhCABAAAgAAABoAEIBBAAAAAgAAAAFAAAAAAIA:SAAAC:IAEAACAAAAhgAQAAIAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAyIAAKIgAQAAQAAAAqABCAQQAAAAAAAAAKABAAAgAAABoAEAAAAAAAOAAABzIgEAAAAAAARgAQAAMAAABGABAABAAAABIAAAE2AAAFMiAQAAAAAABGABAAAQAAADYAAAUSABAAAAAAAAFAAAAAAAAAFQAAARIAAAE2AAAIMiAQAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAABUAAAExAAAHEgAQAAAAAAABQAAAAAAAAAoAEAAAAAAAHwAEAwoAEAAAAAAANgAABTIAEAAAAAAAFhUQAAEAAAA2AAAFQgAQAAAAAAABQAAAAACAPzYAAAUSABAAAQAAAAFAAAAAAAAAMAAAATEAAAeCABAAAAAAACoQEAACAAAACgAQAAAAAAAxAAAHEgAQAAIAAAABQAAAXf5TPyoAEAAAAAAAAQAAB4IAEAAAAAAAOgAQAAAAAAAKABAAAgAAABgAAAcSABAAAgAAAAoAEAABAAAAAUAAAAAAAAABAAAHggAQAAAAAAA6ABAAAAAAAAoAEAACAAAAHwAEAzoAEAAAAAAAMgAADzIAEAACAAAAFgUQAAAAAAACQAAAAACAPwAAgL8AAAAAAAAAAAJAAAAAAAAAAACAPwAAAAAAAAAASAAAC:IAEAABAAAARgAQAAIAAAAWfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAyAAANMgAQAAIAAABGgCAAAAAAAAAAAAACQAAAAAAAgAAAAMAAAAAAAAAAABYFEAAAAAAANgAABUIAEAACAAAAGgAQAAEAAAA2AAAFcgAQAAAAAAAWBhAAAgAAAAcAAAESAAABAgAAARUAAAEWAAABNgAABSIAEAABAAAAKgAQAAAAAAAyAAAPYgAQAAAAAAAGARAAAQAAAAJAAAAAAAAAAAAAPwAAAMAAAAAAAkAAAAAAAAAAAAA8AAACQAAAAABIAAAL8gAQAAEAAACWBRAAAAAAAEZ%EAACAAAAAGAQAAIAAAABQAAAAAAAADIAAAkiABAAAAAAAAoAEAABAAAAAUAAAAKBAMABQAAAAABQQDIAAAoSABAAAAAAABqAIAAAAAAAAAAAABoAEAAAAAAACgAQAAAAAAAAAAAIIgAQAAEAAAAKABCAQQAAAAAAAAABQAAAAACAPzYAAAUSABAAAQAAAAoQEAAAAAAASAAAC:IAEAABAAAARgAQAAEAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAA2AAAFUgAQAAEAAAD2HhAAAQAAADYAAAWCABAAAQAAAAFAAAAAAIA:NgAABRIAEAACAAAAAUAAAAAAAAAwAAABMQAABxIAEAADAAAACgAQAAEAAAA6EBAAAgAAADEAAAciABAAAwAAAAFAAABd:lM:OgAQAAEAAAABAAAHEgAQAAMAAAAaABAAAwAAAAoAEAADAAAAGAAAByIAEAADAAAACgAQAAIAAAABQAAAAAAAAAEAAAcSABAAAwAAABoAEAADAAAACgAQAAMAAAAfAAQDCgAQAAMAAAAyAAAPMgAQAAMAAAAmChAAAQAAAAJAAAAAAIA:AACAvwAAAAAAAAAAAkAAAAAAAAAAAIA:AAAAAAAAAABIAAAL8gAQAAIAAABGABAAAwAAABZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIAAA0yABAAAwAAAEaAIAAAAAAAAAAAAAJAAAAAAAAAAAAAQAAAAAAAAAAAJgoQAAEAAAA2AAAFQgAQAAMAAAAaABAAAgAAADYAAAXSABAAAQAAAFYIEAADAAAABwAAARIAAAECAAABFQAAARYAAAE2AAAFIgAQAAIAAAA6ABAAAQAAADIAAA:CABAAAQAAAAYEEAACAAAAAkAAAAAAAAAAAAAAAAAAPwAAAMACQAAAAAAAAAAAAAAAAAY:AAACQEgAAAvyABAAAgAAAOYKEAABAAAARn4QAAIAAAAAYBAAAgAAAAFAAAAAAAAAMgAACUIAEAABAAAACgAQAAIAAAABQAAAAoEAwAFAAAAAAFBAMgAACyIAEAAAAAAAGoAggEEAAAAAAAAAAAAAACoAEAABAAAACgAQAAEAAAAyAAAL8gAQAAIAAAD2jyAAAAAAAAAAAAAWARAAAAAAAFYVEIBBAAAAAwAAAAAAAAryABAAAgAAAEYOEAACAAAAAkAAAAAAAD8AAAA:AAAAPwAAAD9BAAAF8gAQAAIAAABGDhAAAgAAAEsAAAZSABAAAQAAAPYOEICBAAAAAgAAADYAAAVCABAAAAAAAAoQEAAAAAAAMgAADTIAEAADAAAARoAgAAAAAAAAAAAAAkAAAAAAAAAAAIA:AAAAAAAAAABmChAAAAAAAAAAAAhCABAAAwAAABoAEIBBAAAAAwAAAAFAAAAAAIA:SAAAC:IAEAADAAAAhgAQAAMAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAA2AAAFEgAQAAMAAAAaABAAAQAAADIAAA%iABAAAQAAAAYEEAADAAAAAkAAAAAAAAAAAIBAAAAAAAAAgEACQAAAAAAAAAAAAD8AAAAAAAAAP0EAAAWiABAAAQAAAFYNEAABAAAAMgAADDIAEAABAAAA1gUQAAEAAAACQAAAAACAQQAAgEEAAAAAAAAAAIYAEAABAAAAMgAADzIAEAABAAAARgAQAAEAAAACQAAAzczMO6EO6joAAAAAAAAAAAJAAADNzEw7oQ5qOgAAAAAAAAAASAAAC:IAEAABAAAARgAQAAEAAABGfhAAAQAAAABgEAABAAAAAUAAAAAAAAAdAAAJ8gAQAAIAAABGDhCAgQAAAAIAAAC2CxCAgQAAAAIAAAABAAAK8gAQAAIAAABGDhAAAgAAAAJAAAAAAIA:AACAPwAAQD8AAEA:AAAAB0IAEAAAAAAAGgAQAAIAAAAKABAAAgAAAA4AAAfCABAAAQAAAKYOEAACAAAApgoQAAAAAAA2AAAFggAQAAAAAAAqEBAAAwAAADIAAA0yABAAAgAAAEaAIAAAAAAAAAAAAAJAAAAAAIA:AAAAAAAAAAAAAAAANg8QAAAAAAAAAAAIQgAQAAIAAAAaABCAQQAAAAIAAAABQAAAAACAP0gAAAvyABAAAgAAAIYAEAACAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAMgAACkIAEAAAAAAAKgAQgEEAAAABAAAAGgAQAAIAAAABQAAAAACAPwAAAAgyABAAAgAAAHYPEAAAAAAARoAgAAAAAAAAAAAAAAAACEIAEAACAAAAGgAQgEEAAAACAAAAAUAAAAAAgD9IAAAL8gAQAAIAAACGABAAAgAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIgAApCABAAAgAAADoAEIBBAAAAAQAAABoAEAACAAAAKgAQAAAAAAAyAAANMgAQAAMAAABGgCAAAAAAAAAAAAACQAAAAAAAwAAAAAAAAAAAAAAAADYPEAAAAAAAAAAACEIAEAADAAAAGgAQgEEAAAADAAAAAUAAAAAAgD9IAAAL8gAQAAMAAACGABAAAwAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIAAAoSABAAAAAAACoAEIBBAAAAAQAAABoAEAADAAAAAUAAAAAAgD8yAAANMgAQAAMAAABGgCAAAAAAAAAAAAACQAAAAAAAwAAAgD8AAAAAAAAAAHYPEAAAAAAAAAAACEIAEAADAAAAGgAQgEEAAAADAAAAAUAAAAAAgD9IAAAL8gAQAAMAAACGABAAAwAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIgAAqCABAAAgAAADoAEIBBAAAAAQAAABoAEAADAAAACgAQAAAAAAA4AAAHwiAQAAAAAAAGBBAAAQAAAKYOEAACAAAAEgAAATYAAAjCIBAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAFQAAAT4AAAFTVEFUdAAAAFgBAAAHAAAAAAAAAAYAAACfAAAAAAAAABAAAAATAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMAAAAAAAAAAAAAAAAAAABGAAAAAwAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.smaa_blend_weight_vertData0 = "s1695:AXBvcwAAASRHbG9iYWxzAAACc2NyZWVuU2l6ZQAAAAAACAAAAAIBc2NyZWVuU2l6ZUludgAIAAAACAAAAAIBRFhCQ:WG%10kJ4mY3jmYbUKqyvEBAAAAuAQAAAUAAAA0AAAAKAEAAFwBAAAUAgAAPAQAAFJERUbsAAAAAQAAAEgAAAABAAAAHAAAAAAE:v8AAQAAugAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJEdsb2JhbHMAq6urPAAAAAIAAABgAAAAEAAAAAAAAAAAAAAAkAAAAAAAAAAIAAAAAgAAAJwAAAAAAAAArAAAAAgAAAAIAAAAAgAAAJwAAAAAAAAAc2NyZWVuU2l6ZQCrAQADAAEAAgAAAAAAAAAAAHNjcmVlblNpemVJbnYATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NABJU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAVEVYQ09PUkQAq6urT1NHTrAAAAAGAAAACAAAAJgAAAAAAAAAAAAAAAMAAAAAAAAADwAAAJgAAAABAAAAAAAAAAMAAAABAAAADwAAAJgAAAACAAAAAAAAAAMAAAACAAAADwAAAJgAAAADAAAAAAAAAAMAAAADAAAAAwwAAJgAAAAEAAAAAAAAAAMAAAADAAAADAMAAKEAAAAAAAAAAQAAAAMAAAAEAAAADwAAAFRFWENPT1JEAFNWX1Bvc2l0aW9uAKurq1NIRFIgAgAAQAABAIgAAABZAAAERo4gAAAAAAABAAAAXwAAAzIQEAAAAAAAZQAAA:IgEAAAAAAAZQAAA:IgEAABAAAAZQAAA:IgEAACAAAAZQAAAzIgEAADAAAAZQAAA8IgEAADAAAAZwAABPIgEAAEAAAAAQAAAGgAAAIDAAAAMgAAD:IAEAAAAAAARhQQAAAAAAACQAAAAAAAPwAAAD8AAAA:AAAAPwJAAAAAAAA:AAAAPwAAAD8AAAA:MgAADfIAEAABAAAApo8gAAAAAAAAAAAAAkAAAAAAgL4AAKA:AAAAvgAAAL6GDRAAAAAAADYAAAXyIBAAAAAAAIYNEAABAAAAMgAADfIAEAACAAAA5o4gAAAAAAAAAAAAAkAAAAAAAL4AAIC%AAAAvgAAoD9GDhAAAAAAADgAAAgyIBAAAwAAAOYKEAAAAAAARoAgAAAAAAAAAAAANgAABfIgEAABAAAARg4QAAIAAAA2AAAFwgAQAAEAAABWDRAAAgAAADIAAA3yIBAAAgAAAKaPIAAAAAAAAAAAAAJAAAAAAADCAAAAQgAAAMIAAABCRg4QAAEAAAAyAAAPwiAQAAMAAAAGFBAAAAAAAAJAAAAAAAAAAAAAAAAAAD8AAAA:AkAAAAAAAAAAAAAAAAAAPwAAAD82AAAFMiAQAAQAAABGEBAAAAAAADYAAAjCIBAABAAAAAJAAAAAAAAAAAAAAAAAAD8AAIA:PgAAAVNUQVR0AAAADAAAAAMAAAAAAAAABwAAAAYAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.smaa_edge_detect_fragData0 = "s2651:AAJfY29sb3JUZXhfc2FtcGxlcgAAY29sb3JUZXgAAABEWEJDwZiLHLhnlk5Qiq6:ZBwu:gEAAACkBwAABQAAADQAAADoAAAAZAEAAJgBAAAoBwAAUkRFRqwAAAAAAAAAAAAAAAIAAAAcAAAAAAT::wABAAB3AAAAXAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAABuAAAAAgAAAAUAAAAEAAAA:::::wAAAAABAAAADAAAAF9jb2xvclRleF9zYW1wbGVyAGNvbG9yVGV4AE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6urSVNHTnQAAAAEAAAACAAAAGgAAAAAAAAAAAAAAAMAAAAAAAAADw8AAGgAAAABAAAAAAAAAAMAAAABAAAADw8AAGgAAAACAAAAAAAAAAMAAAACAAAADw8AAGgAAAADAAAAAAAAAAMAAAADAAAAAwMAAFRFWENPT1JEAKurq09TR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAA8AAABTVl9UYXJnZXQAq6tTSERSiAUAAEAAAABiAQAAWgAAAwBgEAAAAAAAWBgABABwEAAAAAAAVVUAAGIQAAPyEBAAAAAAAGIQAAPyEBAAAQAAAGIQAAPyEBAAAgAAAGIQAAMyEBAAAwAAAGUAAAPyIBAAAAAAAGgAAAIFAAAASAAAC:IAEAAAAAAARhAQAAMAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAABIAAAL8gAQAAEAAABGEBAAAAAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAAAAAAhyABAAAQAAAEYCEAAAAAAARgIQgEEAAAABAAAANAAACYIAEAAAAAAAGgAQgIEAAAABAAAACgAQgIEAAAABAAAANAAACBIAEAABAAAAKgAQgIEAAAABAAAAOgAQAAAAAABIAAAL8gAQAAIAAADmGhAAAAAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAAAAAAAhyABAAAgAAAEYCEAAAAAAARgIQgEEAAAACAAAANAAACYIAEAAAAAAAGgAQgIEAAAACAAAACgAQgIEAAAACAAAANAAACCIAEAABAAAAKgAQgIEAAAACAAAAOgAQAAAAAAAdAAAKwgAQAAEAAAAGBBAAAQAAAAJAAAAAAAAAAAAAAM3MzD3NzMw9AQAACsIAEAABAAAApg4QAAEAAAACQAAAAAAAAAAAAAAAAIA:AACAPw8AAAqCABAAAAAAAOYKEAABAAAAAkAAAAAAgD8AAIA:AAAAAAAAAAAYAAAHggAQAAAAAAA6ABAAAAAAAAFAAAAAAAAADQAEAzoAEAAAAAAASAAAC:IAEAACAAAARhAQAAEAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAAAAAIcgAQAAIAAABGAhAAAAAAAEYCEIBBAAAAAgAAADQAAAmCABAAAAAAABoAEICBAAAAAgAAAAoAEICBAAAAAgAAADQAAAgSABAAAgAAACoAEICBAAAAAgAAADoAEAAAAAAASAAAC:IAEAADAAAA5hoQAAEAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAAAAAAAIcgAQAAMAAABGAhAAAAAAAEYCEIBBAAAAAwAAADQAAAmCABAAAAAAABoAEICBAAAAAwAAAAoAEICBAAAAAwAAADQAAAgiABAAAgAAACoAEICBAAAAAwAAADoAEAAAAAAANAAABzIAEAACAAAARgAQAAEAAABGABAAAgAAAEgAAAvyABAAAwAAAEYQEAACAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAAAAACHIAEAADAAAARgIQAAAAAABGAhCAQQAAAAMAAAA0AAAJggAQAAAAAAAaABCAgQAAAAMAAAAKABCAgQAAAAMAAAA0AAAIEgAQAAMAAAAqABCAgQAAAAMAAAA6ABAAAAAAAEgAAAvyABAABAAAAOYaEAACAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAAAAACHIAEAAAAAAARgIQAAAAAABGAhCAQQAAAAQAAAA0AAAJEgAQAAAAAAAaABCAgQAAAAAAAAAKABCAgQAAAAAAAAA0AAAIIgAQAAMAAAAqABCAgQAAAAAAAAAKABAAAAAAADQAAAcyABAAAAAAAEYAEAACAAAARgAQAAMAAAA0AAAHEgAQAAAAAAAaABAAAAAAAAoAEAAAAAAAAAAAB2IAEAAAAAAABgEQAAEAAAAGARAAAQAAAB0AAAcyABAAAAAAAJYFEAAAAAAABgAQAAAAAAABAAAKMgAQAAAAAABGABAAAAAAAAJAAAAAAIA:AACAPwAAAAAAAAAAOAAABzIgEAAAAAAARgAQAAAAAADmChAAAQAAADYAAAjCIBAAAAAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAPgAAAVNUQVR0AAAAJwAAAAUAAAAAAAAABQAAABsAAAAAAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.smaa_edge_detect_vertData0 = "s1454:AXBvcwAAASRHbG9iYWxzAAABc2NyZWVuU2l6ZUludgAAAAAACAAAAAIBRFhCQ67IFns5KaoDQ1maiZPNW7cBAAAAGAQAAAUAAAA0AAAACAEAADwBAADcAQAAnAMAAFJERUbMAAAAAQAAAEgAAAABAAAAHAAAAAAE:v8AAQAAmAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJEdsb2JhbHMAq6urPAAAAAEAAABgAAAAEAAAAAAAAAAAAAAAeAAAAAAAAAAIAAAAAgAAAIgAAAAAAAAAc2NyZWVuU2l6ZUludgCrqwEAAwABAAIAAAAAAAAAAABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKurSVNHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAAAwMAAFRFWENPT1JEAKurq09TR06YAAAABQAAAAgAAACAAAAAAAAAAAAAAAADAAAAAAAAAA8AAACAAAAAAQAAAAAAAAADAAAAAQAAAA8AAACAAAAAAgAAAAAAAAADAAAAAgAAAA8AAACAAAAAAwAAAAAAAAADAAAAAwAAAAMMAACJAAAAAAAAAAEAAAADAAAABAAAAA8AAABURVhDT09SRABTVl9Qb3NpdGlvbgCrq6tTSERSuAEAAEAAAQBuAAAAWQAABEaOIAAAAAAAAQAAAF8AAAMyEBAAAAAAAGUAAAPyIBAAAAAAAGUAAAPyIBAAAQAAAGUAAAPyIBAAAgAAAGUAAAMyIBAAAwAAAGcAAATyIBAABAAAAAEAAABoAAACAQAAADIAAA:yABAAAAAAAEYUEAAAAAAAAkAAAAAAAD8AAAC:AAAAPwAAAL8CQAAAAAAAPwAAAD8AAAA:AAAAPzIAAA3yIBAAAAAAAEaEIAAAAAAAAAAAAAJAAAAAAIC:AAAAAAAAAAAAAIA:Rg4QAAAAAAAyAAAN8iAQAAEAAABGhCAAAAAAAAAAAAACQAAAAACAPwAAAAAAAAAAAACAv0YOEAAAAAAAMgAADfIgEAACAAAARoQgAAAAAAAAAAAAAkAAAAAAAMAAAAAAAAAAAAAAAEBGDhAAAAAAADIAAA8yIBAAAwAAAEYQEAAAAAAAAkAAAAAAAD8AAAC:AAAAAAAAAAACQAAAAAAAPwAAAD8AAAAAAAAAADYAAAUyIBAABAAAAEYQEAAAAAAANgAACMIgEAAEAAAAAkAAAAAAAAAAAAAAAAAAPwAAgD8%AAABU1RBVHQAAAAIAAAAAQAAAAAAAAAGAAAABQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.smaa_neighborhood_blend_fragData0 = "s2506:AAVfYmxlbmRUZXhfc2FtcGxlcgAAX2NvbG9yVGV4X3NhbXBsZXIAAWJsZW5kVGV4AABjb2xvclRleAABJEdsb2JhbHMAAAFzY3JlZW5TaXplSW52AAAAAAAIAAAAAgFEWEJDnnoVZnwvE3NJyC0EnlFCWgEAAAD4BgAABQAAADQAAAC8AQAACAIAADwCAAB8BgAAUkRFRoABAAABAAAA:AAAAAUAAAAcAAAAAAT::wABAABMAQAAvAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAADOAAAAAwAAAAAAAAAAAAAAAAAAAAEAAAABAAAAAAAAAOAAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAA6QAAAAIAAAAFAAAABAAAAP::::8BAAAAAQAAAAwAAADyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAF9ibGVuZFRleF9zYW1wbGVyAF9jb2xvclRleF9zYW1wbGVyAGJsZW5kVGV4AGNvbG9yVGV4ACRHbG9iYWxzAKvyAAAAAQAAABQBAAAQAAAAAAAAAAAAAAAsAQAAAAAAAAgAAAACAAAAPAEAAAAAAABzY3JlZW5TaXplSW52AKurAQADAAEAAgAAAAAAAAAAAE1pY3Jvc29mdCAoUikgSExTTCBTaGFkZXIgQ29tcGlsZXIgNi4zLjk2MDAuMTYzODQAq6tJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAAPDwAAOAAAAAEAAAAAAAAAAwAAAAEAAAADAwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAADwAAAFNWX1RhcmdldACrq1NIRFI4BAAAQAAAAA4BAABZAAAERo4gAAAAAAABAAAAWgAAAwBgEAAAAAAAWgAAAwBgEAABAAAAWBgABABwEAAAAAAAVVUAAFgYAAQAcBAAAQAAAFVVAABiEAAD8hAQAAAAAABiEAADMhAQAAEAAABlAAAD8iAQAAAAAABoAAACBAAAAEgAAAvyABAAAAAAAEYQEAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAASAAAC:IAEAABAAAA5hoQAAAAAABGfhAAAAAAAABgEAAAAAAAAUAAAAAAAABIAAAL8gAQAAIAAABGEBAAAQAAANZyEAAAAAAAAGAQAAAAAAABQAAAAAAAADYAAAUSABAAAgAAADoAEAAAAAAANgAABSIAEAACAAAAGgAQAAEAAAARAAAKEgAQAAAAAABGDhAAAgAAAAJAAAAAAIA:AACAPwAAgD8AAIA:MQAABxIAEAAAAAAACgAQAAAAAAABQAAArMUnNx8ABAMKABAAAAAAAEgAAAvyIBAAAAAAAEYQEAABAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAAEgAAATQAAAcSABAAAAAAADoAEAAAAAAAKgAQAAIAAAA0AAAHIgAQAAAAAAA6ABAAAgAAABoAEAACAAAAMQAABxIAEAAAAAAAGgAQAAAAAAAKABAAAAAAADYAAAVSABAAAQAAAAYCEAACAAAANgAACKIAEAABAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAA2AAAFEgAQAAIAAAABQAAAAAAAADcAAAnyABAAAwAAAAYAEAAAAAAARg4QAAEAAABGDBAAAgAAADcAAAkyABAAAAAAAAYAEAAAAAAAhgAQAAEAAADWBRAAAgAAAA8AAApCABAAAAAAAEYAEAAAAAAAAkAAAAAAgD8AAIA:AAAAAAAAAAAOAAAHMgAQAAAAAABGABAAAAAAAKYKEAAAAAAAOAAAC:IAEAABAAAARoQgAAAAAAAAAAAAAkAAAAAAgD8AAIA:AACAvwAAgL8yAAAP8gAQAAIAAABGFBAAAQAAAAJAAAAAAIA:AACAvwAAgD8AAIC:AkAAAAAAAAAAAIA:AAAAAAAAgD8yAAAJ8gAQAAEAAABGDhAAAwAAAEYOEAABAAAARg4QAAIAAAAyAAAP8gAQAAEAAABGDhAAAQAAAAJAAAAAAIA:AACAvwAAgD8AAIC:AkAAAAAAAAAAAIA:AAAAAAAAgD9IAAAL8gAQAAIAAABGABAAAQAAAEZ%EAABAAAAAGAQAAEAAAABQAAAAAAAAEgAAAvyABAAAQAAAOYKEAABAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAAOAAAB:IAEAABAAAAVgUQAAAAAABGDhAAAQAAADIAAAnyIBAAAAAAAEYOEAACAAAABgAQAAAAAABGDhAAAQAAABUAAAE%AAABU1RBVHQAAAAeAAAABAAAAAAAAAADAAAADQAAAAAAAAAAAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGAAAAAAAAAAAAAAAAAAAABQAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.smaa_neighborhood_blend_vertData0 = "s1219:AXBvcwAAASRHbG9iYWxzAAABc2NyZWVuU2l6ZUludgAAAAAACAAAAAIBRFhCQ:e9yHOFA3rO33i4dk0T1toBAAAAaAMAAAUAAAA0AAAACAEAADwBAACsAQAA7AIAAFJERUbMAAAAAQAAAEgAAAABAAAAHAAAAAAE:v8AAQAAmAAAADwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAJEdsb2JhbHMAq6urPAAAAAEAAABgAAAAEAAAAAAAAAAAAAAAeAAAAAAAAAAIAAAAAgAAAIgAAAAAAAAAc2NyZWVuU2l6ZUludgCrqwEAAwABAAIAAAAAAAAAAABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKurSVNHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAAAwMAAFRFWENPT1JEAKurq09TR05oAAAAAwAAAAgAAABQAAAAAAAAAAAAAAADAAAAAAAAAA8AAABQAAAAAQAAAAAAAAADAAAAAQAAAAMMAABZAAAAAAAAAAEAAAADAAAAAgAAAA8AAABURVhDT09SRABTVl9Qb3NpdGlvbgCrq6tTSERSOAEAAEAAAQBOAAAAWQAABEaOIAAAAAAAAQAAAF8AAAMyEBAAAAAAAGUAAAPyIBAAAAAAAGUAAAMyIBAAAQAAAGcAAATyIBAAAgAAAAEAAABoAAACAQAAADIAAA:yABAAAAAAAEYUEAAAAAAAAkAAAAAAAD8AAAC:AAAAPwAAAL8CQAAAAAAAPwAAAD8AAAA:AAAAPzIAAA3yIBAAAAAAAEaEIAAAAAAAAAAAAAJAAAAAAIA:AAAAAAAAAAAAAIC:Rg4QAAAAAAAyAAAPMiAQAAEAAABGEBAAAAAAAAJAAAAAAAA:AAAAvwAAAAAAAAAAAkAAAAAAAD8AAAA:AAAAAAAAAAA2AAAFMiAQAAIAAABGEBAAAAAAADYAAAjCIBAAAgAAAAJAAAAAAAAAAAAAAAAAAD8AAIA:PgAAAVNUQVR0AAAABgAAAAEAAAAAAAAABAAAAAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.ssao_pass_fragData0 = "s4399:AAVfZ2J1ZmZlckRfc2FtcGxlcgAAX2didWZmZXIwX3NhbXBsZXIAAWdidWZmZXJEAABnYnVmZmVyMAABJEdsb2JhbHMAAAdleWVMb29rAAAAAAAMAAAAAwFjYW1lcmFQcm9qABAAAAAIAAAAAgFzY3JlZW5TaXplABgAAAAIAAAAAgFleWUAIAAAAAwAAAADAWludlZQADAAAABAAAAABARQUENvbXAxMQBwAAAADAAAAAMBUFBDb21wMTIAgAAAAAwAAAADAURYQkMwMB5CYXf2Sdz4NPNb:lIWAQAAABwMAAAFAAAANAAAAJgCAADkAgAAGAMAAKALAABSREVGXAIAAAEAAAD8AAAABQAAABwAAAAABP::AAEAACoCAAC8AAAAAwAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAM4AAAADAAAAAAAAAAAAAAAAAAAAAQAAAAEAAAAAAAAA4AAAAAIAAAAFAAAABAAAAP::::8AAAAAAQAAAAwAAADpAAAAAgAAAAUAAAAEAAAA:::::wEAAAABAAAADAAAAPIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAX2didWZmZXJEX3NhbXBsZXIAX2didWZmZXIwX3NhbXBsZXIAZ2J1ZmZlckQAZ2J1ZmZlcjAAJEdsb2JhbHMAq:IAAAAHAAAAFAEAAJAAAAAAAAAAAAAAALwBAAAAAAAADAAAAAIAAADEAQAAAAAAANQBAAAQAAAACAAAAAIAAADgAQAAAAAAAPABAAAYAAAACAAAAAIAAADgAQAAAAAAAPsBAAAgAAAADAAAAAIAAADEAQAAAAAAAP8BAAAwAAAAQAAAAAIAAAAIAgAAAAAAABgCAABwAAAADAAAAAAAAADEAQAAAAAAACECAACAAAAADAAAAAAAAADEAQAAAAAAAGV5ZUxvb2sAAQADAAEAAwAAAAAAAAAAAGNhbWVyYVByb2oAqwEAAwABAAIAAAAAAAAAAABzY3JlZW5TaXplAGV5ZQBpbnZWUACrq6sDAAMABAAEAAAAAAAAAAAAUFBDb21wMTEAUFBDb21wMTIATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NABJU0dORAAAAAIAAAAIAAAAOAAAAAAAAAAAAAAAAwAAAAAAAAADAwAAOAAAAAEAAAAAAAAAAwAAAAEAAAAHBwAAVEVYQ09PUkQAq6urT1NHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAAAQ4AAFNWX1RhcmdldACrq1NIRFKACAAAQAAAACACAABZAAAERo4gAAAAAAAHAAAAWgAAAwBgEAAAAAAAWgAAAwBgEAABAAAAWBgABABwEAAAAAAAVVUAAFgYAAQAcBAAAQAAAFVVAABiEAADMhAQAAAAAABiEAADchAQAAEAAABlAAADEiAQAAAAAABoAAACBgAAAEgAAAvyABAAAAAAAEYQEAAAAAAARn4QAAAAAAAAYBAAAAAAAAFAAAAAAAAAMgAACRIAEAAAAAAACgAQAAAAAAABQAAAAAAAQAFAAAAAAIC:OQAAByIAEAAAAAAACgAQAAAAAAABQAAAAACAPx8ABAMaABAAAAAAAEgAAAvyABAAAQAAAEYQEAAAAAAARn4QAAEAAAAAYBAAAQAAAAFAAAAAAAAAAAAAC%IAEAAAAAAABgEQgMEAAAABAAAAAkAAAAAAAAAAAIA:AACAPwAAgD8AAAAIQgAQAAIAAAAaABCAwQAAAAEAAAAaABAAAAAAAB0AAAciABAAAAAAACoAEAACAAAAAUAAAAAAAAAdAAAKwgAQAAEAAAAGBBAAAQAAAAJAAAAAAAAAAAAAAAAAAAAAAAAANwAAD8IAEAABAAAApg4QAAEAAAACQAAAAAAAAAAAAAAAAIA:AACAPwJAAAAAAAAAAAAAAAAAgL8AAIC:OAAAB8IAEAAAAAAApg4QAAAAAACmDhAAAQAAADcAAAkyABAAAgAAAFYFEAAAAAAARgAQAAEAAADmChAAAAAAABAAAAciABAAAAAAAEYCEAACAAAARgIQAAIAAABEAAAFIgAQAAAAAAAaABAAAAAAADgAAAfiABAAAAAAAFYFEAAAAAAABgkQAAIAAAAQAAAHEgAQAAEAAABGEhAAAQAAAEYSEAABAAAARAAABRIAEAABAAAACgAQAAEAAAA4AAAHcgAQAAEAAAAGABAAAQAAAEYSEAABAAAAMgAACRIAEAAAAAAACgAQAAAAAAABQAAAAAAAPwFAAAAAAAA:AAAACRIAEAAAAAAACgAQAAAAAAAKgCCAQQAAAAAAAAABAAAADgAACBIAEAAAAAAAGoAgAAAAAAABAAAACgAQAAAAAAAQAAAIggAQAAEAAABGgiAAAAAAAAAAAABGAhAAAQAAAA4AAAcSABAAAAAAAAoAEAAAAAAAOgAQAAEAAAA4AAAHcgAQAAIAAAAGABAAAAAAAEYCEAABAAAAEAAAB4IAEAABAAAARgIQAAIAAABGAhAAAgAAAEsAAAWCABAAAQAAADoAEAABAAAAOAAABxIAEAACAAAAOgAQAAEAAAABQAAAAACgQTgAAAhiABAAAgAAAAYREAAAAAAAposgAAAAAAABAAAAGwAABWIAEAACAAAAVgYQAAIAAAAmAAAIANAAAIIAEAACAAAAGgAQAAIAAAABQAAAAwAAACMAAAkiABAAAgAAABoAEAACAAAAKgAQAAIAAAAqABAAAgAAAFcAAAciABAAAgAAABoAEAACAAAAOgAQAAIAAAAmAAAIANAAACIAEAACAAAAGgAQAAIAAAABQAAACgAAACsAAAUiABAAAgAAABoAEAACAAAANgAABYIAEAADAAAAAUAAAAAAgD82AAAIwgAQAAIAAAACQAAAAAAAAAAAAAAAAAAAAAAAADAAAAEhAAAHEgAQAAQAAAA6ABAAAgAAAAFAAAAIAAAAAwAEAwoAEAAEAAAAKwAABRIAEAAEAAAAOgAQAAIAAAAAAAAHEgAQAAQAAAAKABAABAAAAAFAAAAAAAA:MgAACRIAEAAEAAAACgAQAAQAAAABQAAA2w9JPxoAEAACAAAATQAABxIAEAAEAAAAEgAQAAUAAAAKABAABAAAADYAAAUiABAABQAAAAoAEAAEAAAADgAABzIAEAAEAAAARgAQAAUAAAAGABAAAgAAAAAAAAcyABAABAAAAEYAEAAEAAAARhAQAAAAAABIAAAL8gAQAAUAAABGABAABAAAAEZ%EAAAAAAAAGAQAAAAAAABQAAAAAAAADIAAAlCABAAAwAAAAoAEAAFAAAAAUAAAAAAAEABQAAAAACAvwAAAAhCABAABAAAABoAEIBBAAAABAAAAAFAAAAAAIA:MgAADzIAEAADAAAAhgAQAAQAAAACQAAAAAAAQAAAAEAAAAAAAAAAAAJAAAAAAIC:AACAvwAAAAAAAAAAEQAACBIAEAAEAAAARg4QAAMAAABGjiAAAAAAAAMAAAARAAAIIgAQAAQAAABGDhAAAwAAAEaOIAAAAAAABAAAABEAAAhCABAABAAAAEYOEAADAAAARo4gAAAAAAAFAAAAEQAACBIAEAADAAAARg4QAAMAAABGjiAAAAAAAAYAAAAOAAAHcgAQAAMAAABGAhAABAAAAAYAEAADAAAAAAAACXIAEAADAAAARgIQAAMAAABGgiCAQQAAAAAAAAACAAAAMgAACnIAEAADAAAARgIQgEEAAAABAAAABgAQAAAAAABGAhAAAwAAABAAAAcSABAABAAAAEYCEAADAAAAlgcQAAAAAAAyAAAKEgAQAAQAAAA6ABCAQQAAAAEAAAABQAAAbxIDOgoAEAAEAAAANAAABxIAEAAEAAAACgAQAAQAAAABQAAAAAAAABAAAAcSABAAAwAAAEYCEAADAAAARgIQAAMAAAAAAAAHEgAQAAMAAAAKABAAAwAAAAFAAACPwnU8DgAABxIAEAADAAAACgAQAAQAAAAKABAAAwAAAAAAAAdCABAAAgAAACoAEAACAAAACgAQAAMAAAAeAAAHggAQAAIAAAA6ABAAAgAAAAFAAAABAAAAFgAAATIAAAoSIBAAAAAAACoAEIBBAAAAAgAAAAFAAACamRk9AUAAAAAAgD8SAAABNgAABRIgEAAAAAAAAUAAAAAAgD8VAAABPgAAAVNUQVR0AAAARwAAAAYAAAAAAAAAAwAAAC0AAAAFAAAAAQAAAAIAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAQAAAACAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.translucent_resolve_fragData0 = "s1375:AANnYnVmZmVyMAAAZ2J1ZmZlcjEAASRHbG9iYWxzAAABdGV4U2l6ZQAAAAAACAAAAAIBRFhCQ2JGYA:M84jKAw7lD8uqEsYBAAAA1AMAAAUAAAA0AAAAUAEAAIQBAAC4AQAAWAMAAFJERUYUAQAAAQAAAJgAAAADAAAAHAAAAAAE::8AAQAA4AAAAHwAAAACAAAABQAAAAQAAAD:::::AAAAAAEAAAAMAAAAhQAAAAIAAAAFAAAABAAAAP::::8BAAAAAQAAAAwAAACOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAGdidWZmZXIwAGdidWZmZXIxACRHbG9iYWxzAKuOAAAAAQAAALAAAAAQAAAAAAAAAAAAAADIAAAAAAAAAAgAAAACAAAA0AAAAAAAAAB0ZXhTaXplAAEAAwABAAIAAAAAAAAAAABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKurSVNHTiwAAAABAAAACAAAACAAAAAAAAAAAAAAAAMAAAAAAAAAAwMAAFRFWENPT1JEAKurq09TR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAA8AAABTVl9UYXJnZXQAq6tTSERSmAEAAEAAAABmAAAAWQAABEaOIAAAAAAAAQAAAFgYAAQAcBAAAAAAAFVVAABYGAAEAHAQAAEAAABVVQAAYhAAAzIQEAAAAAAAZQAAA:IgEAAAAAAAaAAAAgMAAAA4AAAIMgAQAAAAAABGEBAAAAAAAEaAIAAAAAAAAAAAABsAAAUyABAAAAAAAEYAEAAAAAAANgAACMIAEAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAtAAAH8gAQAAEAAABGDxAAAAAAAEZ%EAAAAAAAAAAACIIAEAABAAAAOgAQgEEAAAABAAAAAUAAAAAAgD8YAAAHEgAQAAIAAAA6ABAAAQAAAAFAAAAAAAAADQAEAwoAEAACAAAALQAAB:IAEAAAAAAARg4QAAAAAABGfhAAAQAAADQAAAcSABAAAAAAAAoAEAAAAAAAAUAAABe30TgzAAAHEgAQAAAAAAAKABAAAAAAAAFAAAAAQJxFDgAAB3IgEAAAAAAARgIQAAEAAAAGABAAAAAAADYAAAWCIBAAAAAAADoAEAABAAAAPgAAAVNUQVR0AAAADQAAAAMAAAAAAAAAAgAAAAYAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.world_pass_fragData0 = "s828:AAEkR2xvYmFscwAAAWJhY2tncm91bmRDb2wAAAAAAAwAAAADAURYQkPepSQzZCh4GV1:xOPTMisSAQAAAEgCAAAFAAAANAAAAAgBAAA8AQAAcAEAAMwBAABSREVGzAAAAAEAAABIAAAAAQAAABwAAAAABP::AAEAAJgAAAA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAACRHbG9iYWxzAKurqzwAAAABAAAAYAAAABAAAAAAAAAAAAAAAHgAAAAAAAAADAAAAAIAAACIAAAAAAAAAGJhY2tncm91bmRDb2wAq6sBAAMAAQADAAAAAAAAAAAATWljcm9zb2Z0IChSKSBITFNMIFNoYWRlciBDb21waWxlciA2LjMuOTYwMC4xNjM4NACrq0lTR04sAAAAAQAAAAgAAAAgAAAAAAAAAAAAAAADAAAAAAAAAAcAAABURVhDT09SRACrq6tPU0dOLAAAAAEAAAAIAAAAIAAAAAAAAAAAAAAAAwAAAAAAAAAPAAAAU1ZfVGFyZ2V0AKurU0hEUlQAAABAAAAAFQAAAFkAAARGjiAAAAAAAAEAAABlAAAD8iAQAAAAAAA2AAAGciAQAAAAAABGgiAAAAAAAAAAAAA2AAAFgiAQAAAAAAABQAAAAAAAAD4AAAFTVEFUdAAAAAMAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_Shaders.world_pass_vertData0 = "s1256:Am5vcgAAcG9zAAEBJEdsb2JhbHMAAAFTTVZQAAAAAABAAAAABAREWEJD0l76Hh%emb2Zs%cG1Vv3nwEAAACIAwAABQAAADQAAAAAAQAATAEAAKQBAAAMAwAAUkRFRsQAAAABAAAASAAAAAEAAAAcAAAAAAT%:wABAACQAAAAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAkR2xvYmFscwCrq6s8AAAAAQAAAGAAAABAAAAAAAAAAAAAAAB4AAAAAAAAAEAAAAACAAAAgAAAAAAAAABTTVZQAKurqwMAAwAEAAQAAAAAAAAAAABNaWNyb3NvZnQgKFIpIEhMU0wgU2hhZGVyIENvbXBpbGVyIDYuMy45NjAwLjE2Mzg0AKurSVNHTkQAAAACAAAACAAAADgAAAAAAAAAAAAAAAMAAAAAAAAABwcAADgAAAABAAAAAAAAAAMAAAABAAAABwcAAFRFWENPT1JEAKurq09TR05QAAAAAgAAAAgAAAA4AAAAAAAAAAAAAAADAAAAAAAAAAcIAABBAAAAAAAAAAEAAAADAAAAAQAAAA8AAABURVhDT09SRABTVl9Qb3NpdGlvbgCrq6tTSERSYAEAAEAAAQBYAAAAWQAABEaOIAAAAAAABAAAAF8AAANyEBAAAAAAAF8AAANyEBAAAQAAAGUAAANyIBAAAAAAAGcAAATyIBAAAQAAAAEAAABoAAACAgAAADYAAAVyIBAAAAAAAEYSEAAAAAAANgAABXIAEAAAAAAARhIQAAEAAAA2AAAFggAQAAAAAAABQAAAAACAPxEAAAgSABAAAQAAAEYOEAAAAAAARo4gAAAAAAACAAAAEQAACCIAEAABAAAARg4QAAAAAABGjiAAAAAAAAMAAAAAAAAHEgAQAAEAAAAaABAAAQAAAAoAEAABAAAANgAABYIgEAABAAAAGgAQAAEAAAA4AAAHQiAQAAEAAAAKABAAAQAAAAFAAAAAAAA:EQAACBIgEAABAAAARg4QAAAAAABGjiAAAAAAAAAAAAARAAAIIiAQAAEAAABGDhAAAAAAAEaOIAAAAAAAAQAAAD4AAAFTVEFUdAAAAAsAAAACAAAAAAAAAAQAAAAGAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";
kha_System.renderListeners = [];
kha_System.foregroundListeners = [];
kha_System.resumeListeners = [];
kha_System.pauseListeners = [];
kha_System.backgroundListeners = [];
kha_System.shutdownListeners = [];
kha_System.dropFilesListeners = [];
kha_SystemImpl.maxGamepads = 4;
kha_SystemImpl.mouseLockListeners = [];
kha_Window.windows = [];
kha__$WindowOptions_WindowFeatures_$Impl_$.None = 0;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureResizable = 1;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureMinimizable = 2;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureMaximizable = 4;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureBorderless = 8;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureOnTop = 16;
kha_audio2_Audio.disableGcInteractions = false;
kha_audio2_Audio.intBox = new kha_internal_IntBox(0);
kha_audio2_Audio1.channelCount = 32;
kha_audio2_Audio1.lastAllocationCount = 0;
kha_audio2_ogg_tools_Crc32.POLY = 79764919;
kha_audio2_ogg_vorbis_VorbisDecodeState.INVALID_BITS = -1;
kha_audio2_ogg_vorbis_VorbisTools.EOP = -1;
kha_audio2_ogg_vorbis_VorbisTools.M__PI = 3.14159265358979323846264;
kha_audio2_ogg_vorbis_VorbisTools.DIVTAB_NUMER = 32;
kha_audio2_ogg_vorbis_VorbisTools.DIVTAB_DENOM = 64;
kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE = [1.0649863e-07,1.1341951e-07,1.2079015e-07,1.2863978e-07,1.3699951e-07,1.4590251e-07,1.5538408e-07,1.6548181e-07,1.7623575e-07,1.8768855e-07,1.9988561e-07,2.1287530e-07,2.2670913e-07,2.4144197e-07,2.5713223e-07,2.7384213e-07,2.9163793e-07,3.1059021e-07,3.3077411e-07,3.5226968e-07,3.7516214e-07,3.9954229e-07,4.2550680e-07,4.5315863e-07,4.8260743e-07,5.1396998e-07,5.4737065e-07,5.8294187e-07,6.2082472e-07,6.6116941e-07,7.0413592e-07,7.4989464e-07,7.9862701e-07,8.5052630e-07,9.0579828e-07,9.6466216e-07,1.0273513e-06,1.0941144e-06,1.1652161e-06,1.2409384e-06,1.3215816e-06,1.4074654e-06,1.4989305e-06,1.5963394e-06,1.7000785e-06,1.8105592e-06,1.9282195e-06,2.0535261e-06,2.1869758e-06,2.3290978e-06,2.4804557e-06,2.6416497e-06,2.8133190e-06,2.9961443e-06,3.1908506e-06,3.3982101e-06,3.6190449e-06,3.8542308e-06,4.1047004e-06,4.3714470e-06,4.6555282e-06,4.9580707e-06,5.2802740e-06,5.6234160e-06,5.9888572e-06,6.3780469e-06,6.7925283e-06,7.2339451e-06,7.7040476e-06,8.2047000e-06,8.7378876e-06,9.3057248e-06,9.9104632e-06,1.0554501e-05,1.1240392e-05,1.1970856e-05,1.2748789e-05,1.3577278e-05,1.4459606e-05,1.5399272e-05,1.6400004e-05,1.7465768e-05,1.8600792e-05,1.9809576e-05,2.1096914e-05,2.2467911e-05,2.3928002e-05,2.5482978e-05,2.7139006e-05,2.8902651e-05,3.0780908e-05,3.2781225e-05,3.4911534e-05,3.7180282e-05,3.9596466e-05,4.2169667e-05,4.4910090e-05,4.7828601e-05,5.0936773e-05,5.4246931e-05,5.7772202e-05,6.1526565e-05,6.5524908e-05,6.9783085e-05,7.4317983e-05,7.9147585e-05,8.4291040e-05,8.9768747e-05,9.5602426e-05,0.00010181521,0.00010843174,0.00011547824,0.00012298267,0.00013097477,0.00013948625,0.00014855085,0.00015820453,0.00016848555,0.00017943469,0.00019109536,0.00020351382,0.00021673929,0.00023082423,0.00024582449,0.00026179955,0.00027881276,0.00029693158,0.00031622787,0.00033677814,0.00035866388,0.00038197188,0.00040679456,0.00043323036,0.00046138411,0.00049136745,0.00052329927,0.00055730621,0.00059352311,0.00063209358,0.00067317058,0.00071691700,0.00076350630,0.00081312324,0.00086596457,0.00092223983,0.00098217216,0.0010459992,0.0011139742,0.0011863665,0.0012634633,0.0013455702,0.0014330129,0.0015261382,0.0016253153,0.0017309374,0.0018434235,0.0019632195,0.0020908006,0.0022266726,0.0023713743,0.0025254795,0.0026895994,0.0028643847,0.0030505286,0.0032487691,0.0034598925,0.0036847358,0.0039241906,0.0041792066,0.0044507950,0.0047400328,0.0050480668,0.0053761186,0.0057254891,0.0060975636,0.0064938176,0.0069158225,0.0073652516,0.0078438871,0.0083536271,0.0088964928,0.009474637,0.010090352,0.010746080,0.011444421,0.012188144,0.012980198,0.013823725,0.014722068,0.015678791,0.016697687,0.017782797,0.018938423,0.020169149,0.021479854,0.022875735,0.024362330,0.025945531,0.027631618,0.029427276,0.031339626,0.033376252,0.035545228,0.037855157,0.040315199,0.042935108,0.045725273,0.048696758,0.051861348,0.055231591,0.058820850,0.062643361,0.066714279,0.071049749,0.075666962,0.080584227,0.085821044,0.091398179,0.097337747,0.10366330,0.11039993,0.11757434,0.12521498,0.13335215,0.14201813,0.15124727,0.16107617,0.17154380,0.18269168,0.19456402,0.20720788,0.22067342,0.23501402,0.25028656,0.26655159,0.28387361,0.30232132,0.32196786,0.34289114,0.36517414,0.38890521,0.41417847,0.44109412,0.46975890,0.50028648,0.53279791,0.56742212,0.60429640,0.64356699,0.68538959,0.72993007,0.77736504,0.82788260,0.88168307,0.9389798,1.0];
kha_audio2_ogg_vorbis_data_Codebook.NO_CODE = 255;
kha_audio2_ogg_vorbis_data_Codebook.delay = 0;
kha_audio2_ogg_vorbis_data_Header.PACKET_ID = 1;
kha_audio2_ogg_vorbis_data_Header.PACKET_COMMENT = 3;
kha_audio2_ogg_vorbis_data_Header.PACKET_SETUP = 5;
kha_audio2_ogg_vorbis_data_PageFlag.CONTINUED_PACKET = 1;
kha_audio2_ogg_vorbis_data_PageFlag.FIRST_PAGE = 2;
kha_audio2_ogg_vorbis_data_PageFlag.LAST_PAGE = 4;
kha_audio2_ogg_vorbis_data_Setting.MAX_CHANNELS = 16;
kha_audio2_ogg_vorbis_data_Setting.PUSHDATA_CRC_COUNT = 4;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_LENGTH = 10;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_TABLE_SIZE = 1024;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_TABLE_MASK = 1023;
kha_graphics2_Graphics.fontGlyphs = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 32;
		while(_g1 < 256) {
			var i = _g1++;
			_g.push(i);
		}
	}
	$r = _g;
	return $r;
}(this));
kha_graphics2_truetype_StbTruetype.STBTT_vmove = 1;
kha_graphics2_truetype_StbTruetype.STBTT_vline = 2;
kha_graphics2_truetype_StbTruetype.STBTT_vcurve = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_DONTCARE = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_BOLD = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_ITALIC = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_UNDERSCORE = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_NONE = 8;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_UNICODE = 0;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_MAC = 1;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_ISO = 2;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_MICROSOFT = 3;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_1_0 = 0;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_1_1 = 1;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_ISO_10646 = 2;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_2_0_BMP = 3;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_2_0_FULL = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_SYMBOL = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_UNICODE_BMP = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_SHIFTJIS = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_UNICODE_FULL = 10;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_ROMAN = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_ARABIC = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_JAPANESE = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_HEBREW = 5;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_CHINESE_TRAD = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_GREEK = 6;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_KOREAN = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_RUSSIAN = 7;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_ENGLISH = 1033;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_ITALIAN = 1040;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_CHINESE = 2052;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_JAPANESE = 1041;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_DUTCH = 1043;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_KOREAN = 1042;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_FRENCH = 1036;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_RUSSIAN = 1049;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_GERMAN = 1031;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_SPANISH = 1033;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_HEBREW = 1037;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_SWEDISH = 1053;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ENGLISH = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_JAPANESE = 11;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ARABIC = 12;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_KOREAN = 23;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_DUTCH = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_RUSSIAN = 32;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_FRENCH = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_SPANISH = 6;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_GERMAN = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_SWEDISH = 5;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_HEBREW = 10;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_CHINESE_SIMPLIFIED = 33;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ITALIAN = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_CHINESE_TRAD = 19;
kha_graphics2_truetype_StbTruetype.STBTT_MAX_OVERSAMPLE = 8;
kha_graphics2_truetype_StbTruetype.STBTT_RASTERIZER_VERSION = 2;
kha_graphics4_ImageShaderPainter.bufferSize = 1500;
kha_graphics4_ImageShaderPainter.vertexSize = 9;
kha_graphics4_ColoredShaderPainter.bufferSize = 1000;
kha_graphics4_ColoredShaderPainter.triangleBufferSize = 1000;
kha_graphics4_TextShaderPainter.bufferSize = 1000;
kha_input_Gamepad.__meta__ = { statics : { sendConnectEvent : { input : null}, sendDisconnectEvent : { input : null}}, fields : { sendAxisEvent : { input : null}, sendButtonEvent : { input : null}}};
kha_input_Gamepad.instances = [];
kha_input_Gamepad.connectListeners = [];
kha_input_Gamepad.disconnectListeners = [];
kha_input_Keyboard.__meta__ = { fields : { sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendPressEvent : { input : null}}};
kha_input_Keyboard.keyBehavior = kha_input_BlockInterventions.Default;
kha_input_Mouse.__meta__ = { fields : { sendLeaveEvent : { input : null}, sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendMoveEvent : { input : null}, sendWheelEvent : { input : null}}};
kha_input_Mouse.wheelEventBlockBehavior = kha_input_MouseEventBlockBehavior.Full;
kha_input_Surface.touchDownEventBlockBehavior = kha_input_TouchDownEventBlockBehavior.Full;
kha_internal_BytesBlob.bufferSize = 2000;
kha_krom_Graphics.mat = (function($this) {
	var $r;
	var this1 = new Float32Array(16);
	$r = this1;
	return $r;
}(this));
kha_math_Matrix3.width = 3;
kha_math_Matrix3.height = 3;
kha_math_Matrix4.width = 4;
kha_math_Matrix4.height = 4;
kha_netsync_ControllerBuilder.nextId = 0;
kha_netsync_Session.START = 0;
kha_netsync_Session.ENTITY_UPDATES = 1;
kha_netsync_Session.CONTROLLER_UPDATES = 2;
kha_netsync_Session.REMOTE_CALL = 3;
kha_netsync_Session.PING = 4;
kha_netsync_Session.SESSION_ERROR = 5;
kha_netsync_Session.PLAYER_UPDATES = 6;
kha_netsync_Session.RPC_SERVER = 0;
kha_netsync_Session.RPC_ALL = 1;
kha_netsync_SyncBuilder.nextId = 0;
kha_netsync_SyncBuilder.objects = [];
zui_Handle.global = new zui_Handle();
zui_Canvas.assetMap = new haxe_ds_IntMap();
zui_Canvas.themes = [];
zui_Canvas.events = [];
zui_Canvas.screenW = -1;
zui_Canvas.screenH = -1;
zui_Canvas.locale = "en";
zui_Canvas.h = new zui_Handle();
zui_Canvas.elemId = -1;
zui_Canvas.assetId = -1;
zui_Ext.dataPath = "";
zui_Ext.lastPath = "";
zui_Ext.kx = 1.0;
zui_Ext.ky = 0.66666666666666663;
zui_Ext.kz = 0.33333333333333331;
zui_Ext.kw = 3.0;
zui_Ext.ar = [0.0,0.0,0.0];
zui_Ext.Kx = 0.0;
zui_Ext.Ky = -0.33333333333333331;
zui_Ext.Kz = 0.66666666666666663;
zui_Ext.Kw = -1.0;
zui_Ext.e = 1.0e-10;
zui_Id.i = 0;
zui_Popup.show = false;
zui_Popup.hwnd = new zui_Handle();
zui_Popup.boxTitle = "";
zui_Popup.boxText = "";
zui_Popup.modalX = 0;
zui_Popup.modalY = 0;
zui_Popup.modalW = 400;
zui_Popup.modalH = 160;
zui_Themes.dark = { NAME : "Default Dark", WINDOW_BG_COL : -13421773, WINDOW_TINT_COL : -1, ACCENT_COL : -12303292, ACCENT_HOVER_COL : -11974327, ACCENT_SELECT_COL : -10461088, BUTTON_COL : -12171706, BUTTON_TEXT_COL : -1513499, BUTTON_HOVER_COL : -11974327, BUTTON_PRESSED_COL : -15000805, TEXT_COL : -1513499, LABEL_COL : -3618616, SEPARATOR_COL : -14211289, HIGHLIGHT_COL : -14656100, CONTEXT_COL : -14540254, PANEL_BG_COL : -12895429, FONT_SIZE : 13, ELEMENT_W : 100, ELEMENT_H : 24, ELEMENT_OFFSET : 4, ARROW_SIZE : 5, BUTTON_H : 22, CHECK_SIZE : 15, CHECK_SELECT_SIZE : 8, SCROLL_W : 6, TEXT_OFFSET : 8, TAB_W : 6, FILL_WINDOW_BG : false, FILL_BUTTON_BG : true, FILL_ACCENT_BG : false, LINK_STYLE : 0};
zui_Themes.light = { NAME : "Default Light", WINDOW_BG_COL : -1052689, WINDOW_TINT_COL : -14540254, ACCENT_COL : -1118482, ACCENT_HOVER_COL : -4473925, ACCENT_SELECT_COL : -5592406, BUTTON_COL : -3355444, BUTTON_TEXT_COL : -14540254, BUTTON_HOVER_COL : -5000269, BUTTON_PRESSED_COL : -5131855, TEXT_COL : -6710887, LABEL_COL : -5592406, SEPARATOR_COL : -6710887, HIGHLIGHT_COL : -14656100, CONTEXT_COL : -5592406, PANEL_BG_COL : -5592406, FONT_SIZE : 26, ELEMENT_W : 200, ELEMENT_H : 48, ELEMENT_OFFSET : 8, ARROW_SIZE : 10, BUTTON_H : 44, CHECK_SIZE : 30, CHECK_SELECT_SIZE : 16, SCROLL_W : 12, TEXT_OFFSET : 16, TAB_W : 24, FILL_WINDOW_BG : false, FILL_BUTTON_BG : true, FILL_ACCENT_BG : false, LINK_STYLE : 0};
zui_Zui.alwaysRedrawWindow = true;
zui_Zui.keyRepeat = true;
zui_Zui.touchControls = false;
zui_Zui.keyRepeatTime = 0.0;
zui_Zui.textToPaste = "";
zui_Zui.textToCopy = "";
zui_Zui.isCut = false;
zui_Zui.isCopy = false;
zui_Zui.isPaste = false;
zui_Zui.copyFrame = 0;
zui_Zui.comboFirst = true;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
